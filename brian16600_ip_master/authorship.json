[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2022-02-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brian16600":16,"-":45}},{"path":"src/main/java/duke/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.duke;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.ui.DukeException;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import duke.ui.InputHandler;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import duke.ui.DialogBox;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-13"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-13"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-13"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-13"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-13"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-13"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-13"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-13"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-13"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"public class Duke extends Application {","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    //For GUI","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"    private VBox dialogBox;","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    private Scene scene;","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"    //Images for Duke \u0026 user","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/human.jpg\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/bear.jpg\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"        String dukeGreeting \u003d \"Hello! I\u0027m Duke \\nWhat can I do for you?\";","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        String endMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"        System.out.println(dukeGreeting);","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"        InputHandler inputHandler \u003d new InputHandler();","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"        String response \u003d \"\";","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"        while (!response.equals(endMessage)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"                String input \u003d sc.nextLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"                System.out.println(response);","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"                response \u003d inputHandler.handleInput(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"     * Start the application","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"     * @param stage Stage object","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"        //Setting up required components","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"        Label dukeLabel \u003d new Label(\"Duke\");","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"        //Creating container for the chat to scroll","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"        dialogBox \u003d new VBox();","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"        scrollPane.setContent(dialogBox);","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"        Scene scene \u003d new Scene(mainLayout);","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"        stage.setScene(scene);","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"        stage.show();","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"        //Formatting window","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"        stage.setResizable(false);","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"        dialogBox.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"        userInput.setPrefHeight(55.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"        //Set functionality on User Input","lastModifiedDate":"2022-02-15"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2022-02-15"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"            handleUserInput();","lastModifiedDate":"2022-02-15"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"        });","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2022-02-15"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"            handleUserInput();","lastModifiedDate":"2022-02-15"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"        });","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"        //scroll down if dialogBox\u0027s height changes","lastModifiedDate":"2022-02-15"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"        dialogBox.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2022-02-15"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":120,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"brian16600"},"content":"     * Creates the dialogboxes as well as handles user and duke\u0027s inputs","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":123,"author":{"gitId":"brian16600"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-15"},{"lineNumber":124,"author":{"gitId":"brian16600"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"brian16600"},"content":"        String dukeText \u003d getResponse(userInput.getText());","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"brian16600"},"content":"        dialogBox.getChildren().addAll(","lastModifiedDate":"2022-02-15"},{"lineNumber":127,"author":{"gitId":"brian16600"},"content":"                DialogBox.getUserDialog(userText, user),","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"brian16600"},"content":"                DialogBox.getDukeDialog(dukeText, duke)","lastModifiedDate":"2022-02-15"},{"lineNumber":129,"author":{"gitId":"brian16600"},"content":"        );","lastModifiedDate":"2022-02-15"},{"lineNumber":130,"author":{"gitId":"brian16600"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"brian16600"},"content":"     * Returns the Response of Duke to user input","lastModifiedDate":"2022-02-17"},{"lineNumber":135,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":136,"author":{"gitId":"brian16600"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"brian16600"},"content":"     * @return Duke\u0027s reply to user\u0027s input","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":139,"author":{"gitId":"brian16600"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-15"},{"lineNumber":140,"author":{"gitId":"brian16600"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-02-15"},{"lineNumber":141,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":142,"author":{"gitId":"brian16600"},"content":"            InputHandler inputHandler \u003d new InputHandler();","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"brian16600"},"content":"            output \u003d inputHandler.handleInput(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"brian16600"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"brian16600"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"brian16600"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"brian16600"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":148,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":150,"author":{"gitId":"brian16600"},"content":"        return output;","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":153,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":154,"author":{"gitId":"brian16600"},"content":"     * Returns a Label around the text","lastModifiedDate":"2022-02-15"},{"lineNumber":155,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"brian16600"},"content":"     * @param text text for the dialog","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"brian16600"},"content":"     * @return Label object with text","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":159,"author":{"gitId":"brian16600"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2022-02-15"},{"lineNumber":160,"author":{"gitId":"brian16600"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2022-02-15"},{"lineNumber":161,"author":{"gitId":"brian16600"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2022-02-15"},{"lineNumber":162,"author":{"gitId":"brian16600"},"content":"        return textToAdd;","lastModifiedDate":"2022-02-15"},{"lineNumber":163,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":164,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":165,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":166,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":167,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":168,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":169,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":170,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":171,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":172,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":173,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":174,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":175,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"brian16600":175}},{"path":"src/main/java/duke/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.duke;","lastModifiedDate":"2022-02-13"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":" * Launches the Application for Duke","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"public class Launcher {","lastModifiedDate":"2022-02-13"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-13"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"        Application.launch(Main.class,args);","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-13"}],"authorContributionMap":{"brian16600":12}},{"path":"src/main/java/duke/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.duke;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     * Starts the application","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"     * @param stage stage object passed in","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"            stage.show();","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"brian16600":38}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.ui.DukeException;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"public class Storage {","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    final String symbolForMarked \u003d \"[1]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    final String symbolForUnMarked \u003d \"[0]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"    final String symbolForTask \u003d \"[T]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    final String symbolForDeadline \u003d \"[D]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    final String symbolForEvent \u003d \"[E]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"    final String FILEPATH \u003d \"data/data.txt\";","lastModifiedDate":"2022-02-06"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    final String FILEDIRECTORY \u003d \"data\";","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     * Constructs a Storage object from data in data.txt file.","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * @throws IOException Issue when writing or reading from data.txt","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"    public Storage() throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"            File dataFile \u003d new File(FILEPATH);","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"            TaskList newTaskList \u003d new TaskList();","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"                String[] taskLineSplitBySpace \u003d nextLine.split(\" \");","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"                String taskType \u003d taskLineSplitBySpace[0];","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"                String[] taskLineSplitBySlash \u003d nextLine.split(\" / \");","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"                newTaskList.add(convertToTask(taskType, taskLineSplitBySlash, taskLineSplitBySpace));","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"            this.taskList \u003d newTaskList;","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"        } catch (IOException e){","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"            Path filePath \u003d Paths.get(FILEDIRECTORY);","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"            boolean dataDirectoryExists \u003d Files.exists(filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"            if (!dataDirectoryExists) {","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"                new File(FILEDIRECTORY).mkdir();","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"            new File(FILEPATH).createNewFile();","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2022-02-05"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"            //Wrong format of tasks in data.txt","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"     * Comprehends and converts input from data.txt into Task object","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"     * @param taskType Type of Task: Deadline, Event or Todo","lastModifiedDate":"2022-02-17"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"     * @param taskLineSplitBySlash Format of the line in a String array format split by slashes","lastModifiedDate":"2022-02-17"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"     * @param taskLineSplitBySpace Format of the line in a String array format split by spaces","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"     * @return Task object to be put into TaskList","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException If tasks are stored in wrong format in data.txt","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"    public Task convertToTask(String taskType, String[] taskLineSplitBySlash, String[] taskLineSplitBySpace) throws DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"        String wrongFormatError \u003d \"Tasks stored in wrong format\";","lastModifiedDate":"2022-02-17"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"        case symbolForTask:","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"            Todo newTodo \u003d new Todo(taskLineSplitBySlash[1]);","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"            if (taskLineSplitBySpace[1].equals(symbolForMarked)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"                newTodo.setMarkedTask();","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"            return newTodo;","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"        case symbolForDeadline:","lastModifiedDate":"2022-02-17"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"            //Checks whether there is a time component for the stored Deadline","lastModifiedDate":"2022-02-17"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"            Deadline newDeadline \u003d (taskLineSplitBySlash[3].equals(\"null\"))","lastModifiedDate":"2022-02-17"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"                    ? new Deadline(taskLineSplitBySlash[1], taskLineSplitBySlash[2])","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"                    : new Deadline(taskLineSplitBySlash[1], taskLineSplitBySlash[2], taskLineSplitBySlash[3]);","lastModifiedDate":"2022-02-17"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"            if (taskLineSplitBySpace[1].equals(symbolForMarked)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"                newDeadline.setMarkedTask();","lastModifiedDate":"2022-02-17"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"            return newDeadline;","lastModifiedDate":"2022-02-17"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"        case symbolForEvent:","lastModifiedDate":"2022-02-17"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"            //Checks whether there is a time component for the stored Event","lastModifiedDate":"2022-02-17"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"            Event newEvent \u003d (taskLineSplitBySlash[3].equals(\"null\"))","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"                    ? new Event(taskLineSplitBySlash[1], taskLineSplitBySlash[2])","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"                    : new Event(taskLineSplitBySlash[1], taskLineSplitBySlash[2], taskLineSplitBySlash[3]);","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"            if (taskLineSplitBySpace[1].equals(symbolForMarked)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"                newEvent.setMarkedTask();","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"            return newEvent;","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(wrongFormatError);","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"     * Converts task to string format for storage in the data.txt file for writing into the txt file","lastModifiedDate":"2022-02-17"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"     * @param task Task to be converted and written","lastModifiedDate":"2022-02-17"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"     * @return String format of the task eg: [D] [1] / deadline / duedate / duetime","lastModifiedDate":"2022-02-17"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"    public String taskToStringConverter(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"brian16600"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (task.hasBeenMarked()) ? symbolForMarked : symbolForUnMarked;","lastModifiedDate":"2022-02-17"},{"lineNumber":121,"author":{"gitId":"brian16600"},"content":"            output \u003d symbolForTask + \" \"  + mark + \" / \" + task.name + \"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"brian16600"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2022-02-05"},{"lineNumber":123,"author":{"gitId":"brian16600"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2022-02-05"},{"lineNumber":124,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (deadline.hasBeenMarked()) ? symbolForMarked : symbolForUnMarked;","lastModifiedDate":"2022-02-17"},{"lineNumber":125,"author":{"gitId":"brian16600"},"content":"            output \u003d symbolForDeadline + \" \" + mark + \" / \" + deadline.name + \" / \" + deadline.dueDate + \" / \" + deadline.dueTime + \"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":126,"author":{"gitId":"brian16600"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2022-02-05"},{"lineNumber":127,"author":{"gitId":"brian16600"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2022-02-05"},{"lineNumber":128,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (event.hasBeenMarked()) ? symbolForMarked : symbolForUnMarked;","lastModifiedDate":"2022-02-17"},{"lineNumber":129,"author":{"gitId":"brian16600"},"content":"            output \u003d symbolForEvent + \" \" + mark + \" / \" + event.name + \" / \" + event.dueDate + \" / \" + event.dueTime + \"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":130,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"brian16600"},"content":"        return output;","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":135,"author":{"gitId":"brian16600"},"content":"     * Rewrites entire storage based on current taskList","lastModifiedDate":"2022-02-17"},{"lineNumber":136,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":137,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If there is an error with writing to data.txt","lastModifiedDate":"2022-02-17"},{"lineNumber":138,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":139,"author":{"gitId":"brian16600"},"content":"    public void rewriteData() throws IOException {","lastModifiedDate":"2022-02-17"},{"lineNumber":140,"author":{"gitId":"brian16600"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH);","lastModifiedDate":"2022-02-17"},{"lineNumber":141,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 0; i \u003c this.taskListSize(); i++) {","lastModifiedDate":"2022-02-17"},{"lineNumber":142,"author":{"gitId":"brian16600"},"content":"            Task task \u003d this.taskList.get(i);","lastModifiedDate":"2022-02-17"},{"lineNumber":143,"author":{"gitId":"brian16600"},"content":"            fw.write(taskToStringConverter(task));","lastModifiedDate":"2022-02-17"},{"lineNumber":144,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":145,"author":{"gitId":"brian16600"},"content":"        fw.close();","lastModifiedDate":"2022-02-17"},{"lineNumber":146,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":147,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":148,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"brian16600"},"content":"     * Appends a single task to the file","lastModifiedDate":"2022-02-02"},{"lineNumber":150,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":151,"author":{"gitId":"brian16600"},"content":"     * @param task task to be added to the data.txt file","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"brian16600"},"content":"     * @throws IOException if there is an error appending the task to data.txt","lastModifiedDate":"2022-02-02"},{"lineNumber":153,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"brian16600"},"content":"    public void writeData(Task task) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"brian16600"},"content":"        this.taskList.add(task);","lastModifiedDate":"2022-02-05"},{"lineNumber":156,"author":{"gitId":"brian16600"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH, true);","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"brian16600"},"content":"        System.out.println(new File(this.FILEPATH).getAbsolutePath());","lastModifiedDate":"2022-02-06"},{"lineNumber":158,"author":{"gitId":"brian16600"},"content":"        fw.write(taskToStringConverter(task));","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"brian16600"},"content":"        fw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":161,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":162,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":163,"author":{"gitId":"brian16600"},"content":"     * Deletes the entire file and rewrites it based on the new taskList.","lastModifiedDate":"2022-02-16"},{"lineNumber":164,"author":{"gitId":"brian16600"},"content":"     * Amends the current stored TaskList as well.","lastModifiedDate":"2022-02-16"},{"lineNumber":165,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":166,"author":{"gitId":"brian16600"},"content":"     * @param idx index of task to be deleted","lastModifiedDate":"2022-02-02"},{"lineNumber":167,"author":{"gitId":"brian16600"},"content":"     * @throws IOException if there is an error rewriting data.txt","lastModifiedDate":"2022-02-02"},{"lineNumber":168,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":169,"author":{"gitId":"brian16600"},"content":"    public void deleteData(int idx) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":170,"author":{"gitId":"brian16600"},"content":"        taskList.remove(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":171,"author":{"gitId":"brian16600"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH);","lastModifiedDate":"2022-02-02"},{"lineNumber":172,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2022-02-05"},{"lineNumber":173,"author":{"gitId":"brian16600"},"content":"            Task task \u003d this.taskList.get(i);","lastModifiedDate":"2022-02-05"},{"lineNumber":174,"author":{"gitId":"brian16600"},"content":"            fw.write(taskToStringConverter(task));","lastModifiedDate":"2022-02-02"},{"lineNumber":175,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":176,"author":{"gitId":"brian16600"},"content":"        fw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":177,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":178,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":179,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":180,"author":{"gitId":"brian16600"},"content":"     * Obtains list of tasks from this.taskList and returns it","lastModifiedDate":"2022-02-05"},{"lineNumber":181,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":182,"author":{"gitId":"brian16600"},"content":"     * @return String that lists out the tasks currently","lastModifiedDate":"2022-02-02"},{"lineNumber":183,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":184,"author":{"gitId":"brian16600"},"content":"    public String list() {","lastModifiedDate":"2022-02-02"},{"lineNumber":185,"author":{"gitId":"brian16600"},"content":"        String listOfTasks \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":186,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {","lastModifiedDate":"2022-02-05"},{"lineNumber":187,"author":{"gitId":"brian16600"},"content":"            Task task \u003d this.taskList.get(i - 1);","lastModifiedDate":"2022-02-05"},{"lineNumber":188,"author":{"gitId":"brian16600"},"content":"            if (task.hasBeenMarked()) {","lastModifiedDate":"2022-02-05"},{"lineNumber":189,"author":{"gitId":"brian16600"},"content":"                listOfTasks +\u003d i + \". \" + task + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":190,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":191,"author":{"gitId":"brian16600"},"content":"                listOfTasks +\u003d i + \". \" + task + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":192,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":193,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":194,"author":{"gitId":"brian16600"},"content":"        if (listOfTasks.equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":195,"author":{"gitId":"brian16600"},"content":"            return \"You currently have no tasks. Yay! :)\";","lastModifiedDate":"2022-02-17"},{"lineNumber":196,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":197,"author":{"gitId":"brian16600"},"content":"        return listOfTasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":198,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":199,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":200,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":201,"author":{"gitId":"brian16600"},"content":"     * Gets task from Storage","lastModifiedDate":"2022-02-17"},{"lineNumber":202,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-13"},{"lineNumber":203,"author":{"gitId":"brian16600"},"content":"     * @param idx index of task to be gotten","lastModifiedDate":"2022-02-02"},{"lineNumber":204,"author":{"gitId":"brian16600"},"content":"     * @return task that is requested","lastModifiedDate":"2022-02-02"},{"lineNumber":205,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":206,"author":{"gitId":"brian16600"},"content":"    public Task get(int idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":207,"author":{"gitId":"brian16600"},"content":"        return this.taskList.get(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":208,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":209,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":210,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":211,"author":{"gitId":"brian16600"},"content":"     * Size of TaskList","lastModifiedDate":"2022-02-17"},{"lineNumber":212,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-13"},{"lineNumber":213,"author":{"gitId":"brian16600"},"content":"     * @return size of task list","lastModifiedDate":"2022-02-02"},{"lineNumber":214,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":215,"author":{"gitId":"brian16600"},"content":"    public int taskListSize() {","lastModifiedDate":"2022-02-02"},{"lineNumber":216,"author":{"gitId":"brian16600"},"content":"        return this.taskList.size();","lastModifiedDate":"2022-02-05"},{"lineNumber":217,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":218,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":219,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":220,"author":{"gitId":"brian16600"},"content":"     * Allows external access to TaskList","lastModifiedDate":"2022-02-15"},{"lineNumber":221,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":222,"author":{"gitId":"brian16600"},"content":"     * @return TaskList","lastModifiedDate":"2022-02-15"},{"lineNumber":223,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":224,"author":{"gitId":"brian16600"},"content":"    public TaskList accessTaskList() {","lastModifiedDate":"2022-02-06"},{"lineNumber":225,"author":{"gitId":"brian16600"},"content":"        return this.taskList;","lastModifiedDate":"2022-02-06"},{"lineNumber":226,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":227,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":228,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"brian16600":228}},{"path":"src/main/java/duke/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.storage;","lastModifiedDate":"2022-02-13"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"public class TaskList {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"    public ArrayList\u003cTask\u003e list;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"     * Constructor for TaskList. Initialises an empty ArrayList\u003cTask\u003e","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     * Adds Task to TaskList","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"     * @param task Task to be added","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        this.list.add(task);","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"     * Removes Task from TaskList","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     * @param index index of Task to be removed","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"    public void remove(int index) {","lastModifiedDate":"2022-02-05"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"        this.list.remove(index);","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"     * Gets task by index","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"     * @param index index of Task to be retrieved","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"     * @return Retrieved Task","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"    public Task get(int index) {","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"        return this.list.get(index);","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"     * Returns Size of TaskList","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"     * @return integer size of TaskList","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"    public int size() {","lastModifiedDate":"2022-02-05"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"        return this.list.size();","lastModifiedDate":"2022-02-05"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"brian16600":53}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.task;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":" * Represents a Deadline which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":" * Includes a dueDate attribute. Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    public LocalDate dueDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    public LocalTime dueTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     * Constructor for Deadline with date","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     * @param name Name of Deadline","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"     * @param date Date of deadline in yyyy-mm-dd format","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"     * @throws DateTimeParseException If date is not in yyyy-mm-dd format","lastModifiedDate":"2022-02-16"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    public Deadline(String name, String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     * Constructor for Deadline with date and time","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     * @param name Name of Deadline","lastModifiedDate":"2022-02-05"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     * @param date Date of deadline in yyyy-mm-dd format","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * @param time Time of deadline in hh:mm format","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     * @throws DateTimeParseException If date is not in yyyy-mm-dd format AND/OR time is not in hh:mm format","lastModifiedDate":"2022-02-16"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"    public Deadline(String name, String date, String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"     * Returns String representation of Deadline","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"     * @return String of Deadline task, eg [D][0] Deadline (by: 22 Feb 2022 2:22pm) vs [D][1] Deadline (by: 22 Feb 2022 2:22pm)","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"        String dueDateAndTime \u003d (this.dueTime \u003d\u003d null)","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"                ? dateConverterToString(this.dueDate)","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"                : dateConverterToString(this.dueDate) + \" \" + timeConverterToString(this.dueTime);","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDateAndTime + \")\"; }","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":53}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.task;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":" * Represents a Event which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":" * Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    public LocalDate dueDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    public LocalTime dueTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     * Constructor for Event. Takes in name and date but no time.","lastModifiedDate":"2022-02-16"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     * @param name name of the Event","lastModifiedDate":"2022-02-16"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"     * @param date date in yyyy-mm-dd format only","lastModifiedDate":"2022-02-16"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"     * @throws DateTimeParseException If date format is not in yyyy-mm-dd format","lastModifiedDate":"2022-02-16"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    public Event (String name, String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     * Constructor for Event. Includes name, date and time","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     * @param name name of the Event","lastModifiedDate":"2022-02-16"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     * @param date date in yyyy-mm-dd format only","lastModifiedDate":"2022-02-16"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * @param time time in hh:mm format","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     * @throws DateTimeParseException if date format is not in yyyy-mm-dd format AND/OR time is not in hh:mm format","lastModifiedDate":"2022-02-16"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"    public Event (String name, String date, String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"     * Returns String representation of Event","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"     * @return String of Event task, eg: [E][0] Event (at: 22 Feb 2022 2:22pm) vs [E][1] Event (at: 22 Feb 2022 2:22pm)","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"        String dueDateAndTime \u003d (this.dueTime \u003d\u003d null)","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"                ? dateConverterToString(this.dueDate)","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"                : dateConverterToString(this.dueDate) + \" \" + timeConverterToString(this.dueTime);","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dueDateAndTime + \")\"; }","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":53}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.task;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":" * Represents a Task. Contains a Task constructor, two methods to mark and unmark tasks, toString() method as well as a isMark() method to check if Task is marked","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"public class Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    private boolean isMarked;","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    public String name;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     * Constructor for Task","lastModifiedDate":"2022-02-16"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     * @param name name of the task","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    public Task (String name) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"     * Marks current Task object as done","lastModifiedDate":"2022-02-16"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    public void setMarkedTask () {","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"        this.isMarked \u003d true;","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * Unmarks current Task object","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"    public void setUnmarkedTask() {","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"     * Returns whether current Task object has been marked","lastModifiedDate":"2022-02-16"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-13"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"     * @return boolean on whether task is marked","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"    public boolean hasBeenMarked() {","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"        return this.isMarked;","lastModifiedDate":"2022-02-06"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"     * Converts date to String format for display","lastModifiedDate":"2022-02-16"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"     * @param date LocalDate for Deadline/Event tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"     * @return String format: converts from yyyy-mm-dd format to mmm dd yyyy format, eg: Aug 21 2022","lastModifiedDate":"2022-02-16"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"    public String dateConverterToString(LocalDate date) {","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"        return DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"     * Converts time to String format for display","lastModifiedDate":"2022-02-16"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"     * @param time LocalTime for Deadline/Event tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"     * @return String format: converts hh:mm format to hh:mm am/pm format eg: 1:30pm","lastModifiedDate":"2022-02-16"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"    public String timeConverterToString(LocalTime time) {","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"        return DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).format(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"     * Returns String representation of Task","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"     * @return String version of task, with marked and name. E.g. [0] Task vs [1] Task","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-06"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"        if (this.isMarked) {","lastModifiedDate":"2022-02-05"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"            String marked \u003d \"[1] \";","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"            return marked + this.name;","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"            String unmarked \u003d \"[0] \";","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"            return unmarked + this.name;","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":83}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.task;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":" * Represents a Todo which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":" * Includes a dueDate attribute. Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"    public Todo (String name) {","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"     * Returns String representation of Todo","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"     * @return String of Todo task, eg: [T][1] Todo","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    @Override","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":22}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.ui;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    final String dialogBoxFxmlLocation \u003d \"/view/DialogBox.fxml\";","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"     * Constructor for DialogBox. Contains text and an image for Duke/User","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     * @param text Text to be displayed","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     * @param img Image to be displayed","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(dialogBoxFxmlLocation));","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"    private void flip() {","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"     * Returns new DialogBox for user with text contained","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"     * @param text User\u0027s text","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"     * @param img Image for the user","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"     * @return DialogBox to be displayed","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"     * Returns new DialogBox for Duke with response contained","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"     * @param text User\u0027s text","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"     * @param img Image for Duke","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"     * @return DialogBox to be displayed","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"        db.flip();","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"        return db;","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"brian16600":80}},{"path":"src/main/java/duke/ui/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.ui;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import duke.duke.Duke;","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.ui.Parser;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import duke.ui.DukeException;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import duke.ui.InputHandler;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":" * Custom DukeException to be handled by InputHandler","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    private String errorMessage;","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     * Constructs a DukeException. DukeException handles wrong inputs by user","lastModifiedDate":"2022-02-06"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"     * @param errorMessage Error message to be printed","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    public DukeException (String errorMessage) {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     * Gets error message","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     * @override Returns customised error message for DukeException when input is incorrect","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * @return String errorMessage","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"    public String getMessage() {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"        return this.errorMessage;","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"brian16600":38}},{"path":"src/main/java/duke/ui/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.ui;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":" * Handles input from user","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":" * Processes the input into 7 categories: Todo, Event, Deadline, list, mark, unmark, bye","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"public class InputHandler {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    private Parser parser;","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"     * Constructs an InputHandler and loads data into Storage object","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If Storage class fails to initialise","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    public InputHandler() throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"     * Handles input from Duke.java.","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     * @param input String input from user input.","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"     * @return String output from Duke as response to user.","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException For invalid input types, or unrecognisable commands.","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"    public String handleInput(String input) throws DukeException, IOException {","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        String endMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"        String inputCommand \u003d splitInput[0];","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"        switch (inputCommand) {","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"        case \"todo\":","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"            return taskCaseHandler(CommandType.TODO, splitInput );","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"        case \"event\":","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"            return taskCaseHandler(CommandType.EVENT, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"        case \"deadline\":","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"            return taskCaseHandler(CommandType.DEADLINE, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"        case \"list\":","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"            //Confirms that input command is simply \"list\"","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"                return parser.parse(CommandType.LIST, this.storage, splitInput);","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of list! Correct usage: list\");","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format mark [index]","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"                return this.parser.parse(CommandType.MARK, this.storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of mark! Correct usage: mark [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format mark [index]","lastModifiedDate":"2022-02-06"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"                return this.parser.parse(CommandType.UNMARK, this.storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of unmark! Correct usage: unmark [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format mark [index]","lastModifiedDate":"2022-02-06"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"                return this.parser.parse(CommandType.DELETE, this.storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of delete! Correct usage: delete [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"        case \"find\":","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 1) {","lastModifiedDate":"2022-02-06"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"                return this.parser.parse(CommandType.FIND, this.storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Uh oh! It seems like you did not specify what to find\");","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"        case \"bye\":","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"            return endMessage;","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means! Possible commands: \" +","lastModifiedDate":"2022-02-17"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"                    \"todo [task], event [task] /at [time],\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"                    \" deadline [task] /by [time], mark [index], unmark [index], delete [index], bye\");","lastModifiedDate":"2022-02-17"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"     * Handles Todo, Event and Deadline CommandTypes. Writes the task to storage and returns Duke\u0027s reply.","lastModifiedDate":"2022-02-17"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"     * @param typeOfTask Type of Task, Todo, Event or Deadline.","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"     * @param splitInput String array of user input, split by spaces.","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"     * @return String format of Duke\u0027s reply.","lastModifiedDate":"2022-02-17"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException If CommandType passed in is wrong.","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If there is an issue writing to Storage.","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"    public String taskCaseHandler(CommandType typeOfTask, String[] splitInput) throws DukeException, IOException {","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"        String emptyDescription \u003d \":( OOPS!!! The description of a todo cannot be empty. Correct usage: \";","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"        String todoFormat \u003d \"todo [name]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"        String eventFormat \u003d \"event [name] /at [date] [time(optional)]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"        String deadlineFormat \u003d \"deadline [name] /by /by [date] [time(optional)]\";","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"        switch(typeOfTask) {","lastModifiedDate":"2022-02-17"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"        case TODO:","lastModifiedDate":"2022-02-17"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format: todo [task]","lastModifiedDate":"2022-02-17"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 1) {","lastModifiedDate":"2022-02-17"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"                Todo newTodo \u003d (Todo) parser.parse(CommandType.TODO, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newTodo);","lastModifiedDate":"2022-02-17"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"                return addTaskMessage(newTodo);","lastModifiedDate":"2022-02-17"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-17"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(emptyDescription + todoFormat);","lastModifiedDate":"2022-02-17"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":119,"author":{"gitId":"brian16600"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-17"},{"lineNumber":120,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format: deadline [task] /by [date] [time(optional)]","lastModifiedDate":"2022-02-17"},{"lineNumber":121,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 3) {","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"brian16600"},"content":"                Deadline newDeadline \u003d (Deadline) parser.parse(CommandType.DEADLINE, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":123,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newDeadline);","lastModifiedDate":"2022-02-17"},{"lineNumber":124,"author":{"gitId":"brian16600"},"content":"                return addTaskMessage(newDeadline);","lastModifiedDate":"2022-02-17"},{"lineNumber":125,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-17"},{"lineNumber":126,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(emptyDescription + deadlineFormat);","lastModifiedDate":"2022-02-17"},{"lineNumber":127,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":128,"author":{"gitId":"brian16600"},"content":"        case EVENT:","lastModifiedDate":"2022-02-17"},{"lineNumber":129,"author":{"gitId":"brian16600"},"content":"            //Confirms that input is in the format: event [task] /at [date] [time(optional)]","lastModifiedDate":"2022-02-17"},{"lineNumber":130,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 3) {","lastModifiedDate":"2022-02-17"},{"lineNumber":131,"author":{"gitId":"brian16600"},"content":"                Event newEvent \u003d (Event) parser.parse(CommandType.EVENT, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":132,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newEvent);","lastModifiedDate":"2022-02-17"},{"lineNumber":133,"author":{"gitId":"brian16600"},"content":"                return addTaskMessage(newEvent);","lastModifiedDate":"2022-02-17"},{"lineNumber":134,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":135,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-17"},{"lineNumber":136,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(emptyDescription + eventFormat);","lastModifiedDate":"2022-02-17"},{"lineNumber":137,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":138,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-01-29"},{"lineNumber":139,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\"Incorrect format. Should never reach this stage\");","lastModifiedDate":"2022-02-17"},{"lineNumber":140,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":141,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":142,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":143,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":144,"author":{"gitId":"brian16600"},"content":"     * Prints out the task name that has been added as well as the number of tasks in the list.","lastModifiedDate":"2022-02-17"},{"lineNumber":145,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":146,"author":{"gitId":"brian16600"},"content":"     * @param task The task that has been added","lastModifiedDate":"2022-01-29"},{"lineNumber":147,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":148,"author":{"gitId":"brian16600"},"content":"    public String addTaskMessage(Task task) {","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"brian16600"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task + \"\\nNow you have \" + this.storage.taskListSize() +","lastModifiedDate":"2022-02-15"},{"lineNumber":150,"author":{"gitId":"brian16600"},"content":"                \" tasks in the list.\" ;","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":152,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":153,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":154,"author":{"gitId":"brian16600"},"content":"     * Types of commands","lastModifiedDate":"2022-02-17"},{"lineNumber":155,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"brian16600"},"content":"    enum CommandType {","lastModifiedDate":"2022-02-05"},{"lineNumber":157,"author":{"gitId":"brian16600"},"content":"        TODO,","lastModifiedDate":"2022-02-05"},{"lineNumber":158,"author":{"gitId":"brian16600"},"content":"        EVENT,","lastModifiedDate":"2022-02-05"},{"lineNumber":159,"author":{"gitId":"brian16600"},"content":"        DEADLINE,","lastModifiedDate":"2022-02-05"},{"lineNumber":160,"author":{"gitId":"brian16600"},"content":"        LIST,","lastModifiedDate":"2022-02-05"},{"lineNumber":161,"author":{"gitId":"brian16600"},"content":"        MARK,","lastModifiedDate":"2022-02-05"},{"lineNumber":162,"author":{"gitId":"brian16600"},"content":"        UNMARK,","lastModifiedDate":"2022-02-05"},{"lineNumber":163,"author":{"gitId":"brian16600"},"content":"        DELETE,","lastModifiedDate":"2022-02-06"},{"lineNumber":164,"author":{"gitId":"brian16600"},"content":"        FIND","lastModifiedDate":"2022-02-06"},{"lineNumber":165,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":166,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":167,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"brian16600":167}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.ui;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.duke.Duke;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    //setting the images","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/human.jpg\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bear.jpg\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"     * Initialises scrollpane","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"        String dukeGreeting \u003d \"Hello! I\u0027m Duke ^^ \\nWhat can I do for you?\";","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(dukeGreeting, dukeImage));","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"     * Sets duke","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"     * @param d Duke object passed in","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"    @FXML","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"        String endMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"        String sleepErrorMessage \u003d \"Issue shutting down Duke! Force shutting down...\";","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-17"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"                DialogBox.getDukeDialog(response, dukeImage));","lastModifiedDate":"2022-02-17"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"        if (response.equals(endMessage)) {","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"            Platform.exit();","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"brian16600":71}},{"path":"src/main/java/duke/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"package duke.ui;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"public class Parser {","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    String defaultErrorMessage \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means! Possible commands: todo [task],\" +","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"            \" event [task] /at [time], deadline [task] /by [time], mark [index], unmark [index], delete [index], bye\";","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    String dateAndTimeErrorMessage \u003d \":( OOPS!!! The correct format for date and time is yyyy-mm-dd and hh:mm\";","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"     * Parses input from InputHandler and returns a new Task to be added to TaskList. Handles event, deadline, todo commands","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"     * @param type CommandType of input, including (TODO, DEADLINE, EVENT)","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"     * @param splitInput SplitInput from InputHandler is user\u0027s input, split by empty spaces for processing","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"     * @return Task object of new task to be added to TaskList","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException If format is wrong","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    public Task parse(InputHandler.CommandType type, String[] splitInput) throws DukeException {","lastModifiedDate":"2022-02-05"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"        switch (type) {","lastModifiedDate":"2022-02-05"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"        case TODO:","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"            //Removes the todo command word: i.e. todo task -\u003e task","lastModifiedDate":"2022-02-06"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"            String[] nameArray \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"            String todoName \u003d String.join(\" \", nameArray);","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"            return new Todo(todoName);","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"        case EVENT:","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"            return parseEvent(splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"            return parseDeadline(splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(defaultErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"     * Parses input from InputHandler and writes/deletes/prints from storage accordingly. Handles list, mark, unmark,","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"     * delete commands","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"     * @param type CommandType of input, including (LIST, MARK, UNMARK, DELETE)","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"     * @param storage Storage object in InputHandler to write/delete/get data from","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"     * @param splitInput SplitInput from InputHandler is user\u0027s input, split by empty spaces for processing","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException Handles unrecognised commands","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"     * @throws IOException Handles IO Errors","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"    public String parse(InputHandler.CommandType type, Storage storage, String[] splitInput) throws DukeException, IOException {","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"        String listCommandStringIntro \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"        switch (type) {","lastModifiedDate":"2022-02-17"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"        case LIST:","lastModifiedDate":"2022-02-17"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"            return listCommandStringIntro + storage.list();","lastModifiedDate":"2022-02-17"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"        case MARK:","lastModifiedDate":"2022-02-17"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"            return parseMarkAndUnmark(InputHandler.CommandType.MARK, storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"        case UNMARK:","lastModifiedDate":"2022-02-17"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"            return parseMarkAndUnmark(InputHandler.CommandType.UNMARK, storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"        case DELETE:","lastModifiedDate":"2022-02-17"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"            return parseDelete(storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"        case FIND:","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"            return parseFind(storage, splitInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(defaultErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"     * Parses the EVENT CommandType and user input to create the Event object using the relevant data.","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"     * @param splitInput User\u0027s input, split by spaces","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"     * @return Event object to be added to storage.","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException if input is in the wrong datetime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"    private Event parseEvent(String[] splitInput) throws DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"        //Removes the event command word and separates into date and time (optional)","lastModifiedDate":"2022-02-06"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"        String[] stringArrayExcludingEvent \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"        String stringExcludingEvent \u003d String.join(\" \", stringArrayExcludingEvent);","lastModifiedDate":"2022-02-05"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"        String[] eventNameAndTimeArray \u003d stringExcludingEvent.split(\"/at \");","lastModifiedDate":"2022-02-05"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"        String eventNameWithExtraSpace \u003d eventNameAndTimeArray[0];","lastModifiedDate":"2022-02-06"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"        String eventName \u003d eventNameWithExtraSpace.substring(0, eventNameWithExtraSpace.length() -1);","lastModifiedDate":"2022-02-06"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"        String eventTime \u003d eventNameAndTimeArray[1];","lastModifiedDate":"2022-02-05"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"        String[] eventTimeArray \u003d eventTime.split(\" \");","lastModifiedDate":"2022-02-05"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"            Event newEvent \u003d (eventTimeArray.length \u003e 1) ? new Event(eventName, eventTimeArray[0], eventTimeArray[1]) : new Event(eventName, eventTimeArray[0]);","lastModifiedDate":"2022-02-05"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"            return newEvent;","lastModifiedDate":"2022-02-05"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"            //Datetime unable to be parsed","lastModifiedDate":"2022-02-06"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(dateAndTimeErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"     * Parses the DEADLINE CommandType and user input to create the Deadline object using the relevant data.","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"     * @param splitInput User\u0027s input, split by spaces.","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"     * @return Deadline object to be added to storage.","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException If input is in the wrong datetime format/","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"    private Deadline parseDeadline(String[] splitInput) throws DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"        //Removes the deadline command word and separates into date and time (optional)","lastModifiedDate":"2022-02-06"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"        String[] stringArrayExcludingDeadline \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"        String stringExcludingDeadline \u003d String.join(\" \", stringArrayExcludingDeadline);","lastModifiedDate":"2022-02-05"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"        String[] deadlineNameAndTimeArray \u003d stringExcludingDeadline.split(\"/by \");","lastModifiedDate":"2022-02-05"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"        String deadlineNameWithSpace \u003d deadlineNameAndTimeArray[0];","lastModifiedDate":"2022-02-06"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"        String deadlineName \u003d deadlineNameWithSpace.substring(0, deadlineNameWithSpace.length() - 1);","lastModifiedDate":"2022-02-06"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"        String deadlineTime \u003d deadlineNameAndTimeArray[1];","lastModifiedDate":"2022-02-05"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"        String[] deadlineTimeArray \u003d deadlineTime.split(\" \");","lastModifiedDate":"2022-02-05"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":119,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":120,"author":{"gitId":"brian16600"},"content":"            Deadline newDeadline \u003d (deadlineTimeArray.length \u003e 1) ? new Deadline(deadlineName, deadlineTimeArray[0], deadlineTimeArray[1]) : new Deadline(deadlineName, deadlineTimeArray[0]);","lastModifiedDate":"2022-02-05"},{"lineNumber":121,"author":{"gitId":"brian16600"},"content":"            return newDeadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":122,"author":{"gitId":"brian16600"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":123,"author":{"gitId":"brian16600"},"content":"            //Datetime unable to be parsed","lastModifiedDate":"2022-02-06"},{"lineNumber":124,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(dateAndTimeErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":125,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":126,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":127,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":128,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":129,"author":{"gitId":"brian16600"},"content":"     * Parses the FIND CommandType and user input to find a list of tasks with matching descriptions","lastModifiedDate":"2022-02-17"},{"lineNumber":130,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":131,"author":{"gitId":"brian16600"},"content":"     * @param storage Storage contains the task. This storage is iterated through to search.","lastModifiedDate":"2022-02-17"},{"lineNumber":132,"author":{"gitId":"brian16600"},"content":"     * @param splitInput User\u0027s input split by spaces.","lastModifiedDate":"2022-02-17"},{"lineNumber":133,"author":{"gitId":"brian16600"},"content":"     * @return String format of the task.","lastModifiedDate":"2022-02-17"},{"lineNumber":134,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException Unable to find the task.","lastModifiedDate":"2022-02-17"},{"lineNumber":135,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":136,"author":{"gitId":"brian16600"},"content":"    private String parseFind(Storage storage, String[] splitInput) throws DukeException{","lastModifiedDate":"2022-02-17"},{"lineNumber":137,"author":{"gitId":"brian16600"},"content":"        //Removes the find command and iterates through the TaskList to find a task name that contains the keyword","lastModifiedDate":"2022-02-06"},{"lineNumber":138,"author":{"gitId":"brian16600"},"content":"        String cannotFindTaskMessage \u003d \"Uh oh! No task matches the description you\u0027ve given :(\";","lastModifiedDate":"2022-02-17"},{"lineNumber":139,"author":{"gitId":"brian16600"},"content":"        String[] stringArrayExcludingFind \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-06"},{"lineNumber":140,"author":{"gitId":"brian16600"},"content":"        String nameOfKeyWord \u003d String.join(\" \", stringArrayExcludingFind);","lastModifiedDate":"2022-02-06"},{"lineNumber":141,"author":{"gitId":"brian16600"},"content":"        ArrayList\u003cTask\u003e arrayOfTasks \u003d storage.accessTaskList().list;","lastModifiedDate":"2022-02-06"},{"lineNumber":142,"author":{"gitId":"brian16600"},"content":"        ArrayList\u003cInteger\u003e indexOfFoundObjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-06"},{"lineNumber":143,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 0; i \u003c arrayOfTasks.size(); i++) {","lastModifiedDate":"2022-02-06"},{"lineNumber":145,"author":{"gitId":"brian16600"},"content":"            Task currentTask \u003d arrayOfTasks.get(i);","lastModifiedDate":"2022-02-06"},{"lineNumber":146,"author":{"gitId":"brian16600"},"content":"            if (currentTask.name.contains(nameOfKeyWord)) {","lastModifiedDate":"2022-02-06"},{"lineNumber":147,"author":{"gitId":"brian16600"},"content":"                indexOfFoundObjects.add(i);","lastModifiedDate":"2022-02-06"},{"lineNumber":148,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":149,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":150,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":151,"author":{"gitId":"brian16600"},"content":"        String outputString \u003d \"\";","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"brian16600"},"content":"        if (!indexOfFoundObjects.isEmpty()) {","lastModifiedDate":"2022-02-06"},{"lineNumber":153,"author":{"gitId":"brian16600"},"content":"            //Task found and print","lastModifiedDate":"2022-02-06"},{"lineNumber":154,"author":{"gitId":"brian16600"},"content":"            for (int j \u003d 0; j \u003c indexOfFoundObjects.size(); j++) {","lastModifiedDate":"2022-02-06"},{"lineNumber":155,"author":{"gitId":"brian16600"},"content":"                outputString +\u003d (j + 1) + \".\" + storage.get(indexOfFoundObjects.get(j)) + \"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":157,"author":{"gitId":"brian16600"},"content":"            return outputString;","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"brian16600"},"content":"        } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":159,"author":{"gitId":"brian16600"},"content":"            //Unable to find","lastModifiedDate":"2022-02-06"},{"lineNumber":160,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(cannotFindTaskMessage);","lastModifiedDate":"2022-02-15"},{"lineNumber":161,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":162,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":163,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":164,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":165,"author":{"gitId":"brian16600"},"content":"     * Parses the CommandType DELETE and deletes the task from storage.","lastModifiedDate":"2022-02-17"},{"lineNumber":166,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":167,"author":{"gitId":"brian16600"},"content":"     * @param storage Storage contains the task to be deleted.","lastModifiedDate":"2022-02-17"},{"lineNumber":168,"author":{"gitId":"brian16600"},"content":"     * @param splitInput User\u0027s input split by spaces.","lastModifiedDate":"2022-02-17"},{"lineNumber":169,"author":{"gitId":"brian16600"},"content":"     * @return String of Duke\u0027s reply that task has been deleted.","lastModifiedDate":"2022-02-17"},{"lineNumber":170,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException If there is a NumberFormatException with the index.","lastModifiedDate":"2022-02-17"},{"lineNumber":171,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If there is error by Storage in reading/writing to data.txt.","lastModifiedDate":"2022-02-17"},{"lineNumber":172,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":173,"author":{"gitId":"brian16600"},"content":"    private String parseDelete(Storage storage, String[] splitInput) throws DukeException, IOException {","lastModifiedDate":"2022-02-17"},{"lineNumber":174,"author":{"gitId":"brian16600"},"content":"        //Delete task by index","lastModifiedDate":"2022-02-17"},{"lineNumber":175,"author":{"gitId":"brian16600"},"content":"        String wrongDeleteFormatErrorMessage \u003d \"Make sure delete is in the format delete [index]!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":176,"author":{"gitId":"brian16600"},"content":"        String indexTooLarge \u003d \"Index too large!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":177,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":178,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":179,"author":{"gitId":"brian16600"},"content":"            int idxOfTaskToBeDeleted \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-17"},{"lineNumber":180,"author":{"gitId":"brian16600"},"content":"            System.out.println(idxOfTaskToBeDeleted);","lastModifiedDate":"2022-02-17"},{"lineNumber":181,"author":{"gitId":"brian16600"},"content":"            assert idxOfTaskToBeDeleted \u003c storage.taskListSize() : indexTooLarge;","lastModifiedDate":"2022-02-17"},{"lineNumber":182,"author":{"gitId":"brian16600"},"content":"            Task taskToBeDeleted \u003d storage.get(idxOfTaskToBeDeleted);","lastModifiedDate":"2022-02-17"},{"lineNumber":183,"author":{"gitId":"brian16600"},"content":"            storage.deleteData(idxOfTaskToBeDeleted);","lastModifiedDate":"2022-02-17"},{"lineNumber":184,"author":{"gitId":"brian16600"},"content":"            return \"Noted. I\u0027ve removed this task:\\n\" + taskToBeDeleted + \"\\nNow you have \" + storage.taskListSize() +","lastModifiedDate":"2022-02-17"},{"lineNumber":185,"author":{"gitId":"brian16600"},"content":"                    \" tasks in the list\";","lastModifiedDate":"2022-02-17"},{"lineNumber":186,"author":{"gitId":"brian16600"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":187,"author":{"gitId":"brian16600"},"content":"            //Addresses the issue of a non-integer being passed in","lastModifiedDate":"2022-02-17"},{"lineNumber":188,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(wrongDeleteFormatErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":189,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":190,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":191,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":192,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":193,"author":{"gitId":"brian16600"},"content":"     * Marks or Unmarks task.","lastModifiedDate":"2022-02-17"},{"lineNumber":194,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":195,"author":{"gitId":"brian16600"},"content":"     * @param type CommandType of task","lastModifiedDate":"2022-02-17"},{"lineNumber":196,"author":{"gitId":"brian16600"},"content":"     * @param storage Storage to be iterated through for task","lastModifiedDate":"2022-02-17"},{"lineNumber":197,"author":{"gitId":"brian16600"},"content":"     * @param splitInput User\u0027s input split by spaces","lastModifiedDate":"2022-02-17"},{"lineNumber":198,"author":{"gitId":"brian16600"},"content":"     * @return String of Duke\u0027s reply that task has been marked/unmarked","lastModifiedDate":"2022-02-17"},{"lineNumber":199,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException NumberFormatError due to index or invalid CommandType","lastModifiedDate":"2022-02-17"},{"lineNumber":200,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If there is an issue reading/writing from data by Storage","lastModifiedDate":"2022-02-17"},{"lineNumber":201,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":202,"author":{"gitId":"brian16600"},"content":"    private String parseMarkAndUnmark(InputHandler.CommandType type, Storage storage, String[] splitInput)  throws DukeException, IOException {","lastModifiedDate":"2022-02-17"},{"lineNumber":203,"author":{"gitId":"brian16600"},"content":"        String markedMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":204,"author":{"gitId":"brian16600"},"content":"        String unmarkedMessage \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":205,"author":{"gitId":"brian16600"},"content":"        String wrongMarkFormatErrorMessage \u003d \"Make sure mark is in the format: mark [index]!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":206,"author":{"gitId":"brian16600"},"content":"        String wrongUnmarkFormatErrorMessage \u003d \"Make sure unmark is in the format: unmark [index]!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":207,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":208,"author":{"gitId":"brian16600"},"content":"        switch (type) {","lastModifiedDate":"2022-02-17"},{"lineNumber":209,"author":{"gitId":"brian16600"},"content":"        case UNMARK:","lastModifiedDate":"2022-02-17"},{"lineNumber":210,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-02-17"},{"lineNumber":211,"author":{"gitId":"brian16600"},"content":"                int taskToBeUnmarkedIndex \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-17"},{"lineNumber":212,"author":{"gitId":"brian16600"},"content":"                Task taskToBeUnmarked \u003d storage.get(taskToBeUnmarkedIndex);","lastModifiedDate":"2022-02-17"},{"lineNumber":213,"author":{"gitId":"brian16600"},"content":"                taskToBeUnmarked.setUnmarkedTask();","lastModifiedDate":"2022-02-17"},{"lineNumber":214,"author":{"gitId":"brian16600"},"content":"                storage.rewriteData();","lastModifiedDate":"2022-02-17"},{"lineNumber":215,"author":{"gitId":"brian16600"},"content":"                return unmarkedMessage + taskToBeUnmarked;","lastModifiedDate":"2022-02-17"},{"lineNumber":216,"author":{"gitId":"brian16600"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":217,"author":{"gitId":"brian16600"},"content":"                //Addresses the issue of a non-integer being passed in","lastModifiedDate":"2022-02-17"},{"lineNumber":218,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(wrongUnmarkFormatErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":219,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":220,"author":{"gitId":"brian16600"},"content":"        case MARK:","lastModifiedDate":"2022-02-17"},{"lineNumber":221,"author":{"gitId":"brian16600"},"content":"            //Marks task by index","lastModifiedDate":"2022-02-17"},{"lineNumber":222,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-02-17"},{"lineNumber":223,"author":{"gitId":"brian16600"},"content":"                int taskToBeMarkedIndex \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-17"},{"lineNumber":224,"author":{"gitId":"brian16600"},"content":"                Task taskToBeMarked \u003d storage.get(taskToBeMarkedIndex);","lastModifiedDate":"2022-02-17"},{"lineNumber":225,"author":{"gitId":"brian16600"},"content":"                taskToBeMarked.setMarkedTask();","lastModifiedDate":"2022-02-17"},{"lineNumber":226,"author":{"gitId":"brian16600"},"content":"                storage.rewriteData();","lastModifiedDate":"2022-02-17"},{"lineNumber":227,"author":{"gitId":"brian16600"},"content":"                return markedMessage + taskToBeMarked;","lastModifiedDate":"2022-02-17"},{"lineNumber":228,"author":{"gitId":"brian16600"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":229,"author":{"gitId":"brian16600"},"content":"                //Addresses the error of a non-integer being passed in","lastModifiedDate":"2022-02-17"},{"lineNumber":230,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(wrongMarkFormatErrorMessage);","lastModifiedDate":"2022-02-17"},{"lineNumber":231,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":232,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":233,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\"Invalid CommandType. Should not reach here\");","lastModifiedDate":"2022-02-17"},{"lineNumber":234,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":235,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":236,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"brian16600":236}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"brian16600":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"brian16600":19}},{"path":"src/test/java/InputHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import duke.ui.InputHandler;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import duke.ui.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.io.File;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"public class InputHandlerTest {","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    @Test","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    @DisplayName(\"test tasks\")","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    void AddTodoEventDeadline() throws IOException, DukeException {","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"        InputHandler ui \u003d new InputHandler();","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        ui.handleInput(\"todo test todo\");","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        ui.handleInput(\"event test event /at 2022-02-09 12:00\");","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"        ui.handleInput(\"deadline test deadline /by 2022-02-11 03:59\");","lastModifiedDate":"2022-02-06"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"        String FILEPATH \u003d \"data/data.txt\";","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        File dataFile \u003d new File(FILEPATH);","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"        Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-06"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"        assertEquals(sc.nextLine(), \"[T] [X] / test todo\");","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"        assertEquals(sc.nextLine(), \"[E] [X] / test event / 2022-02-09 / 12:00\");","lastModifiedDate":"2022-02-06"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"        assertEquals(sc.nextLine(), \"[D] [X] / test deadline / 2022-02-11 / 03:59\");","lastModifiedDate":"2022-02-06"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-06"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"brian16600":30}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"public class TaskListTest {","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    @Test","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"    @DisplayName(\"test task list\")","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    void testTaskList() {","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"        int taskListSize \u003d tl.size();","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"        Task newTask \u003d new Task(\"test task\");","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"        tl.add(newTask);","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        assertEquals(tl.size(), taskListSize + 1);","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"        assertEquals(tl.get(tl.size() - 1), newTask);","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        tl.remove(tl.size() - 1);","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        assertEquals(tl.size(), taskListSize);","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"brian16600":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"todo test1","lastModifiedDate":"2022-02-13"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"deadline test2 /by 2022-12-21 01:00","lastModifiedDate":"2022-02-13"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"event test3 /at 2022-03-05 13:00","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"mark 2","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"list","lastModifiedDate":"2022-02-13"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"bye","lastModifiedDate":"2022-02-13"}],"authorContributionMap":{"brian16600":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\duke\\*.java","lastModifiedDate":"2022-02-13"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"java -classpath ..\\bin\\duke\\duke Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-13"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"pause","lastModifiedDate":"2022-02-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brian16600":4,"-":19}}]
