[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" * Represents a Deadline which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":" * Includes a dueDate attribute. Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"    public LocalDate dueDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    public LocalTime dueTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    public Deadline(String name, String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    public Deadline(String name, String date, String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     * @override","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     * @return String of Deadline task, eg [D][X] Deadline (by:XX) vs [D][âœ“] Deadline (by;XX)","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"        String dueDateAndTime \u003d (this.dueTime \u003d\u003d null) ? dateConverterToString(this.dueDate) : dateConverterToString(this.dueDate) + \" \" + timeConverterToString(this.dueTime);","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + dueDateAndTime + \")\"; }","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":36}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner; //import Scanner","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList; //import ArrayList","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays; //import Arrays","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"        String dukeGreeting \u003d \"Hello! I\u0027m Duke \\nWhat can I do for you?\";","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"        String endMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        System.out.println(dukeGreeting);","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        InputHandler inputHandler \u003d new InputHandler();","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        boolean isChatEnded \u003d false;","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"        while (!isChatEnded) {","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"                String input \u003d sc.nextLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"                isChatEnded \u003d inputHandler.handleInput(input);","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"        System.out.println(endMessage);","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"brian16600":34,"-":8}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"    private String errorMessage;","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"    public DukeException (String errorMessage) {","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"     * @override Returns customised error message for DukeException when input is incorrect","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"     * @return String errorMessage","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"    public String getMessage() {return this.errorMessage;}","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"brian16600":12}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.Date;","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":" * Represents a Event which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":" * Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    public LocalDate dueDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    public LocalTime dueTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"    public Event (String name, String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    public Event (String name, String date, String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"        this.dueDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"        this.dueTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     * @override","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"     * @return String of Event task, eg: [E][X] Event (at:) vs [E] [âœ“] Event (at:)","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"        String dueDateAndTime \u003d (this.dueTime \u003d\u003d null) ? dateConverterToString(this.dueDate) : dateConverterToString(this.dueDate) + \" \" + timeConverterToString(this.dueTime);","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"        return \"[E]\" + super.toString() + \" (at:\" + dueDateAndTime + \")\"; }","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":35}},{"path":"src/main/java/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":" * Handles input in main in Duke.java. Receives String from Scanner in main","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" * Processes the input into 7 categories: Todo, Event, Deadline, list, mark, unmark, bye and throws error","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"public class InputHandler {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     * Constructs an InputHandler for Duke.java to handle inputs from user","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     * @throws IOException If Storage class fails to initialise","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"    public InputHandler() throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"     * @param input String input from main in Duke.java, from user input","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"     * @return boolean representing isChatEnded variable in main. If \"bye\" command is given, a true boolean is returned, else false is returned","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"     * @throws DukeException Invalid input types, or unrecognisable commands","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"    public boolean handleInput(String input) throws DukeException, IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"        String inputCommand \u003d splitInput[0];","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"        switch (inputCommand) {","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"        case \"todo\":","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"                Todo newTodo \u003d (Todo) parser.parse(CommandType.TODO, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newTodo);","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"                printAddTaskMessage(newTodo);","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\":( OOPS!!! The description of a todo cannot be empty. Correct usage: todo [task]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"        case \"event\":","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 3) {","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"                Event newEvent \u003d (Event) parser.parse(CommandType.EVENT, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newEvent);","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"                printAddTaskMessage(newEvent);","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\":( OOPS!!! The description of a event cannot be empty. Correct usage: event [task] /at [time]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"        case \"deadline\":","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003e 3) {","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"                Deadline newDeadline \u003d (Deadline) parser.parse(CommandType.DEADLINE, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"                this.storage.writeData(newDeadline);","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"                printAddTaskMessage(newDeadline);","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\":( OOPS!!! The description of a deadline cannot be empty. Correct usage: deadline [task] /by [time]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"        case \"list\":","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"                parser.parse(CommandType.LIST, this.storage, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of list! Correct usage: list\");","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"                parser.parse(CommandType.MARK, this.storage, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of mark! Correct usage: mark [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"                parser.parse(CommandType.UNMARK, this.storage, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of unmark! Correct usage: unmark [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"            if (splitInput.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"                parser.parse(CommandType.DELETE, this.storage, splitInput);","lastModifiedDate":"2022-02-05"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"                return false;","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\"Wrong usage of delete! Correct usage: delete [index]\");","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"        case \"bye\":","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"            return true;","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means! Possible commands: todo [task], event [task] /at [time],\"","lastModifiedDate":"2022-01-29"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"            + \" deadline [task] /by [time], mark [index], unmark [index], delete [index], bye\");","lastModifiedDate":"2022-01-29"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"     * Prints out the task name that has been added as well as the number of tasks in the list","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"     * @param task The task that has been added","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"    public void printAddTaskMessage(Task task) {","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + task + \"\\nNow you have \" + this.storage.taskListSize() + \" tasks in the list.\" );","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"    enum CommandType {","lastModifiedDate":"2022-02-05"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"        TODO,","lastModifiedDate":"2022-02-05"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"        EVENT,","lastModifiedDate":"2022-02-05"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"        DEADLINE,","lastModifiedDate":"2022-02-05"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"        LIST,","lastModifiedDate":"2022-02-05"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"        MARK,","lastModifiedDate":"2022-02-05"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"        UNMARK,","lastModifiedDate":"2022-02-05"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"        DELETE","lastModifiedDate":"2022-02-05"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"brian16600":118}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"public class Parser {","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"    public Task parse(InputHandler.CommandType type, String[] splitInput) throws DukeException {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"        switch (type) {","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"        case TODO:","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"            String[] nameArray \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"            String todoName \u003d String.join(\" \", nameArray);","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"            return new Todo(todoName);","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"        case EVENT:","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"            String[] stringArrayExcludingEvent \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"            String stringExcludingEvent \u003d String.join(\" \", stringArrayExcludingEvent);","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"            String[] eventNameAndTimeArray \u003d stringExcludingEvent.split(\"/at \");","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"            String eventName \u003d eventNameAndTimeArray[0];","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"            String eventTime \u003d eventNameAndTimeArray[1];","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"            String[] eventTimeArray \u003d eventTime.split(\" \");","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"                Event newEvent \u003d (eventTimeArray.length \u003e 1) ? new Event(eventName, eventTimeArray[0], eventTimeArray[1]) : new Event(eventName, eventTimeArray[0]);","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"                return newEvent;","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\":( OOPS!!! The correct format for date and time is yyyy-mm-dd and hh:mm\");","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"            String[] stringArrayExcludingDeadline \u003d Arrays.copyOfRange(splitInput, 1, splitInput.length);","lastModifiedDate":"2022-02-05"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"            String stringExcludingDeadline \u003d String.join(\" \", stringArrayExcludingDeadline);","lastModifiedDate":"2022-02-05"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"            String[] deadlineNameAndTimeArray \u003d stringExcludingDeadline.split(\"/by \");","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"            String deadlineName \u003d deadlineNameAndTimeArray[0];","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"            String deadlineTime \u003d deadlineNameAndTimeArray[1];","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"            String[] deadlineTimeArray \u003d deadlineTime.split(\" \");","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"            try {","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"                Deadline newDeadline \u003d (deadlineTimeArray.length \u003e 1) ? new Deadline(deadlineName, deadlineTimeArray[0], deadlineTimeArray[1]) : new Deadline(deadlineName, deadlineTimeArray[0]);","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"                return newDeadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"                throw new DukeException(\":( OOPS!!! The correct format for date and time is yyyy-mm-dd and hh:mm\");","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means! Possible commands: todo [task], event [task] /at [time],\"","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"                    + \" deadline [task] /by [time], mark [index], unmark [index], delete [index], bye\");","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"    public void parse(InputHandler.CommandType type, Storage storage, String[] splitInput) throws DukeException, IOException {","lastModifiedDate":"2022-02-05"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"        switch (type) {","lastModifiedDate":"2022-02-05"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"        case LIST:","lastModifiedDate":"2022-02-05"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-02-05"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"            System.out.println(storage.list());","lastModifiedDate":"2022-02-05"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"        case MARK:","lastModifiedDate":"2022-02-05"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\");","lastModifiedDate":"2022-02-05"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"            int taskToBeMarkedIndex \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-05"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"            Task taskToBeMarked \u003d storage.get(taskToBeMarkedIndex);","lastModifiedDate":"2022-02-05"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"            taskToBeMarked.setMarkedTask();","lastModifiedDate":"2022-02-05"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"        case UNMARK:","lastModifiedDate":"2022-02-05"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\");","lastModifiedDate":"2022-02-05"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"            int taskToBeUnmarkedIndex \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-05"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"            Task taskToBeUnmarked \u003d storage.get(taskToBeUnmarkedIndex);","lastModifiedDate":"2022-02-05"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"            taskToBeUnmarked.setUnmarkedTask();","lastModifiedDate":"2022-02-05"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"        case DELETE:","lastModifiedDate":"2022-02-05"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"            int idx \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-05"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"            Task taskToBeDeleted \u003d storage.get(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"            storage.deleteData(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + taskToBeDeleted + \"\\nNow you have \" + storage.taskListSize() + \" tasks in the list\");","lastModifiedDate":"2022-02-05"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"        default:","lastModifiedDate":"2022-02-05"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"            throw new DukeException(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means! Possible commands: todo [task], event [task] /at [time],\"","lastModifiedDate":"2022-02-05"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"                    + \" deadline [task] /by [time], mark [index], unmark [index], delete [index], bye\");","lastModifiedDate":"2022-02-05"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"brian16600":84}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"public class Storage {","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    TaskList taskList;","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"    String FILEPATH \u003d \"data/data.txt\";","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"     * Constructs a Storage object. Loads the data from data/data.txt. if no data dir or data.txt is found, create an empty one","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    public Storage() throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"            File dataFile \u003d new File(FILEPATH);","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"            TaskList newTaskList \u003d new TaskList();","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"                String[] taskListaySplitBySpaces \u003d nextLine.split(\" \");","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"                String taskType \u003d taskListaySplitBySpaces[0];","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"                String[] taskListaySplitBySlash \u003d nextLine.split(\" / \");","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"                switch (taskType) {","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"                case \"[T]\":","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"                    Todo newTodo \u003d new Todo(taskListaySplitBySlash[1]);","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"                    if (taskListaySplitBySpaces[1].equals(\"[âœ“]\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"                        newTodo.setMarkedTask();","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"                    newTaskList.add(newTodo);","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"                case \"[D]\":","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"                    Deadline newDeadline \u003d (taskListaySplitBySlash[3].equals(\"null\")) ? new Deadline(taskListaySplitBySlash[1], taskListaySplitBySlash[2]) : new Deadline(taskListaySplitBySlash[1], taskListaySplitBySlash[2], taskListaySplitBySlash[3]);","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"                    if (taskListaySplitBySpaces[1].equals(\"[âœ“]\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"                        newDeadline.setMarkedTask();","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"                    newTaskList.add(newDeadline);","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"                case \"[E]\":","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"                    Event newEvent \u003d (taskListaySplitBySlash[3].equals(\"null\")) ? new Event(taskListaySplitBySlash[1], taskListaySplitBySlash[2]) : new Event(taskListaySplitBySlash[1], taskListaySplitBySlash[2], taskListaySplitBySlash[3]);","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"                    if (taskListaySplitBySpaces[1].equals(\"[âœ“]\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"                        newEvent.setMarkedTask();","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"                    newTaskList.add(newEvent);","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"                default:","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"            this.taskList \u003d newTaskList;","lastModifiedDate":"2022-02-05"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"        } catch (IOException e){","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"            Path filePath \u003d Paths.get(\"data\");","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"            boolean dataDirectoryExists \u003d Files.exists(filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"            if (!dataDirectoryExists) {","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"                new File(\"data\").mkdir();","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"            new File(FILEPATH).createNewFile();","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2022-02-05"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"     * @param task Converts task to string format for storage in the data.txt file for records","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"     * @return String format of the task eg: [D] [âœ“] deadline | duedate | duetime","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"    public String taskToStringConverter(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (task.hasBeenMarked()) ? \"[âœ“]\" : \"[X]\";","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"            output \u003d \"[T] \" + mark + \" / \" + task.name + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"        } else if (task instanceof Deadline deadline) {","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (deadline.hasBeenMarked()) ? \"[âœ“]\" : \"[X]\";","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"            output \u003d \"[D] \" + mark + \" / \" + deadline.name + \" / \" + deadline.dueDate + \" / \" + deadline.dueTime + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"        } else if (task instanceof Event event) {","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"            String mark \u003d (event.hasBeenMarked()) ? \"[âœ“]\" : \"[X]\";","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"            output \u003d \"[E] \" + mark + \" / \" + event.name + \" / \" + event.dueDate + \" / \" + event.dueTime + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"        return output;","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"brian16600"},"content":"     * Appends a single task to the file","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"brian16600"},"content":"     * @param task task to be added to the data.txt file","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"brian16600"},"content":"     * @throws IOException if there is an error appending the task to data.txt","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"brian16600"},"content":"    public void writeData(Task task) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"brian16600"},"content":"        this.taskList.add(task);","lastModifiedDate":"2022-02-05"},{"lineNumber":90,"author":{"gitId":"brian16600"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH, true);","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"brian16600"},"content":"        fw.write(taskToStringConverter(task));","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"brian16600"},"content":"        fw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"brian16600"},"content":"     * Used when delete [index] is called for Duke. Deletes the entire file and rewrites it based on the new taskListay","lastModifiedDate":"2022-02-05"},{"lineNumber":97,"author":{"gitId":"brian16600"},"content":"     * Amends the current stored taskListay as well","lastModifiedDate":"2022-02-05"},{"lineNumber":98,"author":{"gitId":"brian16600"},"content":"     * @param idx index of task to be deleted","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"brian16600"},"content":"     * @throws IOException if there is an error rewriting data.txt","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"brian16600"},"content":"    public void deleteData(int idx) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"brian16600"},"content":"        Task taskToBeDeleted \u003d this.taskList.get(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":103,"author":{"gitId":"brian16600"},"content":"        taskList.remove(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":104,"author":{"gitId":"brian16600"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH);","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2022-02-05"},{"lineNumber":106,"author":{"gitId":"brian16600"},"content":"            Task task \u003d this.taskList.get(i);","lastModifiedDate":"2022-02-05"},{"lineNumber":107,"author":{"gitId":"brian16600"},"content":"            fw.write(taskToStringConverter(task));","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"brian16600"},"content":"        fw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"brian16600"},"content":"     * Obtains list of tasks from this.taskList and returns it","lastModifiedDate":"2022-02-05"},{"lineNumber":114,"author":{"gitId":"brian16600"},"content":"     * @return String that lists out the tasks currently","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"brian16600"},"content":"    public String list() {","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"brian16600"},"content":"        String listOfTasks \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"brian16600"},"content":"        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {","lastModifiedDate":"2022-02-05"},{"lineNumber":119,"author":{"gitId":"brian16600"},"content":"            Task task \u003d this.taskList.get(i - 1);","lastModifiedDate":"2022-02-05"},{"lineNumber":120,"author":{"gitId":"brian16600"},"content":"            if (task.hasBeenMarked()) {","lastModifiedDate":"2022-02-05"},{"lineNumber":121,"author":{"gitId":"brian16600"},"content":"                listOfTasks +\u003d i + \". \" + task + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":122,"author":{"gitId":"brian16600"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"brian16600"},"content":"                listOfTasks +\u003d i + \". \" + task + \"\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":124,"author":{"gitId":"brian16600"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"brian16600"},"content":"        return listOfTasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":130,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"brian16600"},"content":"     * @param idx index of task to be gotten","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"brian16600"},"content":"     * @return task that is requested","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"brian16600"},"content":"    public Task get(int idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"brian16600"},"content":"        return this.taskList.get(idx);","lastModifiedDate":"2022-02-05"},{"lineNumber":136,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":138,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":139,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":140,"author":{"gitId":"brian16600"},"content":"     * @return size of task list","lastModifiedDate":"2022-02-02"},{"lineNumber":141,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":142,"author":{"gitId":"brian16600"},"content":"    public int taskListSize() {","lastModifiedDate":"2022-02-02"},{"lineNumber":143,"author":{"gitId":"brian16600"},"content":"        return this.taskList.size();","lastModifiedDate":"2022-02-05"},{"lineNumber":144,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":145,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":146,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"brian16600":146}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":" * Represents a Task. Contains a Task constructor, two methods to mark and unmark tasks, toString() method as well as a isMark() method to check if Task is marked","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"public class Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    private boolean mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"    public String name;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     * Constructor","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     * @param name name of the task","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    public Task (String name) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"        this.mark \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"brian16600"},"content":"     * markTask as done","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"brian16600"},"content":"    public void setMarkedTask () {","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"brian16600"},"content":"        String markedMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"brian16600"},"content":"        this.mark \u003d true;","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"brian16600"},"content":"        System.out.println(markedMessage + \"  \" + this);","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"brian16600"},"content":"     * unmarkTask","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"brian16600"},"content":"    public void setUnmarkedTask() {","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"brian16600"},"content":"        String unmarkedMessage \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"brian16600"},"content":"        this.mark \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"brian16600"},"content":"        System.out.println(unmarkedMessage + \"  \" + this);","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"brian16600"},"content":"     * @return boolean on whether task is marked","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"brian16600"},"content":"    public boolean hasBeenMarked() {","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"brian16600"},"content":"        return this.mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"brian16600"},"content":"     * @param date LocalDate for Deadline/Event tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"brian16600"},"content":"     * @return String format: converts from yyyy-mm-dd format to Aug dd, yyyy format","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"brian16600"},"content":"    public String dateConverterToString(LocalDate date) {","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"brian16600"},"content":"        return DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(date);","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"brian16600"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"brian16600"},"content":"     * @param time LocalTime for Deadline/Event tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"brian16600"},"content":"     * @return String format: converts hh:mm format to hh:mm am/pm format","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"brian16600"},"content":"    public String timeConverterToString(LocalTime time) {","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"brian16600"},"content":"        return DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).format(time);","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"brian16600"},"content":"     * @override","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"brian16600"},"content":"     * @return String version of task, with marked and name. E.g. [X] Task vs [âœ“] Task","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"brian16600"},"content":"        if (this.mark) {","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"brian16600"},"content":"            String marked \u003d \"[âœ“] \";","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"brian16600"},"content":"            return marked + this.name;","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"brian16600"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"brian16600"},"content":"            String unmarked \u003d \"[X] \";","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"brian16600"},"content":"            return unmarked + this.name;","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"brian16600"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":82}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"public class TaskList {","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"    ArrayList\u003cTask\u003e list;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"        this.list.add(task);","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"    public void remove(int index) {","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"        this.list.remove(index);","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"    public Task get(int index) {","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"        return this.list.get(index);","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"    public int size() {","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"        return this.list.size();","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"brian16600":23}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brian16600"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"brian16600"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"brian16600"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"brian16600"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"brian16600"},"content":" * Represents a Todo which is a subclass of Task","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"brian16600"},"content":" * Includes a dueDate attribute. Overrides toString() from Task","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"brian16600"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"brian16600"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"brian16600"},"content":"    public Todo (String name) {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"brian16600"},"content":"        super(name);","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"brian16600"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"brian16600"},"content":"     * @override","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"brian16600"},"content":"     * @return String of Todo task, eg: [T][X] Todo","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"brian16600"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"brian16600"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"brian16600"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"brian16600"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"brian16600"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"brian16600"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"brian16600":23}}]
