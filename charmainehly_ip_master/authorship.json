[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.10\u0027","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"javafx {","lastModifiedDate":"2022-02-10"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    version \u003d \"11\"","lastModifiedDate":"2022-02-10"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 ]","lastModifiedDate":"2022-02-10"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"    mainClassName \u003d \"seedu.view.Launcher\"","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"    toolVersion \u003d \u00278.1\u0027","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"charmainehly":23,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"## About Calcifer","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"![](../src/main/resources/images/DaDuke.png)","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"\u003cp\u003e\u003cb\u003eCalcifer is a task manager\u003c/b\u003e to aid a user in keeping track of a list of tasks that have been completed ","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"or need to be completed.\u003c/p\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"\u003cp\u003e\u003cb\u003eCalcifer\u003c/b\u003e operates mainly using CLI user commands, but can be started up using a GUI application ","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"to provide a more user-friendly design and interface.\u003c/p\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"\u003cp\u003eThe following list summarises the features included in \u003cb\u003eCalcifer\u003c/b\u003e.\u003c/p\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"- _**Add** new tasks_   ","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"- _**Delete** existing tasks_","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"- _**List** all existing tasks_","lastModifiedDate":"2022-02-19"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"- _**Mark/Unmark** existing tasks_","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"- _**Find** tasks_","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"### Feature: Add","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"**Add**  more tasks to the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"There are three task types that can be added: `Event`, `Deadline`, `ToDo`.","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"### Feature: Delete","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"**Delete** existing tasks from the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"Any existing task can be deleted based on the task ID.","lastModifiedDate":"2022-02-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"### Feature: List","lastModifiedDate":"2022-02-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"**Lists** all existing tasks from the task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"### Feature: Mark/Unmark","lastModifiedDate":"2022-02-19"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"**Mark/Unmark** existing tasks in the task list as done/undone respectively.","lastModifiedDate":"2022-02-19"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"Any existing task can be marked or unmarked based on the task ID.","lastModifiedDate":"2022-02-19"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"### Feature: Find","lastModifiedDate":"2022-02-19"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"**Finds** all existing tasks that include the specified search keyword.","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2022-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"### `hi` - Displays welcome message","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"Displays a standard welcome message.","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"`hi`","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"Hello I\u0027m Calcifer.","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"What can I help you with today?","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"### `bye` - Displays exit message","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"Displays a standard exit message.","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"`bye`","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"Bye. See you later!","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"### `todo [todo_description]` - Adds a task of type ToDo","lastModifiedDate":"2022-02-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"Adds a new `ToDo` task with the specified task description to the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"The modified task list gets written and saved back to the `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"`todo clean the house`","lastModifiedDate":"2022-02-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"A new task of type `ToDo` will be added to the existing task list with the specified ","lastModifiedDate":"2022-02-19"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"task description. The new `ToDo` task added will be displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":95,"author":{"gitId":"charmainehly"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-19"},{"lineNumber":96,"author":{"gitId":"charmainehly"},"content":"[T][] clean the house","lastModifiedDate":"2022-02-19"},{"lineNumber":97,"author":{"gitId":"charmainehly"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2022-02-19"},{"lineNumber":98,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":99,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":100,"author":{"gitId":"charmainehly"},"content":"### `event [event_description] /at [event_date DD-MM-YYYY]` - Adds a task of type Event","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":102,"author":{"gitId":"charmainehly"},"content":"Adds a new `Event` task with the specified task description and date to the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":103,"author":{"gitId":"charmainehly"},"content":"The modified task list gets written and saved back to the `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":104,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":105,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":106,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":107,"author":{"gitId":"charmainehly"},"content":"`event go to movie /at 21-02-2022`","lastModifiedDate":"2022-02-19"},{"lineNumber":108,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":109,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":110,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":111,"author":{"gitId":"charmainehly"},"content":"A new task of type `Event` will be added to the existing task list with the ","lastModifiedDate":"2022-02-19"},{"lineNumber":112,"author":{"gitId":"charmainehly"},"content":"specified task description and date. The new `Event` task added will be displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":113,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":114,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":115,"author":{"gitId":"charmainehly"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-19"},{"lineNumber":116,"author":{"gitId":"charmainehly"},"content":"[E][] go to movie (at: Feb 21 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":117,"author":{"gitId":"charmainehly"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-19"},{"lineNumber":118,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":119,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":120,"author":{"gitId":"charmainehly"},"content":"### `deadline [deadline_description] /by [deadline_date  DD-MM-YYYY]` - Adds a task of type Deadline","lastModifiedDate":"2022-02-21"},{"lineNumber":121,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":122,"author":{"gitId":"charmainehly"},"content":"Adds a new `Deadline` task with the specified task description and date to the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":123,"author":{"gitId":"charmainehly"},"content":"The modified task list gets written and saved back to the `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":124,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":125,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":126,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":127,"author":{"gitId":"charmainehly"},"content":"`deadline finish homework /by 20-02-2022`","lastModifiedDate":"2022-02-19"},{"lineNumber":128,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":129,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":130,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":131,"author":{"gitId":"charmainehly"},"content":"A new task of type `Deadline` will be added to the existing task list with the","lastModifiedDate":"2022-02-19"},{"lineNumber":132,"author":{"gitId":"charmainehly"},"content":"specified task description and date. The new `Deadline` task added will be displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":133,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":134,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":135,"author":{"gitId":"charmainehly"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-19"},{"lineNumber":136,"author":{"gitId":"charmainehly"},"content":"[D][] finish homework (by: Feb 20 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":137,"author":{"gitId":"charmainehly"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2022-02-19"},{"lineNumber":138,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":139,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":140,"author":{"gitId":"charmainehly"},"content":"### `delete [taskId]` - Delete task of specified taskId","lastModifiedDate":"2022-02-19"},{"lineNumber":141,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":142,"author":{"gitId":"charmainehly"},"content":"Deletes an existing task at index `taskId - 1` from the existing task list.","lastModifiedDate":"2022-02-19"},{"lineNumber":143,"author":{"gitId":"charmainehly"},"content":"The task is also deleted from the `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":144,"author":{"gitId":"charmainehly"},"content":"The modified task list gets written and saved back to the `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":145,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":146,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":147,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":148,"author":{"gitId":"charmainehly"},"content":"`delete 3`","lastModifiedDate":"2022-02-19"},{"lineNumber":149,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":150,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":151,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":152,"author":{"gitId":"charmainehly"},"content":"3rd task in the task list that is deleted will be displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":153,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":154,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":155,"author":{"gitId":"charmainehly"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2022-02-19"},{"lineNumber":156,"author":{"gitId":"charmainehly"},"content":"[D][] do homework (by: Feb 20 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":157,"author":{"gitId":"charmainehly"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-19"},{"lineNumber":158,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":159,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":160,"author":{"gitId":"charmainehly"},"content":"### `list` - List all the existing tasks in the task list","lastModifiedDate":"2022-02-19"},{"lineNumber":161,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":162,"author":{"gitId":"charmainehly"},"content":"Lists out all the existing tasks.","lastModifiedDate":"2022-02-19"},{"lineNumber":163,"author":{"gitId":"charmainehly"},"content":"No modification is made to `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":164,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":165,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":166,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":167,"author":{"gitId":"charmainehly"},"content":"`list`","lastModifiedDate":"2022-02-19"},{"lineNumber":168,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":169,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":170,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":171,"author":{"gitId":"charmainehly"},"content":"All existing tasks will be returned and displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":172,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":173,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":174,"author":{"gitId":"charmainehly"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-02-19"},{"lineNumber":175,"author":{"gitId":"charmainehly"},"content":"1. [T][] clean the house","lastModifiedDate":"2022-02-19"},{"lineNumber":176,"author":{"gitId":"charmainehly"},"content":"2. [E][] go to movie (at: Feb 21 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":177,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":178,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":179,"author":{"gitId":"charmainehly"},"content":"### `mark [taskId]` - Mark the task with taskId as done","lastModifiedDate":"2022-02-19"},{"lineNumber":180,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":181,"author":{"gitId":"charmainehly"},"content":"Marks the task at index `taskId -1` as done (i.e. `[]` --\u003e `[X]`).","lastModifiedDate":"2022-02-19"},{"lineNumber":182,"author":{"gitId":"charmainehly"},"content":"This change is written to and saved in the `txtHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":183,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":184,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":185,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":186,"author":{"gitId":"charmainehly"},"content":"`mark 2`","lastModifiedDate":"2022-02-19"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":190,"author":{"gitId":"charmainehly"},"content":"The task that has been marked as done is returned and displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":193,"author":{"gitId":"charmainehly"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2022-02-19"},{"lineNumber":194,"author":{"gitId":"charmainehly"},"content":"[E][X] go to movie (at: Feb 21 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":195,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":196,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":197,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":198,"author":{"gitId":"charmainehly"},"content":"### `unmark [taskId]` - Unmark the task with taskId as undone","lastModifiedDate":"2022-02-19"},{"lineNumber":199,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":200,"author":{"gitId":"charmainehly"},"content":"Unmarks the task at index `taskId -1` as undone (i.e. `[X] --\u003e []`).","lastModifiedDate":"2022-02-19"},{"lineNumber":201,"author":{"gitId":"charmainehly"},"content":"This change is written to and saved in the `txtHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":202,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":203,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":204,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":205,"author":{"gitId":"charmainehly"},"content":"`unmark 2`","lastModifiedDate":"2022-02-19"},{"lineNumber":206,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":207,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":208,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":209,"author":{"gitId":"charmainehly"},"content":"The task that has been marked as undone is returned and displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":210,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":211,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":212,"author":{"gitId":"charmainehly"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2022-02-19"},{"lineNumber":213,"author":{"gitId":"charmainehly"},"content":"[E][] go to movie (at: Feb 21 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":214,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":215,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":216,"author":{"gitId":"charmainehly"},"content":"### `find [keyword(s)]` - Find tasks that contain the specified keyword","lastModifiedDate":"2022-02-19"},{"lineNumber":217,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":218,"author":{"gitId":"charmainehly"},"content":"Finds the tasks that contain the specified keyword(s) in the returned String","lastModifiedDate":"2022-02-19"},{"lineNumber":219,"author":{"gitId":"charmainehly"},"content":"from their `toString()` method.","lastModifiedDate":"2022-02-19"},{"lineNumber":220,"author":{"gitId":"charmainehly"},"content":"The list of tasks found is returned and displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":221,"author":{"gitId":"charmainehly"},"content":"No modification is made to `taskHistory.txt` file.","lastModifiedDate":"2022-02-19"},{"lineNumber":222,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":223,"author":{"gitId":"charmainehly"},"content":"Example of usage:","lastModifiedDate":"2022-02-19"},{"lineNumber":224,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":225,"author":{"gitId":"charmainehly"},"content":"`find at: Feb 21`","lastModifiedDate":"2022-02-19"},{"lineNumber":226,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":227,"author":{"gitId":"charmainehly"},"content":"Expected outcome:","lastModifiedDate":"2022-02-19"},{"lineNumber":228,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":229,"author":{"gitId":"charmainehly"},"content":"The task that has been marked as undone is returned and displayed.","lastModifiedDate":"2022-02-19"},{"lineNumber":230,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":231,"author":{"gitId":"charmainehly"},"content":"**NOTE:** The index in the returned list may not be the task ID for each of the listed tasks.","lastModifiedDate":"2022-02-19"},{"lineNumber":232,"author":{"gitId":"charmainehly"},"content":"Use `List` command to display full list to reference task IDs.","lastModifiedDate":"2022-02-19"},{"lineNumber":233,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":234,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":235,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":236,"author":{"gitId":"charmainehly"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2022-02-19"},{"lineNumber":237,"author":{"gitId":"charmainehly"},"content":"1. [E][] go to movie (at: Feb 21 2022)","lastModifiedDate":"2022-02-19"},{"lineNumber":238,"author":{"gitId":"charmainehly"},"content":"```","lastModifiedDate":"2022-02-19"},{"lineNumber":239,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":240,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":241,"author":{"gitId":"charmainehly"},"content":"## Image References","lastModifiedDate":"2022-02-19"},{"lineNumber":242,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":243,"author":{"gitId":"charmainehly"},"content":"Images used in this application are from the following external links:","lastModifiedDate":"2022-02-19"},{"lineNumber":244,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":245,"author":{"gitId":"charmainehly"},"content":"- [Calcifer Image](https://www.pngitem.com/middle/hbhmwhh_calcifer-hd-png-download/)","lastModifiedDate":"2022-02-19"},{"lineNumber":246,"author":{"gitId":"charmainehly"},"content":"- [User Image](https://ghibli.fandom.com/wiki/Markl)","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"charmainehly":214,"-":32}},{"path":"src/main/java/seedu/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Deadline;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":" * Adds task of type Deadline to task list based on details provided by user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    private final Deadline deadlineTask;","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    public AddDeadlineCommand(String deadlineDetails) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"        assert deadlineDetails !\u003d null : \"AddDeadlineCommand-\u003eAddDeadlineCommand: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"                + \"Deadline details cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"        assert deadlineDetails.length() \u003e 0 : \"AddDeadlineCommand-\u003eAddDeadlineCommand: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"                + \"Deadline details cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"            String description \u003d deadlineDetails.split(\" /by \")[0];","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"            String dateTime \u003d deadlineDetails.split(\" /by \")[1];","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"            this.deadlineTask \u003d new Deadline(description, dateTime);","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your deadline details is in the wrong format, please use: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"                    + \"\\n [deadline description] /by [DD-MM-YYYY]\");","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your deadline date is in the wrong format, please use: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"                    + \"\\n [DD-MM-YYYY]\");","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     * Executes the add command to add a new Deadline task to the task list and write","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     * the modified task list back to the storage.","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * @return Display message if the task has been added to the list successfully.","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException  If task list cannot be written back to storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"AddDeadlineCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"AddDeadlineCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"        taskList.add(deadlineTask);","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"            storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + deadlineTask.toString()","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"charmainehly":59}},{"path":"src/main/java/seedu/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Event;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":" * Adds task of type Event to task list based on details provided by user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":" * Checks for any event clashes before adding event task to task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    private final Event eventTask;","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    public AddEventCommand(String eventDetails) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        assert eventDetails !\u003d null : \"AddEventCommand-\u003eAddEventCommand: Event details cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"        assert eventDetails.length() \u003e 0 : \"AddEventCommand-\u003eAddEventCommand: Event details cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"            String description \u003d eventDetails.split(\" /at \")[0];","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"            String dateTime \u003d eventDetails.split(\" /at \")[1];","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"            this.eventTask \u003d new Event(description, dateTime);","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your event details is in the wrong format, please use: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"                    + \"\\n [event description] /at [DD-MM-YYYY]\");","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your event date is in the wrong format, please use: \"","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"                    + \"\\n [DD-MM-YYYY]\");","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     * Executes the add command to add a new Event task to the task list and write","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     * the modified task list back to the storage.","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * @return Display message if the task has been added to the list successfully or if there are event clashes.","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException  If task list cannot be written back to storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"AddEventCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"AddEventCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        if (!taskList.findEventClashes(eventTask.getDate())) {","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"            taskList.add(eventTask);","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"            try {","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"                storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"                throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"            return \"Got it. I\u0027ve added this task:\\n\" + eventTask","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"                    + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"        } else {","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"            return \"Sorry, the event you are trying to add \\n clashes with an existing event task :(\";","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"charmainehly":62}},{"path":"src/main/java/seedu/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import seedu.task.ToDo;","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" * Adds task of type ToDo to task list based on details provided by user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    private final ToDo toDoTask;","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    public AddToDoCommand(String taskDetails) {","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        assert taskDetails !\u003d null : \"AddToDoCommand-\u003eAddToDoCommand: To do details cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"        assert taskDetails.length() \u003e 0 : \"AddToDoCommand-\u003eAddToDoCommand: To do details cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"        this.toDoTask \u003d new ToDo(taskDetails);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     * Executes the add command to add a new ToDo task to the task list and write","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * the modified task list back to the storage.","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * @return Display message if the task has been added to the list successfully.","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException  If task list cannot be written back to storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"AddToDoCommand-\u003erun: Tasks list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"AddToDoCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        taskList.add(toDoTask);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"            storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + toDoTask.toString()","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"charmainehly":46}},{"path":"src/main/java/seedu/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Command class with run method to be implemented.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"     * Executes the command.","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    public abstract String run(TaskList tasksList, Storage storage) throws DukeException;","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":15}},{"path":"src/main/java/seedu/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * Deletes task from task list based on provided task ID.","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private final int taskId;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    public DeleteTaskCommand(String taskId) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"        assert taskId !\u003d null : \"DeleteTaskCommand-\u003eDeleteTaskCommand: Task ID cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        assert taskId.length() \u003e 0 : \"DeleteTaskCommand-\u003eDeleteTaskCommand: Task ID cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"            this.taskId \u003d Integer.parseInt(taskId);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is invalid, please try again!\");","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * Executes the delete command and writes the modified task list back to storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @return Display message if the task has been deleted from the list successfully.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException  If task list cannot be written back to storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"DeleteTaskCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"DeleteTaskCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"        String result \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"            result +\u003d taskList.getTasks(taskId - 1).toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"            taskList.delete(taskId - 1);","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"            result +\u003d \"\\nNow you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"            storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is not valid, please try again! :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"        return result;","lastModifiedDate":"2022-02-09"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":53}},{"path":"src/main/java/seedu/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Displays exit message to user when run.","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    public ExitCommand() {","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     * Executes the exit command to return a goodbye message.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Checks that task list and storage passed in are still valid not null.","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @return Goodbye message to the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"ExitCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"ExitCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        return \"Bye. See you later!\";","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":28}},{"path":"src/main/java/seedu/command/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Finds and displays tasks containing the keyword provided by the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    private final String keyword;","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    public FindTasksCommand(String keyword) {","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"        assert keyword !\u003d null : \"FindTasksCommand-\u003eFindTasksCommand: Keyword cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"        assert keyword.length() \u003e 0 : \"FindTasksCommand-\u003eFindTasksCommand: Keyword cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * Executes the find tasks command to find all tasks containing the given keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     * Checks that the task list and storage passed in are valid not null.","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     * @return List of tasks that have been found containing the keyword (if any).","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException If task list of found tasks to be returned and displayed is not created successfully.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"FindTasksCommand-\u003erun: Tasks list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"FindTasksCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"        return \"Here are the matching tasks in your list:\\n\" + taskList.findTasks(keyword).toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":35}},{"path":"src/main/java/seedu/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Retrieves and lists all tasks in existing task list for user.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    public ListTasksCommand() {","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Executes the list tasks command to display all tasks in existing task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * Checks that the task list and storage passed in are valid not null.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * @return List of all tasks in existing task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"ListTasksCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"ListTasksCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"        return \"Here are the tasks in your list:\\n\" + taskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":29}},{"path":"src/main/java/seedu/command/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * Retrieves the task with the stated task ID to mark it as done (i.e. [X]).","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"public class MarkTaskCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private final int taskId;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    public MarkTaskCommand(String taskId) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"        assert taskId !\u003d null : \"MarkTaskCommand-\u003eMarkTaskCommand: Task ID cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        assert taskId.length() \u003e 0 : \"MarkTaskCommand-\u003eMarkTaskCommand: Task ID cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"            this.taskId \u003d Integer.parseInt(taskId);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is invalid, please try again!\");","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * Executes the mark task command to mark the task from the task list as done.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Writes the modified task list back to the storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @return The task that has been marked as done if successfully run.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"MarkTaskCommand-\u003erun: Task list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"MarkTaskCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-09"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"            taskList.getTasks(taskId - 1).markDone();","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"            storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is not valid, please try again! :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.getTasks(taskId - 1).toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":49}},{"path":"src/main/java/seedu/command/UnmarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * Retrieves the task with the stated task ID to mark it as undone (i.e. []).","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"public class UnmarkTaskCommand extends Command {","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private final int taskId;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    public UnmarkTaskCommand(String taskId) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"        assert taskId !\u003d null : \"UnmarkTaskCommand-\u003eUnmarkTaskCommand: Task ID cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        assert taskId.length() \u003e 0 : \"UnmarkTaskCommand-\u003eUnmarkTaskCommand: Task ID cannot be empty.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"            this.taskId \u003d Integer.parseInt(taskId);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is invalid, please try again!\");","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * Executes the unmark task command to unmark the task from the task list as undone.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Writes the modified task list back to the storage location.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @return The task that has been marked as undone if successfully run.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"UnmarkTaskCommand-\u003erun: Tasks list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"UnmarkTaskCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-09"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"            taskList.getTasks(taskId - 1).markUndone();","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"            storage.write(taskList.getTaskList());","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Something went wrong when I tried to write your task list back to storage :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"Sorry your task ID is not valid, please try again! :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + taskList.getTasks(taskId - 1).toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":49}},{"path":"src/main/java/seedu/command/WelcomeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.command;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.TaskList;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Displays welcome message to user when run.","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"public class WelcomeCommand extends Command {","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    public WelcomeCommand() {","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     * Executes the welcome command to return a welcome message.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Checks that task list and storage passed in are still valid not null.","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param storage Storage object to write tasks back to.","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @return Welcome message to the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public String run(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"WelcomeCommand-\u003erun: Tasks list cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        assert storage !\u003d null : \"WelcomeCommand-\u003erun: Storage cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        return \"Hello I\u0027m Calcifer.\\n What can I help you with today?\\n\";","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"charmainehly":28}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.command.Command;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Stores private instances of Storage and TaskList objects.","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Contains methods to instantiate the object instances and run the command inputs.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Handles the result from the parsed commands to print out relevant results back to the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"public class Duke {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    private final String FILE_PATH \u003d \"taskHistory.txt\";","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * Instantiates the Storage and TaskList objects.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     * Stores the tasks loaded into the TaskList object and creates a new TaskList object otherwise.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    public Duke() {","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"        storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * Calls Parser class methods to parse in the user inputs to create Command subclass","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * objects in order to execute and run the given command.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     * @param input User input entered.","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     * @return String result from the run command.","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"        assert input !\u003d null : \"Duke-\u003egetResponse: Input string cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-09"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"            Command command \u003d new Parser(input).getCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"            return command.run(tasks, storage);","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":47}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import seedu.command.AddDeadlineCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import seedu.command.AddEventCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import seedu.command.AddToDoCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import seedu.command.Command;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.command.DeleteTaskCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import seedu.command.ExitCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import seedu.command.FindTasksCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"import seedu.command.ListTasksCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"import seedu.command.MarkTaskCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"import seedu.command.UnmarkTaskCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"import seedu.command.WelcomeCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":" * Contains methods to parse user input to be understood based on the type of command made by user","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":" * and create new Command subclass object instances accordingly.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"public class Parser {","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    private final String inputCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    public Parser(String inputCommand) {","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        assert inputCommand !\u003d null : \"Parser-\u003eParser: Input command string cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        this.inputCommand \u003d inputCommand.toLowerCase();","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input to return the new command object created with the command details (if","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * applicable).","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * @return Returns the new command object created based on the command type determined.","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException if command action is not recognisable.","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"    public Command getCommand() throws DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        String commandAction \u003d this.getCommandAction();","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"        switch (commandAction) {","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"        case \"hi\":","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"            return new WelcomeCommand();","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"        case \"list\":","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"            return new ListTasksCommand();","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"            return new AddToDoCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        case \"event\":","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"            return new AddEventCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"            return new AddDeadlineCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"            return new MarkTaskCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"            return new UnmarkTaskCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"            return new DeleteTaskCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"        case \"find\":","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"            return new FindTasksCommand(getCommandDetails());","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2022-02-17"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command to retrieve the command action.","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"     * @return A string of the command action.","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"    public String getCommandAction() {","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"        return inputCommand.split(\" \", 2)[0];","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command to retrieve the details (if applicable).","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"     * @return A String of the command details.","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException If no details are provided where needed.","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"    public String getCommandDetails() throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"            String commandDetails \u003d inputCommand.split(\" \", 2)[1];","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"            if (commandDetails.length() \u003d\u003d 0) {","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"                throw new DukeException(\"You did not provide any details for the command :( \\n Please try again!\");","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"            } else {","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"                return commandDetails;","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"charmainehly"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":89,"author":{"gitId":"charmainehly"},"content":"            throw new DukeException(\"You did not provide any details for the command :( \\n Please try again!\");","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":92}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.File;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Task;","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":" * Contains the file path for a storage object.","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":" * Provides methods to load and write the task list from and to the file located in the file path respectively.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"public class Storage {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    private final String filePath;","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    private File f;","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"    private Scanner s;","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     * Stores the file path and creates a new file object.","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"        assert filePath !\u003d null : \"Storage-\u003eStorage: File path string cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"        this.f \u003d new File(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * Loads the task history from the file stored at the filepath (if any),","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * otherwise, creates a new empty file at the filepath.","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     * @return Returns an arraylist containing each line (task) from the file as a separate string.","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    public ArrayList\u003cString\u003e load() {","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"        ArrayList\u003cString\u003e tasksRead \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"            File taskFile \u003d new File(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"            if (!taskFile.exists()) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"                taskFile.createNewFile();","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"            this.s \u003d new Scanner(f);","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"                tasksRead.add(s.nextLine());","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"        return tasksRead;","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"     * Writes the updated task list to the file stored at the file path.","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"     * @param textToWrite Updated task list to be written to the file stored at the file path.","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"     * @throws IOException If write is not successfully executed.","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"    public void write(ArrayList\u003cTask\u003e textToWrite) throws IOException {","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"        assert textToWrite !\u003d null : \"Storage-\u003ewrite: Text to be written to file cannot be null.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"        for (Task t : textToWrite) {","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"            fw.write(t.toWrite() + System.lineSeparator());","lastModifiedDate":"2022-02-18"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"        fw.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":74}},{"path":"src/main/java/seedu/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import seedu.exception.DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Deadline;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Event;","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Task;","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"import seedu.task.ToDo;","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":" * Contains the current task list at any point of time when the chatbot is running.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":" * Provides methods to modify the task list (i.e. add, delete) and retrieve task","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":" * information (i.e. size of the task list).","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"public class TaskList {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a TaskList object based on the current","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     * existing list of tasks passed in (if not empty).","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current lists of tasks, each as a string in the array list.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException If error is met while creating the task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    public TaskList(ArrayList\u003cString\u003e taskList) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"        assert taskList !\u003d null : \"TaskList-\u003eTaskList: Tasks list cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"        for (String task : taskList) {","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"            String taskType \u003d task.substring(0, 7);","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"            boolean isTaskDone \u003d false;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"            String dateTime;","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"            if (taskType.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"                isTaskDone \u003d true;","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"            switch (taskType.charAt(1)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"                String taskTodo \u003d task.substring(7);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new ToDo(taskTodo, isTaskDone));","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"                String[] taskEvent \u003d task.substring(7).split(\" /at \");","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"                dateTime \u003d LocalDate.parse(taskEvent[1], DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"                        .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new Event(taskEvent[0], isTaskDone, dateTime));","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"                String[] taskDeadline \u003d task.substring(7).split(\" /by \");","lastModifiedDate":"2022-02-19"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"                dateTime \u003d LocalDate.parse(taskDeadline[1], DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"                        .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new Deadline(taskDeadline[0], isTaskDone, dateTime));","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"            default:","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"                throw new DukeException(\"I was not able to create your task list :(\");","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a TaskList object with no existing tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"     * Adds a new task to the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"     * @param t New task to be added.","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"    public void add(Task t) {","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"        assert t !\u003d null : \"TaskList-\u003eadd: Task to be added cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"        this.taskList.add(t);","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"     * Deletes an existing task from the task list based on the task ID.","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"     * @param taskId Task ID to be deleted.","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"    public void delete(int taskId) {","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"        taskList.remove(taskId);","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"charmainehly"},"content":"     * Gets the number of tasks in the current existing list.","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"     * @return Number of tasks in the list as an integer.","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"charmainehly"},"content":"    public int size() {","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"charmainehly"},"content":"        return taskList.size();","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":96,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"charmainehly"},"content":"     * Gets and returns the current existing tasks list.","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"charmainehly"},"content":"     * @return Task list as an array list of Task objects.","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"charmainehly"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"charmainehly"},"content":"        return taskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"charmainehly"},"content":"     * Gets a specific task in the current existing list based on the index.","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"charmainehly"},"content":"     * @param taskId Task ID of task to be retrieved.","lastModifiedDate":"2022-02-21"},{"lineNumber":110,"author":{"gitId":"charmainehly"},"content":"     * @return Specific task object in the task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":111,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"charmainehly"},"content":"    public Task getTasks(int taskId) {","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"charmainehly"},"content":"        return taskList.get(taskId);","lastModifiedDate":"2022-02-02"},{"lineNumber":114,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":116,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"charmainehly"},"content":"     * Finds and returns tasks containing the specified keyword as a new task list object.","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"charmainehly"},"content":"     * @param keyword Keyword to be found in the tasks\u0027 descriptions.","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"charmainehly"},"content":"     * @return A new task list object with tasks containing the specified keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":121,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException If error is met while creating the TaskList object to be returned.","lastModifiedDate":"2022-02-21"},{"lineNumber":122,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"charmainehly"},"content":"    public TaskList findTasks(String keyword) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"charmainehly"},"content":"        assert keyword !\u003d null : \"TaskList-\u003efindTasks: Keyword to search for tasks cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":125,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":126,"author":{"gitId":"charmainehly"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":127,"author":{"gitId":"charmainehly"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"charmainehly"},"content":"            if (t.toString().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"charmainehly"},"content":"                result.add(t.toWrite());","lastModifiedDate":"2022-02-19"},{"lineNumber":130,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"charmainehly"},"content":"        return new TaskList(result);","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":136,"author":{"gitId":"charmainehly"},"content":"     * Finds if there are any event clashes with the provided date.","lastModifiedDate":"2022-02-21"},{"lineNumber":137,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":138,"author":{"gitId":"charmainehly"},"content":"     * @param dateTime Date which we want to search for any clashes in the task list.","lastModifiedDate":"2022-02-21"},{"lineNumber":139,"author":{"gitId":"charmainehly"},"content":"     * @return True if there are other event tasks in the tasks list that clashes in date, false otherwise.","lastModifiedDate":"2022-02-18"},{"lineNumber":140,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":141,"author":{"gitId":"charmainehly"},"content":"    public boolean findEventClashes(String dateTime) {","lastModifiedDate":"2022-02-18"},{"lineNumber":142,"author":{"gitId":"charmainehly"},"content":"        assert dateTime !\u003d null : \"TaskList-\u003efindClashes: Date to search for task clashes cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":143,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":144,"author":{"gitId":"charmainehly"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2022-02-18"},{"lineNumber":145,"author":{"gitId":"charmainehly"},"content":"            if (t instanceof Event) {","lastModifiedDate":"2022-02-18"},{"lineNumber":146,"author":{"gitId":"charmainehly"},"content":"                String eventDate \u003d ((Event) t).getDate();","lastModifiedDate":"2022-02-18"},{"lineNumber":147,"author":{"gitId":"charmainehly"},"content":"                if (eventDate.contains(dateTime.toLowerCase())) {","lastModifiedDate":"2022-02-18"},{"lineNumber":148,"author":{"gitId":"charmainehly"},"content":"                    return true;","lastModifiedDate":"2022-02-18"},{"lineNumber":149,"author":{"gitId":"charmainehly"},"content":"                }","lastModifiedDate":"2022-02-18"},{"lineNumber":150,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":151,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":152,"author":{"gitId":"charmainehly"},"content":"        return false;","lastModifiedDate":"2022-02-18"},{"lineNumber":153,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":154,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":155,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the tasks line by line.","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"charmainehly"},"content":"     * @return String of current tasks in the tasks list separated by line breaks.","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":161,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":162,"author":{"gitId":"charmainehly"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-01-29"},{"lineNumber":163,"author":{"gitId":"charmainehly"},"content":"        int count \u003d 1;","lastModifiedDate":"2022-01-29"},{"lineNumber":164,"author":{"gitId":"charmainehly"},"content":"        for (Task record : taskList) {","lastModifiedDate":"2022-02-02"},{"lineNumber":165,"author":{"gitId":"charmainehly"},"content":"            result +\u003d count + \". \" + record.toString() + \"\\n\";","lastModifiedDate":"2022-01-29"},{"lineNumber":166,"author":{"gitId":"charmainehly"},"content":"            count++;","lastModifiedDate":"2022-01-29"},{"lineNumber":167,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":168,"author":{"gitId":"charmainehly"},"content":"        return result;","lastModifiedDate":"2022-01-29"},{"lineNumber":169,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":170,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":170}},{"path":"src/main/java/seedu/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.exception;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Java Exception class.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Creates DukeException object when error is caught to print out error message.","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    public DukeException(String error) {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"        super(error);","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":11}},{"path":"src/main/java/seedu/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.task;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Stores the description and deadline (date) of a Deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print deadline details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    protected LocalDate by;","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param by Date by which the deadline task must be completed by.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the deadline task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @param by Date by which the deadline task must be completed by.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     * Formats the description of the deadline task to be written to a file.","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * @return String format of deadline description.","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    public String toWrite() {","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        return \"[D]\" + super.toString() + \" /by \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the deadline task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":58}},{"path":"src/main/java/seedu/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.task;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Stores the description and date of an Event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print event details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    protected LocalDate at;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of an event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @param at Date which the event task is to be done.","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        this.at \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of an event object.","lastModifiedDate":"2022-02-18"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the event task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * @param at Date which the event task is to be done.","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    public Event(String description, boolean isDone, String at) {","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        this.at \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * Retrieves the \u0027at\u0027 field of the event object in a specific format.","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     * @return Date of the event in the format dd-MM-yyyy.","lastModifiedDate":"2022-02-18"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"    public String getDate() {","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        return at.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"     * Formats the description of the event task to be written to a file.","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"     * @return String format of event description.","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"    public String toWrite() {","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"        return \"[E]\" + super.toString() + \" /at \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-19"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the event task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2022-02-18"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":69}},{"path":"src/main/java/seedu/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.task;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Contains the basic fields for a generic task.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Provides methods to retrieve the basic details of a task object and","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * to update the boolean value for whether a task has been done.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"public class Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    protected String description;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        assert description !\u003d null : \"ToDo-\u003eToDo: Description for To Do task cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"        assert description !\u003d null : \"ToDo-\u003eToDo: Description for To Do task cannot be null.\";","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * @return Returns string containing status of whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        // mark done task with X","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"     * Gets the task description stored.","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"     * @return Returns string containing description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"        return description;","lastModifiedDate":"2022-01-20"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"     * Modifies the task status as done.","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"    public void markDone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-20"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"     * Modifies the task status as undone.","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"    public void markUndone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"     * Formats the description of the task to be written to a file.","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"     * @return String format of task description.","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"    public String toWrite() {","lastModifiedDate":"2022-02-18"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"        String marked \u003d \"[\" + (this.getStatusIcon()) + \"]\";","lastModifiedDate":"2022-02-18"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"        String output \u003d marked + \" \" + this.getDescription();","lastModifiedDate":"2022-02-18"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"        return output;","lastModifiedDate":"2022-02-18"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":90,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"        String marked \u003d \"[\" + (this.getStatusIcon()) + \"]\";","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"        String output \u003d marked + \" \" + this.getDescription();","lastModifiedDate":"2022-01-20"},{"lineNumber":93,"author":{"gitId":"charmainehly"},"content":"        return output;","lastModifiedDate":"2022-01-20"},{"lineNumber":94,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":95,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":95}},{"path":"src/main/java/seedu/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.task;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Stores the description of a ToDo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print event details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the todo task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * Formats the description of the todo task to be written to a file.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     * @return String format of todo description.","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"    public String toWrite() {","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the todo task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":50}},{"path":"src/main/java/seedu/view/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.view;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"        setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    private void flip() {","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"        db.flip();","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"        return db;","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":63}},{"path":"src/main/java/seedu/view/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.view;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"public class Launcher {","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"     * Launches the Duke application.","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"     * @param args Serves as the inputs for launching.","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":17}},{"path":"src/main/java/seedu/view/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.view;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Duke;","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"            stage.setTitle(\"Calcifer\");","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"            stage.show();","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":34}},{"path":"src/main/java/seedu/view/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package seedu.view;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"import seedu.duke.Duke;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"    @FXML","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"        );","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":54}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"450.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.view.MainWindow\"\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"charmainehly":19}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Deadline;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[D][X] do this - by: Jan 01 2020\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new Deadline(\"do this\", true, \"01-01-2020\").toString());","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import seedu.task.Event;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class EventTest {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[E][X] attend this - at: Jan 01 2020\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new Event(\"attend this\", true, \"01-01-2020\").toString());","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import seedu.task.ToDo;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class ToDoTest {","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[T][X] do this thing\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new ToDo(\"do this thing\", true).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"taskHistory.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"[T][ ] clean the house","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"[T][ ] make breakfast","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"[D][X] finish home /by Feb 22 2022","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"[E][X] go to school /at Feb 23 2022","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"charmainehly":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"blah","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"blah blah","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"blah blah /by blah","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"todo wake up in the morning","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"event go to sleep - at: 01-01-2020","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"deadline find food - by: 01-01-2020","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"mark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"todo","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"event","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"deadline","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"unmark","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"mark","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"bye","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"if ! javac -cp ../src/main/java/duke/ -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"charmainehly":1,"-":37}}]
