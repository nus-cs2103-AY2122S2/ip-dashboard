[{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Stores the description and deadline (date) of a Deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print deadline details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    protected LocalDate by;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @param by Date by which the deadline task must be completed by.","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the deadline task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * @param by Date by which the deadline task must be completed by.","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the deadline task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific deadline object.","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        return \"[D]\" + super.toString() + \" - by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":50}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * Includes the Main driver class.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Stores public static instances of storage, task and ui objects.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Contains methods to run and instantiate the object instances.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Handles the result from the parsed commands to print out different","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * results back to the user.","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"public class Duke {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private static Storage storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"    private static TaskList tasks;","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     * Instantiates the ui, storage and tasklist objects.","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * Stores the tasks loaded into the tasklist object.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * @param filePath Indicates the path where the task history will be written to.","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"            //ui.showLoadingError();","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     * Shows the welcome line when Duke chat-bot starts running.","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     * Interacts with user inputs by calling getNextInput() from ui class.","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     * Calls Parser class methods to parse in the user inputs.","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     * Switches between cases based on the command passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     * Exits the running chat-bot when the \u0027bye\u0027 command is read from user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"    public void run() {","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"        ui.showWelcome();","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"        String nextInput \u003d ui.getNextInput();","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"        while (!nextInput.equals(\"bye\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"            String command \u003d Parser.getCommand(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"                switch (command) {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"                case \"list\":","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"                    System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"                    System.out.println(tasks.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"                case \"deadline\":","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"                        String[] task \u003d Parser.getDeadlineDetails(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"                        Deadline d \u003d new Deadline(task[0], task[1]);","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"                        tasks.add(d);","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException de) {","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + de.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(d);","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"                case \"todo\":","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"                        String task \u003d Parser.getTodoDetails(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"                        ToDo t \u003d new ToDo(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"                        tasks.add(t);","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException te) {","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + te.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(t);","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"                case \"event\":","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"                        String[] task \u003d Parser.getEventDetails(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"                        Event e \u003d new Event(task[0], task[1]);","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"charmainehly"},"content":"                        tasks.add(e);","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":95,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException ee) {","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + ee.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(e);","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"charmainehly"},"content":"                case \"mark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"You did not provide a task to mark.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":107,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":108,"author":{"gitId":"charmainehly"},"content":"                        int taskId \u003d Parser.getTaskId(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":109,"author":{"gitId":"charmainehly"},"content":"                        tasks.getTasks(taskId - 1).markDone();","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":111,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":113,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":114,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":116,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(tasks.getTasks(taskId - 1).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":118,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":119,"author":{"gitId":"charmainehly"},"content":"                case \"unmark\":","lastModifiedDate":"2022-01-29"},{"lineNumber":120,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":121,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"You did not provide a task to unmark.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":122,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":123,"author":{"gitId":"charmainehly"},"content":"                        int taskId \u003d Parser.getTaskId(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":124,"author":{"gitId":"charmainehly"},"content":"                        tasks.getTasks(taskId - 1).markUndone();","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":126,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":128,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":129,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":130,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":131,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(tasks.getTasks(taskId - 1).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":133,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":134,"author":{"gitId":"charmainehly"},"content":"                case \"delete\":","lastModifiedDate":"2022-01-29"},{"lineNumber":135,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-01-29"},{"lineNumber":136,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"You did not provide a task to delete.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":137,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":138,"author":{"gitId":"charmainehly"},"content":"                        int taskId \u003d Parser.getTaskId(nextInput);","lastModifiedDate":"2022-01-29"},{"lineNumber":139,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-01-29"},{"lineNumber":140,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(tasks.getTasks(taskId - 1).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":141,"author":{"gitId":"charmainehly"},"content":"                        tasks.delete(taskId - 1);","lastModifiedDate":"2022-01-29"},{"lineNumber":142,"author":{"gitId":"charmainehly"},"content":"                        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":143,"author":{"gitId":"charmainehly"},"content":"                            storage.write(tasks.getTaskList());","lastModifiedDate":"2022-02-02"},{"lineNumber":144,"author":{"gitId":"charmainehly"},"content":"                        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":145,"author":{"gitId":"charmainehly"},"content":"                            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":146,"author":{"gitId":"charmainehly"},"content":"                        }","lastModifiedDate":"2022-01-29"},{"lineNumber":147,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":148,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-01-29"},{"lineNumber":149,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-01-29"},{"lineNumber":150,"author":{"gitId":"charmainehly"},"content":"                case \"find\":","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"charmainehly"},"content":"                    if (Parser.getLength(nextInput) \u003d\u003d 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"charmainehly"},"content":"                        throw new DukeException(\"You did not provide a keyword to search.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":153,"author":{"gitId":"charmainehly"},"content":"                    } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"charmainehly"},"content":"                        String keyword \u003d Parser.getKeyword(nextInput);","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"charmainehly"},"content":"                        System.out.println(tasks.findTasks(keyword).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"charmainehly"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"charmainehly"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"charmainehly"},"content":"                default:","lastModifiedDate":"2022-01-29"},{"lineNumber":160,"author":{"gitId":"charmainehly"},"content":"                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-01-29"},{"lineNumber":161,"author":{"gitId":"charmainehly"},"content":"                }","lastModifiedDate":"2022-01-29"},{"lineNumber":162,"author":{"gitId":"charmainehly"},"content":"            } catch (DukeException error) {","lastModifiedDate":"2022-01-29"},{"lineNumber":163,"author":{"gitId":"charmainehly"},"content":"                System.out.println(\"OOPS!!! \" + error.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":164,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":165,"author":{"gitId":"charmainehly"},"content":"            nextInput \u003d ui.getNextInput();","lastModifiedDate":"2022-01-29"},{"lineNumber":166,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":167,"author":{"gitId":"charmainehly"},"content":"        ui.showExit();","lastModifiedDate":"2022-01-29"},{"lineNumber":168,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":169,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":170,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":171,"author":{"gitId":"charmainehly"},"content":"     * Main method calls chained methods Duke() and run() to initialise the chat-bot.","lastModifiedDate":"2022-02-02"},{"lineNumber":172,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":173,"author":{"gitId":"charmainehly"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-29"},{"lineNumber":174,"author":{"gitId":"charmainehly"},"content":"        new Duke(\"taskHistory.txt\").run();","lastModifiedDate":"2022-01-29"},{"lineNumber":175,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":176,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":176}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Java Exception class.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Creates DukeException object when error is caught to print out error message.","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    DukeException(String error) {","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        super(error);","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Stores the description and date of an Event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print event details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    protected LocalDate at;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of an event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @param at Date which the event task is to be done.","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        this.at \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the event task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * @param at Date which the event task is to be done.","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    public Event(String description, boolean isDone, String at) {","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"        this.at \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the event task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific event object.","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        return \"[E]\" + super.toString() + \" - at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":50}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Contains methods to parse user input to be understood based on the","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * type of command made by user.","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * Provides method to get the length (in terms of words separated by \" \")","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * of user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"public class Parser {","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input to return the first word to determine the type of command.","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     * @return Returns the first word which is the command type of user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    public static String getCommand(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"        String[] words \u003d nextInput.split(\" \", 2);","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        return words[0];","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input to return the number of words in the user input separated by \" \".","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     * @return Returns the number of words in the user input separated by \" \".","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    public static int getLength(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"        String[] words \u003d nextInput.split(\" \");","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"        return words.length;","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command for a deadline task to retrieve","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     * the description and date.","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     * @return Returns a String[] of the description and date for a deadline task.","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    public static String[] getDeadlineDetails(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        return nextInput.split(\" \", 2)[1].split(\" - by: \");","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command for a todo task to retrieve","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"     * the description.","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"     * @return Returns a String[] of the description for a todo task.","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"    public static String getTodoDetails(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"        return nextInput.split(\" \", 2)[1];","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command for an event task to retrieve","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"     * the description and date.","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"     * @return Returns a String[] of the description and date for an event task.","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"    public static String[] getEventDetails(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"        return nextInput.split(\" \", 2)[1].split(\" - at: \");","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command for marking or unmarking a task to retrieve the","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"     * task id required.","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"     * @return Returns an integer of the task id to be marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"    public static int getTaskId(String nextInput) {","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"        return Integer.valueOf(nextInput.split(\" \", 2)[1]);","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"     * Parses the user input command for finding tasks with a specific keyword to return","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"     * the search keyword.","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"     * @param nextInput Next line of user input read in by the scanner in main class.","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"     * @return Returns a string containing the keyword to be found.","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"    public static String getKeyword(String nextInput) {","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"        return nextInput.split(\" \", 2)[1];","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":87}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.io.File;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * Contains the file path for a storage object.","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" * Provides methods to load and write the task list from and to","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":" * the file located in the file path respectively.","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"public class Storage {","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    private String filePath;","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"    private File f;","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    private Scanner s;","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * Stores the file path and creates a new file object.","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"        this.f \u003d new File(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     * Loads the task history from the file stored at the filepath (if any).","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"     * @return Returns an arraylist containing each line from the file as a separate string.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    public ArrayList\u003cString\u003e load() {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"        ArrayList\u003cString\u003e tasksRead \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"            File taskFile \u003d new File(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"            if (taskFile.exists()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"                this.s \u003d new Scanner(f);","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"                while (s.hasNext()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"                    tasksRead.add(s.nextLine());","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"                }","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"                taskFile.createNewFile();","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"                this.s \u003d new Scanner(f);","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"        return tasksRead;","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"     * Writes the updated task list the file stored at the file path (if any).","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"     * @param textToAdd Updated task list to be written to the file stored at the file path.","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"     * @throws IOException Throws exception for file writer object.","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"    public void write(ArrayList\u003cTask\u003e textToAdd) throws IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"        for (Task t : textToAdd) {","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"            fw.write(t.toString() + System.lineSeparator());","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"        fw.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":65}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Contains the basic fields for a generic task.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Provides methods to retrieve the basic details of a task object and","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * to update the boolean value for whether a task has been done.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"public class Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    protected String description;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     * @return Returns string containing status of whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"        // mark done task with X","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"     * Gets the task description stored.","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"     * @return Returns string containing description of the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"        return description;","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"     * Modifies the task status as done.","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"    public void markDone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"     * Modifies the task status as undone.","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"    public void markUndone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific task object.","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"        String marked \u003d \"[\" + (this.getStatusIcon()) + \"]\";","lastModifiedDate":"2022-01-20"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"        String output \u003d marked + \" \" + this.getDescription();","lastModifiedDate":"2022-01-20"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"        return output;","lastModifiedDate":"2022-01-20"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":79}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" * Contains the current tasks list at any point of time when the chat-bot is running.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":" * Provides methods to modify the tasks list (i.e. add, delete tasks) and retrieve","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":" * information (i.e. size of the tasks list).","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"public class TaskList {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a task list object based on the current","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     * existing list of tasks passed in (if not empty).","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"     * @param taskList Current lists of tasks, each as a string in the array list.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"     * @throws DukeException To catch any errors when creating the tasklist.","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    public TaskList(ArrayList\u003cString\u003e taskList) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"        for (String t : taskList) {","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"            String tType \u003d t.substring(0, 7);","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"            boolean tIsDone \u003d false;","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"            if (tType.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"                tIsDone \u003d true;","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"            switch (tType.charAt(1)) {","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"                String tTodo \u003d t.substring(7);","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new ToDo(tTodo, tIsDone));","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"                String[] tEvent \u003d t.substring(7).split(\" - at: \");","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new Event(tEvent[0], tIsDone,","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"                        LocalDate.parse(tEvent[1], DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"                                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"))));","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"                String[] tDeadline \u003d t.substring(7).split(\" - by: \");","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"                this.taskList.add(new Deadline(tDeadline[0], tIsDone,","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"                        LocalDate.parse(tDeadline[1], DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"                                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"))));","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a tasklist object with no existing tasks.","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"charmainehly"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"charmainehly"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"charmainehly"},"content":"     * Adds a new task to the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"charmainehly"},"content":"    public void add(Task t) {","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"charmainehly"},"content":"        this.taskList.add(t);","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"charmainehly"},"content":"     * Deletes an existing task from the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"charmainehly"},"content":"    public void delete(int taskId) {","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"charmainehly"},"content":"        taskList.remove(taskId);","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"charmainehly"},"content":"     * Gets the number of tasks in the current existing list.","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"charmainehly"},"content":"     * @return Number of tasks in the list as an integer.","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"charmainehly"},"content":"    public int size() {","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"charmainehly"},"content":"        return taskList.size();","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"charmainehly"},"content":"     * Gets and returns the current existing tasks list.","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"charmainehly"},"content":"     * @return Task list as an array list of task objects..","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"charmainehly"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"charmainehly"},"content":"        return taskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"charmainehly"},"content":"     * Gets a specific task in the current existing list based on the index.","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"charmainehly"},"content":"     * @return Specific task object in the tasks list.","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"charmainehly"},"content":"    public Task getTasks(int taskId) {","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"charmainehly"},"content":"        return taskList.get(taskId);","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"charmainehly"},"content":"     * Finds and returns tasks with the specified keyword as a new task list object.","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"charmainehly"},"content":"     * @param keyword Keyword to be found in the tasks\u0027 descriptions.","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"charmainehly"},"content":"     * @return Returns a new task list object with the specified keyword.","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"charmainehly"},"content":"    public TaskList findTasks(String keyword) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"charmainehly"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"charmainehly"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"charmainehly"},"content":"            if (t.toString().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"charmainehly"},"content":"                result.add(t.toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"charmainehly"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"charmainehly"},"content":"        return new TaskList(result);","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":114,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the tasks line by line.","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"charmainehly"},"content":"     * @return String of current tasks in the tasks list separated by line breaks.","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":120,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":121,"author":{"gitId":"charmainehly"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-01-29"},{"lineNumber":122,"author":{"gitId":"charmainehly"},"content":"        int count \u003d 1;","lastModifiedDate":"2022-01-29"},{"lineNumber":123,"author":{"gitId":"charmainehly"},"content":"        for (Task record : taskList) {","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"charmainehly"},"content":"            result +\u003d count + \". \" + record.toString() + \"\\n\";","lastModifiedDate":"2022-01-29"},{"lineNumber":125,"author":{"gitId":"charmainehly"},"content":"            count++;","lastModifiedDate":"2022-01-29"},{"lineNumber":126,"author":{"gitId":"charmainehly"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":127,"author":{"gitId":"charmainehly"},"content":"        return result;","lastModifiedDate":"2022-01-29"},{"lineNumber":128,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":129,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":129}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":" * Inherits from the Task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":" * Stores the description of a ToDo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * Provides to String method to print event details in specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone as false by default.","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"     * Creates an instance of a todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"     * Sets isDone based on the argument passed in.","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"     * @param isDone Boolean value of whether the todo task is marked or unmarked.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"        super(description, isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"     * Overrides toString() method to print the todo task in a specific format.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"     * Calls the toString() method of the inherited task class.","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"     * @return String to be printed in a specified format for the specific todo object.","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":41}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":" * Provides methods to interact with user interface and inputs of running chat-bot.","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":" * Contains methods to print out the welcome and exit lines, and to get the next user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"public class Ui {","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"    private Scanner userInput;","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    private String nextInput;","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"     * Creates new scanner object.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"    public Ui() {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"        this.userInput \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"charmainehly"},"content":"     * Prints out the welcome statement for the Duke chat-bot.","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"charmainehly"},"content":"    public void showWelcome() {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"charmainehly"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"charmainehly"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"charmainehly"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"charmainehly"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"charmainehly"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"charmainehly"},"content":"        System.out.println(\"Hello I\u0027m\\n\" + logo);","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"charmainehly"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"charmainehly"},"content":"     * Reads in the next line of user input to return.","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"charmainehly"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"charmainehly"},"content":"     * @return String containing the next line of user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"charmainehly"},"content":"    public String getNextInput() {","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"charmainehly"},"content":"         nextInput \u003d userInput.nextLine();","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"charmainehly"},"content":"         return nextInput;","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"charmainehly"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"charmainehly"},"content":"     * Prints out the exit statement for the Duke chat-bot.","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"charmainehly"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"charmainehly"},"content":"    public void showExit() {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"charmainehly"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"charmainehly":52}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import duke.Deadline;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[D][X] do this - by: Jan 01 2020\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new Deadline(\"do this\", true, \"01-01-2020\").toString());","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import duke.Event;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class EventTest {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[E][X] attend this - at: Jan 01 2020\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new Event(\"attend this\", true, \"01-01-2020\").toString());","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"import duke.ToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"public class ToDoTest {","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"    @Test","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"        assertEquals(\"[T][X] do this thing\",","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"                new ToDo(\"do this thing\", true).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"charmainehly":13}},{"path":"taskHistory.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"[E][ ] go to sleep - at: Jan 01 2020","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"[D][ ] find food - by: Jan 01 2020","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"[T][ ] wake up in the morning","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"[E][ ] go to sleep - at: Jan 01 2020","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"[D][ ] find food - by: Jan 01 2020","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"charmainehly":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"charmainehly"},"content":"blah","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"charmainehly"},"content":"blah blah","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"charmainehly"},"content":"blah blah /by blah","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"charmainehly"},"content":"todo wake up in the morning","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"charmainehly"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"charmainehly"},"content":"event go to sleep - at: 01-01-2020","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"charmainehly"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"charmainehly"},"content":"deadline find food - by: 01-01-2020","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"charmainehly"},"content":"mark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"charmainehly"},"content":"todo","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"charmainehly"},"content":"event","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"charmainehly"},"content":"deadline","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"charmainehly"},"content":"unmark","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"mark","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"charmainehly"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"charmainehly"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"charmainehly"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"charmainehly"},"content":"bye","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"charmainehly":21}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"charmainehly"},"content":"if ! javac -cp ../src/main/java/duke/ -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"charmainehly":1,"-":37}}]
