{"authorDailyContributionsMap":{"charmainehly":[{"date":"2022-01-20","commitResults":[{"hash":"32987e0a1e06e909e1d6444c2997cc818f444e80","messageTitle":"Level-1 v1.0","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":1}}},{"hash":"13e439b74d4d1510e7936d9685418d31f494b437","messageTitle":"Level-2 v1.0","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":2}}},{"hash":"93f176b2e5c5775a762ea737105094b2751b5cae","messageTitle":"Level-3 v1.0","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":55,"deletions":14}}},{"hash":"2d21953135215c91fc95bb9813e261c98701b747","messageTitle":"Level-4 v1.0 n A-TextUiTesting","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"txt":{"insertions":12,"deletions":0},"java":{"insertions":66,"deletions":4}}},{"hash":"8cd2bcee58b44641ed5f1bd8abd4dc683d77e9e6","messageTitle":"(add tag) A-TextUiTesting","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"e3f5e4cc09de1fe2dd8d487ca844e91f37734f55","messageTitle":"Level-5 v1.0","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"txt":{"insertions":5,"deletions":0},"java":{"insertions":76,"deletions":41}}},{"hash":"a5bd6b06957b12b5d26a0040fa6971f6084806dd","messageTitle":"Level-6 v1.0","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":0},"java":{"insertions":11,"deletions":0}}}]},{"date":"2022-01-27","commitResults":[{"hash":"b94d9a28c6a78e2418fad5e8586903181dd0340b","messageTitle":"CREATE: create level-7 save (v1)","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":48,"deletions":0}}},{"hash":"05e31cad87ccebee8f9f43b240fa92b87df51cf6","messageTitle":"CREATE: create level-8 dates and times (v1)","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":8}}},{"hash":"1113da57d27b7a50c3b75de77e2a928cbed42510","messageTitle":"UPDATE: add tags for Level-7 and Level-8","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2022-01-28","commitResults":[{"hash":"680e53b519efc8cc66c4bcffc893ba148c45f2ca","messageTitle":"UPDATE: add tags for Level-7 due to previous error","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}}]},{"date":"2022-01-29","commitResults":[{"hash":"d546e78928a10ebd7a8ee0a6618be148c0cfe045","messageTitle":"Extract Ui, Storage, Parser and TaskList classes","messageBody":"The current driver in the main method lumps everything that needs to\nbe done, there is no good OOP practice in place.\n\nLet\u0027s create separate classes to encapsulate the different methods that\nneed to be called.\n\nSeparating the different methods into the relevant classes help to make\nthe code more readable and will help with scalability.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":1},"java":{"insertions":388,"deletions":192}}}]},{"date":"2022-01-30","commitResults":[{"hash":"8dbf61de9aaf463583f31077cd2a980962b98d2d","messageTitle":"Add JUnit tests to test behaviour of toString()","messageBody":"Currently no JUnit tests to test for correct behaviour of methods.\n\nErrors in toString() methods can lead to the wrong output being printed.\n\nLet\u0027s add separate Test classes to check if toString() prints the\ncorrect output for a specific instance of the class object.\n","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":0}}}]},{"date":"2022-02-02","commitResults":[{"hash":"8a0d20be1d2e6ba53ed033f8363f6625af186dd5","messageTitle":"Modify accepted input conventions in Parser class","messageBody":"Lack of standard accepted user input causes inconsistent behaviour when\nuser enters different inputs.\n\nDifficult to troubleshoot errors when dealing with user inputs or catch\nerrors to throw new DukeException. Need to standardise what user input\nis accepted when adding Tasks for Deadline, Event and Todo so that\nexpected behaviour of Duke chatbot is more intuitive and standardised.\n\nLet\u0027s modify how the user input is parsed in by changing the\nString.split() method arguments. The description and date/time for\nDeadline and Event will be split by \" - by: \" and \" - at: \"\nrespectively. The date/time will be accepted in the format dd-MM-yyyy,\nand will be read from the local taskHistory.txt file in the format MMM\ndd yyyy.\n\nAdjusting the acceptable user input format will prevent special\ncharacters from affecting the behaviour of the String.split() method.\nStandardising how the description and date/time is separated will allow\nfor more intuitive and standardised use of the Duke chatbot.\n","fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":4},"java":{"insertions":22,"deletions":5},"sh":{"insertions":2,"deletions":2}}},{"hash":"55066121ca5de98aad1ce2b5c1fc543705343cc7","messageTitle":"Update the jar file built by IntelliJ","messageBody":"Modification to code in previous commit requires a new Jar file to be\nbuilt.\n\nLet\u0027s re-build a new Jar file with the main Duke class.\n","tags":["A-Jar"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0}}},{"hash":"e3d9909ca0377e153b92c71119993e0d82757a64","messageTitle":"Add JavaDoc comments to public methods and classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":252,"deletions":1}}},{"hash":"82482420bfe32029525a74e25f4dc8422265516b","messageTitle":"Modify naming to comply with coding standards","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":1},"java":{"insertions":31,"deletions":31}}},{"hash":"0d8b7a1696596f5cb9cdbe6b03bf2c91e5cace9a","messageTitle":"Create methods to find tasks with specific keyword","messageBody":"Current functionalities only allow printing of all tasks in the task list.\n\nUser may want to search and print only tasks containing a specific\nkeyword.\n\nLet\u0027s create a new method in the TaskList class to filter the original\ntask list, to return a new task list with only tasks containing the\nspecified keyword.\n","fileTypesAndContributionMap":{"java":{"insertions":45,"deletions":9}}}]},{"date":"2022-02-03","commitResults":[{"hash":"f436dd15d8124fc8b946839dc949e3e1fa5e41f4","messageTitle":"Add parent directory to duke package \u0027seedu.duke\u0027","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":13}}},{"hash":"586e2e49738e3c7d1a75cf38bdd640872c73c7b1","messageTitle":"Add dependencies in build.gradle for gui set up","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":0}}}]},{"date":"2022-02-08","commitResults":[{"hash":"e3edf659269f065e7d7040526e23333f52523438","messageTitle":"Set up basic functionality for GUI","messageBody":"Current set up only allowed CLI from the user, and System.out.println.\n\nUser may want to utilise a more user friendly and visual user interface.\n\nLet\u0027s create the GUI to take in user inputs, and print out a generic\n\u0027Hi\u0027 response.\n","fileTypesAndContributionMap":{"fxml":{"insertions":35,"deletions":0},"java":{"insertions":171,"deletions":13}}}]},{"date":"2022-02-09","commitResults":[{"hash":"b7238cda82bb557ba5aad353988c7f2faca573c5","messageTitle":"Fix GUI to be functional for all commands","messageBody":"Current functionalities for GUI only allow a generic fixed response \u0027hi\u0027\nto any user input.\n\nUser would need the GUI to be able to respond with relevant messages\nbased on the commands input by the user.\n\nLet\u0027s implement the run method of the Duke class to be able to return a\nstring of a specific format based on the command entered by the user. To\ndo this, we make the following main modifications:\n    1. Create a command package to store all the different command\n       classes.\n    2. Create individual classes for each command type to implement the\n       run() method to return a string of the required format - each of\n       these command classes inherits from the generic Command class.\n    3. Delete the Ui class which is no longer needed to interact with\n       the user interface.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"fxml":{"insertions":1,"deletions":1},"txt":{"insertions":3,"deletions":2},"java":{"insertions":272,"deletions":172}}}]},{"date":"2022-02-17","commitResults":[{"hash":"27cc10e93648a24f1495c6f31777b275164cb277","messageTitle":"Modify code abstraction to improve code quality","messageBody":"Duke class has a long getResponse() method which demonstrates poor code\nquality. The Command subclasses are not utilising proper\nimplementations of inherited abstract classes.\n\nPoor code quality and breach of coding standards can result in poor\ncode readability and also give rise to higher chance of errors.\n\nLet\u0027s\n* abstract away lower level code from the getResponse() method in the\n  Duke class and implement the functionalities in the Parser class\n* standardise the run() method parameters in the Command abstract\n  subclasses and implement constructors\n* create generic getCommandAction() and getCommandDetails() methods in\n  the Parser class to handle the creation of new Command objects\n\nMaking use of abstraction and creating generic methods helps to reduce\nrepeated code and address the problems of code quality and standards.\n\nNote that this commit does not refine and address other areas of\ncoding style.\n","fileTypesAndContributionMap":{"gradle":{"insertions":3,"deletions":3},"java":{"insertions":218,"deletions":232}}},{"hash":"576bde97946b9af4f6adac59f41cb5dd72950832","messageTitle":"Abstract code to variables to reduce arrow-head style in TaskList class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":23}}}]},{"date":"2022-02-18","commitResults":[{"hash":"8e652757f3a80cf8e450620ce6c85f65aaf86d6b","messageTitle":"Create a new fat Jar file","messageBody":"There is currently no fat Jar file created.\n\nUsers on other computers will not be able to run this application\nwithout local dependencies already installed.\n\nLet\u0027s create a new fat Jar file using Gradle\u0027s ShadowJar.\n\nThe release of this fat Jar file will allow other users to run the\napplication independently on their own computers.\n","fileTypesAndContributionMap":{"gradle":{"insertions":9,"deletions":3}}},{"hash":"da432a0d5d331fae2b119332e60e17aaf799432d","messageTitle":"Add assertions to classes in command, duke and task packages","messageBody":"There is no current use of assertions throughout the methods.\n\nThere are no complementary checks on the program state during runtime\napart from the use of exceptions, which can miss out on potential bugs.\n\nLet\u0027s add assertions to the methods with parameter arguments needed to\ncheck for null arguments and invalid integer values which should not be\npassed in.\n\nThese assertions will help to verify the program state during run time\nto ensure that the code is behaving as it is assumed to be.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":6},"java":{"insertions":102,"deletions":30}}},{"hash":"c48cf6d6a8b84668901d70f69d14f62fa519dc9f","messageTitle":"Add method in TaskList class to search for any event clashes","messageBody":"There are no checks for date and time clashes when a user tries to\nadd an event task to the task list.\n\nMultiple events held at the same date will be allowed to be added\nto the existing task list, which does not showcase good \u0027task\nmanagement\u0027 functionality.\n\nLet\u0027s add a findClashes method in the TaskList class to return true\nif the date argument passed in matches any of the dates of existing\nevent tasks in the TaskList object.\n\nWithin this commit, bugs and errors in the Parser class are fixed\nas well to fix the functionality of the task manager.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":220,"deletions":99}}},{"hash":"87a2059a5005d9094064c028a98743b930caecf3","messageTitle":"Modify code for parsing of input command and output display","messageBody":"The format of user input for adding event and deadline classes uses\n\" - at:\" and \" - by:\" respectively. This format is standard across\nthe Command package class methods as well as in TaskList class.\n\nWe want to modify the output display to such that the dates are\nplaced within brackets. We want to modify the user input format\nto accept \" /at \" and \" /by \". This variation is subjective, to\nimprove the user display and input formatting.\n\nLet\u0027s modify the following code:\n* Add a toWrite() method in the Task class and subclasses to ensure\n  the text to be written to the taskHistory.txt file is standardised\n  (i.e. using \" - at :\" and \" - by:\")\n* Modify the way user command is split in the command subclasses for\n  AddEventCommand and AddDeadlineCommand to abide by the new variation\n  (i.e. using \" /at \" and \"/by \"\n* Modify the toString() method in the Task class and subclasses to\n  ensure a standard format with dates placed within brackets for the\n  Event and Deadline class\n","tags":["A-BetterGui"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":4},"java":{"insertions":37,"deletions":26}}}]},{"date":"2022-02-19","commitResults":[{"hash":"77e7bba2c3666dbcc374fe120b996110bc284b25","messageTitle":"Add description of application and summary of features to README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":48,"deletions":6}}},{"hash":"e57e4ce9fbc1ac5be2aee38edc60b2a23210592b","messageTitle":"Fix error and bugs in findTasks() method and related code","messageBody":"The findTasks() method does not work as expected  after previous\ncommit to vary the command input and user input formats.\n\nApplication is not able ot execute the findTasks() functionality\nand attempts to enter \"find [keyword]\" results in an error.\n\nLet\u0027s fix the code relating to the error:\n* re-standardise the toWrite() string format in task subclasses\n  (i.e. use \" /by\" and \" /at\" as the split regex parameter)\n* re-standardise the constructor in TaskList class based on the\n  modified toWrite() return format\n* fix the code in the findTasks() method to ensure the right\n  string formats is being returned and used\n","fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":3},"java":{"insertions":5,"deletions":5},"md":{"insertions":139,"deletions":22}}},{"hash":"a889e3ecb617d92d650e8b066666a462d954dbb1","messageTitle":"Add Usage section for README.md file","messageBody":"There is currently no explanation of the command input usage.\n\nAdding the Usage section will allow users to better understand\nhow to input commands to the application.\n\nLets\u0027 add the Usage section with each command action and other\nrequired parameters required. Each command action has its own\nexample to showcase the expected outcome.\n","fileTypesAndContributionMap":{"md":{"insertions":35,"deletions":2}}}]},{"date":"2022-02-21","commitResults":[{"hash":"55120bf55dec22716d3dbf51365004280fcebdda","messageTitle":"Add try catch blocks for command package classes to throw exceptions","messageBody":"Exception handling for command package classes have not been implemented\nto return and display the error message back to the user.\n\nUser will have no clarity and visibility as to what caused the exception\nand which part of user input provided is wrong. By implementing these\ncode blocks, we can return the error message to the user.\n\nLet\u0027s implement try catch blocks to catch IO and Array Index Out of\nBounds Exceptions. Throw new DukeException with the appropriate error\nmessage to handle these caught exceptions.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":0},"java":{"insertions":114,"deletions":100},"md":{"insertions":32,"deletions":2}}},{"hash":"89b9e257ab1d3993190fd89af66ad3a543b26ae9","messageTitle":"Refine code to add Javadocs and follow code quality and standards","messageBody":"Current code has some missing javadoc comments for method headers,\nas well as some ambiguity with abiding by coding standard. There are\nmethods which showing very borderline arrowhead style of code.\n\nRefine and update the code to abide by the above guidelines will\nensure standardisation and compliance.\n\nLet\u0027s implement the following key changes:\n* Run Gradle\u0027s checkstyle to identify checkstyle errors\n* Refine code based on the errors highlighted by checkstyle\n* Add javadoc headers to classes and comments to the public methods\n* Refine some of the variable names to abide by coding standards\n* Restructure code blocks to minimise arrowhead.\n","tags":["A-Packages","A-JavaDoc","A-CodingStandard","A-CodeQuality","A-CheckStyle"],"fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":6},"java":{"insertions":267,"deletions":186}}},{"hash":"dd0f84e51acd9db6e2557eb283bc50089730f3d1","messageTitle":"Add catch block for DateTimeParseException in command subclasses","messageBody":"AddDeadlineCommand and AddEventCommand classes do not have a catch\nblock to deal with dates that have been input in the wrong format.\n\nUser will not be able to view the error message on the GUI window\nif the dates entered for the command has not been parsed in properly.\n\nLet\u0027s add a catch block in the two classes above, to deal with the\nDateTimeParseException. The catch block will throw a new\nDukeException, and and display a message to tell the user what is\nthe right date format to input.\na\n","tags":["Level-9","Level-10","BCD-Extension","A-UserGuide"],"fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":0},"java":{"insertions":8,"deletions":0},"md":{"insertions":2,"deletions":5}}},{"hash":"99efc245bc0990f8ab00a42f705916b1d70fbf83","messageTitle":"Modify command classes to handle exception for index out of bounds","messageBody":"TaskList class currently uses assertions to check that the task id\npassed in is a valid index of the existing task list.\n\nThere is no message displayed back to the user in the case where the\ntask id is invalid.\n\nLet\u0027s modify the method body in the TaskList class to remove the\nassertions. Lets add a catch block in the command subclasses to handle\nindex array out of bounds exception to throw a new Duke exception which\nwill be handled.\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":18}}},{"hash":"72c8b056db3a64024d222e6a00cdb803461f8982","messageTitle":"Update fat Jar file using Gradle ShadowJar","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":0,"deletions":2}}},{"hash":"36a93b3aeb5770b77838a7f91c3a374a5b07d4c9","messageTitle":"Add override annotation for overridden method in Command child classes","messageBody":"Child classes of Command class currently do not have override\nannotation for run() method.\n\nCompiler is not able to check for overridden methods. This could\npotentially lead to overlooked errors when implementing the methods in\nchild classes which are expected to override the method in the parent\nclass.\n\nLet\u0027s add the overridden annotation to relevant methods in the child\nclasses.\n","tags":["A-Release"],"fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"charmainehly":{"java":1339,"md":214,"fxml":35,"sh":1,"bat":0,"gradle":23,"txt":25}},"authorContributionVariance":{"charmainehly":41948.72},"authorDisplayNameMap":{"charmainehly":"CS2103-F11-2 HO L..AINE"}}
