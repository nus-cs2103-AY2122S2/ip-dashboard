{"authorDailyContributionsMap":{"lchokhoe":[{"date":"2022-01-19","commitResults":[{"hash":"2204fecd5f008e8045c2c1677950418b7b0dcdc0","messageTitle":"Greet added to Duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":3}}},{"hash":"3279b65212b44397a5643c2ba7c06aab048886a2","messageTitle":"Commands class added","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":0}}},{"hash":"b8c801b887e23415b232aa52a410abe0f26857d4","messageTitle":"Renamed Duke to DukeLCH and changed default Greet response","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":7}}},{"hash":"190dc6374dd984212d8f6d3de3cc193fe011ad19","messageTitle":"Updated bye response","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"611d6275b62219c2cc5f451ebf50232d4a974723","messageTitle":"Added comments to methods in Commands Class and in Main Class","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"786752d35b9eb4e3f1ddcf7b60560e9eef620a4e","messageTitle":"Added InputHistory class to track input history","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":1}}},{"hash":"3e729af977f2c3f255aab3d9813c5f9bbec4503a","messageTitle":"Added cmdHIstory in Commands Class. echoInput method now adds input into cmdHistory with each call","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}},{"hash":"9eec89d80aac552c2be6540d16db5a2d2bb8907b","messageTitle":"Added list method to Commands Class that gets DukeLCH to list cmdHistory","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"9903ebb68201a7486a5382585deace4c1996778f","messageTitle":"Fixed a bug where count wasn\u0027t being incremented with each iteration in printAll() method","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"8a581ce30637137a200b15ce58d9fad370873a6c","messageTitle":"Updated echo message to correctly reflect DukeLCH\u0027s behaviour given a random user input","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"a52fc8f86dff689ac5dd75fc3fed88dbe6df7dfe","messageTitle":"Added a new if-else statement to check for \"list\" command when reading user input","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"aff1039adfb623a1433c11ec45223846140b533e","messageTitle":"Changed the printAll() method in InputHistory class to return a String (from StringBuilder) instead to ensure \"list\" output matches demo output","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":6}}},{"hash":"f4ed2d1c00c9b748173f1265ba072d76940c1b49","messageTitle":"Added Task Class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":1}}},{"hash":"edb233cda9e15a38f32b814811226fb77f4d4197","messageTitle":"Made changes to names, added 2 methods to mark and unmark tasks,added 2 new keywords to look for in Duke.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":53,"deletions":17}}},{"hash":"98cbde4b84b8a47df229b32e2e06d9896c3c681f","messageTitle":"Fixed an issue with reading keyword with int inputs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":4}}},{"hash":"8f063d6f29847cb463d8c250ae9804eca8983178","messageTitle":"Fixed a bug where the mark/unmark requests are offset by a value of 1","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"8ee0119af301e392f8fba775c852ef67c506111c","messageTitle":"Updated the list() and unmark() methods in Commands Class to correctly print messages","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":2}}},{"hash":"198cbb9a335215a6009a633466425187545963a8","messageTitle":"Currently tackling Level-4","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":6}}},{"hash":"2aeef130fef6ea957de37aa26797507b13030d92","messageTitle":"todo keyword added into DukeLCH","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":69,"deletions":20}}},{"hash":"40a8d0a6e7a46e1ef16d1d768546d413ac815db3","messageTitle":"Removed default behaviour of adding type Task and addTask() methods. Only allowed to use \"todo\", \"deadline\" or \"event\" from this point onwards","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":21}}},{"hash":"ce24a1e481ea879f53d33d1b4463089ff13ca387","messageTitle":"deadline keyword added into DukeLCH","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":3}}},{"hash":"4a25ce4b00a2d0af54baa40909545836f5094c23","messageTitle":"Added error message to \"deadline\" keyword and updated mark to work with new keywords","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":1}}},{"hash":"b9bce6c90b15ff35df3b897e1f6535a348d88760","messageTitle":"Updated unmark to work with new keywords","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":5}}},{"hash":"8c1baeabba199dc8e87695490750a8b8496a7925","messageTitle":"Removed exit() calls whenever the wrong input is detected to allow user to continue using DukeLCH","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":9}}},{"hash":"371b0c6746a8c379ff72f67e00beb392cc988d86","messageTitle":"event keyword added into DukeLCH","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"1728c784c338f474e7872da472bb614a43e59fed","messageTitle":"Added Automated Text UI Testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":9,"deletions":0}}}]},{"date":"2022-01-20","commitResults":[{"hash":"fbd99aa769348b88b07b2c1f2a8289db900448bb","messageTitle":"Added DukeException class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"ca79fdba8d2f213d3e5a891f83abab86bcd0da44","messageTitle":"Added exception handling for keywords \"mark\" and \"unmark\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":6}}},{"hash":"bc5696757c46d84e25088de499708ede54e44696","messageTitle":"Updated error message for keywords \"mark\" and \"unmark\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":4}}},{"hash":"7edc62776be4f89123a09114e43cb8c81e70e8ea","messageTitle":"Updated error handler of \"mark: and \"unmark\" with new messages and to handle decimal entry inputs by user","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":51,"deletions":10}}},{"hash":"064cd46906f7dc0478d27eb4771bc39ad48991ee","messageTitle":"Added exception handler for keywords \"bye\" and \"list\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"df5312bce5103c9ebb6b0712f1b9096ac0a2d4d1","messageTitle":"Updated exception handler for \"mark\" and \"unmark\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":38}}},{"hash":"41ae07ae186475d607d612afa4359afcae64c505","messageTitle":"exception handler added for keyword \"deadline\" and \"todo\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":15}}},{"hash":"43ba178ad24679c6033572be9417177a7ff03b3b","messageTitle":"exception handler added for keyword \"event\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":6}}},{"hash":"8dab0dc478c2d8e61b3c6ffae2e1c401f7d39212","messageTitle":"exception handler added when unrecognised keyword is detected","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":3}}},{"hash":"664759dddf84ab18dbe3c3addc9915f62203585f","messageTitle":"updated Commands Class to use ArrayList\u003c\u003e() instead of java Array to store records","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":22}}},{"hash":"719cfb523dd3a17910092c1bc0edd5c33c0ded22","messageTitle":"added \"delete\" keyword to DukeLCH with exception handler (missing delete message)","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":9}}},{"hash":"569549a802007a8ab1c1edc8cae933d9b9fa53ff","messageTitle":"added message print to \"delete\" keyword","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":2}}}]},{"date":"2022-01-26","commitResults":[{"hash":"7ec2fe1cc5ce78a29a635a620041579029f143aa","messageTitle":"Add JavaDoc comment to printAll()","messageBody":"This is for the clarity of the printAll() method implemented in the TaskHistory class\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"4a5e5cf65a3355df256b1edd32f9d74a5232019c","messageTitle":"Adjust coding style for switch-case apllication in Duke.java","messageBody":"To adhere to the java coding standard set for this iP.\n","fileTypesAndContributionMap":{"java":{"insertions":143,"deletions":143}}},{"hash":"8aa4d6e37ed11707fe8fe16a885db034357e9f62","messageTitle":"Duke class: Update Duke\u0027s response to \"invalid keywords\"","messageBody":"Duke\u0027s response to \"invalid keywords\" is to print a list of\nrecognized keywords that the user can use.\n\nUpdating the response will teach users the keywords they can use to\naccess the latest features of Duke.\n\nLet\u0027s update the printed response to correctly reflect the current\nlist of recognized keywords.\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":1}}},{"hash":"4ca63ef3e848eff459e39056afc210ad867bda51","messageTitle":"Commands class: add startup() method","messageBody":"There does not exist a way for us to detect if ./data/duke.txt is a\nvalid file path that exists.\n\nIn order for us to implement our \"save\" feature in Duke, we require\n./data/duke.txt to exist so we can update the duke.txt file after\neach update by the user.\n\nLet\u0027s implement a startup() method that is called at the beginning\nof each session with Duke that checks for and creates the data\nfolder and duke.txt file.\n\nThis is so we can easily bug fix this startup() method in the future\nin the case of any poor implementation.\n\nThe startup() method currently implemented is only able to check for\nthe existence of a folder named \"data\" in the root folder containing\nDuke.java.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"fb60b094b45a7d5c6f216beeb5a972710385d4ec","messageTitle":"Commands class: update startup() method","messageBody":"startup() method is only capable of checking the existence of a\n\"data\" directory in the root directory containing the Duke program.\n\nThis is only a means to determine if there is a need to manually\ncreate the directory for future use.\n\nLet\u0027s now provide an independent path to contain our duke.txt file\nand also create the parent directory, child directory and duke.txt\nfile if it does not already exist.\n\nstartup() now creates a folder and duke.txt file that will be used\nto keep track of a users task history.\n\nThe specific path used is \"C:\\Users\\username\\Duke\\data\". The main\nmethod in Duke.java has also been updated to call startup() at the\nbeginning of each session.\n","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":5}}},{"hash":"ebc98f11ad9ae2ead39674844e4d10902eb80ce2","messageTitle":"Commands class: add restore() method","messageBody":"There does not exist a way for users to reuse a previously created\nlocal copy of duke.txt.\n\nThis does not fulfil one of the features of Duke that we are trying\nto implement. We want to be able to load the data from the hard disk\nwhen Duke starts up\n\nLet\u0027s now provide a way to load the contents of an existing duke.txt\nfile onto a session of Duke.\n\nBy creating a restore() method that takes in a File object as\nargument, we are able to customize how Duke handles a custom\nduke.txt script. This gives us the flexibility to format the\nduke.txt file for our convenience.\n\nTo facilitate the implementation of restore(), we want to have\nspecial constructors for the Todo, Deadline and Event classes that\ncan allow us to create tasks based on the information stored on the\nduke.txt file.\n\nLastly, we also want to provide methods to add these tasks on the\nduke.txt file in the background without interfering with the current\nsession of duke. This is done by overloading the add\"\" methods in\nthe Commands class\n","fileTypesAndContributionMap":{"java":{"insertions":67,"deletions":20}}},{"hash":"4588830eb27c9de59de63a8c61f377cb502c4409","messageTitle":"Commands class: add update() method","messageBody":"There does not exist a way for users to manually request Duke to\nstore the data of the current session onto their local device.\n\nWe want to provide the flexibility to our users to manually request\nDuke to store the data of their current session. We also need a way\nto trigger this storing of data when Duke is closed so this is a\nstep towards that.\n\nLet\u0027s now provide a way to request Duke to update the local duke.txt\nfile with the latest records stored in Duke for the current session.\n\nBy creating a update() method, we are able to call for the update in\nour code and also provide a way for the user to manually request for\nthis update without having to close Duke.\n\nThe ToDos, Deadline and Event classes have been provided methods to\nhelp with update(). Also, a new keyword \"update\" is recognized by\nDuke.\n","fileTypesAndContributionMap":{"java":{"insertions":94,"deletions":21}}},{"hash":"e9fce41bb8aa85071e0ec23ed52ec19337805127","messageTitle":"Duke class: update \"bye\" keyword behavior","messageBody":"Previously, we do not get Duke to update the local duke.txt file at\nthe end of a session.\n\nIf the user forgets to call \"update\" manually, the data created\nor changed during the session is not saved.\n\nLet\u0027s make it so that Duke will automatically save data to the user\nhard disk by calling update() when \"bye\" keyword is used.\n","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}}]},{"date":"2022-01-27","commitResults":[{"hash":"a661cfba68bdaa1c169dadc60f5df474278d3b91","messageTitle":"Duke class: add isDateValid() method","messageBody":"For keywords \"deadline\" and \"event\", Duke interprets the date \u0026 time\narguments provided as Strings and stores them word for word in it\u0027s\nrecords.\n\nWe want to provide users with a more uniform response when it comes\nto date \u0026 time such that any provided input will give the same\noutput.\n\nLet\u0027s first introduce a method to validate date formats so we can\nteach Duke different date formats and get it to recognize them.\n\nWe want to create a method that we can expand on in the future,\nadding new date formats for Duke to recognize.\n\nCurrently, the method only has 2 date formats that it recognizes and\ndoes not validate time.\n","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":0}}},{"hash":"dc323df960de26b16c8c1a7ea092d02d12c1f584","messageTitle":"Duke class: change isDateValid() method to convertToDukeDate() method","messageBody":"isDateValid() returned a boolean that indicated if Duke recognized\nthe given date format or not.\n\nThis boolean needed to be handled separately outside of\nisDateValid() before Duke will process the given date into a uniform\nformat.\n\nLet\u0027s change the isDateValid() method into a method that immediately\ndoes the conversion as well and returns a LocalDate object.\n\nThis gives as a more useful object to manipulate accordingly in our\nother methods in the Commands class.\n\nconvertToDukeDate() has been moved from Duke.java to Commands.java\nwhere it will be better used. Both \"deadline\" and \"event\" keywords\nhave had their implementations updated to include the use of\nconvertToDukeDate().\n","fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":22}}},{"hash":"05e28b48575199f5ff37e929347574dfcce4f2f0","messageTitle":"Duke class: add convertToDukeTime()","messageBody":"Duke currently treats time as a String and does not manipulate it in\nany way.\n\nWe want Duke to be able to convert time inputs in 24-hour format to\na standardized output.\n\nLet\u0027s implement a new method convertToDukeTime() that does this.\n\nThis gives us the flexibility to detect and convert 24-hour time\nto 12-hour time for any commands that expect a time input from the\nuser.\n\n\"deadline\" and \"event\" keywords have been updated to call\nconvertToDukeTime() when needed.\n","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":64,"deletions":46}}},{"hash":"76bd72dbd178424733505cace37d6dca5677f66a","messageTitle":"Duke class: update Duke to save state after every command","messageBody":"Duke currently only saves the state to the user\u0027s local hard drive\non request (\"update\") or at the end of a session.\n\nThis could led to potential lost of user data if an expected crash\nleading to an unexpected end to the session without the user or\nDuke invoking the update() command.\n\nLet\u0027s make it so that Duke will automatically try to update the\nlocal duke.txt file after every command.\n\nWe are simply adding a update() call after every keyword call.\n","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":0}}},{"hash":"352ace5e9aacbf52d9df855fb2edd0914083a496","messageTitle":"Fix bugs from merging branch-Level-8","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":37}}}]}]},"authorFileTypeContributionMap":{"lchokhoe":{"java":725,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":0,"txt":9}},"authorContributionVariance":{"lchokhoe":43982.99},"authorDisplayNameMap":{"lchokhoe":"CS2103T-T11-3 LAI .. HOE"}}
