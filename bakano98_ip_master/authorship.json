[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"# duke.main.Duke project template","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"3. After that, locate the `src/duke.main/java/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bakano98":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.10\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"    mainClassName \u003d \"duke.main.Launcher\"","lastModifiedDate":"2022-02-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    archiveBaseName \u003d \"burp\"","lastModifiedDate":"2022-02-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bakano98":21,"-":31}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"#!/bin/sh","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"# Checks that all text files end with a newline.","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"ret\u003d0","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"# Preserve filename with spaces by only splitting on newlines.","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"IFS\u003d\u0027","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"\u0027","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        ret\u003d1","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    fi","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"done","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"exit $ret","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"bakano98":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"#!/bin/sh","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"# Checks for prohibited line endings.","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"# Prohibited line endings: \\r\\n","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"awk \u0027","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"    BEGIN {","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"        FS \u003d \":\"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"        OFS \u003d \":\"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"        ret \u003d 0","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        ret \u003d 1","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\"","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    END {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        exit ret","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"\u0027","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"bakano98":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"#!/bin/sh","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"# Checks for trailing whitespace","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"awk \u0027","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    BEGIN {","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"        FS \u003d \":\"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"        OFS \u003d \":\"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"        ret \u003d 0","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        # which do not properly handle trailing whitespace.","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        # (e.g. GitHub web editor)","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"        if ($1 ~ /\\.md$/) {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"            severity \u003d \"WARN\"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"            severity \u003d \"ERROR\"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"            ret \u003d 1","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        print severity, $1, $2, \" trailing whitespace.\"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    END {","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        exit ret","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"\u0027","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"bakano98":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"#!/bin/sh","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail.","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"ret\u003d0 \u0026\u0026","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"for checkscript in \"$dir\"/check-*; do","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"    if ! \"$checkscript\"; then","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"        ret\u003d1","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"    fi","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"done","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"exit $ret","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"bakano98":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"Burp is a desktop app for managing your tasks, optimised for use via a Command Line Interface while still having the benefits of a Graphical User Interface.  ","lastModifiedDate":"2022-02-12"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"You will be able to manage your to-do lists much easier if you can type fast using Burp!","lastModifiedDate":"2022-02-12"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"- [Add Tasks](#add-tasks)","lastModifiedDate":"2022-02-12"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"  - Generic to-dos","lastModifiedDate":"2022-02-12"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"  - Events","lastModifiedDate":"2022-02-12"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"  - Deadlines","lastModifiedDate":"2022-02-12"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"- [Deleting Tasks](#deleting-tasks)","lastModifiedDate":"2022-02-12"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"- [Marking of Tasks](#marking-of-tasks)","lastModifiedDate":"2022-02-12"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"  - Mark as done","lastModifiedDate":"2022-02-12"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"  - Mark as not done","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"- [List Tasks](#listing-tasks)","lastModifiedDate":"2022-02-12"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"- [Find Tasks](#finding-tasks)","lastModifiedDate":"2022-02-12"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"- [Bye](#bye)","lastModifiedDate":"2022-02-12"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"### Add Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"Burp has 3 different types of Tasks. These are To-Dos, Events, and Deadlines.  ","lastModifiedDate":"2022-02-12"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"To-Dos are generic tasks that only have a description of what it is.  ","lastModifiedDate":"2022-02-12"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"Events are things such as \"family dinner\", and they have a location, and an optional time.  ","lastModifiedDate":"2022-02-12"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"Deadlines are things such as \"homework\", and they have a deadline, and optional time.","lastModifiedDate":"2022-02-12"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"#### `todo` - adds a new ToDo Task","lastModifiedDate":"2022-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"This tells Burp to add a new To-Do task.","lastModifiedDate":"2022-02-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"`todo Math homework`","lastModifiedDate":"2022-02-12"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"A new To-Do task with the description, \"Math homework\" will be added to your list.","lastModifiedDate":"2022-02-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"Got it. I\u0027ve added this task:  ","lastModifiedDate":"2022-02-12"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"[T][] Math homework  ","lastModifiedDate":"2022-02-12"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2022-02-12"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"------------------------------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"#### `event` - adds a new Event Task","lastModifiedDate":"2022-02-12"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"This tells Burp to add a new Event task.","lastModifiedDate":"2022-02-12"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"`event Family dinner /at Home, 7pm`","lastModifiedDate":"2022-02-12"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"A new Event task with the description, \"Family dinner\" with location \"Home\" and time \"7pm\" will be added to your list.","lastModifiedDate":"2022-02-12"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"Got it. I\u0027ve added this task:  ","lastModifiedDate":"2022-02-12"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"[E][] Family dinner (at Home, 7pm)","lastModifiedDate":"2022-02-12"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-12"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"---------------------------------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"#### `deadline` - adds a new Deadline Task","lastModifiedDate":"2022-02-12"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"This tells Burp to add a new Deadline task.","lastModifiedDate":"2022-02-12"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"`deadline Thank you letter (for interview) /by 13/02/2022 1600`","lastModifiedDate":"2022-02-12"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"A new deadline task with the description, \"Thank you letter (for interview)\", with a deadline by 13/02/2022, 1600hrs will be added to your list.","lastModifiedDate":"2022-02-12"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"Got it. I\u0027ve added this task:  ","lastModifiedDate":"2022-02-12"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"[D][] Thank you letter (for interview) (by 13-02-2022, 4pm) ","lastModifiedDate":"2022-02-12"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2022-02-12"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"--------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"### Deleting Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"You can ask Burp to delete tasks you no longer wish to keep track of.","lastModifiedDate":"2022-02-12"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"#### `delete` - deletes a task in the list","lastModifiedDate":"2022-02-12"},{"lineNumber":87,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":88,"author":{"gitId":"bakano98"},"content":"This tells Burp to delete a particular task, by index.","lastModifiedDate":"2022-02-12"},{"lineNumber":89,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":90,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":91,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":92,"author":{"gitId":"bakano98"},"content":"`delete 3`","lastModifiedDate":"2022-02-12"},{"lineNumber":93,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":94,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":95,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":96,"author":{"gitId":"bakano98"},"content":"Deletes task at index 3 in your list, and tells you how many tasks are left","lastModifiedDate":"2022-02-12"},{"lineNumber":97,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":98,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":99,"author":{"gitId":"bakano98"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2022-02-12"},{"lineNumber":100,"author":{"gitId":"bakano98"},"content":"[D][] Thank you letter (for interview) (by 13-02-2022, 4pm) ","lastModifiedDate":"2022-02-12"},{"lineNumber":101,"author":{"gitId":"bakano98"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-12"},{"lineNumber":102,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":103,"author":{"gitId":"bakano98"},"content":"---------------","lastModifiedDate":"2022-02-12"},{"lineNumber":104,"author":{"gitId":"bakano98"},"content":"### Marking of Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":106,"author":{"gitId":"bakano98"},"content":"You can ask Burp to mark tasks as being done, or if certain requirements change at any point, Burp can also help you to mark these tasks as being **not** done","lastModifiedDate":"2022-02-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"bakano98"},"content":"### `mark` - marks a task","lastModifiedDate":"2022-02-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"bakano98"},"content":"This tells Burp to mark a task as done.","lastModifiedDate":"2022-02-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":115,"author":{"gitId":"bakano98"},"content":"`mark 1`","lastModifiedDate":"2022-02-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"bakano98"},"content":"The first task in the list will be marked as done.","lastModifiedDate":"2022-02-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":121,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":122,"author":{"gitId":"bakano98"},"content":"OK, I\u0027ve marked this task as done:  ","lastModifiedDate":"2022-02-12"},{"lineNumber":123,"author":{"gitId":"bakano98"},"content":"[T][X] Math homework  ","lastModifiedDate":"2022-02-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":125,"author":{"gitId":"bakano98"},"content":"------------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":126,"author":{"gitId":"bakano98"},"content":"#### `unmark` - marks a task","lastModifiedDate":"2022-02-12"},{"lineNumber":127,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":128,"author":{"gitId":"bakano98"},"content":"This tells Burp to mark a task as **not done**.","lastModifiedDate":"2022-02-12"},{"lineNumber":129,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":130,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":131,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":132,"author":{"gitId":"bakano98"},"content":"`unmark 1`","lastModifiedDate":"2022-02-12"},{"lineNumber":133,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":134,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":135,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":136,"author":{"gitId":"bakano98"},"content":"The first task in the list will be marked as done.","lastModifiedDate":"2022-02-12"},{"lineNumber":137,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":138,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":139,"author":{"gitId":"bakano98"},"content":"OK, I\u0027ve marked this task as not done yet:  ","lastModifiedDate":"2022-02-12"},{"lineNumber":140,"author":{"gitId":"bakano98"},"content":"[T][] Math homework  ","lastModifiedDate":"2022-02-12"},{"lineNumber":141,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":142,"author":{"gitId":"bakano98"},"content":"------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":143,"author":{"gitId":"bakano98"},"content":"### Listing Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":144,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":145,"author":{"gitId":"bakano98"},"content":"You can ask Burp to list out all the tasks in your current to-do list.","lastModifiedDate":"2022-02-12"},{"lineNumber":146,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":147,"author":{"gitId":"bakano98"},"content":"#### `list` - deletes a task in the list","lastModifiedDate":"2022-02-12"},{"lineNumber":148,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":149,"author":{"gitId":"bakano98"},"content":"Burp will list out all items in your to-do list.","lastModifiedDate":"2022-02-12"},{"lineNumber":150,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":151,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":152,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":153,"author":{"gitId":"bakano98"},"content":"`list`","lastModifiedDate":"2022-02-12"},{"lineNumber":154,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":155,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":156,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":157,"author":{"gitId":"bakano98"},"content":"Deletes task at index 3 in your list, and tells you how many tasks are left","lastModifiedDate":"2022-02-12"},{"lineNumber":158,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":159,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":160,"author":{"gitId":"bakano98"},"content":"(Total 2) Here\u0027s what you have:","lastModifiedDate":"2022-02-12"},{"lineNumber":161,"author":{"gitId":"bakano98"},"content":"[T][] Math homework","lastModifiedDate":"2022-02-12"},{"lineNumber":162,"author":{"gitId":"bakano98"},"content":"[E][] Family dinner (at Home, 7pm)","lastModifiedDate":"2022-02-12"},{"lineNumber":163,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":164,"author":{"gitId":"bakano98"},"content":"--------------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":165,"author":{"gitId":"bakano98"},"content":"### Finding Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":166,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":167,"author":{"gitId":"bakano98"},"content":"You can search for certain tasks in your to-do list","lastModifiedDate":"2022-02-12"},{"lineNumber":168,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":169,"author":{"gitId":"bakano98"},"content":"#### `find` - finds all tasks matching to a search term in the to-do list","lastModifiedDate":"2022-02-12"},{"lineNumber":170,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":171,"author":{"gitId":"bakano98"},"content":"Burp lists out all items matching the given search term","lastModifiedDate":"2022-02-12"},{"lineNumber":172,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":173,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":174,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":175,"author":{"gitId":"bakano98"},"content":"`find dinner`","lastModifiedDate":"2022-02-12"},{"lineNumber":176,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":177,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":178,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":179,"author":{"gitId":"bakano98"},"content":"Finds all items in the to-do list matching the search term \"dinner\".   ","lastModifiedDate":"2022-02-12"},{"lineNumber":180,"author":{"gitId":"bakano98"},"content":"If there is nothing, then Burp will tell you there is no terms matching the given search term. ","lastModifiedDate":"2022-02-12"},{"lineNumber":181,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":182,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":183,"author":{"gitId":"bakano98"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2022-02-12"},{"lineNumber":184,"author":{"gitId":"bakano98"},"content":"[E][] Family dinner (at Home, 7pm)","lastModifiedDate":"2022-02-12"},{"lineNumber":185,"author":{"gitId":"bakano98"},"content":"```","lastModifiedDate":"2022-02-12"},{"lineNumber":186,"author":{"gitId":"bakano98"},"content":"--------------------------","lastModifiedDate":"2022-02-12"},{"lineNumber":187,"author":{"gitId":"bakano98"},"content":"### Bye","lastModifiedDate":"2022-02-12"},{"lineNumber":188,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":189,"author":{"gitId":"bakano98"},"content":"Tells Burp to shut down","lastModifiedDate":"2022-02-12"},{"lineNumber":190,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":191,"author":{"gitId":"bakano98"},"content":"#### `bye` - closes burp","lastModifiedDate":"2022-02-12"},{"lineNumber":192,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":193,"author":{"gitId":"bakano98"},"content":"Burp will shutdown and close","lastModifiedDate":"2022-02-12"},{"lineNumber":194,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":195,"author":{"gitId":"bakano98"},"content":"Example of usage:","lastModifiedDate":"2022-02-12"},{"lineNumber":196,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":197,"author":{"gitId":"bakano98"},"content":"`bye`","lastModifiedDate":"2022-02-12"},{"lineNumber":198,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":199,"author":{"gitId":"bakano98"},"content":"Expected outcome:","lastModifiedDate":"2022-02-12"},{"lineNumber":200,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":201,"author":{"gitId":"bakano98"},"content":"The Graphical User Interface will close.","lastModifiedDate":"2022-02-12"},{"lineNumber":202,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":203,"author":{"gitId":"bakano98"},"content":"--------------------------","lastModifiedDate":"2022-02-12"}],"authorContributionMap":{"bakano98":183,"-":20}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * AddDeadlineCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" * This Command is used to add Deadlines to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"public class AddDeadlineCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddDeadlineCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public AddDeadlineCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * Adds a new Deadline Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * Sets the appropriate response if a Deadline Task is successfully added","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            // Reformat the command to get the Task\u0027s description and deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            String[] deadlineDetails \u003d cmd.split(\"deadline\")[1].split(\"/by\");","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            String deadlineName \u003d deadlineDetails[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            String deadline \u003d deadlineDetails[1];","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            // Create a new Deadline to add to TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineName, false, deadline);","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            assert newDeadline instanceof Deadline;","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newDeadline);","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after adding to TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\" + newDeadline","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"                    + \"\\nNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"            // Write the contents of the TaskList to our storage","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-20"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(Parser.formatMsg(\"OOPS!!! The description of a deadline cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! The description of a deadline cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":67}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * AddEventCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * This Command is used to add Events to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"public class AddEventCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public AddEventCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Adds a new Event Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * Sets the appropriate response if an Event Task is successfully added","lastModifiedDate":"2022-02-12"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            // Reformat the command to get the Task\u0027s description and date/time","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            String[] eventDetails \u003d cmd.split(\"event\")[1].split(\"/at\");","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            String eventName \u003d eventDetails[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            String eventDateTime \u003d eventDetails[1];","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            // Create a new Event to add into TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            Event newEvent \u003d new Event(eventName, false, eventDateTime);","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            assert newEvent instanceof Event;","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newEvent);","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after adding to TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\" + newEvent","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"                    + \"\\nNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            // Write the contents of the TaskList to our storage","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(Parser.formatMsg(\"OOPS!!! The description of an event cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! The description of an event cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":66}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * AddToDoCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" * This Command is used to add ToDos to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"public class AddToDoCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public AddToDoCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * Adds a new ToDo Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * Then, sets the appropriate response when successfully added","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            // Create a new ToDo and add to TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            ToDo newToDo \u003d new ToDo(cmd.split(\"todo\")[1], false);","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            assert newToDo instanceof ToDo;","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newToDo);","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after adding to TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\" + newToDo","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"                    + \"\\nNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            // Write the contents of the TaskList to our storage","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(Parser.formatMsg(\"OOPS!!! The description of a todo cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! The description of a todo cannot be empty.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":62}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * WrongCommand is a Command.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * This Command is used to indicate that a given Command does not exist.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"public class ByeCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * Constructor for WrongCommand.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it immediately closes the GUI application","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public ByeCommand() {","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        Platform.exit();","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * Runs the command.","lastModifiedDate":"2022-02-12"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * This is unused, but needs to be implemented as it is an abstract method","lastModifiedDate":"2022-02-12"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s list of Tasks","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"bakano98":30}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * Abstract class that represents a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * A Command is an input given by the user.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" *","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * @param \u003cE\u003e Generic type, as a Command could take in a String or an Integer.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public abstract class Command\u003cE\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Abstract method that runs a certain command based on the specific class.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * Called via the constructor of each concrete class","lastModifiedDate":"2022-02-12"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * @param cmd the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if an unknown Command is given","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    public abstract void runCommand(TaskList toDoList, E cmd) throws DukeException;","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":22}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * DeleteCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * This Command is used to Delete Tasks from the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"public class DeleteCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param numberToDelete the item number to delete","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to delete does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public DeleteCommand(TaskList toDoList, Integer numberToDelete, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToDelete);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Deletes a Task from the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Sets the appropriate response after successfully deleting","lastModifiedDate":"2022-02-12"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @param numberToDelete the item number to delete","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to delete does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToDelete) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            // Remove the Task from the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            Task deletedTask \u003d toDoList.remove(numberToDelete);","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            assert deletedTask instanceof Task;","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after removing from TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"Noted. I\u0027ve removed this task:\\n\" + deletedTask","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"                    + \"\\nNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(\"OOPS!!! Item to delete does not exist.\");","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! Item to delete does not exist.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":56}},{"path":"src/main/java/duke/commands/DuplicateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * WrongCommand is a Command.","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * This Command is used to indicate that a given Command does not exist.","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"public class DuplicateCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * Constructor for DuplicateCommand.","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it simply sets the response to tell the user","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * that the item they were trying to add is a duplicate item","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public DuplicateCommand() {","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        Ui.setDukeResponse(Parser.formatMsg(\"This item is already in your list\"));","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * Runs the logic for handling a duplicate command","lastModifiedDate":"2022-02-12"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Unused","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s list of Tasks","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"bakano98":30}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-23"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"public class FindCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public FindCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * Lists out all the Tasks found according to the given search term","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Sets the appropriate response after finding based on search term","lastModifiedDate":"2022-02-12"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        // Split into the search terms","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        String[] splitCmd \u003d cmd.split(\"find\");","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        String searchTerm \u003d splitCmd[1];","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        // Create a temporary TaskList to store the search terms found","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"        TaskList temp \u003d new TaskList();","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        // Then, search through the TaskList to find Tasks with that search term","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        int listSize \u003d toDoList.size();","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"        for (int i \u003d 0; i \u003c listSize; i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"            Task currentTask \u003d toDoList.get(i);","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"            String currentTaskInString \u003d currentTask.toString();","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            if (currentTaskInString.contains(searchTerm)) {","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"                temp.add(currentTask);","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        // Printing logic","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        if (temp.size() \u003e 0) {","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            String dukeResponse \u003d \"\";","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            // Print out all search terms found","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            dukeResponse +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            for (int i \u003d 0; i \u003c temp.size(); i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"                dukeResponse +\u003d \"\" + (i + 1) + \".\" + temp.get(i).toString() + \"\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            dukeResponse +\u003d \"\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(dukeResponse);","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"There were no terms matching: \" + searchTerm));","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"bakano98":60}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * ListCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * This Command is used to List out all Tasks in the current TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"public class ListCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    public ListCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Lists out all the Tasks in the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * Sets the appropriate response after command is ran","lastModifiedDate":"2022-02-12"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        String toPrint \u003d \"\";","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        // Prints out the list of items in the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"        toPrint +\u003d \"(Total \" + toDoList.size() + \") Here\u0027s what you have:\\n\";","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            toPrint +\u003d \"\" + (i + 1) + \".\" + toDoList.get(i).toString() + \"\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        Ui.setDukeResponse(toPrint);","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":38}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * MarkCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" * This Command is used to Mark a certain Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"public class MarkCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Constructor for MarkCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param toDoList     the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param numberToMark the item number to mark","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to mark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public MarkCommand(TaskList toDoList, int numberToMark, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToMark);","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Marks a Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * If it is already marked, this Command will have no effect.","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @param toDoList     the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @param numberToMark the item number to mark","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to mark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToMark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            // Set the task as being marked.","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            Task taskToMark \u003d toDoList.get(numberToMark);","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            assert taskToMark instanceof Task;","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            taskToMark.mark();","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after marking","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"OK, I\u0027ve marked this task as done:\\n\" + taskToMark));","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(Parser.formatMsg(\"OOPS!!! Item to mark does not exist.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! Item to mark does not exist.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":58}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * UnmarkCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * This Command is used to Mark a certain Task as being not done.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"public class UnmarkCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Constructor for UnmarkCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param numberToUnmark the item number to unmark","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to unmark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public UnmarkCommand(TaskList toDoList, Integer numberToUnmark, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToUnmark);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Unmarks a Task from being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * If it is already unmarked, this Command will have no effect.","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @param numberToUnmark the item number to unmark","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to unmark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToUnmark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            // Set the task as being unmarked","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            Task taskToUnmark \u003d toDoList.get(numberToUnmark);","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            assert taskToUnmark instanceof Task;","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            taskToUnmark.unmark();","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            // Print out the formatted message after unmarking","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponse(Parser.formatMsg(\"OK, I\u0027ve marked this task as not done yet:\\n\" + taskToUnmark));","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            Ui.setDukeResponseError(Parser.formatMsg(\"OOPS!!! Item to unmark does not exist.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"OOPS!!! Item to unmark does not exist.\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":57}},{"path":"src/main/java/duke/commands/WrongCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * WrongCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This Command is used to indicate that a given Command does not exist.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class WrongCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Constructor for WrongCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it immediately throws a new DukeException.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when this class is instantiated","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    public WrongCommand() throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        Ui.setDukeResponseError(Parser.formatMsg(\"Sorry, I do not know what that means.\"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"                + \"\\nDid you mean to type something else?\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        throw new DukeException(Parser.formatMsg(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * Runs the command.","lastModifiedDate":"2022-02-12"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * Unused","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s list of Tasks","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":34}},{"path":"src/main/java/duke/main/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":" * DialogBox is the dialog box for the GUI when running Duke","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    private Label dialog;","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Creates a new DialogBox that has a Label (which is a text), and an Image to accompany the text","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * @param text label for this particular DialogBox","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param img  an image for this DialogBox","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        this.dialog.setText(text);","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        this.displayPicture.setImage(img);","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        this.setBackground(new Background(new BackgroundFill(Color.rgb(100, 200, 200, 1),","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"                new CornerRadii(0), new Insets(0))));","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        this.displayPicture.setFitWidth(100.0);","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        this.displayPicture.setFitHeight(100.0);","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        // Setting circular border for profile picture","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"        Circle clip \u003d new Circle(50, 50, 45);","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"        this.displayPicture.setClip(clip);","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    private void flip() {","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"        this.setBackground(new Background(new BackgroundFill(Color.rgb(240, 180, 180, 1),","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"                new CornerRadii(0), new Insets(0))));","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-01-28"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-01-28"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"        db.flip();","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"        return db;","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"bakano98":83}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.File;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * The main class for running Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * This class contains all the abstracted details for Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"public class Duke {","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    private TaskList toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private final String filepath \u003d \"./tasklist.txt\";","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Constructor for Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Tries to retrieve the list of Tasks from the default filepath","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    public Duke() {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        storage \u003d new Storage(this.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"        // Attempt to open the storage file. If file does not exist, then create a new file.","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"            toDoList \u003d storage.addFileContent();","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"            Ui.handleLoadError();","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"            // creates a new file in the current directory","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"            File f \u003d new File(this.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * Gets Burp\u0027s response in return to a command given to it.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     * @param input the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     * @return Burp\u0027s response","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            String commandType \u003d input.split(\" \")[0];","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            ui.burpReply(ui.determineType(commandType), toDoList, input, this.storage);","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            return Ui.getDukeResponse();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            return Ui.getDukeResponseError();","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":53}},{"path":"src/main/java/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * DukeException is an Exception.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" * A custom exception for all exceptions that occur in Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"     * Extends Exception class. DukeException can catch all kinds of Exceptions.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * @param msg the exception message to be shown","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2022-01-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(msg);","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Overriden toString method.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Returns the message.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * @return","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return this.getMessage();","lastModifiedDate":"2022-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":17,"-":10}},{"path":"src/main/java/duke/main/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"public class Launcher {","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bakano98":14}},{"path":"src/main/java/duke/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-12"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"public class Main extends Application {","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"            stage.setTitle(\"Burp\");","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/DaPenguin.png\")));","lastModifiedDate":"2022-02-12"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"            stage.show();","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"bakano98":34}},{"path":"src/main/java/duke/main/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    private TextField userInput;","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    private Button sendButton;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    private Duke duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaHappy.png\"));","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaPenguin.png\"));","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * Initialises the scrollPane. This is the main window of the entire application.","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * It also calls onStartup(), which will show the welcome text.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    public void initialize() {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        // initalize is called on startup","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        this.onStartup();","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     * Shows welcome text onto the window upon startup","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"    public void onStartup() {","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"        Ui.showWelcome();","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        String response \u003d Ui.getDukeResponse();","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        );","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"        duke \u003d d;","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"    @FXML","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"        );","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"        userInput.clear();","lastModifiedDate":"2022-01-28"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"bakano98":69}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.commands.DuplicateCommand;","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"import duke.commands.WrongCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":" * Parser class.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":" * This class handles the parsing of all user inputs and decides what to do","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":" * based on the user input.","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"public class Parser {","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * This method determines what Burp should do when the user gives an input","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     * @param type     the Reply type, determined by Ui","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * @return Returns a Command to indicate what the last Command run was","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    public static Command parseCommands(Ui.Reply type, TaskList toDoList,","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"                                        String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        String[] cmdSplit \u003d cmd.split(\" \");","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        boolean isAddCommand \u003d false;","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"        boolean isDuplicateTask \u003d false;","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"        switch (type) {","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            isAddCommand \u003d true;","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            break;","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        case EVENT:","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            isAddCommand \u003d true;","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            break;","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        case TODO:","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            isAddCommand \u003d true;","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            break;","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        default:","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            isAddCommand \u003d false;","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            break;","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        System.out.println(isAddCommand);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        // then check for duplicates","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        if (isAddCommand) {","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            // because the word immediately after deadline/event/todo is the task description","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"            String taskDescription \u003d cmdSplit[1];","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"            for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"                Task current \u003d toDoList.get(i);","lastModifiedDate":"2022-02-04"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"                String currentTaskDescription \u003d current.isDoneStatus()","lastModifiedDate":"2022-02-04"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"                        ? current.toString().split(\" \")[1] // if it is done, then there\u0027s only 1 whitespace","lastModifiedDate":"2022-02-04"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"                        : current.toString().split(\" \")[2]; // otherwise, there\u0027s 2 whitespaces so we take the second","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"                if (taskDescription.equals(currentTaskDescription)) {","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"                    isDuplicateTask \u003d true;","lastModifiedDate":"2022-02-04"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"                    break;","lastModifiedDate":"2022-02-04"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"                }","lastModifiedDate":"2022-02-04"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"            }","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"        if (isDuplicateTask) {","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"            return new DuplicateCommand();","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"        switch (type) {","lastModifiedDate":"2022-01-17"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"        case LIST:","lastModifiedDate":"2022-01-17"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"            return new ListCommand(toDoList, cmd);","lastModifiedDate":"2022-01-19"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"        case TODO:","lastModifiedDate":"2022-01-17"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"            return new AddToDoCommand(toDoList, cmd, storage);","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-17"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"            return new AddDeadlineCommand(toDoList, cmd, storage);","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"        case EVENT:","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"            return new AddEventCommand(toDoList, cmd, storage);","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"        case MARK:","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"            return new MarkCommand(toDoList, Integer.parseInt(cmdSplit[1]) - 1, storage);","lastModifiedDate":"2022-02-04"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"        case UNMARK:","lastModifiedDate":"2022-01-17"},{"lineNumber":87,"author":{"gitId":"bakano98"},"content":"            return new UnmarkCommand(toDoList, Integer.parseInt(cmdSplit[1]) - 1, storage);","lastModifiedDate":"2022-02-04"},{"lineNumber":88,"author":{"gitId":"bakano98"},"content":"        case DELETE:","lastModifiedDate":"2022-01-17"},{"lineNumber":89,"author":{"gitId":"bakano98"},"content":"            return new DeleteCommand(toDoList, Integer.parseInt(cmdSplit[1]) - 1, storage);","lastModifiedDate":"2022-02-04"},{"lineNumber":90,"author":{"gitId":"bakano98"},"content":"        case FIND:","lastModifiedDate":"2022-01-23"},{"lineNumber":91,"author":{"gitId":"bakano98"},"content":"            return new FindCommand(toDoList, cmd);","lastModifiedDate":"2022-01-23"},{"lineNumber":92,"author":{"gitId":"bakano98"},"content":"        case BYE:","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"bakano98"},"content":"            return new ByeCommand();","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"bakano98"},"content":"        default:","lastModifiedDate":"2022-01-17"},{"lineNumber":95,"author":{"gitId":"bakano98"},"content":"            return new WrongCommand();","lastModifiedDate":"2022-01-19"},{"lineNumber":96,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":97,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":98,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":99,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":100,"author":{"gitId":"bakano98"},"content":"     * Method to format strings accordingly.","lastModifiedDate":"2022-01-23"},{"lineNumber":101,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":102,"author":{"gitId":"bakano98"},"content":"     * @param msg the String to be formatted","lastModifiedDate":"2022-01-23"},{"lineNumber":103,"author":{"gitId":"bakano98"},"content":"     * @return a nicely formatted String.","lastModifiedDate":"2022-01-23"},{"lineNumber":104,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":105,"author":{"gitId":"bakano98"},"content":"    public static String formatMsg(String msg) {","lastModifiedDate":"2022-01-17"},{"lineNumber":106,"author":{"gitId":"bakano98"},"content":"        return (msg + \"\\n\");","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":108,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":108}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.File;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" * Storage class.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":" * This class handles the storing of the user\u0027s TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"public class Storage {","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    private static String filepath;","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Constructor for Storage.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * This tells Burp where to retrieve and save the user\u0027s TaskList to.","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param filepath the path to read from, or write to","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    // Reads and adds the file\u0027s content into the array","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * Method to add the file\u0027s content to a new TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * Tries to read from the given filepath. If the file exists, then this method","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * will retrieve its contents. Otherwise, a blank TaskList is returned","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @return the saved TaskList based on the filepath, or an empty TaskList if pathfile does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     * @throws FileNotFoundException when the file cannot be found from the given path","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"    public static TaskList addFileContent() throws FileNotFoundException {","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        File f \u003d new File(Storage.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"        TaskList toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        // save commands into the file","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            // Read the saved command from file","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            String cmd \u003d s.nextLine();","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            String[] cmdSplit \u003d cmd.split(\"\u0026\");","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            boolean mark \u003d cmdSplit[0].equals(\"[X]\") ? true : false;","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            switch (cmdSplit[1]) {","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            case \"T\":","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"                toDoList.add(new ToDo(cmdSplit[2], mark));","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"                break;","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            case \"E\":","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"                toDoList.add(new Event(cmdSplit[2], mark, cmdSplit[3]));","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"                break;","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"            case \"D\":","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"                toDoList.add(new Deadline(cmdSplit[2], mark, cmdSplit[3]));","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"                break;","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"            default:","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"                // do nothing","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"                break;","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"            }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"        return toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"    // Writes the contents of toDoList into storage with specific formatting","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"     * This method writes to the given filepath.","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"     * Executed whenever a new Task is added to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"     * @throws IOException when IO error occurs","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"    public static void writeFileContent(TaskList toDoList) throws IOException {","lastModifiedDate":"2022-01-17"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"        // Create a new file writer to that filepath","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"        FileWriter fw \u003d new FileWriter(Storage.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"        for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"            Task currentTask \u003d toDoList.get(i);","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"            fw.write(currentTask.getStringCmd());","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"            fw.write(\"\\n\");","lastModifiedDate":"2022-01-17"},{"lineNumber":87,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":88,"author":{"gitId":"bakano98"},"content":"        fw.close();","lastModifiedDate":"2022-01-17"},{"lineNumber":89,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":90,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":91,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":91}},{"path":"src/main/java/duke/main/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import java.util.List;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * TaskList class.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This class encapsulates the abstract List of Tasks.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class TaskList {","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    private List\u003cTask\u003e toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * Simply instantiates a new ArrayList of Tasks, which is used","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * to keep track of all the Tasks.","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        this.toDoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * Adds a Task to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @param t the Task to add","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public void add(Task t) {","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.toDoList.add(t);","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Removes a Task from the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param index the index of the Task to be removed","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @return the Task that has been removed","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    public Task remove(int index) {","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.remove(index);","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     * Queries the number of items in the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"     * @return the number of items in the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"    public int size() {","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.size();","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     * Retrievs a Task from the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"     * @param i the index of the Task to be retrieved","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"     * @return the retrieved Task","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    public Task get(int i) {","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.get(i);","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":61}},{"path":"src/main/java/duke/main/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"public class Ui {","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"    private static Parser parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"    private static String response;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    private static String errorMsg;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"     * The possible types of Reply that Burp can have, in response to","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"     * a Command","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    public enum Reply {","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        LIST, TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, DEFAULT, FIND, BYE","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * Constructor for Ui.","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * Simply creates a new Parser to parse Commands.","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public Ui() {","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    // to determine what kind of reply Burp should give","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * Determines the type of Reply Burp should have","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     * based on the user\u0027s input","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @param command the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * @return a Reply, based on the user\u0027s input","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    public static Reply determineType(String command) {","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"        switch (command) {","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        case \"list\":","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            return Reply.LIST;","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        case \"todo\":","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"            return Reply.TODO;","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"        case \"deadline\":","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"            return Reply.DEADLINE;","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"        case \"event\":","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            return Reply.EVENT;","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            return Reply.MARK;","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            return Reply.UNMARK;","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            return Reply.DELETE;","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        case \"find\":","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            return Reply.FIND;","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        case \"bye\":","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            return Reply.BYE;","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        default:","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            return Reply.DEFAULT;","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted \"Bye\" message.","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"    public static void showBye() {","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"        Ui.setDukeResponse(Parser.formatMsg(\"Bye. Hope to see you again soon!\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"     * Passes down the parameters to Parser in order to determine","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"     * what Burp should reply with.","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"     * @param type     the type of Reply Burp should give","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"    public static void burpReply(Ui.Reply type, TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"        Parser.parseCommands(type, toDoList, cmd, storage);","lastModifiedDate":"2022-01-23"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted \"Welcome\" message.","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"    public static void showWelcome() {","lastModifiedDate":"2022-01-17"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"        Ui.setDukeResponse(Parser.formatMsg(\"Hey! Nice to see you back here again.\\nWhat would you like to do?\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted file error message","lastModifiedDate":"2022-01-23"},{"lineNumber":87,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":88,"author":{"gitId":"bakano98"},"content":"    public static void handleLoadError() {","lastModifiedDate":"2022-01-17"},{"lineNumber":89,"author":{"gitId":"bakano98"},"content":"        System.out.println(\"File could not be loaded -- most likely it has not been created\");","lastModifiedDate":"2022-01-17"},{"lineNumber":90,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":91,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":92,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"bakano98"},"content":"    public static String getDukeResponse() {","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"bakano98"},"content":"        return Ui.response;","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"bakano98"},"content":"    public static String setDukeResponse(String response) {","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"bakano98"},"content":"        Ui.response \u003d response;","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"bakano98"},"content":"        return Ui.response;","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"bakano98"},"content":"    public static String getDukeResponseError() {","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"bakano98"},"content":"        return Ui.errorMsg;","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"bakano98"},"content":"    public static String setDukeResponseError(String errorMsg) {","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"bakano98"},"content":"        Ui.errorMsg \u003d errorMsg;","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"bakano98"},"content":"        return Ui.errorMsg;","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":111}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" * Deadline is a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * Deadline has a date as an end time.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    private String time;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    // Keeping this for now since we do not know what to use LocalDate date for...","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    private String deadline;","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    private LocalDate date;","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * This is a Task with a deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @param task     the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * @param isDone   the mark status of this deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * @param deadline the deadline of this Task","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    public Deadline(String task, boolean isDone, String deadline) {","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-01-13"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        this.dateFormatter(deadline);","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this Deadline to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for a Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor | deadline","lastModifiedDate":"2022-01-16"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026D\u0026\" + super.getTask() + \"\u0026\" + this.deadline;","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     * Formats a String into proper date/time format into","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     * the form: 2-12-2019","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     * @param dateTime String that is of the form 2/12/2019 1800","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"    private void dateFormatter(String dateTime) {","lastModifiedDate":"2022-01-19"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        // the string is of the form: 2/12/2019 1800","lastModifiedDate":"2022-01-16"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        dateTime \u003d dateTime.replace(\u0027/\u0027, \u0027-\u0027);","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        String[] splitDateTime \u003d dateTime.split(\" \");","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        // Attempt to format the date. If it cannot be formatted, it means","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"        // User did not give in a proper date format","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-16"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"            this.date \u003d LocalDate.parse(splitDateTime[0]);","lastModifiedDate":"2022-01-16"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"            this.time \u003d splitDateTime[1];","lastModifiedDate":"2022-01-19"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-01-16"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"            System.out.println(e);","lastModifiedDate":"2022-02-12"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"     * Gets the LocalDate of this Deadline, in String format.","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"     * @return the date, in String format","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"    public String getDate() {","lastModifiedDate":"2022-01-16"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"        return date.toString();","lastModifiedDate":"2022-01-16"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"     * Retrieves the (by: ...) part of a Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"     * @return back part of a Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String getDeadline() {","lastModifiedDate":"2022-01-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return \"(by:\" + this.deadline + \")\";","lastModifiedDate":"2022-01-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return \"[D]\" + super.toString() + this.getDeadline();","lastModifiedDate":"2022-01-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":75,"-":13}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"    private String dateTime; // (at: date time)","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"     * Constructor for Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"     * This is a Task with at a certain date/time.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"     * @param task     the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     * @param isDone   the mark status of this deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * @param dateTime the date/time of this Task","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    public Event(String task, boolean isDone, String dateTime) {","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this Event to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor | datetime","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026E\u0026\" + super.getTask() + \"\u0026\" + this.dateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * Retrieves the (at: ...) part of an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * @return back part of an Event","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public String getDateTime() {","lastModifiedDate":"2022-01-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return \"(at:\" + this.dateTime + \")\";","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Event","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return \"[E]\" + super.toString() + this.getDateTime();","lastModifiedDate":"2022-01-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":34,"-":14}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * An abstract class that represents a Task in a TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private String task;","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     * Constructor for a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * Creates a new Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * @param task   the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * @param isDone whether this task has been done or not","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public Task(String task, boolean isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-01-13"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Abstract method that gets the Command used to add a Task","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @return a Command in String format","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public abstract String getStringCmd();","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * Gets the status of this Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     * @return String representation of whether a Task is done or not","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    public String getIsDone() {","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return \"[X]\";","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2022-01-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return \"[ ]\";","lastModifiedDate":"2022-01-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-01-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     * Gets the boolean version of the status of this task","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     * @return true if it is done, otherwise false","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"    public boolean isDoneStatus() {","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        return this.isDone;","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"     * Gets the task\u0027s description.","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"     * @return description of the Task","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this.task;","lastModifiedDate":"2022-01-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"     * Marks this Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void mark() {","lastModifiedDate":"2022-01-13"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"     * Marks this task as being not done","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void unmark() {","lastModifiedDate":"2022-01-13"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Task","lastModifiedDate":"2022-01-23"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"        return this.getIsDone() + this.getTask();","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":57,"-":26}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * ToDo is a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" * This is a simple Task that only has a description.","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"     * Constructor for ToDo.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     * This is a Task with only a description","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * @param task     the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * @param isDone   the mark status of this deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    public ToDo(String task, boolean isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this ToDo to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for a ToDo Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026T\u0026\" + super.getTask();","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a ToDo","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted ToDo","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":32,"-":9}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"      \u003cVBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"              \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"      \u003cVBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"              \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"bakano98":28}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something here!\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"558.0\" prefWidth\u003d\"382.0\" /\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"bakano98":19}},{"path":"src/test/java/junit/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"// Important note: For the test cases, there\u0027s no white spacing because the text hasn\u0027t been formatted yet.","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"// So the expected output is the raw output from Deadline.java","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    public void testStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false, \"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026D\u0026deadlineTest\u0026deadlineTestDate\", testItem.getStringCmd(),","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"                \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public void testGetDeadline() {","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false, \"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"(by:deadlineTestDate)\", testItem.getDeadline(),","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"                \"getDeadline() works as intended\");","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false, \"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[D][ ]deadlineTest(by:deadlineTestDate)\", testItem.toString(),","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"                \"toString() works as intended\");","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":32}},{"path":"src/test/java/junit/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"public class EventTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    public void testStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false, \"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026E\u0026eventTest\u0026eventTestDate\", testItem.getStringCmd(), \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    public void testGetDateTime() {","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false, \"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"(at:eventTestDate)\", testItem.getDateTime(), \"getDateTime() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false, \"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[E][ ]eventTest(at:eventTestDate)\", testItem.toString(), \"toString() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":28}},{"path":"src/test/java/junit/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import duke.commands.DuplicateCommand;","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    private TaskList toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    private Storage storage \u003d new Storage(\"./tasklist.txt\");","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    void parserTest() throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.LIST, toDoList, \"list\", storage) instanceof ListCommand);","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.TODO, toDoList, \"todo smth\", storage) instanceof AddToDoCommand);","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.DEADLINE, toDoList,","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"                \"deadline smthElse /by smth\", storage) instanceof AddDeadlineCommand);","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.EVENT, toDoList,","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"                \"event smthElse2 /at somewhere\", storage) instanceof AddEventCommand);","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.EVENT, toDoList,","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"                \"event smthElse2 /at somewhere\", storage) instanceof DuplicateCommand);","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.MARK, toDoList, \"mark 1\", storage) instanceof MarkCommand);","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.UNMARK, toDoList, \"unmark 1\", storage) instanceof UnmarkCommand);","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.DELETE, toDoList, \"delete 1\", storage) instanceof DeleteCommand);","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":39}},{"path":"src/test/java/junit/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"public class ToDoTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    public void testGetStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        ToDo test \u003d new ToDo(\"todoTest\", false);","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026T\u0026todoTest\", test.getStringCmd(), \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        ToDo test \u003d new ToDo(\"toDoTest\", false);","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[T][ ]toDoTest\", test.toString(), \"toString() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"todo 1","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"mark 1","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"mark 2","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"unmark 1","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"delete 2","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"deadline me /by 11-12-2100","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"delete 3","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"dasda","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\main\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java ..\\src\\main\\java\\duke\\commands\\*.java","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bakano98":2,"-":19}}]
