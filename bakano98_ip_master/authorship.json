[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"# duke.main.Duke project template","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"3. After that, locate the `src/duke.main/java/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bakano98":2,"-":22}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":" * AddDeadlineCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * This Command is used to add Deadlines to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"public class AddDeadlineCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddDeadlineCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public AddDeadlineCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Adds a new Deadline Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            String[] deadlineDetails \u003d cmd.split(\"deadline\")[1].split(\"/by\");","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            String deadlineName \u003d deadlineDetails[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            String deadline \u003d deadlineDetails[1];","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineName, false, deadline);","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newDeadline);","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\\t\" + newDeadline + \"\\n\\tNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"    ;","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":56}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":" * AddEventCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * This Command is used to add Events to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"public class AddEventCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public AddEventCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Adds a new Event Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            String[] eventDetails \u003d cmd.split(\"event\")[1].split(\"/at\");","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            String eventName \u003d eventDetails[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            String eventDateTime \u003d eventDetails[1];","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            Event newEvent \u003d new Event(eventName, false, eventDateTime);","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newEvent);","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\\t\" + newEvent + \"\\n\\tNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! The description of an event cannot be empty.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"    ;","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":57}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":" * AddToDoCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":" * This Command is used to add ToDos to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"public class AddToDoCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param storage  the textfile used to store history of TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public AddToDoCommand(TaskList toDoList, String cmd, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * Adds a new ToDo Task to the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if no Task description is given","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"            ToDo newToDo \u003d new ToDo(cmd.split(\"todo\")[1], false);","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            toDoList.add(newToDo);","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"Got it. I\u0027ve added this task:\\n\\t\" + newToDo + \"\\n\\tNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            storage.writeFileContent(toDoList);","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"IOException caught\") + e);","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"    ;","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":53}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * Abstract class that represents a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * A Command is an input given by the user.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" *","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * @param \u003cE\u003e Generic type, as a Command could take in a String or an Integer.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public abstract class Command\u003cE\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Abstract method that runs a certain command based on the specific class.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param cmd the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException if an unknown Command is given","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public abstract void runCommand(TaskList toDoList, E cmd) throws DukeException;","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":21}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * DeleteCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This Command is used to Delete Tasks from the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class DeleteCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * @param numberToDelete the item number to delete","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to delete does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    public DeleteCommand(TaskList toDoList, Integer numberToDelete) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToDelete);","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * Deletes a Task from the current TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @param numberToDelete the item number to delete","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to delete does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToDelete) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            Task deletedTask \u003d toDoList.remove(numberToDelete);","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"Noted. I\u0027ve removed this task:\\n\\t\" + deletedTask + \"\\n\\tNow you have \" + toDoList.size() + \" tasks in the list.\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! Item to delete does not exist.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":40}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" * ListCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * This Command is used to List out all Tasks in the current TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"public class ListCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    private final String tabbedLine \u003d \"\\t----------------------------------------------\";","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    public ListCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * Lists out all the Tasks in the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @param cmd the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, String cmd) {","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        System.out.println(tabbedLine);","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"            System.out.println(i + 1 + \".\" + toDoList.get(i).toString());","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"        System.out.println(tabbedLine);","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"    ;","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":38}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * MarkCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This Command is used to Mark a certain Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class MarkCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Constructor for MarkCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param toDoList     the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * @param numberToMark the item number to mark","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to mark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    public MarkCommand(TaskList toDoList, int numberToMark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToMark);","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * Marks a Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * If it is already marked, this Command will have no effect.","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @param toDoList     the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @param numberToMark the item number to mark","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to mark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToMark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"            Task taskToMark \u003d toDoList.get(numberToMark);","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            taskToMark.mark();","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"OK, I\u0027ve marked this task as done:\\n\\t\" + taskToMark));","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! Item to mark does not exist.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":42}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * UnmarkCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This Command is used to Mark a certain Task as being not done.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class UnmarkCommand extends Command\u003cInteger\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Constructor for UnmarkCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it automatically runs runCommand().","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * @param numberToUnmark the item number to unmark","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to unmark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    public UnmarkCommand(TaskList toDoList, Integer numberToUnmark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        this.runCommand(toDoList, numberToUnmark);","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * Unmarks a Task from being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * If it is already unmarked, this Command will have no effect.","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @param toDoList       the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * @param numberToUnmark the item number to unmark","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when the item number to unmark does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList toDoList, Integer numberToUnmark) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"            Task taskToUnmark \u003d toDoList.get(numberToUnmark);","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            taskToUnmark.unmark();","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"            System.out.println(Parser.formatMsg(\"OK, I\u0027ve marked this task as not done yet:\\n\\t\" + taskToUnmark));","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"            throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! Item to unmark does not exist.\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":42}},{"path":"src/main/java/duke/commands/WrongCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.commands;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" * WrongCommand is a Command.","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * This Command is used to indicate that a given Command does not exist.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"public class WrongCommand extends Command\u003cString\u003e {","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * Constructor for WrongCommand.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * When this class is instantiated, it immediately throws a new DukeException.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when this class is instantiated","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    public WrongCommand() throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        throw new DukeException(Parser.formatMsg(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"));","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Unused","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param todoList the user\u0027s list of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"    public void runCommand(TaskList todoList, String cmd) {","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":30}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import java.io.File;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * The main class for running Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" * This class contains all the abstracted details for Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"public class Duke {","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    private TaskList toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    public static Storage storage;","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    private final String filepath;","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Constructor for Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * Tries to retrieve the list of Tasks from the given path.","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param filepath to read/retrieve the list of Tasks from","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    public Duke(String filepath) {","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"        storage \u003d new Storage(this.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        // Attempt to open the storage file. If file does not exist, then create a new file.","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"            toDoList \u003d storage.addFileContent();","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"            Ui.handleLoadError();","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            // creates a new file in the current directory","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"            File f \u003d new File(this.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     * Driver for Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     * Runs Duke and awaits for Commands from the user.","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     * @throws IOException   when an IO error occurs while reading user input","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"    public void run() throws DukeException, IOException {","lastModifiedDate":"2022-01-19"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        String cmd;","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"        Ui.showWelcome();","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"        while (!(cmd \u003d br.readLine()).equals(\"bye\")) {","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            String commandType \u003d cmd.split(\" \")[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"            ui.burpReply(ui.determineType(commandType), toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        Ui.showBye();","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"     * Main method. Used for CLI programs","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"     * @param args unused","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"     * @throws IOException   when an IO error occurs","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    public static void main(String[] args) throws DukeException, IOException {","lastModifiedDate":"2022-01-19"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"        new Duke(\"./tasklist.txt\").run();","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":68}},{"path":"src/main/java/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * DukeException is an Exception.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" * A custom exception for all exceptions that occur in Duke.","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"     * Extends Exception class. DukeException can catch all kinds of Exceptions.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * @param msg the exception message to be shown","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2022-01-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(msg);","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Overriden toString method.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * Returns the message.","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * @return","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return this.getMessage();","lastModifiedDate":"2022-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":17,"-":10}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import duke.commands.WrongCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":" * Parser class.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" * This class handles the parsing of all user inputs and decides what to do","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" * based on the user input.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"public class Parser {","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * This method determines what Burp should do when the user gives an input","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * @param type     the Reply type, determined by Ui","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param cmd      the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * @return Returns a Command to indicate what the last Command run was","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public static Command parseCommands(Ui.Reply type, TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        String[] cmd_split \u003d cmd.split(\" \");","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"        switch (type) {","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"            case LIST:","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"                return new ListCommand(toDoList, cmd);","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            case TODO:","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"                return new AddToDoCommand(toDoList, cmd, Duke.storage);","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            case DEADLINE:","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"                return new AddDeadlineCommand(toDoList, cmd, Duke.storage);","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"            case EVENT:","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"                return new AddEventCommand(toDoList, cmd, Duke.storage);","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"            case MARK:","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"                return new MarkCommand(toDoList, Integer.parseInt(cmd_split[1]) - 1);","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            case UNMARK:","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"                return new UnmarkCommand(toDoList, Integer.parseInt(cmd_split[1]) - 1);","lastModifiedDate":"2022-01-19"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            case DELETE:","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"                return new DeleteCommand(toDoList, Integer.parseInt(cmd_split[1]) - 1);","lastModifiedDate":"2022-01-19"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            default:","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"                return new WrongCommand();","lastModifiedDate":"2022-01-19"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"     * Method to format strings accordingly.","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"     * @param msg the String to be formatted","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"     * @return a nicely formatted String.","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"    public static String formatMsg(String msg) {","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"        String tabbedLine \u003d \"\\t----------------------------------------------\";","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"        return (tabbedLine + \"\\n\\t\" + msg + \"\\n\" + tabbedLine);","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":61}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import java.io.File;","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":" * Storage class.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":" * This class handles the storing of the user\u0027s TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"public class Storage {","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    private static String filepath;","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * Constructor for Storage.","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * This tells Burp where to retrieve and save the user\u0027s TaskList to.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @param filepath the path to read from, or write to","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    // Reads and adds the file\u0027s content into the array","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Method to add the file\u0027s content to a new TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     * Tries to read from the given filepath. If the file exists, then this method","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * will retrieve its contents. Otherwise, a blank TaskList is returned","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     * @return the saved TaskList based on the filepath, or an empty TaskList if pathfile does not exist","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"     * @throws FileNotFoundException when the file cannot be found from the given path","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    public static TaskList addFileContent() throws FileNotFoundException {","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"        File f \u003d new File(Storage.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        TaskList toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"        // save commands into the file","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"            // mark status \u0026 type \u0026 descriptor \u0026 additional","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            String cmd \u003d s.nextLine();","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"            String[] cmd_split \u003d cmd.split(\"\u0026\");","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"            boolean mark \u003d cmd_split[0].equals(\"[X]\") ? true : false;","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            switch (cmd_split[1]) {","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"                case \"T\":","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"                    // ToDo(String task, boolean isDone)","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"                    toDoList.add(new ToDo(cmd_split[2], mark));","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"                    break;","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"                case \"E\":","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"                    // Event(String task, boolean isDone, String dateTime)","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"                    toDoList.add(new Event(cmd_split[2], mark, cmd_split[3]));","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"                    break;","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"                case \"D\":","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"                    // Deadline(String task, boolean isDone, String deadline)","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"                    toDoList.add(new Deadline(cmd_split[2], mark, cmd_split[3]));","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"                    break;","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"                default:","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"                    // do nothing","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"                    System.out.println(\"aaaa\");","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"                    break;","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"            }","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"        return toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"    // Writes the contents of toDoList into storage with specific formatting","lastModifiedDate":"2022-01-17"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"     * This method writes to the given filepath.","lastModifiedDate":"2022-01-23"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"     * Executed whenever a new Task is added to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"     * @throws IOException when IO error occurs","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"    public static void writeFileContent(TaskList toDoList) throws IOException {","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"        FileWriter fw \u003d new FileWriter(Storage.filepath);","lastModifiedDate":"2022-01-20"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"        for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"            Task currentTask \u003d toDoList.get(i);","lastModifiedDate":"2022-01-17"},{"lineNumber":87,"author":{"gitId":"bakano98"},"content":"            fw.write(currentTask.getStringCmd());","lastModifiedDate":"2022-01-17"},{"lineNumber":88,"author":{"gitId":"bakano98"},"content":"            fw.write(\"\\n\");","lastModifiedDate":"2022-01-17"},{"lineNumber":89,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":90,"author":{"gitId":"bakano98"},"content":"        fw.close();","lastModifiedDate":"2022-01-17"},{"lineNumber":91,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":92,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":93,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":93}},{"path":"src/main/java/duke/main/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import java.util.List;","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":" * TaskList class.","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":" * This class encapsulates the abstract List of Tasks.","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"public class TaskList {","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    private List\u003cTask\u003e toDoList;","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * Simply instantiates a new ArrayList of Tasks, which is used","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * to keep track of all the Tasks.","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        this.toDoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * Adds a Task to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @param t the Task to add","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    public void add(Task t) {","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"        this.toDoList.add(t);","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * Removes a Task from the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"     * @param index the index of the Task to be removed","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"     * @return the Task that has been removed","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"    public Task remove(int index) {","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.remove(index);","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     * Queries the number of items in the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"     * @return the number of items in the TaskList","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"    public int size() {","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.size();","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     * Retrievs a Task from the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"     * @param i the index of the Task to be retrieved","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"     * @return the retrieved Task","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    public Task get(int i) {","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"        return this.toDoList.get(i);","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":61}},{"path":"src/main/java/duke/main/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.main;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"public class Ui {","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"    private static Parser parser;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"     * The possible types of Reply that Burp can have, in response to","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"     * a Command","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    public enum Reply {","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"        LIST, TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, DEFAULT","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * Constructor for Ui.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * Simply creates a new Parser to parse Commands.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    public Ui() {","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    // to determine what kind of reply Burp should give","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * Determines the type of Reply Burp should have","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     * based on the user\u0027s input","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     * @param command the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"     * @return a Reply, based on the user\u0027s input","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    public static Reply determineType(String command) {","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"        switch (command) {","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"        case \"list\":","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"            return Reply.LIST;","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        case \"todo\":","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"            return Reply.TODO;","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        case \"deadline\":","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"            return Reply.DEADLINE;","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"        case \"event\":","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"            return Reply.EVENT;","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"            return Reply.MARK;","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"            return Reply.UNMARK;","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"            return Reply.DELETE;","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        default:","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"            return Reply.DEFAULT;","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted \"Bye\" message.","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"    public static void showBye() {","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"        System.out.println(parser.formatMsg(\"Bye. Hope to see you again soon!\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"     * Passes down the parameters to Parser in order to determine","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"     * what Burp should reply with.","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"     * @param type the type of Reply Burp should give","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"     * @param toDoList the user\u0027s List of Tasks","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"     * @param cmd the user\u0027s input to Burp","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"     * @throws DukeException when a WrongCommand is given","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"    public static void burpReply(Ui.Reply type, TaskList toDoList, String cmd) throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"        Parser.parseCommands(type, toDoList, cmd);","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted \"Welcome\" message.","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"bakano98"},"content":"    public static void showWelcome() {","lastModifiedDate":"2022-01-17"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"        System.out.println(parser.formatMsg(\"Hello from Burp\\n\\tWhat can I do for you?\"));","lastModifiedDate":"2022-01-17"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"     * Method to output a formatted file error message","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"bakano98"},"content":"    public static void handleLoadError() {","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"bakano98"},"content":"        System.out.println(\"File could not be loaded -- most likely it has not been created\");","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"bakano98":86}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" * Deadline is a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":" * Deadline has a date as an end time.","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    private String time;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    // Keeping this for now since we do not know what to use LocalDate date for...","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    private String deadline;","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    private LocalDate date;","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * This is a Task with a deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * @param task     the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     * @param isDone   the mark status of this deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * @param deadline the deadline of this Task","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    public Deadline(String task, boolean isDone, String deadline) {","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-01-13"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        this.dateFormatter(deadline);","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this Deadline to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for a Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor | deadline","lastModifiedDate":"2022-01-16"},{"lineNumber":37,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026D\u0026\" + super.getTask() + \"\u0026\" + this.deadline;","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":40,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"bakano98"},"content":"     * Formats a String into proper date/time format into","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"     * the form: 2-12-2019","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     * @param dateTime String that is of the form 2/12/2019 1800","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"    private void dateFormatter(String dateTime) {","lastModifiedDate":"2022-01-19"},{"lineNumber":47,"author":{"gitId":"bakano98"},"content":"        // the string is of the form: 2/12/2019 1800","lastModifiedDate":"2022-01-16"},{"lineNumber":48,"author":{"gitId":"bakano98"},"content":"        dateTime \u003d dateTime.replace(\u0027/\u0027, \u0027-\u0027);","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"bakano98"},"content":"        String[] splitDateTime \u003d dateTime.split(\" \");","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"bakano98"},"content":"        try {","lastModifiedDate":"2022-01-16"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"            this.date \u003d LocalDate.parse(splitDateTime[0]);","lastModifiedDate":"2022-01-16"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"            this.time \u003d splitDateTime[1];","lastModifiedDate":"2022-01-19"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-01-16"},{"lineNumber":54,"author":{"gitId":"bakano98"},"content":"//            System.out.println(\"No date format given\");","lastModifiedDate":"2022-01-19"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":56,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":57,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"     * Gets the LocalDate of this Deadline, in String format.","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"bakano98"},"content":"     * @return the date, in String format","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"bakano98"},"content":"    public String getDate() {","lastModifiedDate":"2022-01-16"},{"lineNumber":64,"author":{"gitId":"bakano98"},"content":"        return date.toString();","lastModifiedDate":"2022-01-16"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"     * Retrieves the (by: ...) part of a Deadline.","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"bakano98"},"content":"     * @return back part of a Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String getDeadline() {","lastModifiedDate":"2022-01-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return \"(by:\" + this.deadline + \")\";","lastModifiedDate":"2022-01-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":76,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":78,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Deadline","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return \"[D]\" + super.toString() + this.getDeadline();","lastModifiedDate":"2022-01-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":72,"-":13}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"    private String dateTime; // (at: date time)","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"    public Event(String task, boolean isDone, String dateTime) {","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this Event to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor | datetime","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026E\u0026\" + super.getTask() + \"\u0026\" + this.dateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     * Retrieves the (at: ...) part of an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * @return back part of an Event","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public String getDateTime() {","lastModifiedDate":"2022-01-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return \"(at:\" + this.dateTime + \")\";","lastModifiedDate":"2022-01-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of an Event.","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Event","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return \"[E]\" + super.toString() + this.getDateTime();","lastModifiedDate":"2022-01-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":26,"-":14}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * An abstract class that represents a Task in a TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private String task;","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"     * Abstract method that gets the Command used to add a Task","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"     * @return a Command in String format","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    public abstract String getStringCmd();","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     * Constructor for a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"     * Creates a new Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"     * @param task   the task description","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"     * @param isDone whether this task has been done or not","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    public Task(String task, boolean isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-01-13"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"     * Gets the status of this Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"bakano98"},"content":"     * @return String representation of whether a Task is done or not","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"bakano98"},"content":"    public String getIsDone() {","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"bakano98"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return \"[X]\";","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2022-01-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return \"[ ]\";","lastModifiedDate":"2022-01-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-01-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":42,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"bakano98"},"content":"     * Gets the task\u0027s description.","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":45,"author":{"gitId":"bakano98"},"content":"     * @return description of the Task","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this.task;","lastModifiedDate":"2022-01-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":51,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"bakano98"},"content":"     * Marks this Task as being done.","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void mark() {","lastModifiedDate":"2022-01-13"},{"lineNumber":55,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":58,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"bakano98"},"content":"     * Marks this task as being not done","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void unmark() {","lastModifiedDate":"2022-01-13"},{"lineNumber":62,"author":{"gitId":"bakano98"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":65,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted Task","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":72,"author":{"gitId":"bakano98"},"content":"        return this.getIsDone() + this.getTask();","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":47,"-":27}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package duke.tasks;","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":" * ToDo is a Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":" * This is a simple Task that only has a description.","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-13"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    public ToDo(String task, boolean isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"        super(task, isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"     * Get the Command (in String form) to add this ToDo to the TaskList.","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"     * Useful for saving/reading from the save file.","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"     * @return a String formatted specially for a ToDo Task.","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    public String getStringCmd() {","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"        // mark status | type | descriptor","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"        return super.getIsDone() + \"\u0026T\u0026\" + super.getTask();","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"    /**","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"     * Gets the String version of a ToDo","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"     *","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"     * @return String-formatted ToDo","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"     */","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2022-01-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-13"}],"authorContributionMap":{"bakano98":24,"-":9}},{"path":"src/main/java/junit/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"// Important note: For the test cases, there\u0027s no white spacing because the text hasn\u0027t been formatted yet.","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"// So the expected output is the raw output from Deadline.java","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"    public void testStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false,\"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026D\u0026deadlineTest\u0026deadlineTestDate\", testItem.getStringCmd(), \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"    public void testGetDeadline() {","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false,\"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"(by:deadlineTestDate)\", testItem.getDeadline(), \"getDeadline() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        Deadline testItem \u003d new Deadline(\"deadlineTest\", false, \"deadlineTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[D][ ]deadlineTest(by:deadlineTestDate)\", testItem.toString(), \"toString() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":27}},{"path":"src/main/java/junit/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"public class EventTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"    public void testStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false,\"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026E\u0026eventTest\u0026eventTestDate\", testItem.getStringCmd(), \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"    public void testGetDateTime() {","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false,\"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"(at:eventTestDate)\", testItem.getDateTime(), \"getDateTime() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"        Event testItem \u003d new Event(\"eventTest\", false, \"eventTestDate\");","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[E][ ]eventTest(at:eventTestDate)\", testItem.toString(), \"toString() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":26}},{"path":"src/main/java/junit/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"import duke.commands.WrongCommand;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"import duke.main.Parser;","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"import duke.main.DukeException;","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"public class ParserTest  {","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"    TaskList toDoList \u003d new TaskList();","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"bakano98"},"content":"    void parserTest() throws DukeException {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.LIST, toDoList, \"list\") instanceof ListCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.TODO, toDoList, \"todo smth\") instanceof AddToDoCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.DEADLINE, toDoList, \"deadline smth /by smth\") instanceof AddDeadlineCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.EVENT, toDoList, \"event smth /at somewhere\") instanceof AddEventCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.MARK, toDoList, \"mark 1\") instanceof MarkCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.UNMARK, toDoList, \"unmark 1\") instanceof UnmarkCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":28,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.DELETE, toDoList, \"delete 1\") instanceof DeleteCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"bakano98"},"content":"        assertTrue(Parser.parseCommands(Ui.Reply.DEFAULT, toDoList, \"dsadadsa\") instanceof WrongCommand);","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":31,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":31}},{"path":"src/main/java/junit/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"package junit;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"public class ToDoTest {","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"    public void testGetStringCmd() {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"        ToDo test \u003d new ToDo(\"todoTest\", false);","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[ ]\u0026T\u0026todoTest\", test.getStringCmd(), \"getStringCmd() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"bakano98"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"bakano98"},"content":"    @Test","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"bakano98"},"content":"    public void testToString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"bakano98"},"content":"        ToDo test \u003d new ToDo(\"toDoTest\", false);","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"bakano98"},"content":"        assertEquals(\"[T][ ]toDoTest\", test.toString(), \"toString() works as intended\");","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"bakano98"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bakano98"},"content":"todo 1","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"bakano98"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"bakano98"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"bakano98"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"bakano98"},"content":"mark 1","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"bakano98"},"content":"mark 2","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"bakano98"},"content":"unmark 1","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"bakano98"},"content":"delete 2","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"bakano98"},"content":"deadline me /by 11-12-2100","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"bakano98"},"content":"delete 3","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"bakano98"},"content":"dasda","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"bakano98":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"bakano98"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\main\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java ..\\src\\main\\java\\duke\\commands\\*.java","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bakano98"},"content":"java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bakano98":2,"-":19}}]
