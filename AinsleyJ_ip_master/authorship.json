[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"# main.Duke project template","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"3. After that, locate the `src/main/java/main.Duke.java` file, right-click it, and choose `Run main.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"AinsleyJ":2,"-":22}},{"path":"src/main/duke/instruction/Add.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":" * Represents the \u0027add\u0027 instruction to main.Duke.","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"public final class Add extends Instruction {","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    private Task task;","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor for an add instruction.","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * @param task The task to be added.","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    protected Add(Task task, TaskManager tasks) throws IllegalArgumentException {","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"        super(\"add\", tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"     * Adds the task into the task manager, and return the message when the action is done.","lastModifiedDate":"2022-01-16"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The UI to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(tasks.addTask(this.task));","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":35}},{"path":"src/main/duke/instruction/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"final class Delete extends Instruction {","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"    int toDeleteIndex;","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    Task toDelete;","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"     * Instantiates an instruction \"delete\", with the given line of instruction.","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction for deletion, starting with \u0027delete\u0027.","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager used.","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * @throws InvalidInstructionException If the given instruction does not contain a valid index.","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"    Delete(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"        this(parseInstruction(instruction, tasks), tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    private Delete(int index, TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"        super(\"delete\", tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        this.toDeleteIndex \u003d index;","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"        this.toDelete \u003d tasks.getTaskIndex(index);","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"    private static int parseInstruction(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d instruction.split(\" \");","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"        int index;","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length \u003c 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the index of the task to be deleted cannot be empty!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"        } else if (args.length \u003e 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, there should be only one index of task after \u0027delete\u0027.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"            index \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, delete operation only accepts integer index!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"        if (!tasks.isValidIndex(index)) {","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the task provided doesn\u0027t exist!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        return index;","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"     * Performs deletion of the task.","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The UI to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"     * @return The message after deletion.","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"        tasks.deleteIndex(toDeleteIndex);","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(\"You have successfully deleted:\\n\" +","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"                this.toDelete.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"AinsleyJ":67}},{"path":"src/main/duke/instruction/Instruction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":" * A task represents an instruction inputted to main.Duke by a user.","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":" * At this stage, a task has minimally a name (description).","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"public abstract class Instruction {","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    private String description;","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"    private static final String TERMINATE_INSTRUCTION \u003d \"bye\";","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskManager tasks;","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor to be used by subclasses.","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"     * @param description The description of the instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used with the instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    protected Instruction(String description, TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"    protected static String getTerminateInstruction() {","lastModifiedDate":"2022-01-16"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"        return TERMINATE_INSTRUCTION;","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"     * Factory method. Create an instance of subclass of instructions according to the string inputted, and returns it.","lastModifiedDate":"2022-01-16"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"     * The instruction must have at least one word.","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of command.","lastModifiedDate":"2022-01-16"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"     * @return A corresponding instance of instruction.","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     * @throws DukeException If the instruction is invalid.","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"    public static Instruction of(String instruction, TaskManager tasks)","lastModifiedDate":"2022-01-30"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"            throws DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"        // Extract the words in the instruction. The first word should determine the type of instruction to be returned.","lastModifiedDate":"2022-01-16"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"        String[] words \u003d instruction.split(\" \", 2);","lastModifiedDate":"2022-01-16"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"        if (words.length \u003d\u003d 0) {","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, I don\u0027t know what empty instruction means.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"        String type \u003d words[0];","lastModifiedDate":"2022-01-16"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"        switch (type) {","lastModifiedDate":"2022-01-16"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"        case \"list\":","lastModifiedDate":"2022-01-16"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"            return new ListTasks(tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"        case Instruction.TERMINATE_INSTRUCTION:","lastModifiedDate":"2022-01-16"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"            return new Quit(Instruction.TERMINATE_INSTRUCTION, tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-16"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"            // Mark the task as done. If the second parameter is not an integer, or if the task does not exit, throw","lastModifiedDate":"2022-01-16"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"            // an exception. (To be implemented later)","lastModifiedDate":"2022-01-16"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"            return new MarkAsDone(instruction, tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-16"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"            // Mark the task as not done. If the second parameter is not an integer, or if the task does not exit,","lastModifiedDate":"2022-01-16"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"            // throw an exception. (To be implemented later)","lastModifiedDate":"2022-01-16"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"            return new UnmarkAsDone(instruction, tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"        case \"todo\":","lastModifiedDate":"2022-01-16"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"        case \"event\":","lastModifiedDate":"2022-01-16"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"        case \"deadline\":","lastModifiedDate":"2022-01-16"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"            // These three cases are used to add tasks of different types.","lastModifiedDate":"2022-01-16"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"            return new Add(Task.of(instruction), tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"            return new Delete(instruction, tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"        default:","lastModifiedDate":"2022-01-16"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, I\u0027m not sure what you mean.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"    protected void setDescription(String description) {","lastModifiedDate":"2022-01-16"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-16"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"     * @return the description of the instruction.","lastModifiedDate":"2022-01-16"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"    protected String getDescription() {","lastModifiedDate":"2022-01-16"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"        return this.description;","lastModifiedDate":"2022-01-16"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"     * Performs the associated action of the task. By default, there is no action associated to a task.","lastModifiedDate":"2022-01-16"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The UI to be used by this instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"     * @return The message once the instruction is executed.","lastModifiedDate":"2022-01-16"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"    public abstract void act(Ui ui);","lastModifiedDate":"2022-01-30"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"     * Returns whether current instruction is a terminating instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"     * @return True if current instruction is a terminating instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"    public boolean isTerminatingInstruction() {","lastModifiedDate":"2022-01-30"},{"lineNumber":103,"author":{"gitId":"AinsleyJ"},"content":"        return this instanceof Quit;","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":105}},{"path":"src/main/duke/instruction/InvalidInstructionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" * Represents the exception that occurs when the user input of command is invalid.","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"public class InvalidInstructionException extends DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    protected InvalidInstructionException(String message) {","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"        super(message);","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":13}},{"path":"src/main/duke/instruction/ListTasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"import java.util.*;","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":" * Represents the instruction \"list\".","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"final class ListTasks extends Instruction {","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor of the instruction, adds the description.","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"    ListTasks(TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"        super(\"list\", tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     * Performs a search on the list of tasks, and return them as formatted strings.","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The UI to be used.","lastModifiedDate":"2022-01-30"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"        List\u003cTask\u003e tasks \u003d this.tasks.listOfTasks();","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(ListTasks.getTaskList(tasks));","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"     * Obtains the list of tasks, and convert them into a single string.","lastModifiedDate":"2022-01-16"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The list of tasks to be converted.","lastModifiedDate":"2022-01-16"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"     * @return The converted string.","lastModifiedDate":"2022-01-16"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"    private static String getTaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2022-01-16"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"        StringBuilder result \u003d new StringBuilder(\"List of tasks:\\n\");","lastModifiedDate":"2022-01-16"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-16"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"            result.append(\"     \").append(i + 1).append(\". \").append(tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"        result.append(\"\u003e\u003e Now you have \").append(tasks.size()).append(\" tasks in the list.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"        return result.toString();","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":50}},{"path":"src/main/duke/instruction/MarkAsDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":" * Represents the instruction \"mark as done\".","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"final class MarkAsDone extends Instruction {","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    private Task toMark;","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor 1. Initializes the instruction using an index of task.","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * @param index The index of the task.","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    private MarkAsDone(int index, TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"        super(\"mark\", tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"        this.toMark \u003d tasks.getTaskIndex(index);","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor 2. Takes in the whole instruction line and initializes the instruction.MarkAsDone instruction.","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction. It has to be guaranteed that the first word is \u0027mark\u0027.","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"     * @throws InvalidInstructionException If it cannot find the task to be deleted.","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"    protected MarkAsDone(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"        this(MarkAsDone.parseInstruction(instruction, tasks), tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     * Takes in a line of instruction (starting with a word that invokes this class), then parses it and returns the","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"     * index of task to be marked.","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction.","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager used by this instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"     * @return The index of the object to be marked.","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"     * @throws InvalidInstructionException If (i) the instruction has no valid integer to be parsed; or (ii) the index is","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"     * out of range.","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"    private static int parseInstruction(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d instruction.split(\" \", 2);","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"        int index;","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length \u003c 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the index of the task to be marked cannot be empty!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"        } else if (args.length \u003e 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, there should be only one index of task after \u0027mark\u0027.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"            index \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, mark operation only accepts integer index!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"        if (!tasks.isValidIndex(index)) {","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the task provided doesn\u0027t exist!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"        return index;","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"     * Performs the action to mark the encapsulated task as done.","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The UI to be used by this instruction.","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"        TaskManager.markAsDone(this.toMark);","lastModifiedDate":"2022-01-16"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(\"Nice! I\u0027ve marked this task as done:\\n     \" + this.toMark.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":82}},{"path":"src/main/duke/instruction/Quit.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" * Represents the instruction \u0027quit\u0027.","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"final class Quit extends Instruction {","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    private static final String SEE_YOU_MESSAGE \u003d \"Bye!\";","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor, sets the description of the instruction.","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     * @param message The terminating command that signals the end of program.","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    Quit(String message, TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"        super(message, tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"     * Returns a see-you message.","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"     * @return The see-you message.","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(Quit.SEE_YOU_MESSAGE);","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":31}},{"path":"src/main/duke/instruction/UnmarkAsDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":" * Represents the instruction \"unmark\".","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"final class UnmarkAsDone extends Instruction {","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    private Task toUnmark;","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor 1. Initializes the instruction using an index of task.","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * @param index The index of the task.","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    private UnmarkAsDone(int index, TaskManager tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"        super(\"unmark\", tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"        this.toUnmark \u003d tasks.getTaskIndex(index);","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor 2. Takes in the whole instruction line and initializes the instruction.UnmarkAsDone instruction.","lastModifiedDate":"2022-01-30"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction. It has to be guaranteed that the first word is \u0027unmark\u0027.","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     * @throws InvalidInstructionException If the instruction cannot be interpreted.","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"    protected UnmarkAsDone(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"        this(UnmarkAsDone.parseInstruction(instruction, tasks), tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"     * Takes in a line of instruction (starting with a word that invokes this class), then parses it and returns the","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     * index of task to be marked.","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction.","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"     * @return The index of the object to be marked.","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"     * @throws InvalidInstructionException If (i) the instruction has no valid integer to be parsed; or (ii) the index is","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"     * out of range.","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"    private static int parseInstruction(String instruction, TaskManager tasks) throws InvalidInstructionException {","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d instruction.split(\" \", 2);","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"        int index;","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length \u003c 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the index of the task to be unmarked cannot be empty!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"        } else if (args.length \u003e 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, there should be only one index of task after \u0027unmark\u0027.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"            index \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, unmark operation only accepts integer index!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"        if (!tasks.isValidIndex(index)) {","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"            throw new InvalidInstructionException(\"Oops, the task provided doesn\u0027t exist!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"        return index;","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"    public void act(Ui ui) {","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"        TaskManager.markAsNotDone(this.toUnmark);","lastModifiedDate":"2022-01-16"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"        ui.printMessage(\"I\u0027ve marked this task as not done yet:\\n\" + this.toUnmark.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":75}},{"path":"src/main/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.main;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.instruction.Instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.storage.Storage;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    private static final String END_MESSAGE \u003d \"Bye!\";","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"    private static final String FILE_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * Constructs a main.Duke -- a personal task manager.","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     * @param storage The storage to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"     * @param taskManager The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     * @param ui The ui to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    private Duke(Storage storage, TaskManager taskManager, Ui ui) {","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"        this.taskManager \u003d taskManager;","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"        Storage storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"        TaskManager taskManager \u003d new TaskManager(storage);","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"        Ui ui \u003d new Ui(System.out, System.in);","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"        Duke duke \u003d new Duke(storage, taskManager, ui);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"        duke.run();","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"        taskManager.writeBack(storage);","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"    private void run() {","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"        while (!isExit) {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"                Instruction currentInstruction \u003d ui.getNextInstruction(taskManager);","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"                currentInstruction.act(ui);","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"                isExit \u003d currentInstruction.isTerminatingInstruction();","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"                System.err.println(e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"            } finally {","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"                ui.askForInstruction();","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"AinsleyJ":56,"-":4}},{"path":"src/main/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.main;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":" * An abstract clas that represents the exceptions related to main.Duke.","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"    private String message;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"    protected DukeException(String message) {","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    public String getMessage() {","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"        return message;","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":17}},{"path":"src/main/duke/parse/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.parse;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.instruction.Instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":" * Represents the input parser for main.Duke.","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":" * This class is responsible for parsing user commands and interpret them as \u003ccode\u003einstruction.Instruction\u003c/code\u003es.","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"public class Parser {","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    private InputStream inputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     * Constructors a parser, with the specified input stream.","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"     * @param inputStream The input stream to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    public Parser(InputStream inputStream) {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        this.inputStream \u003d inputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     * Parses a string into an instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used by the instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"     * @return The instruction generated.","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"     * @throws DukeException If the instruction is not recognized.","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"    public Instruction parseInstruction(TaskManager tasks)","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"            throws DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"        Scanner sc \u003d new Scanner(inputStream);","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"        return Instruction.of(sc.nextLine(), tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":41}},{"path":"src/main/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.storage;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskNotFoundException;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import java.io.File;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":" * Encapsulates the operations related to hard-disk storage.","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"public class Storage {","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"    private String filePath;","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"    private File taskFile;","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"     * Constructs a storage object using a file path.","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"     * If the file with the specified path does not exist, creates a new empty file on that location.","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"     * @param filePath The file path to be read from.","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"        this.taskFile \u003d new File(filePath);","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"        if (!taskFile.exists()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"                taskFile \u003d createTaskFile(taskFile);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"                System.err.println(\"Oops, I am not able to create the file to store your task.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes an empty file with metadata.","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"     * @param taskFile The file to be initialized.","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"    private File createTaskFile(File taskFile) throws IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"        // Create the directory, if not exists yet.","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        if (!taskFile.exists()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"            taskFile.getParentFile().mkdirs();","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"            taskFile.createNewFile();","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"        FileOutputStream writeData \u003d new FileOutputStream(taskFile);","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"        ObjectOutputStream writeStream \u003d new ObjectOutputStream(writeData);","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"        writeStream.writeInt(0);","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"        writeStream.writeChar(\u0027#\u0027);","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"        writeStream.flush();","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"        writeStream.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"        return taskFile;","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"     * Reads the tasks from the given file path into an \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"     * @return An \u003ccode\u003eArrayList\u003c/code\u003e that stores the tasks.","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"     * @throws FileNotFoundException If the file path is invalid.","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"    public ArrayList\u003cTask\u003e readTasks()","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"            throws FileNotFoundException {","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"            FileInputStream readData \u003d new FileInputStream(this.taskFile);","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"            ObjectInputStream readStream \u003d new ObjectInputStream(readData);","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"            // Retrieve metadata.","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"            int size \u003d readStream.readInt();","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"            readStream.readChar();","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"            for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"                Task currentTask \u003d Task.retrieveTask((HashMap\u003cString, Object\u003e) readStream.readObject());","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"                result.add(currentTask);","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"            readStream.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"        } catch (IOException | ClassNotFoundException | TaskNotFoundException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"        return result;","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"     * Writes an array of tasks into the targeted file location.","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The tasks to be written.","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"    public void writeTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2022-01-30"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"AinsleyJ"},"content":"            FileOutputStream writeData \u003d new FileOutputStream(this.taskFile);","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"AinsleyJ"},"content":"            ObjectOutputStream writeStream \u003d new ObjectOutputStream(writeData);","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"AinsleyJ"},"content":"            // Metadata: stores the number of tasks in the list.","lastModifiedDate":"2022-01-29"},{"lineNumber":107,"author":{"gitId":"AinsleyJ"},"content":"            writeStream.writeInt(tasks.size());","lastModifiedDate":"2022-01-29"},{"lineNumber":108,"author":{"gitId":"AinsleyJ"},"content":"            writeStream.writeChar(\u0027#\u0027);","lastModifiedDate":"2022-01-29"},{"lineNumber":109,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":110,"author":{"gitId":"AinsleyJ"},"content":"            for (Task t : tasks) {","lastModifiedDate":"2022-01-29"},{"lineNumber":111,"author":{"gitId":"AinsleyJ"},"content":"                // Write the info table as its serialization.","lastModifiedDate":"2022-01-29"},{"lineNumber":112,"author":{"gitId":"AinsleyJ"},"content":"                writeStream.writeObject(t.getInfoTable());","lastModifiedDate":"2022-01-29"},{"lineNumber":113,"author":{"gitId":"AinsleyJ"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":114,"author":{"gitId":"AinsleyJ"},"content":"            writeStream.flush();","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"AinsleyJ"},"content":"            writeStream.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":116,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":117,"author":{"gitId":"AinsleyJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":118,"author":{"gitId":"AinsleyJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-29"},{"lineNumber":119,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":120,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":121,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":122,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":122}},{"path":"src/main/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":" * Represents a deadline, which has to be done within a specific date/time.","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"final class Deadline extends Task {","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    private final String DUE_TIME_FIELD \u003d \"due_time\";","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"    private LocalDate dueTime;","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes a deadline with a name (description).","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     * @param description The name of the task.","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"     * @param dueTime     The due time for the deadline. The format should be \u0027YYYY-MM-DD\u0027.","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    private Deadline(String description, String dueTime) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"        super(description);","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"            this.dueTime \u003d LocalDate.parse(dueTime);","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"        } catch(DateTimeParseException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"            throw new FailedToInterpretTaskException(\"Oops, the format of date should be YYYY-MM-DD!\");","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"    private Deadline(String[] details) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"        this(details[0], details[1]);","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     * The constructor to be called. Instantiates an event using a single string containing all the details.","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"     * @param details Contains the description and time range for the deadline.","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"     * @throws FailedToInterpretTaskException If unable to interpret the string as a deadline.","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"    protected Deadline(String details) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"        this(parseDetails(details));","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"    public Deadline(HashMap\u003cString, Object\u003e infoTable) {","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        super(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"        this.dueTime \u003d (LocalDate) infoTable.get(DUE_TIME_FIELD);","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"     * Parses the details containing the event description and due time.","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"     * (The details will be encapsulated in a separated class in the future if needed).","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"     * @param details The string containing the event description and due time.","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"     * @return An array of strings containing the description and due time.","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"    private static String[] parseDetails(String details) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d details.split(\" /by \", 2);","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length !\u003d 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"            throw new FailedToInterpretTaskException(","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"                    \"Oops, both of the description and the due time of the deadline can\u0027t be empty.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"        return args;","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"    protected String getTypeIcon() {","lastModifiedDate":"2022-01-16"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"        return \"[D]\";","lastModifiedDate":"2022-01-16"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskType getType() {","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"        return TaskType.DEADLINE;","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"    public HashMap\u003cString, Object\u003e getInfoTable() {","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"        var infoTable \u003d this.initializeInfoTable();","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"        infoTable.put(DUE_TIME_FIELD, this.dueTime);","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"        return infoTable;","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"     * Converts a deadline to a string.","lastModifiedDate":"2022-01-16"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"     * @return The string that represents the deadline.","lastModifiedDate":"2022-01-16"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-16"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"        return super.toString() + \" (by \" +","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"                this.dueTime.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)) + \")\";","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":102}},{"path":"src/main/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" * Represents an event, which has a start time and end time.","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"final class Event extends Task {","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"    // At this stage, the time range is treated as a string.","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    private String timeRange;","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    private final String TIME_RANGE_FIELD \u003d \"time_range\";","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes an event with a name (description) and a time range.","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * @param description The name of the task.","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     * @param timeRange   The range of time associated with the event.","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    private Event(String description, String timeRange) {","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"        super(description);","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"        this.timeRange \u003d timeRange;","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"    private Event(String[] details) {","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"        this(details[0], details[1]);","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"     * Constructs an \u003ccode\u003etask.Event\u003c/code\u003e.","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"     * Instantiates an event using a single string containing all the details.","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"     * @param details Contains the description and time range for the event.","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"     * @throws FailedToInterpretTaskException If failed to interpret the task as an event.","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"    protected Event(String details) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"        this(parseDetails(details));","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"    protected Event(HashMap\u003cString, Object\u003e infoTable) {","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"        super(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"        this.timeRange \u003d (String) infoTable.get(TIME_RANGE_FIELD);","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"     * Parses the details containing the event description and time range.","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"     * (The details will be encapsulated in a separated class in the future if needed).","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"     * @param details The string containing the event description and time range.","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"     * @return An array of strings containing the description and time range.","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"    private static String[] parseDetails(String details) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d details.split(\" /at \", 2);","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length !\u003d 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"            throw new FailedToInterpretTaskException(","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"                    \"Oops, both of the description and the time of the event can\u0027t be empty.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"        return args;","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"     * Turns the current \u003ccode\u003etask.Task\u003c/code\u003e into a \u003ccode\u003eHashMap\u003c/code\u003e that contains the necessary information to be","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"     * written into hard disk.","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"     * @return A table contains the information.","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"    public HashMap\u003cString, Object\u003e getInfoTable() {","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"        var infoTable \u003d this.initializeInfoTable();","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"        infoTable.put(TIME_RANGE_FIELD, this.timeRange);","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"        return infoTable;","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"    protected String getTypeIcon() {","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"        return \"[E]\";","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskType getType() {","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"        return TaskType.EVENT;","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"     * Converts an event to a string.","lastModifiedDate":"2022-01-16"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"     * @return The string that represents the event.","lastModifiedDate":"2022-01-16"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-16"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"        return super.toString() + \" (at \" + this.timeRange + \")\";","lastModifiedDate":"2022-01-16"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"},{"lineNumber":103,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":104,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":104}},{"path":"src/main/duke/task/FailedToInterpretTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"class FailedToInterpretTaskException extends DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"    protected FailedToInterpretTaskException(String message) {","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"        super(message);","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":11}},{"path":"src/main/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" * Represent a task that is stored by main.Duke.","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    private String description;","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"    // Used for generating info table about the task.","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    private static final String DESCRIPTION_FIELD \u003d \"description\";","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"    private static final String IS_DONE_FILED \u003d \"is_done\";","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    private static final String TASK_TYPE_FIELD \u003d \"task_type\";","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor of a task. Sets the description of the task, and set the isDone status to be false by default.","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"     * @param description The description of the task.","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    protected Task(String description) {","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     * Constructor using an infoTable.","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"     * @param infoTable The \u003ccode\u003eHashMap\u003c/code\u003e that contains the information about the current task.","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"    protected Task(HashMap\u003cString, Object\u003e infoTable) {","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"        this.description \u003d (String) infoTable.get(DESCRIPTION_FIELD);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"        this.isDone \u003d (boolean) infoTable.get(IS_DONE_FILED);","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"     * Factory method. Parses the instruction and determines the type of task to be instantiated.","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"     * @param instruction The line of instruction used to create a task.","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"     * @return The instantiated task.","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"     * @throws FailedToInterpretTaskException If the instruction (i) does not contain valid type of task; or","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"     * (ii) does not contain a valid description of task.","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"    public static Task of(String instruction) throws FailedToInterpretTaskException {","lastModifiedDate":"2022-01-30"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        String[] args \u003d instruction.split(\" \", 2);","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"        String type \u003d args[0];","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"        if (args.length \u003c 2) {","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"            throw new FailedToInterpretTaskException(\"Oops, a type and a description for the task must be provided.\");","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"        // Contains the description and possibly other information about the task.","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"        String details \u003d args[1];","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"        switch (type) {","lastModifiedDate":"2022-01-16"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"            case \"todo\":","lastModifiedDate":"2022-01-16"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"                return new ToDo(details);","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"            case \"event\":","lastModifiedDate":"2022-01-16"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"                return new Event(details);","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"            case \"deadline\":","lastModifiedDate":"2022-01-16"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"                return new Deadline(details);","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"            default:","lastModifiedDate":"2022-01-16"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"                // Invalid type.","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"                throw new IllegalArgumentException(\"Oops, the type of the task must be todo/event/deadline.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"     * Marks the current task as done.","lastModifiedDate":"2022-01-16"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"    protected void markAsDone() {","lastModifiedDate":"2022-01-16"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-16"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"     * Marks the current task as not done.","lastModifiedDate":"2022-01-16"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"    protected void markAsNotDone() {","lastModifiedDate":"2022-01-16"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-16"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"     * Obtains the status of the task.","lastModifiedDate":"2022-01-16"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"     * @return True if the task is done already, false otherwise.","lastModifiedDate":"2022-01-16"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"    protected boolean isDone() {","lastModifiedDate":"2022-01-16"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"        return this.isDone;","lastModifiedDate":"2022-01-16"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-16"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"        return this.getTypeIcon() + this.getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2022-01-16"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":103,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":104,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":105,"author":{"gitId":"AinsleyJ"},"content":"     * Gets the icon that represents the status of the task.","lastModifiedDate":"2022-01-16"},{"lineNumber":106,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":107,"author":{"gitId":"AinsleyJ"},"content":"     * @return The icon.","lastModifiedDate":"2022-01-16"},{"lineNumber":108,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":109,"author":{"gitId":"AinsleyJ"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2022-01-29"},{"lineNumber":110,"author":{"gitId":"AinsleyJ"},"content":"        return this.isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2022-01-16"},{"lineNumber":111,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":112,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":113,"author":{"gitId":"AinsleyJ"},"content":"    protected abstract String getTypeIcon();","lastModifiedDate":"2022-01-16"},{"lineNumber":114,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":115,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":116,"author":{"gitId":"AinsleyJ"},"content":"     * Returns the type of the current task.","lastModifiedDate":"2022-01-29"},{"lineNumber":117,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":118,"author":{"gitId":"AinsleyJ"},"content":"     * @return The type of the task.","lastModifiedDate":"2022-01-29"},{"lineNumber":119,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":120,"author":{"gitId":"AinsleyJ"},"content":"    protected abstract TaskType getType();","lastModifiedDate":"2022-01-29"},{"lineNumber":121,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":122,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":123,"author":{"gitId":"AinsleyJ"},"content":"     * Turns the current \u003ccode\u003etask.Task\u003c/code\u003e into a \u003ccode\u003eHashMap\u003c/code\u003e that contains the necessary information to be","lastModifiedDate":"2022-01-30"},{"lineNumber":124,"author":{"gitId":"AinsleyJ"},"content":"     * written into hard disk.","lastModifiedDate":"2022-01-29"},{"lineNumber":125,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":126,"author":{"gitId":"AinsleyJ"},"content":"     * @return The HashMap containing the information about the current \u003ccode\u003etask.Task\u003c/code\u003e.","lastModifiedDate":"2022-01-30"},{"lineNumber":127,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":128,"author":{"gitId":"AinsleyJ"},"content":"    public abstract HashMap\u003cString, Object\u003e getInfoTable();","lastModifiedDate":"2022-01-30"},{"lineNumber":129,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":130,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":131,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes the information table for the current task. This table contains the (attribute, value) for all the","lastModifiedDate":"2022-01-29"},{"lineNumber":132,"author":{"gitId":"AinsleyJ"},"content":"     * common attributes that a \u003ccode\u003etask.Task\u003c/code\u003e contains.","lastModifiedDate":"2022-01-30"},{"lineNumber":133,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":134,"author":{"gitId":"AinsleyJ"},"content":"     * @return","lastModifiedDate":"2022-01-29"},{"lineNumber":135,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":136,"author":{"gitId":"AinsleyJ"},"content":"    protected HashMap\u003cString, Object\u003e initializeInfoTable() {","lastModifiedDate":"2022-01-29"},{"lineNumber":137,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":138,"author":{"gitId":"AinsleyJ"},"content":"        HashMap\u003cString, Object\u003e infoTable \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-01-29"},{"lineNumber":139,"author":{"gitId":"AinsleyJ"},"content":"        infoTable.put(TASK_TYPE_FIELD, this.getType());","lastModifiedDate":"2022-01-29"},{"lineNumber":140,"author":{"gitId":"AinsleyJ"},"content":"        infoTable.put(DESCRIPTION_FIELD, this.description);","lastModifiedDate":"2022-01-29"},{"lineNumber":141,"author":{"gitId":"AinsleyJ"},"content":"        infoTable.put(IS_DONE_FILED, this.isDone);","lastModifiedDate":"2022-01-29"},{"lineNumber":142,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":143,"author":{"gitId":"AinsleyJ"},"content":"        return infoTable;","lastModifiedDate":"2022-01-29"},{"lineNumber":144,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":145,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":146,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":147,"author":{"gitId":"AinsleyJ"},"content":"     * Retrieves a \u003ccode\u003etask.Task\u003c/code\u003e from a hash table that contains the relevant data.","lastModifiedDate":"2022-01-30"},{"lineNumber":148,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":149,"author":{"gitId":"AinsleyJ"},"content":"     * @param infoTable The \u003ccode\u003eHashMap\u003c/code\u003e that contains the data of a \u003ccode\u003etask.Task\u003c/code\u003e.","lastModifiedDate":"2022-01-30"},{"lineNumber":150,"author":{"gitId":"AinsleyJ"},"content":"     * @return The task obtained.","lastModifiedDate":"2022-01-29"},{"lineNumber":151,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":152,"author":{"gitId":"AinsleyJ"},"content":"    public static Task retrieveTask(HashMap\u003cString, Object\u003e infoTable) throws TaskNotFoundException {","lastModifiedDate":"2022-01-30"},{"lineNumber":153,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":154,"author":{"gitId":"AinsleyJ"},"content":"        TaskType taskType \u003d (TaskType) infoTable.get(TASK_TYPE_FIELD);","lastModifiedDate":"2022-01-29"},{"lineNumber":155,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":156,"author":{"gitId":"AinsleyJ"},"content":"        switch (taskType) {","lastModifiedDate":"2022-01-29"},{"lineNumber":157,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":158,"author":{"gitId":"AinsleyJ"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-29"},{"lineNumber":159,"author":{"gitId":"AinsleyJ"},"content":"            return new Deadline(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":160,"author":{"gitId":"AinsleyJ"},"content":"        case TODO:","lastModifiedDate":"2022-01-29"},{"lineNumber":161,"author":{"gitId":"AinsleyJ"},"content":"            return new ToDo(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":162,"author":{"gitId":"AinsleyJ"},"content":"        case EVENT:","lastModifiedDate":"2022-01-29"},{"lineNumber":163,"author":{"gitId":"AinsleyJ"},"content":"            return new Event(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":164,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":165,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":166,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":167,"author":{"gitId":"AinsleyJ"},"content":"        throw new TaskNotFoundException();","lastModifiedDate":"2022-01-29"},{"lineNumber":168,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":169,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":170,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":171,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":171}},{"path":"src/main/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.storage.Storage;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":" * Stores a list of tasks, and performs actions on them.","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"public class TaskManager {","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"    // A list of tasks stored.","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes the task manager, by reading the file to the tasks list.","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"     * @param storage The storage to read from.","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"    public TaskManager(Storage storage) {","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"            this.tasks \u003d storage.readTasks();","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"            System.err.println(e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"     * Marks the status of the task as done.","lastModifiedDate":"2022-01-16"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"     * @param task The task to be operated on.","lastModifiedDate":"2022-01-16"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"    public static void markAsDone(Task task) {","lastModifiedDate":"2022-01-30"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"        task.markAsDone();","lastModifiedDate":"2022-01-16"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"     * Marks the status of the task as not done.","lastModifiedDate":"2022-01-16"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"     * @param task The task to be operated on.","lastModifiedDate":"2022-01-16"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"    public static void markAsNotDone(Task task) {","lastModifiedDate":"2022-01-30"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"        task.markAsNotDone();","lastModifiedDate":"2022-01-16"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"     * Lists all the tasks.","lastModifiedDate":"2022-01-16"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"     * @return The list of all the tasks.","lastModifiedDate":"2022-01-16"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"    public ArrayList\u003cTask\u003e listOfTasks() {","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"        return this.tasks;","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"     * Adds a task into the list.","lastModifiedDate":"2022-01-16"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"     * @param task The task to be added.","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"     * @return The message after the task is added.","lastModifiedDate":"2022-01-16"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"        return \"added: \" + task.toString();","lastModifiedDate":"2022-01-16"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"     * Gets the task with the specified index.","lastModifiedDate":"2022-01-16"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"     * @param index The index of task to be retrieved (1-indexed).","lastModifiedDate":"2022-01-16"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"     * @return The retrieved task.","lastModifiedDate":"2022-01-16"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"    public Task getTaskIndex(int index) {","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"        return this.tasks.get(index - 1);","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"     * Checks the validity of a task index.","lastModifiedDate":"2022-01-17"},{"lineNumber":82,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"AinsleyJ"},"content":"     * @param index An index of task. (1-indexed)","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"AinsleyJ"},"content":"     * @return True if the index is valid, false otherwise.","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"AinsleyJ"},"content":"    public boolean isValidIndex(int index) {","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":88,"author":{"gitId":"AinsleyJ"},"content":"        return (index \u003e 0 \u0026\u0026 index \u003c\u003d this.tasks.size());","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":90,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":91,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-17"},{"lineNumber":92,"author":{"gitId":"AinsleyJ"},"content":"     * Removes the task with specified index.","lastModifiedDate":"2022-01-17"},{"lineNumber":93,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":94,"author":{"gitId":"AinsleyJ"},"content":"     * @param toDeleteIndex The index of the task to be deleted. (1-indexed)","lastModifiedDate":"2022-01-17"},{"lineNumber":95,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-17"},{"lineNumber":96,"author":{"gitId":"AinsleyJ"},"content":"    public void deleteIndex(int toDeleteIndex) {","lastModifiedDate":"2022-01-30"},{"lineNumber":97,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"AinsleyJ"},"content":"        this.tasks.remove(toDeleteIndex - 1);","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"AinsleyJ"},"content":"     * Write the current tasks back to the storage.","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"AinsleyJ"},"content":"     * @param storage The destination storage","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"AinsleyJ"},"content":"    public void writeBack(Storage storage) {","lastModifiedDate":"2022-01-30"},{"lineNumber":107,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":108,"author":{"gitId":"AinsleyJ"},"content":"        storage.writeTasks(tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":109,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":110,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":110}},{"path":"src/main/duke/task/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"public final class TaskNotFoundException extends DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskNotFoundException(String message) {","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"        super(message);","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskNotFoundException() {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"        super(\"Oops, I\u0027m not able to retrieve this task\");","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":15}},{"path":"src/main/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":" * Describes types of tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":" * Currently, there are 3 types of tasks: \u003ccode\u003etask.Event\u003c/code\u003e, \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003etask.Deadline\u003c/code\u003e.","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"public enum TaskType {","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"    EVENT,","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    TODO,","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    DEADLINE","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"AinsleyJ":12}},{"path":"src/main/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.task;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" * Represents a to-do task. There is no deadline or timeslot associated.","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"final class ToDo extends Task {","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"     * Initializes a to-do item, with a description.","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"     * @param description The description of the task.","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"    protected ToDo(String description) {","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"        super(description);","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"    protected ToDo(HashMap\u003cString, Object\u003e infoTable) {","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"        super(infoTable);","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"    protected String getTypeIcon() {","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"        return \"[T]\";","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"    protected TaskType getType() {","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"        return TaskType.TODO;","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"     * Returns a hash map that contains the data to be stored into hard disk.","lastModifiedDate":"2022-01-30"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"     * @return The hash map containing the data.","lastModifiedDate":"2022-01-30"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"    public HashMap\u003cString, Object\u003e getInfoTable() {","lastModifiedDate":"2022-01-30"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"        var infoTable \u003d this.initializeInfoTable();","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"        return infoTable;","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":47}},{"path":"src/main/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.instruction.Instruction;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.main.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.parse.Parser;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"import main.duke.task.TaskManager;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":" * Represents the UI component of the task manager.","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":" * This class is responsible for generating outputs to the user.","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"public class Ui {","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello, this is main.Duke!\\nWhat can I do for you today?\";","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    private static final String OUTPUT_PREFIX \u003d \"\u003e\u003e \";","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"    private static final String SEE_YOU_MESSAGE \u003d \"Bye!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"AinsleyJ"},"content":"    private static final String PROMPT_INSTRUCTION_MESSAGE \u003d \"What else can I do for you?\";","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"AinsleyJ"},"content":"    private PrintStream outputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"AinsleyJ"},"content":"    private Parser parser;","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"AinsleyJ"},"content":"     * Constructs a UI, with the specified output stream.","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"AinsleyJ"},"content":"     * @param outputStream The output stream that the UI writes its output to.","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"AinsleyJ"},"content":"     * @param inputStream The input stream that the UI accepts commands from.","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"AinsleyJ"},"content":"    public Ui(PrintStream outputStream, InputStream inputStream) {","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"AinsleyJ"},"content":"        this.outputStream \u003d outputStream;","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"AinsleyJ"},"content":"        this.parser \u003d new Parser(inputStream);","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"AinsleyJ"},"content":"     * Prints the welcome message to the output stream.","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"AinsleyJ"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2022-01-30"},{"lineNumber":41,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"AinsleyJ"},"content":"        outputStream.println(WELCOME_MESSAGE);","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"AinsleyJ"},"content":"     * Prints the see you message to the output stream.","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"AinsleyJ"},"content":"    void printSeeYouMessage() {","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"AinsleyJ"},"content":"        outputStream.println(SEE_YOU_MESSAGE);","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"AinsleyJ"},"content":"     * Reads the next instruction and interprets it.","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"AinsleyJ"},"content":"     * @param tasks The task manager to be used.","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"AinsleyJ"},"content":"     * @return The instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"AinsleyJ"},"content":"     * @throws DukeException If the instruction is not valid.","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"AinsleyJ"},"content":"    public Instruction getNextInstruction(TaskManager tasks) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"AinsleyJ"},"content":"        return parser.parseInstruction(tasks);","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"AinsleyJ"},"content":"     * Prints the message to the output stream.","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"AinsleyJ"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"AinsleyJ"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"AinsleyJ"},"content":"        outputStream.println(OUTPUT_PREFIX + message);","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"AinsleyJ"},"content":"     * Prints a message to prompt the user for next instruction.","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"AinsleyJ"},"content":"    public void askForInstruction() {","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"AinsleyJ"},"content":"        outputStream.println(PROMPT_INSTRUCTION_MESSAGE);","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":81}},{"path":"src/main/duke/ui/UiException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"package main.duke.ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"/**","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":" * Represents exceptions occurring in UI.","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":" */","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"class UiException extends IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"     * Constructs an \u003ccode\u003eui.UiException\u003c/code\u003e with the specified message.","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"     * @param message The message that describes the exception.","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"    UiException(String message) {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"        super(message);","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"AinsleyJ":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AinsleyJ"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"AinsleyJ"},"content":"todo eat","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"AinsleyJ"},"content":"todo drink water","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"AinsleyJ"},"content":"event study /at 3-5 pm","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"AinsleyJ"},"content":"event sleep /at 10pm - 6am","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"AinsleyJ"},"content":"deadline CS2103T Week 1 commit /by 20 Jan","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"AinsleyJ"},"content":"deadline project /by 25 Jan","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"AinsleyJ"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"AinsleyJ"},"content":"mark 3","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"AinsleyJ"},"content":"mark 4","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"AinsleyJ"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"AinsleyJ"},"content":"unmark 3","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"AinsleyJ"},"content":"mark 5","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"AinsleyJ"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"AinsleyJ"},"content":"event run /at 5-7pm","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"AinsleyJ"},"content":"deadline homework /by tomorrow","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"AinsleyJ"},"content":"todo submit this work","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"AinsleyJ"},"content":"bye","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"AinsleyJ":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"AinsleyJ"},"content":"java -classpath ..\\bin main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"AinsleyJ":1,"-":20}},{"path":"data/tasks.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"AinsleyJ":0}}]
