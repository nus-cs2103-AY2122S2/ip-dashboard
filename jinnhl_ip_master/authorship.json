[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"    protected String dateInfo;","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"     * Constructor for Deadline class","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"     * @param description Name of the Deadline","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"     * @param dateInfo Information for which this task is due","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"    public Deadline(String description, String dateInfo) {","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"        super(description);","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"        this.dateInfo \u003d dateInfo;","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"     * toString method specific for Deadline class,","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"     * inherits toString() fromTask class while adding additional information","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"     * Like the type of task, [D], and date information","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"    @Override","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"jinnhl"},"content":"        return \"[D]\" + super.toString() + \"(by:\" + this.dateInfo + \")\";","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"jinnhl"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jinnhl":23}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"//import ip.src.main.java.Task;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"     * main functions like a to-do list","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"        String input \u003d \"\";","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"        Boolean end \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"        ArrayList\u003cTask\u003e store \u003d new ArrayList(100);","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"        int curr \u003d 0;","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"        // While loop ends when user inputs bye","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"        while(!end) {","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"            input \u003d scanner.nextLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"jinnhl"},"content":"            String[] splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"jinnhl"},"content":"            try {","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"jinnhl"},"content":"                new DukeException().checker(splitInput, curr);","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"jinnhl"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"jinnhl"},"content":"                System.err.println(e);","lastModifiedDate":"2022-01-21"},{"lineNumber":26,"author":{"gitId":"jinnhl"},"content":"                continue;","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"jinnhl"},"content":"            // If user inputs bye, terminate the program","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"jinnhl"},"content":"            if (input.equals(\"bye\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"jinnhl"},"content":"                end \u003d true;","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"jinnhl"},"content":"            // If user inputs list, run through the to-do list, array store[], and list out all the to-dos","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"jinnhl"},"content":"            else if (input.equals(\"list\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"jinnhl"},"content":"                for (int n \u003d 0; n \u003c curr; n++) {","lastModifiedDate":"2022-01-21"},{"lineNumber":35,"author":{"gitId":"jinnhl"},"content":"                    int temp \u003d n + 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"jinnhl"},"content":"                    System.out.println(temp + \".\" + store.get(n).toString());","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"jinnhl"},"content":"                }","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword mark, mark the task corresponding to the index number as done","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"mark\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"jinnhl"},"content":"                Integer num \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"jinnhl"},"content":"                store.get(num).setMark();","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + store.get(num).toString());","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword unmark, mark the task corresponding to the index number as not done","lastModifiedDate":"2022-01-21"},{"lineNumber":46,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"unmark\")){","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"jinnhl"},"content":"                Integer num \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"jinnhl"},"content":"                store.get(num).setUnmark();","lastModifiedDate":"2022-01-21"},{"lineNumber":49,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + store.get(num).toString());","lastModifiedDate":"2022-01-21"},{"lineNumber":50,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword to-do, add this task as a Todo class","lastModifiedDate":"2022-01-21"},{"lineNumber":52,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"todo\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":53,"author":{"gitId":"jinnhl"},"content":"                store.add(new Todo(splitInput[1]));","lastModifiedDate":"2022-01-21"},{"lineNumber":54,"author":{"gitId":"jinnhl"},"content":"                int temp \u003d curr + 1;","lastModifiedDate":"2022-01-21"},{"lineNumber":55,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + store.get(curr).toString()","lastModifiedDate":"2022-01-21"},{"lineNumber":56,"author":{"gitId":"jinnhl"},"content":"                        + \"\\nNow you have \" + temp + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":57,"author":{"gitId":"jinnhl"},"content":"                curr++;","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword deadline, add this task as a Deadline class","lastModifiedDate":"2022-01-21"},{"lineNumber":60,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"deadline\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":61,"author":{"gitId":"jinnhl"},"content":"                String[] splitInput2 \u003d splitInput[1].split(\"/by\", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":62,"author":{"gitId":"jinnhl"},"content":"                store.add(new Deadline(splitInput2[0], splitInput2[1]));","lastModifiedDate":"2022-01-21"},{"lineNumber":63,"author":{"gitId":"jinnhl"},"content":"                int temp \u003d curr + 1;","lastModifiedDate":"2022-01-21"},{"lineNumber":64,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + store.get(curr).toString()","lastModifiedDate":"2022-01-21"},{"lineNumber":65,"author":{"gitId":"jinnhl"},"content":"                        + \"\\nNow you have \" + temp + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":66,"author":{"gitId":"jinnhl"},"content":"                curr++;","lastModifiedDate":"2022-01-21"},{"lineNumber":67,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":68,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword event, add this task as an Event class","lastModifiedDate":"2022-01-21"},{"lineNumber":69,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"event\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":70,"author":{"gitId":"jinnhl"},"content":"                String[] splitInput2 \u003d splitInput[1].split(\"/at\", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":71,"author":{"gitId":"jinnhl"},"content":"                store.add(new Event(splitInput2[0], splitInput2[1]));","lastModifiedDate":"2022-01-21"},{"lineNumber":72,"author":{"gitId":"jinnhl"},"content":"                int temp \u003d curr + 1;","lastModifiedDate":"2022-01-21"},{"lineNumber":73,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + store.get(curr).toString()","lastModifiedDate":"2022-01-21"},{"lineNumber":74,"author":{"gitId":"jinnhl"},"content":"                        + \"\\nNow you have \" + temp + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":75,"author":{"gitId":"jinnhl"},"content":"                curr++;","lastModifiedDate":"2022-01-21"},{"lineNumber":76,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":77,"author":{"gitId":"jinnhl"},"content":"            // If user inputs keyword delete, delete the task corresponding to the index given","lastModifiedDate":"2022-01-21"},{"lineNumber":78,"author":{"gitId":"jinnhl"},"content":"            else if (splitInput[0].equals(\"delete\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":79,"author":{"gitId":"jinnhl"},"content":"                Integer num \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-01-21"},{"lineNumber":80,"author":{"gitId":"jinnhl"},"content":"                curr--;","lastModifiedDate":"2022-01-21"},{"lineNumber":81,"author":{"gitId":"jinnhl"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + store.get(num).toString()","lastModifiedDate":"2022-01-21"},{"lineNumber":82,"author":{"gitId":"jinnhl"},"content":"                        + \"\\nNow you have \" + curr + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":83,"author":{"gitId":"jinnhl"},"content":"                store.remove(num);","lastModifiedDate":"2022-01-21"},{"lineNumber":84,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":85,"author":{"gitId":"jinnhl"},"content":"            // Unused","lastModifiedDate":"2022-01-21"},{"lineNumber":86,"author":{"gitId":"jinnhl"},"content":"            else {}","lastModifiedDate":"2022-01-21"},{"lineNumber":87,"author":{"gitId":"jinnhl"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":88,"author":{"gitId":"jinnhl"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-01-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"-":4,"jinnhl":87}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"/**","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":" * DukeException class is a custom exception class to handle","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":" * problems that might occur in Duke.java","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":" */","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"    public DukeException() {}","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"     * checker method is used to run checks for all the different types of request","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"     * and check if it invalids any of them. Returns a description or advice on what","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"     * is missing or how to resolve it.","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"     * @param arr This String array stores the user\u0027s input, used to check for validity","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"     * @param curr Holds the capacity for the stored list, used to check if request is out of bounds","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"jinnhl"},"content":"    public void checker(String[] arr, int curr) throws DukeException {","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"jinnhl"},"content":"        String request \u003d arr[0];","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"jinnhl"},"content":"        int len \u003d arr.length;","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"jinnhl"},"content":"        if (request.equals(\"delete\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":26,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\" ☹ OOPS!!! Please tell me the task\u0027s\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"jinnhl"},"content":"                        \" index number so that I can delete it from the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"jinnhl"},"content":"            } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"jinnhl"},"content":"                Integer index \u003d Integer.parseInt(arr[1]);","lastModifiedDate":"2022-01-21"},{"lineNumber":30,"author":{"gitId":"jinnhl"},"content":"                if (index \u003c 1 || index \u003e curr) {","lastModifiedDate":"2022-01-21"},{"lineNumber":31,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The task you want to delete is out of bounds,\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":32,"author":{"gitId":"jinnhl"},"content":"                            \" please double check the index number\");","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"jinnhl"},"content":"                }","lastModifiedDate":"2022-01-21"},{"lineNumber":34,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":35,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"mark\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":36,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\" ☹ OOPS!!! Please tell me the task\u0027s\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":38,"author":{"gitId":"jinnhl"},"content":"                        \" index number so that I can mark it as done.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":39,"author":{"gitId":"jinnhl"},"content":"            } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"jinnhl"},"content":"                Integer index \u003d Integer.parseInt(arr[1]);","lastModifiedDate":"2022-01-21"},{"lineNumber":41,"author":{"gitId":"jinnhl"},"content":"                if (index \u003c 1 || index \u003e curr) {","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The task you want to mark as done is out of bounds,\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"jinnhl"},"content":"                            \" please double check the index number\");","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jinnhl"},"content":"                }","lastModifiedDate":"2022-01-21"},{"lineNumber":45,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":46,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"unmark\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":47,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":48,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\"☹ OOPS!!! Please tell me the task\u0027s\\\" +\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":49,"author":{"gitId":"jinnhl"},"content":"                        \"                        \\\" index number so that I can mark it as not done.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":50,"author":{"gitId":"jinnhl"},"content":"            } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":51,"author":{"gitId":"jinnhl"},"content":"                Integer index \u003d Integer.parseInt(arr[1]);","lastModifiedDate":"2022-01-21"},{"lineNumber":52,"author":{"gitId":"jinnhl"},"content":"                if (index \u003c 1 || index \u003e curr) {","lastModifiedDate":"2022-01-21"},{"lineNumber":53,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The task you want to mark as not done is out of bounds,\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":54,"author":{"gitId":"jinnhl"},"content":"                            \" please double check the index number\");","lastModifiedDate":"2022-01-21"},{"lineNumber":55,"author":{"gitId":"jinnhl"},"content":"                }","lastModifiedDate":"2022-01-21"},{"lineNumber":56,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":57,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"todo\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":58,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":59,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\" ☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":60,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":61,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"deadline\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":62,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":63,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":64,"author":{"gitId":"jinnhl"},"content":"            } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":65,"author":{"gitId":"jinnhl"},"content":"                String[] components \u003d arr[1].split(\"/by\", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":66,"author":{"gitId":"jinnhl"},"content":"                if (components[0].equals(\"\") || components[0].equals(\" \")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":67,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":68,"author":{"gitId":"jinnhl"},"content":"                } else if (components.length \u003d\u003d 1 || components[1].equals(\"\") || components[1].equals(\" \")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":69,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! Please input a due date for this task\");","lastModifiedDate":"2022-01-21"},{"lineNumber":70,"author":{"gitId":"jinnhl"},"content":"                } else {}","lastModifiedDate":"2022-01-21"},{"lineNumber":71,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":72,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"event\")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":73,"author":{"gitId":"jinnhl"},"content":"            if (len \u003d\u003d 1) {","lastModifiedDate":"2022-01-21"},{"lineNumber":74,"author":{"gitId":"jinnhl"},"content":"                throw new DukeException(\" ☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":75,"author":{"gitId":"jinnhl"},"content":"            } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":76,"author":{"gitId":"jinnhl"},"content":"                String[] components \u003d arr[1].split(\"/at\", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":77,"author":{"gitId":"jinnhl"},"content":"                if (components[0].equals(\"\") || components[0].equals(\" \")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":78,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":79,"author":{"gitId":"jinnhl"},"content":"                } else if (components.length \u003d\u003d 1 || components[1].equals(\"\") || components[1].equals(\" \")) {","lastModifiedDate":"2022-01-21"},{"lineNumber":80,"author":{"gitId":"jinnhl"},"content":"                    throw new DukeException(\" ☹ OOPS!!! Please input a due date for this task\");","lastModifiedDate":"2022-01-21"},{"lineNumber":81,"author":{"gitId":"jinnhl"},"content":"                } else {}","lastModifiedDate":"2022-01-21"},{"lineNumber":82,"author":{"gitId":"jinnhl"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":83,"author":{"gitId":"jinnhl"},"content":"        } else if (request.equals(\"bye\") || request.equals(\"list\")) {}","lastModifiedDate":"2022-01-21"},{"lineNumber":84,"author":{"gitId":"jinnhl"},"content":"        else {","lastModifiedDate":"2022-01-21"},{"lineNumber":85,"author":{"gitId":"jinnhl"},"content":"            throw new DukeException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n \" +","lastModifiedDate":"2022-01-21"},{"lineNumber":86,"author":{"gitId":"jinnhl"},"content":"                    \"                         Please add a valid request\");","lastModifiedDate":"2022-01-21"},{"lineNumber":87,"author":{"gitId":"jinnhl"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":88,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":89,"author":{"gitId":"jinnhl"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jinnhl":89}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"    protected String dateInfo;","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"     * Constructor for Event class","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"     * @param description Name of the Event","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"     * @param dateInfo Information for which this task is due","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"    public Event(String description, String dateInfo) {","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"        super(description);","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"        this.dateInfo \u003d dateInfo;","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"     * toString method specific for Event class,","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"     * inherits toString() fromTask class while adding additional information","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"     * Like the type of task, [E], and date information","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"    @Override","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"jinnhl"},"content":"        return \"[E]\" + super.toString() + \"(at:\" + this.dateInfo + \")\";","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"jinnhl"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jinnhl":23}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"public class Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"    protected String description;","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"     * Constructor for Task class, set isDone to false by default","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"     * @param description Name of the task","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"    public void setMark() {","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"        isDone \u003d true; // Set the value of isDone to true","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"jinnhl"},"content":"    public void setUnmark() {","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"jinnhl"},"content":"        isDone \u003d false; // Set the value of isDone to false","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"jinnhl"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"jinnhl"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":30,"author":{"gitId":"jinnhl"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"jinnhl":30}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"     * Constructor for Todo class","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"     * @param description Name of the to-do task","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"        super(description);","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"jinnhl"},"content":"     * toString method specific for Todo class,","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"jinnhl"},"content":"     * inherits toString() fromTask class while adding additional information","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jinnhl"},"content":"     * Like the type of task, [T]","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"jinnhl"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"jinnhl"},"content":"    @Override","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"jinnhl"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"jinnhl"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jinnhl"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"jinnhl"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jinnhl":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jinnhl"},"content":"todo borrow book","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"jinnhl"},"content":"list","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"jinnhl"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jinnhl"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jinnhl"},"content":"mark 2","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jinnhl"},"content":"mark 1","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jinnhl"},"content":"unmark 2","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jinnhl"},"content":"list","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"jinnhl"},"content":"mark 3","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jinnhl"},"content":"list","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jinnhl"},"content":"bye","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jinnhl":11}}]
