[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"junrong98"},"content":"# FunBox project template","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"junrong98"},"content":"3. After that, locate the `src/main/java/FunBox.java` file, right-click it, and choose `Run FunBox.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"junrong98":2,"-":22}},{"path":"src/main/java/FunBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junrong98"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"junrong98"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"junrong98"},"content":" * The FunBox class is used as the outer shell of FunBoxGear,","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"junrong98"},"content":" * which contains the functionality of FunBox","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"junrong98"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"junrong98"},"content":"public class FunBox {","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"junrong98"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"junrong98"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"junrong98"},"content":"        // Initiate FunBoxGear","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"junrong98"},"content":"        FunBoxGear funBox \u003d new FunBoxGear();","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"junrong98"},"content":"        // Greet the users","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"junrong98"},"content":"        funBox.greet();","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"junrong98"},"content":"        boolean isLoop \u003d true;","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"junrong98"},"content":"        while (isLoop) {","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"junrong98"},"content":"            String userMessage \u003d sc.nextLine();","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"junrong98"},"content":"            if (!funBox.getCommands(userMessage)) {","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"junrong98"},"content":"                isLoop \u003d false;","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"junrong98"},"content":"        sc.close();","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"junrong98"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"junrong98":25}},{"path":"src/main/java/FunBoxExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junrong98"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"junrong98"},"content":" * FunBoxExceptions is exceptions used by FunBoxGear for error handling","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"junrong98"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"junrong98"},"content":"public class FunBoxExceptions extends Exception {","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"junrong98"},"content":"     * Constructor for FunBoxExceptions","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"junrong98"},"content":"     * @param errorMessage The error message to be displayed","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"junrong98"},"content":"    public FunBoxExceptions(String errorMessage) {","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"junrong98"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"junrong98"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"junrong98":13}},{"path":"src/main/java/FunBoxGear.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"junrong98"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"junrong98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"junrong98"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"junrong98"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"junrong98"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"junrong98"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"junrong98"},"content":"import java.io.File;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"junrong98"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"junrong98"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"junrong98"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"junrong98"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"junrong98"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"junrong98"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-24"},{"lineNumber":14,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"junrong98"},"content":"/**","lastModifiedDate":"2022-01-16"},{"lineNumber":16,"author":{"gitId":"junrong98"},"content":" * The FunBoxGear class contains all the functionalities of FunBox.","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"junrong98"},"content":" */","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"junrong98"},"content":"public class FunBoxGear {","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"junrong98"},"content":"    public final String GREETING \u003d \"Yo! I am FunBox [0 _ 0] \\nWhat can I do for you?\";","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"junrong98"},"content":"    // private Task[] tasksList;","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"junrong98"},"content":"    private ArrayList\u003cTask\u003e tasksList;","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"junrong98"},"content":"    private final String DIRURL \u003d \"data/\";","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"junrong98"},"content":"    private final String FILEURL \u003d \"data/tasks.txt\";","lastModifiedDate":"2022-01-24"},{"lineNumber":25,"author":{"gitId":"junrong98"},"content":"    private final String DELIMITOR \u003d \",\";","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"junrong98"},"content":"     * Constructor for FunBoxGear","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"junrong98"},"content":"    public FunBoxGear() {","lastModifiedDate":"2022-01-16"},{"lineNumber":31,"author":{"gitId":"junrong98"},"content":"        this.tasksList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-16"},{"lineNumber":32,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"junrong98"},"content":"        if (!checkDirExist()) {","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"junrong98"},"content":"            boolean isDirCreated \u003d this.createDir();","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"junrong98"},"content":"            if (isDirCreated) {","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"junrong98"},"content":"                System.out.println(\"Directory \u0027data\u0027 has been created for you!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"junrong98"},"content":"                this.createFile();","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"junrong98"},"content":"            } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"junrong98"},"content":"                System.out.println(\"Directory already exists!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"junrong98"},"content":"        } else if (!checkFileExist()) {","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"junrong98"},"content":"            this.createFile();","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"junrong98"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":46,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"Loading saved task ... beep ... boop\");","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"junrong98"},"content":"            try {","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"junrong98"},"content":"                this.readFile();","lastModifiedDate":"2022-01-24"},{"lineNumber":49,"author":{"gitId":"junrong98"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":50,"author":{"gitId":"junrong98"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-01-24"},{"lineNumber":51,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":54,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":55,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":56,"author":{"gitId":"junrong98"},"content":"     * Check if directory \u0027data\u0027 exists in \u0027ip\u0027 folder","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":58,"author":{"gitId":"junrong98"},"content":"     * @return Return true if directory exist, otherwise, false","lastModifiedDate":"2022-01-24"},{"lineNumber":59,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"junrong98"},"content":"    private boolean checkDirExist() {","lastModifiedDate":"2022-01-24"},{"lineNumber":61,"author":{"gitId":"junrong98"},"content":"        File tempFile \u003d new File(this.DIRURL);","lastModifiedDate":"2022-01-24"},{"lineNumber":62,"author":{"gitId":"junrong98"},"content":"        return tempFile.isDirectory();","lastModifiedDate":"2022-01-24"},{"lineNumber":63,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":65,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":66,"author":{"gitId":"junrong98"},"content":"     * Check if file tasks.txt exist in \u0027data\u0027","lastModifiedDate":"2022-01-24"},{"lineNumber":67,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":68,"author":{"gitId":"junrong98"},"content":"     * @return Return true if file exist, otherwise, false","lastModifiedDate":"2022-01-24"},{"lineNumber":69,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":70,"author":{"gitId":"junrong98"},"content":"    private boolean checkFileExist() {","lastModifiedDate":"2022-01-24"},{"lineNumber":71,"author":{"gitId":"junrong98"},"content":"        Path tempFile \u003d Paths.get(FILEURL);","lastModifiedDate":"2022-01-24"},{"lineNumber":72,"author":{"gitId":"junrong98"},"content":"        return Files.exists(tempFile);","lastModifiedDate":"2022-01-24"},{"lineNumber":73,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":74,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":75,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":76,"author":{"gitId":"junrong98"},"content":"     * Create directory \u0027data\u0027 under \u0027ip\u0027","lastModifiedDate":"2022-01-24"},{"lineNumber":77,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":78,"author":{"gitId":"junrong98"},"content":"     * @return Return true if directory exists, otherwise, false","lastModifiedDate":"2022-01-24"},{"lineNumber":79,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":80,"author":{"gitId":"junrong98"},"content":"    private boolean createDir() {","lastModifiedDate":"2022-01-24"},{"lineNumber":81,"author":{"gitId":"junrong98"},"content":"        File tempFile \u003d new File(DIRURL);","lastModifiedDate":"2022-01-24"},{"lineNumber":82,"author":{"gitId":"junrong98"},"content":"        return tempFile.mkdir();","lastModifiedDate":"2022-01-24"},{"lineNumber":83,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":84,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":85,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":86,"author":{"gitId":"junrong98"},"content":"     * Create file tasks.txt under \u0027data\u0027 directory","lastModifiedDate":"2022-01-24"},{"lineNumber":87,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":88,"author":{"gitId":"junrong98"},"content":"    private void createFile() {","lastModifiedDate":"2022-01-24"},{"lineNumber":89,"author":{"gitId":"junrong98"},"content":"        File tempFile \u003d new File(FILEURL);","lastModifiedDate":"2022-01-24"},{"lineNumber":90,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":91,"author":{"gitId":"junrong98"},"content":"            if (tempFile.createNewFile()) {","lastModifiedDate":"2022-01-24"},{"lineNumber":92,"author":{"gitId":"junrong98"},"content":"                System.out.println(\"I have created tasks.txt for you!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":93,"author":{"gitId":"junrong98"},"content":"            } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":94,"author":{"gitId":"junrong98"},"content":"                System.out.println(\"File already exists!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":95,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":96,"author":{"gitId":"junrong98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":97,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-24"},{"lineNumber":98,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":99,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":100,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":101,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":102,"author":{"gitId":"junrong98"},"content":"     * Read the existing file, if there are existing tasks in the file, add to the current list","lastModifiedDate":"2022-01-24"},{"lineNumber":103,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":104,"author":{"gitId":"junrong98"},"content":"     * @throws FileNotFoundException If file is not found in the given URL","lastModifiedDate":"2022-01-24"},{"lineNumber":105,"author":{"gitId":"junrong98"},"content":"     * @throws IOException If an I/O error occur","lastModifiedDate":"2022-01-24"},{"lineNumber":106,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":107,"author":{"gitId":"junrong98"},"content":"    private void readFile() throws FileNotFoundException, IOException {","lastModifiedDate":"2022-01-24"},{"lineNumber":108,"author":{"gitId":"junrong98"},"content":"        File file \u003d new File(this.FILEURL);","lastModifiedDate":"2022-01-24"},{"lineNumber":109,"author":{"gitId":"junrong98"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2022-01-24"},{"lineNumber":110,"author":{"gitId":"junrong98"},"content":"        String task;","lastModifiedDate":"2022-01-24"},{"lineNumber":111,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":112,"author":{"gitId":"junrong98"},"content":"        while(true) {","lastModifiedDate":"2022-01-24"},{"lineNumber":113,"author":{"gitId":"junrong98"},"content":"            task \u003d br.readLine();","lastModifiedDate":"2022-01-24"},{"lineNumber":114,"author":{"gitId":"junrong98"},"content":"            if (task \u003d\u003d null) {","lastModifiedDate":"2022-01-24"},{"lineNumber":115,"author":{"gitId":"junrong98"},"content":"                break;","lastModifiedDate":"2022-01-24"},{"lineNumber":116,"author":{"gitId":"junrong98"},"content":"            } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":117,"author":{"gitId":"junrong98"},"content":"                try {","lastModifiedDate":"2022-01-24"},{"lineNumber":118,"author":{"gitId":"junrong98"},"content":"                    String[] taskArr \u003d task.split(DELIMITOR);","lastModifiedDate":"2022-01-24"},{"lineNumber":119,"author":{"gitId":"junrong98"},"content":"                    this.insertExistingTask(taskArr);","lastModifiedDate":"2022-01-24"},{"lineNumber":120,"author":{"gitId":"junrong98"},"content":"                } catch (FunBoxExceptions e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":121,"author":{"gitId":"junrong98"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2022-01-24"},{"lineNumber":122,"author":{"gitId":"junrong98"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":123,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":124,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":125,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":126,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":127,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":128,"author":{"gitId":"junrong98"},"content":"     * Write existing task to tasks.txt","lastModifiedDate":"2022-01-24"},{"lineNumber":129,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":130,"author":{"gitId":"junrong98"},"content":"     * @param taskArr The task in tasks.txt file broken into format readable by FunBox","lastModifiedDate":"2022-01-24"},{"lineNumber":131,"author":{"gitId":"junrong98"},"content":"     * @throws FunBoxExceptions If type of tasks not equals to T, E, D","lastModifiedDate":"2022-01-24"},{"lineNumber":132,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":133,"author":{"gitId":"junrong98"},"content":"    private void insertExistingTask(String[] taskArr) throws FunBoxExceptions {","lastModifiedDate":"2022-01-24"},{"lineNumber":134,"author":{"gitId":"junrong98"},"content":"        String type \u003d taskArr[0];","lastModifiedDate":"2022-01-24"},{"lineNumber":135,"author":{"gitId":"junrong98"},"content":"        String isDone \u003d taskArr[1];","lastModifiedDate":"2022-01-24"},{"lineNumber":136,"author":{"gitId":"junrong98"},"content":"        String description \u003d taskArr[2];","lastModifiedDate":"2022-01-24"},{"lineNumber":137,"author":{"gitId":"junrong98"},"content":"        String dateTime;","lastModifiedDate":"2022-01-24"},{"lineNumber":138,"author":{"gitId":"junrong98"},"content":"        switch (type) {","lastModifiedDate":"2022-01-24"},{"lineNumber":139,"author":{"gitId":"junrong98"},"content":"        case \"T\":","lastModifiedDate":"2022-01-24"},{"lineNumber":140,"author":{"gitId":"junrong98"},"content":"            ToDo tempToDo \u003d new ToDo(description, \"todo\");","lastModifiedDate":"2022-01-24"},{"lineNumber":141,"author":{"gitId":"junrong98"},"content":"            tempToDo \u003d (ToDo) this.isExistingTaskDone(tempToDo, isDone);","lastModifiedDate":"2022-01-24"},{"lineNumber":142,"author":{"gitId":"junrong98"},"content":"            this.tasksList.add(tempToDo);","lastModifiedDate":"2022-01-24"},{"lineNumber":143,"author":{"gitId":"junrong98"},"content":"            break;","lastModifiedDate":"2022-01-24"},{"lineNumber":144,"author":{"gitId":"junrong98"},"content":"        case \"E\":","lastModifiedDate":"2022-01-24"},{"lineNumber":145,"author":{"gitId":"junrong98"},"content":"            dateTime \u003d taskArr[3];","lastModifiedDate":"2022-01-24"},{"lineNumber":146,"author":{"gitId":"junrong98"},"content":"            Event tempEvent \u003d new Event(description, stringToLocalDate(dateTime),","lastModifiedDate":"2022-01-24"},{"lineNumber":147,"author":{"gitId":"junrong98"},"content":"                    getTime(dateTime), \"event\");","lastModifiedDate":"2022-01-24"},{"lineNumber":148,"author":{"gitId":"junrong98"},"content":"            tempEvent \u003d (Event) this.isExistingTaskDone(tempEvent, isDone);","lastModifiedDate":"2022-01-24"},{"lineNumber":149,"author":{"gitId":"junrong98"},"content":"            this.tasksList.add(tempEvent);","lastModifiedDate":"2022-01-24"},{"lineNumber":150,"author":{"gitId":"junrong98"},"content":"            break;","lastModifiedDate":"2022-01-24"},{"lineNumber":151,"author":{"gitId":"junrong98"},"content":"        case \"D\":","lastModifiedDate":"2022-01-24"},{"lineNumber":152,"author":{"gitId":"junrong98"},"content":"            dateTime \u003d taskArr[3];","lastModifiedDate":"2022-01-24"},{"lineNumber":153,"author":{"gitId":"junrong98"},"content":"            Deadline tempDead \u003d new Deadline(description, stringToLocalDate(dateTime),","lastModifiedDate":"2022-01-24"},{"lineNumber":154,"author":{"gitId":"junrong98"},"content":"                    getTime(dateTime), \"deadline\");","lastModifiedDate":"2022-01-24"},{"lineNumber":155,"author":{"gitId":"junrong98"},"content":"            tempDead \u003d (Deadline) this.isExistingTaskDone(tempDead, dateTime);","lastModifiedDate":"2022-01-24"},{"lineNumber":156,"author":{"gitId":"junrong98"},"content":"            this.tasksList.add(tempDead);","lastModifiedDate":"2022-01-24"},{"lineNumber":157,"author":{"gitId":"junrong98"},"content":"            break;","lastModifiedDate":"2022-01-24"},{"lineNumber":158,"author":{"gitId":"junrong98"},"content":"        default:","lastModifiedDate":"2022-01-24"},{"lineNumber":159,"author":{"gitId":"junrong98"},"content":"            throw new FunBoxExceptions(\"ERROR! Unable to read file!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":160,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":161,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":162,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":163,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":164,"author":{"gitId":"junrong98"},"content":"     * Check if existing task is done","lastModifiedDate":"2022-01-24"},{"lineNumber":165,"author":{"gitId":"junrong98"},"content":"     * @param task","lastModifiedDate":"2022-01-24"},{"lineNumber":166,"author":{"gitId":"junrong98"},"content":"     * @param isDone","lastModifiedDate":"2022-01-24"},{"lineNumber":167,"author":{"gitId":"junrong98"},"content":"     * @return","lastModifiedDate":"2022-01-24"},{"lineNumber":168,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":169,"author":{"gitId":"junrong98"},"content":"    private Task isExistingTaskDone(Task task, String isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":170,"author":{"gitId":"junrong98"},"content":"        if (isDone.equals(\"1\")) {","lastModifiedDate":"2022-01-24"},{"lineNumber":171,"author":{"gitId":"junrong98"},"content":"            task.presetDone();","lastModifiedDate":"2022-01-24"},{"lineNumber":172,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":173,"author":{"gitId":"junrong98"},"content":"        return task;","lastModifiedDate":"2022-01-24"},{"lineNumber":174,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":175,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":176,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":177,"author":{"gitId":"junrong98"},"content":"     * Prints out the default GREETING on console","lastModifiedDate":"2022-01-16"},{"lineNumber":178,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":179,"author":{"gitId":"junrong98"},"content":"    public void greet() {","lastModifiedDate":"2022-01-16"},{"lineNumber":180,"author":{"gitId":"junrong98"},"content":"        System.out.println(GREETING);","lastModifiedDate":"2022-01-16"},{"lineNumber":181,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":182,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":183,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":184,"author":{"gitId":"junrong98"},"content":"     * Checks whether if user\u0027s input is a commands","lastModifiedDate":"2022-01-24"},{"lineNumber":185,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":186,"author":{"gitId":"junrong98"},"content":"     * @param message The user\u0027s input to the command prompt","lastModifiedDate":"2022-01-16"},{"lineNumber":187,"author":{"gitId":"junrong98"},"content":"     * @return Return false if message is \"bye\", otherwise return true","lastModifiedDate":"2022-01-16"},{"lineNumber":188,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":189,"author":{"gitId":"junrong98"},"content":"    public boolean getCommands(String message) {","lastModifiedDate":"2022-01-16"},{"lineNumber":190,"author":{"gitId":"junrong98"},"content":"        String[] formattedMsg \u003d this.formatCommands(message);","lastModifiedDate":"2022-01-16"},{"lineNumber":191,"author":{"gitId":"junrong98"},"content":"        switch (formattedMsg[0]) {","lastModifiedDate":"2022-01-16"},{"lineNumber":192,"author":{"gitId":"junrong98"},"content":"        case \"bye\":","lastModifiedDate":"2022-01-16"},{"lineNumber":193,"author":{"gitId":"junrong98"},"content":"            this.sayBye();","lastModifiedDate":"2022-01-16"},{"lineNumber":194,"author":{"gitId":"junrong98"},"content":"            return false;","lastModifiedDate":"2022-01-16"},{"lineNumber":195,"author":{"gitId":"junrong98"},"content":"        case \"list\":","lastModifiedDate":"2022-01-16"},{"lineNumber":196,"author":{"gitId":"junrong98"},"content":"            this.showList();","lastModifiedDate":"2022-01-16"},{"lineNumber":197,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-16"},{"lineNumber":198,"author":{"gitId":"junrong98"},"content":"        case \"find\":","lastModifiedDate":"2022-01-24"},{"lineNumber":199,"author":{"gitId":"junrong98"},"content":"            this.getTasksOnThisDate(formattedMsg);","lastModifiedDate":"2022-01-24"},{"lineNumber":200,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":201,"author":{"gitId":"junrong98"},"content":"        case \"mark\":","lastModifiedDate":"2022-01-16"},{"lineNumber":202,"author":{"gitId":"junrong98"},"content":"            this.markDone(formattedMsg);","lastModifiedDate":"2022-01-16"},{"lineNumber":203,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-16"},{"lineNumber":204,"author":{"gitId":"junrong98"},"content":"        case \"unmark\":","lastModifiedDate":"2022-01-16"},{"lineNumber":205,"author":{"gitId":"junrong98"},"content":"            this.markUndone(formattedMsg);","lastModifiedDate":"2022-01-16"},{"lineNumber":206,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-16"},{"lineNumber":207,"author":{"gitId":"junrong98"},"content":"        case \"delete\":","lastModifiedDate":"2022-01-16"},{"lineNumber":208,"author":{"gitId":"junrong98"},"content":"            this.deleteTask(formattedMsg);","lastModifiedDate":"2022-01-16"},{"lineNumber":209,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-16"},{"lineNumber":210,"author":{"gitId":"junrong98"},"content":"        default:","lastModifiedDate":"2022-01-16"},{"lineNumber":211,"author":{"gitId":"junrong98"},"content":"            this.addToList(formattedMsg, formattedMsg[0]);","lastModifiedDate":"2022-01-16"},{"lineNumber":212,"author":{"gitId":"junrong98"},"content":"            return true;","lastModifiedDate":"2022-01-16"},{"lineNumber":213,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":214,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":215,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":216,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":217,"author":{"gitId":"junrong98"},"content":"     * Adds user\u0027s tasks to the list based on the type of task","lastModifiedDate":"2022-01-24"},{"lineNumber":218,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":219,"author":{"gitId":"junrong98"},"content":"     * @param formattedMsg The original message from the users split by \" \" into an array","lastModifiedDate":"2022-01-16"},{"lineNumber":220,"author":{"gitId":"junrong98"},"content":"     * @param type         The type of task: event, deadline, todo","lastModifiedDate":"2022-01-16"},{"lineNumber":221,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":222,"author":{"gitId":"junrong98"},"content":"    private void addToList(String[] formattedMsg, String type) {","lastModifiedDate":"2022-01-16"},{"lineNumber":223,"author":{"gitId":"junrong98"},"content":"        String description \u003d this.getMessage(formattedMsg);","lastModifiedDate":"2022-01-16"},{"lineNumber":224,"author":{"gitId":"junrong98"},"content":"        String[] resultArr;","lastModifiedDate":"2022-01-16"},{"lineNumber":225,"author":{"gitId":"junrong98"},"content":"        String resultToBeWritten;","lastModifiedDate":"2022-01-24"},{"lineNumber":226,"author":{"gitId":"junrong98"},"content":"        int noOfItems;","lastModifiedDate":"2022-01-16"},{"lineNumber":227,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-16"},{"lineNumber":228,"author":{"gitId":"junrong98"},"content":"            switch (type) {","lastModifiedDate":"2022-01-16"},{"lineNumber":229,"author":{"gitId":"junrong98"},"content":"            case \"event\":","lastModifiedDate":"2022-01-16"},{"lineNumber":230,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d \"E,0\";","lastModifiedDate":"2022-01-24"},{"lineNumber":231,"author":{"gitId":"junrong98"},"content":"                this.isDescriptionError(description, type);","lastModifiedDate":"2022-01-16"},{"lineNumber":232,"author":{"gitId":"junrong98"},"content":"                resultArr \u003d this.getDescriptionAndDate(description, type);","lastModifiedDate":"2022-01-16"},{"lineNumber":233,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d resultToBeWritten.concat(DELIMITOR).concat(resultArr[0])","lastModifiedDate":"2022-01-24"},{"lineNumber":234,"author":{"gitId":"junrong98"},"content":"                        .concat(DELIMITOR).concat(resultArr[1]);","lastModifiedDate":"2022-01-24"},{"lineNumber":235,"author":{"gitId":"junrong98"},"content":"                this.tasksList.add(new Event(resultArr[0], stringToLocalDate(resultArr[1]),","lastModifiedDate":"2022-01-24"},{"lineNumber":236,"author":{"gitId":"junrong98"},"content":"                        getTime(resultArr[1]), type));","lastModifiedDate":"2022-01-24"},{"lineNumber":237,"author":{"gitId":"junrong98"},"content":"                break;","lastModifiedDate":"2022-01-16"},{"lineNumber":238,"author":{"gitId":"junrong98"},"content":"            case \"deadline\":","lastModifiedDate":"2022-01-16"},{"lineNumber":239,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d \"D,0\";","lastModifiedDate":"2022-01-24"},{"lineNumber":240,"author":{"gitId":"junrong98"},"content":"                this.isDescriptionError(description, type);","lastModifiedDate":"2022-01-16"},{"lineNumber":241,"author":{"gitId":"junrong98"},"content":"                resultArr \u003d this.getDescriptionAndDate(description, type);","lastModifiedDate":"2022-01-16"},{"lineNumber":242,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d resultToBeWritten.concat(DELIMITOR).concat(resultArr[0])","lastModifiedDate":"2022-01-24"},{"lineNumber":243,"author":{"gitId":"junrong98"},"content":"                        .concat(DELIMITOR).concat(resultArr[1]);","lastModifiedDate":"2022-01-24"},{"lineNumber":244,"author":{"gitId":"junrong98"},"content":"                this.tasksList.add(new Deadline(resultArr[0], stringToLocalDate(resultArr[1]),","lastModifiedDate":"2022-01-24"},{"lineNumber":245,"author":{"gitId":"junrong98"},"content":"                        getTime(resultArr[1]), type));","lastModifiedDate":"2022-01-24"},{"lineNumber":246,"author":{"gitId":"junrong98"},"content":"                break;","lastModifiedDate":"2022-01-16"},{"lineNumber":247,"author":{"gitId":"junrong98"},"content":"            case \"todo\":","lastModifiedDate":"2022-01-16"},{"lineNumber":248,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d \"T,0\";","lastModifiedDate":"2022-01-24"},{"lineNumber":249,"author":{"gitId":"junrong98"},"content":"                this.isDescriptionError(description, type);","lastModifiedDate":"2022-01-16"},{"lineNumber":250,"author":{"gitId":"junrong98"},"content":"                resultToBeWritten \u003d resultToBeWritten.concat(DELIMITOR).concat(description);","lastModifiedDate":"2022-01-24"},{"lineNumber":251,"author":{"gitId":"junrong98"},"content":"                this.tasksList.add(new ToDo(description, type));","lastModifiedDate":"2022-01-24"},{"lineNumber":252,"author":{"gitId":"junrong98"},"content":"                break;","lastModifiedDate":"2022-01-16"},{"lineNumber":253,"author":{"gitId":"junrong98"},"content":"            default:","lastModifiedDate":"2022-01-16"},{"lineNumber":254,"author":{"gitId":"junrong98"},"content":"                throw new FunBoxExceptions(\"ERROR! I do not know what the commands means :\u003c\");","lastModifiedDate":"2022-01-16"},{"lineNumber":255,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-16"},{"lineNumber":256,"author":{"gitId":"junrong98"},"content":"            writeToFile(resultToBeWritten);","lastModifiedDate":"2022-01-24"},{"lineNumber":257,"author":{"gitId":"junrong98"},"content":"        } catch (FunBoxExceptions e) {","lastModifiedDate":"2022-01-16"},{"lineNumber":258,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-16"},{"lineNumber":259,"author":{"gitId":"junrong98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":260,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"ERROR! Please ensure date is formatted as followed: yyyy-mm-dd!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":261,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":262,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":263,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":264,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":265,"author":{"gitId":"junrong98"},"content":"     * Write task of users to a file","lastModifiedDate":"2022-01-24"},{"lineNumber":266,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":267,"author":{"gitId":"junrong98"},"content":"     * @param task The task user inputted","lastModifiedDate":"2022-01-24"},{"lineNumber":268,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":269,"author":{"gitId":"junrong98"},"content":"    private void writeToFile(String task) {","lastModifiedDate":"2022-01-24"},{"lineNumber":270,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":271,"author":{"gitId":"junrong98"},"content":"            FileWriter fw \u003d new FileWriter(FILEURL, true);","lastModifiedDate":"2022-01-24"},{"lineNumber":272,"author":{"gitId":"junrong98"},"content":"            fw.write(task + \"\\n\");","lastModifiedDate":"2022-01-24"},{"lineNumber":273,"author":{"gitId":"junrong98"},"content":"            fw.close();","lastModifiedDate":"2022-01-24"},{"lineNumber":274,"author":{"gitId":"junrong98"},"content":"            int noOfItems \u003d this.tasksList.size();","lastModifiedDate":"2022-01-24"},{"lineNumber":275,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"Gotcha! I\u0027ve added this task!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":276,"author":{"gitId":"junrong98"},"content":"            System.out.println(this.tasksList.get(noOfItems - 1));","lastModifiedDate":"2022-01-24"},{"lineNumber":277,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"Now you have \" + noOfItems + \" tasks in the list!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":278,"author":{"gitId":"junrong98"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":279,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-24"},{"lineNumber":280,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":281,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":282,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":283,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":284,"author":{"gitId":"junrong98"},"content":"     * Checks whether user input has a description","lastModifiedDate":"2022-01-24"},{"lineNumber":285,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":286,"author":{"gitId":"junrong98"},"content":"     * @param description The description of the user input which usually comes after the command type","lastModifiedDate":"2022-01-16"},{"lineNumber":287,"author":{"gitId":"junrong98"},"content":"     * @param type        The type of tasks the user used","lastModifiedDate":"2022-01-16"},{"lineNumber":288,"author":{"gitId":"junrong98"},"content":"     * @throws FunBoxExceptions If description \u003d\u003d \"\"","lastModifiedDate":"2022-01-16"},{"lineNumber":289,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":290,"author":{"gitId":"junrong98"},"content":"    private void isDescriptionError(String description, String type) throws FunBoxExceptions {","lastModifiedDate":"2022-01-16"},{"lineNumber":291,"author":{"gitId":"junrong98"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2022-01-16"},{"lineNumber":292,"author":{"gitId":"junrong98"},"content":"            throw new FunBoxExceptions(\"ERROR! The description of a \" + type + \" cannot be empty!\");","lastModifiedDate":"2022-01-16"},{"lineNumber":293,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":294,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":295,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":296,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":297,"author":{"gitId":"junrong98"},"content":"     * Loops through a list of items and print out each item","lastModifiedDate":"2022-01-24"},{"lineNumber":298,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":299,"author":{"gitId":"junrong98"},"content":"    private void showList() {","lastModifiedDate":"2022-01-16"},{"lineNumber":300,"author":{"gitId":"junrong98"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-01-16"},{"lineNumber":301,"author":{"gitId":"junrong98"},"content":"        for (int i \u003d 0; i \u003c this.tasksList.size(); i++) {","lastModifiedDate":"2022-01-16"},{"lineNumber":302,"author":{"gitId":"junrong98"},"content":"            System.out.println((i + 1) + \".\" + this.tasksList.get(i));","lastModifiedDate":"2022-01-16"},{"lineNumber":303,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":304,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":305,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":306,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":307,"author":{"gitId":"junrong98"},"content":"     * Formats the user\u0027s message to be able to differentiate between special commands","lastModifiedDate":"2022-01-24"},{"lineNumber":308,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":309,"author":{"gitId":"junrong98"},"content":"     * @param message The user\u0027s message to be formatted","lastModifiedDate":"2022-01-16"},{"lineNumber":310,"author":{"gitId":"junrong98"},"content":"     * @return Return a String array which contains the split message. The first element is used to differentiate","lastModifiedDate":"2022-01-16"},{"lineNumber":311,"author":{"gitId":"junrong98"},"content":"     * whether it\u0027s a message, command, or command which require special formatting","lastModifiedDate":"2022-01-16"},{"lineNumber":312,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":313,"author":{"gitId":"junrong98"},"content":"    private String[] formatCommands(String message) {","lastModifiedDate":"2022-01-16"},{"lineNumber":314,"author":{"gitId":"junrong98"},"content":"        // Split message by blank space","lastModifiedDate":"2022-01-16"},{"lineNumber":315,"author":{"gitId":"junrong98"},"content":"        return message.split(\" \");","lastModifiedDate":"2022-01-16"},{"lineNumber":316,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":317,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":318,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":319,"author":{"gitId":"junrong98"},"content":"     * Gets the message from the formatted message without the first item of the array which typically contains the","lastModifiedDate":"2022-01-24"},{"lineNumber":320,"author":{"gitId":"junrong98"},"content":"     * command","lastModifiedDate":"2022-01-16"},{"lineNumber":321,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":322,"author":{"gitId":"junrong98"},"content":"     * @param formattedMsg The message sent by the user which has been formatted","lastModifiedDate":"2022-01-16"},{"lineNumber":323,"author":{"gitId":"junrong98"},"content":"     * @return Return a string of the original message sent by the users without the command","lastModifiedDate":"2022-01-16"},{"lineNumber":324,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":325,"author":{"gitId":"junrong98"},"content":"    private String getMessage(String[] formattedMsg) {","lastModifiedDate":"2022-01-16"},{"lineNumber":326,"author":{"gitId":"junrong98"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-01-16"},{"lineNumber":327,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":328,"author":{"gitId":"junrong98"},"content":"        int size \u003d formattedMsg.length;","lastModifiedDate":"2022-01-16"},{"lineNumber":329,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":330,"author":{"gitId":"junrong98"},"content":"        for (int i \u003d 1; i \u003c size; i++) {","lastModifiedDate":"2022-01-16"},{"lineNumber":331,"author":{"gitId":"junrong98"},"content":"            if (i \u003d\u003d size - 1) {","lastModifiedDate":"2022-01-16"},{"lineNumber":332,"author":{"gitId":"junrong98"},"content":"                sb.append(formattedMsg[i]);","lastModifiedDate":"2022-01-16"},{"lineNumber":333,"author":{"gitId":"junrong98"},"content":"            } else {","lastModifiedDate":"2022-01-16"},{"lineNumber":334,"author":{"gitId":"junrong98"},"content":"                sb.append(formattedMsg[i]).append(\" \");","lastModifiedDate":"2022-01-16"},{"lineNumber":335,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-16"},{"lineNumber":336,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":337,"author":{"gitId":"junrong98"},"content":"        return sb.toString();","lastModifiedDate":"2022-01-16"},{"lineNumber":338,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":339,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":340,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":341,"author":{"gitId":"junrong98"},"content":"     * Splits the message, date and time from a message which is needed for certain commands","lastModifiedDate":"2022-01-24"},{"lineNumber":342,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":343,"author":{"gitId":"junrong98"},"content":"     * @param message The message to retrieve the date and time from","lastModifiedDate":"2022-01-16"},{"lineNumber":344,"author":{"gitId":"junrong98"},"content":"     * @return Return a String array of size 2 where the first item on the list contains the message and","lastModifiedDate":"2022-01-16"},{"lineNumber":345,"author":{"gitId":"junrong98"},"content":"     * the second item contains the date and time.","lastModifiedDate":"2022-01-16"},{"lineNumber":346,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":347,"author":{"gitId":"junrong98"},"content":"    private String[] getDescriptionAndDate(String message, String type) {","lastModifiedDate":"2022-01-16"},{"lineNumber":348,"author":{"gitId":"junrong98"},"content":"        if (type.equals(\"event\")) {","lastModifiedDate":"2022-01-16"},{"lineNumber":349,"author":{"gitId":"junrong98"},"content":"            return message.split(\" /at \");","lastModifiedDate":"2022-01-16"},{"lineNumber":350,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":351,"author":{"gitId":"junrong98"},"content":"        return message.split(\" /by \");","lastModifiedDate":"2022-01-16"},{"lineNumber":352,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":353,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":354,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-18"},{"lineNumber":355,"author":{"gitId":"junrong98"},"content":"     * Gets the tasks found on the date requested by user and prints it out.","lastModifiedDate":"2022-01-24"},{"lineNumber":356,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":357,"author":{"gitId":"junrong98"},"content":"     * @param taskArr The commands provided by the users","lastModifiedDate":"2022-01-24"},{"lineNumber":358,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":359,"author":{"gitId":"junrong98"},"content":"    private void getTasksOnThisDate(String[] taskArr) {","lastModifiedDate":"2022-01-24"},{"lineNumber":360,"author":{"gitId":"junrong98"},"content":"        LocalDate date;","lastModifiedDate":"2022-01-24"},{"lineNumber":361,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":362,"author":{"gitId":"junrong98"},"content":"            date \u003d LocalDate.parse(taskArr[1]);","lastModifiedDate":"2022-01-24"},{"lineNumber":363,"author":{"gitId":"junrong98"},"content":"            ArrayList\u003cTask\u003e eventList \u003d new ArrayList\u003c\u003e(this.tasksList);","lastModifiedDate":"2022-01-24"},{"lineNumber":364,"author":{"gitId":"junrong98"},"content":"            ArrayList\u003cTask\u003e deadlineList \u003d new ArrayList\u003c\u003e(this.tasksList);","lastModifiedDate":"2022-01-24"},{"lineNumber":365,"author":{"gitId":"junrong98"},"content":"            eventList.removeIf(task -\u003e (task.type.contains(\"todo\") || task.type.contains(\"deadline\")));","lastModifiedDate":"2022-01-24"},{"lineNumber":366,"author":{"gitId":"junrong98"},"content":"            deadlineList.removeIf(task -\u003e (task.type.contains(\"todo\") || task.type.contains(\"event\")));","lastModifiedDate":"2022-01-24"},{"lineNumber":367,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":368,"author":{"gitId":"junrong98"},"content":"            int counter \u003d 0;","lastModifiedDate":"2022-01-24"},{"lineNumber":369,"author":{"gitId":"junrong98"},"content":"            int eventSize \u003d eventList.size();","lastModifiedDate":"2022-01-24"},{"lineNumber":370,"author":{"gitId":"junrong98"},"content":"            int deadlineSize \u003d deadlineList.size();","lastModifiedDate":"2022-01-24"},{"lineNumber":371,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":372,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":373,"author":{"gitId":"junrong98"},"content":"            for (int i \u003d 0; i \u003c eventSize; i++) {","lastModifiedDate":"2022-01-24"},{"lineNumber":374,"author":{"gitId":"junrong98"},"content":"                Event temp \u003d (Event) eventList.get(i);","lastModifiedDate":"2022-01-24"},{"lineNumber":375,"author":{"gitId":"junrong98"},"content":"                if (temp.date.equals(date)) {","lastModifiedDate":"2022-01-24"},{"lineNumber":376,"author":{"gitId":"junrong98"},"content":"                    counter++;","lastModifiedDate":"2022-01-24"},{"lineNumber":377,"author":{"gitId":"junrong98"},"content":"                    System.out.println(counter + \".\" + temp);","lastModifiedDate":"2022-01-24"},{"lineNumber":378,"author":{"gitId":"junrong98"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":379,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":380,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":381,"author":{"gitId":"junrong98"},"content":"            for (int i \u003d 0; i \u003c deadlineSize; i++) {","lastModifiedDate":"2022-01-24"},{"lineNumber":382,"author":{"gitId":"junrong98"},"content":"                Deadline temp \u003d (Deadline) deadlineList.get(i);","lastModifiedDate":"2022-01-24"},{"lineNumber":383,"author":{"gitId":"junrong98"},"content":"                if (temp.date.equals(date)) {","lastModifiedDate":"2022-01-24"},{"lineNumber":384,"author":{"gitId":"junrong98"},"content":"                    counter++;","lastModifiedDate":"2022-01-24"},{"lineNumber":385,"author":{"gitId":"junrong98"},"content":"                    System.out.println(counter + \".\" + temp);","lastModifiedDate":"2022-01-24"},{"lineNumber":386,"author":{"gitId":"junrong98"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":387,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":388,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":389,"author":{"gitId":"junrong98"},"content":"            if (counter \u003d\u003d 0) {","lastModifiedDate":"2022-01-24"},{"lineNumber":390,"author":{"gitId":"junrong98"},"content":"                System.out.println(\"No tasks found on this date! You are free!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":391,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":392,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":393,"author":{"gitId":"junrong98"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":394,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"ERROR! Please ensure date is in the correct format: yyyy-mm-dd\");","lastModifiedDate":"2022-01-24"},{"lineNumber":395,"author":{"gitId":"junrong98"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":396,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"ERROR! Date not found in command `find`!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":397,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":398,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":399,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":400,"author":{"gitId":"junrong98"},"content":"    private void filterList() {","lastModifiedDate":"2022-01-24"},{"lineNumber":401,"author":{"gitId":"junrong98"},"content":"        for (Task task : this.tasksList) {","lastModifiedDate":"2022-01-24"},{"lineNumber":402,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":403,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":404,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":405,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":406,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":407,"author":{"gitId":"junrong98"},"content":"     * Converts string consisting of a date and time to LocalDate object","lastModifiedDate":"2022-01-24"},{"lineNumber":408,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":409,"author":{"gitId":"junrong98"},"content":"     * @param dateTime The date and time which the task should be completed by","lastModifiedDate":"2022-01-24"},{"lineNumber":410,"author":{"gitId":"junrong98"},"content":"     * @return Returns a LocalDate object","lastModifiedDate":"2022-01-24"},{"lineNumber":411,"author":{"gitId":"junrong98"},"content":"     * @throws FunBoxExceptions If dateTimeArr.length !\u003d 2","lastModifiedDate":"2022-01-24"},{"lineNumber":412,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":413,"author":{"gitId":"junrong98"},"content":"    private LocalDate stringToLocalDate(String dateTime) throws FunBoxExceptions {","lastModifiedDate":"2022-01-24"},{"lineNumber":414,"author":{"gitId":"junrong98"},"content":"        String[] dateTimeArr \u003d this.formatCommands(dateTime);","lastModifiedDate":"2022-01-24"},{"lineNumber":415,"author":{"gitId":"junrong98"},"content":"        LocalDate result;","lastModifiedDate":"2022-01-24"},{"lineNumber":416,"author":{"gitId":"junrong98"},"content":"        if (dateTimeArr.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-24"},{"lineNumber":417,"author":{"gitId":"junrong98"},"content":"            result \u003d LocalDate.parse(dateTimeArr[0]);","lastModifiedDate":"2022-01-24"},{"lineNumber":418,"author":{"gitId":"junrong98"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":419,"author":{"gitId":"junrong98"},"content":"            throw new FunBoxExceptions(\"ERROR! Please ensure date and time\"","lastModifiedDate":"2022-01-24"},{"lineNumber":420,"author":{"gitId":"junrong98"},"content":"                    + \" is in the correct format: yyyy-mm-dd time\");","lastModifiedDate":"2022-01-24"},{"lineNumber":421,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":422,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":423,"author":{"gitId":"junrong98"},"content":"        return result;","lastModifiedDate":"2022-01-24"},{"lineNumber":424,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":425,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":426,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":427,"author":{"gitId":"junrong98"},"content":"     * Gets the time from a string consisting of a date and time","lastModifiedDate":"2022-01-24"},{"lineNumber":428,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-24"},{"lineNumber":429,"author":{"gitId":"junrong98"},"content":"     * @param dateTime The date and time which the task should be completed by","lastModifiedDate":"2022-01-24"},{"lineNumber":430,"author":{"gitId":"junrong98"},"content":"     * @return Returns a time","lastModifiedDate":"2022-01-24"},{"lineNumber":431,"author":{"gitId":"junrong98"},"content":"     * @throws FunBoxExceptions If dateTimeArr.length !\u003d 2","lastModifiedDate":"2022-01-24"},{"lineNumber":432,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":433,"author":{"gitId":"junrong98"},"content":"    private String getTime(String dateTime) throws FunBoxExceptions {","lastModifiedDate":"2022-01-24"},{"lineNumber":434,"author":{"gitId":"junrong98"},"content":"        String[] dateTimeArr \u003d this.formatCommands(dateTime);","lastModifiedDate":"2022-01-24"},{"lineNumber":435,"author":{"gitId":"junrong98"},"content":"        String time;","lastModifiedDate":"2022-01-24"},{"lineNumber":436,"author":{"gitId":"junrong98"},"content":"        if (dateTimeArr.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-24"},{"lineNumber":437,"author":{"gitId":"junrong98"},"content":"            time \u003d dateTimeArr[1];","lastModifiedDate":"2022-01-24"},{"lineNumber":438,"author":{"gitId":"junrong98"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":439,"author":{"gitId":"junrong98"},"content":"            throw new FunBoxExceptions(\"ERROR! Please ensure date and time\"","lastModifiedDate":"2022-01-24"},{"lineNumber":440,"author":{"gitId":"junrong98"},"content":"                    + \" is in this format: yyyy-mm-dd time\");","lastModifiedDate":"2022-01-24"},{"lineNumber":441,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":442,"author":{"gitId":"junrong98"},"content":"        return time;","lastModifiedDate":"2022-01-24"},{"lineNumber":443,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":444,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":445,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":446,"author":{"gitId":"junrong98"},"content":"     * Checks if commands such as mark, unmark, delete has the correct input","lastModifiedDate":"2022-01-24"},{"lineNumber":447,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-18"},{"lineNumber":448,"author":{"gitId":"junrong98"},"content":"     * @param messageArr The commands to be checked against","lastModifiedDate":"2022-01-18"},{"lineNumber":449,"author":{"gitId":"junrong98"},"content":"     * @throws FunBoxExceptions If messageArr.length !\u003d 2","lastModifiedDate":"2022-01-18"},{"lineNumber":450,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-18"},{"lineNumber":451,"author":{"gitId":"junrong98"},"content":"    private void checkTaskError(String[] messageArr) throws FunBoxExceptions {","lastModifiedDate":"2022-01-18"},{"lineNumber":452,"author":{"gitId":"junrong98"},"content":"        if (messageArr.length !\u003d 2) {","lastModifiedDate":"2022-01-18"},{"lineNumber":453,"author":{"gitId":"junrong98"},"content":"            if (messageArr.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-18"},{"lineNumber":454,"author":{"gitId":"junrong98"},"content":"                throw new FunBoxExceptions(\"Missing Task No. !!!\");","lastModifiedDate":"2022-01-18"},{"lineNumber":455,"author":{"gitId":"junrong98"},"content":"            } else {","lastModifiedDate":"2022-01-18"},{"lineNumber":456,"author":{"gitId":"junrong98"},"content":"                throw new FunBoxExceptions(\"Invalid input !!!\");","lastModifiedDate":"2022-01-18"},{"lineNumber":457,"author":{"gitId":"junrong98"},"content":"            }","lastModifiedDate":"2022-01-18"},{"lineNumber":458,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":459,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":460,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":461,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":462,"author":{"gitId":"junrong98"},"content":"     * Marks the item on the list as done","lastModifiedDate":"2022-01-24"},{"lineNumber":463,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":464,"author":{"gitId":"junrong98"},"content":"     * @param messageArr The formatted message of the user, the second item of the array typically contains the","lastModifiedDate":"2022-01-16"},{"lineNumber":465,"author":{"gitId":"junrong98"},"content":"     *                   taskNo to be mark as done","lastModifiedDate":"2022-01-16"},{"lineNumber":466,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":467,"author":{"gitId":"junrong98"},"content":"    private void markDone(String[] messageArr) {","lastModifiedDate":"2022-01-16"},{"lineNumber":468,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-18"},{"lineNumber":469,"author":{"gitId":"junrong98"},"content":"            this.checkTaskError(messageArr);","lastModifiedDate":"2022-01-18"},{"lineNumber":470,"author":{"gitId":"junrong98"},"content":"            int taskNo \u003d Integer.parseInt(messageArr[1]);","lastModifiedDate":"2022-01-16"},{"lineNumber":471,"author":{"gitId":"junrong98"},"content":"            this.tasksList.get(taskNo - 1).setDone();","lastModifiedDate":"2022-01-16"},{"lineNumber":472,"author":{"gitId":"junrong98"},"content":"        } catch (FunBoxExceptions e) {","lastModifiedDate":"2022-01-18"},{"lineNumber":473,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-18"},{"lineNumber":474,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":475,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":476,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":477,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":478,"author":{"gitId":"junrong98"},"content":"     * Marks the item on the list as not done","lastModifiedDate":"2022-01-24"},{"lineNumber":479,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":480,"author":{"gitId":"junrong98"},"content":"     * @param messageArr The formatted message of the user, the second item of the array typically contains the","lastModifiedDate":"2022-01-16"},{"lineNumber":481,"author":{"gitId":"junrong98"},"content":"     *                   taskNo to be mark as not done","lastModifiedDate":"2022-01-16"},{"lineNumber":482,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":483,"author":{"gitId":"junrong98"},"content":"    private void markUndone(String[] messageArr) {","lastModifiedDate":"2022-01-16"},{"lineNumber":484,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-18"},{"lineNumber":485,"author":{"gitId":"junrong98"},"content":"            this.checkTaskError(messageArr);","lastModifiedDate":"2022-01-18"},{"lineNumber":486,"author":{"gitId":"junrong98"},"content":"            int taskNo \u003d Integer.parseInt(messageArr[1]);","lastModifiedDate":"2022-01-16"},{"lineNumber":487,"author":{"gitId":"junrong98"},"content":"            this.tasksList.get(taskNo - 1).setUndone();","lastModifiedDate":"2022-01-16"},{"lineNumber":488,"author":{"gitId":"junrong98"},"content":"        } catch (FunBoxExceptions e) {","lastModifiedDate":"2022-01-18"},{"lineNumber":489,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-18"},{"lineNumber":490,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":491,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":492,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":493,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":494,"author":{"gitId":"junrong98"},"content":"     * Deletes the task requested by the user","lastModifiedDate":"2022-01-24"},{"lineNumber":495,"author":{"gitId":"junrong98"},"content":"     *","lastModifiedDate":"2022-01-16"},{"lineNumber":496,"author":{"gitId":"junrong98"},"content":"     * @param messageArr The formatted message of the user, the second item of the array typically contains the","lastModifiedDate":"2022-01-16"},{"lineNumber":497,"author":{"gitId":"junrong98"},"content":"     *                   taskNo to be deleted","lastModifiedDate":"2022-01-16"},{"lineNumber":498,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":499,"author":{"gitId":"junrong98"},"content":"    private void deleteTask(String[] messageArr) {","lastModifiedDate":"2022-01-16"},{"lineNumber":500,"author":{"gitId":"junrong98"},"content":"        try {","lastModifiedDate":"2022-01-18"},{"lineNumber":501,"author":{"gitId":"junrong98"},"content":"            this.checkTaskError(messageArr);","lastModifiedDate":"2022-01-18"},{"lineNumber":502,"author":{"gitId":"junrong98"},"content":"            int taskNo \u003d Integer.parseInt(messageArr[1]) - 1;","lastModifiedDate":"2022-01-16"},{"lineNumber":503,"author":{"gitId":"junrong98"},"content":"            Task temp \u003d this.tasksList.get(taskNo);","lastModifiedDate":"2022-01-16"},{"lineNumber":504,"author":{"gitId":"junrong98"},"content":"            this.tasksList.remove(taskNo);","lastModifiedDate":"2022-01-16"},{"lineNumber":505,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"Noted! I\u0027ve removed this task:\");","lastModifiedDate":"2022-01-16"},{"lineNumber":506,"author":{"gitId":"junrong98"},"content":"            System.out.println(temp);","lastModifiedDate":"2022-01-16"},{"lineNumber":507,"author":{"gitId":"junrong98"},"content":"            System.out.println(\"Now you have \" + this.tasksList.size() + \" tasks in the list\");","lastModifiedDate":"2022-01-16"},{"lineNumber":508,"author":{"gitId":"junrong98"},"content":"        } catch (FunBoxExceptions e) {","lastModifiedDate":"2022-01-18"},{"lineNumber":509,"author":{"gitId":"junrong98"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-18"},{"lineNumber":510,"author":{"gitId":"junrong98"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":511,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":512,"author":{"gitId":"junrong98"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":513,"author":{"gitId":"junrong98"},"content":"    /**","lastModifiedDate":"2022-01-16"},{"lineNumber":514,"author":{"gitId":"junrong98"},"content":"     * Prints out goodbye message to the user","lastModifiedDate":"2022-01-24"},{"lineNumber":515,"author":{"gitId":"junrong98"},"content":"     */","lastModifiedDate":"2022-01-16"},{"lineNumber":516,"author":{"gitId":"junrong98"},"content":"    public void sayBye() {","lastModifiedDate":"2022-01-16"},{"lineNumber":517,"author":{"gitId":"junrong98"},"content":"        System.out.println(\"B-b-bbye. Hope to see you again soon [0 n 0]\");","lastModifiedDate":"2022-01-16"},{"lineNumber":518,"author":{"gitId":"junrong98"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":519,"author":{"gitId":"junrong98"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"junrong98":519}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"junrong98"},"content":"todo borrow book","lastModifiedDate":"2022-01-16"},{"lineNumber":2,"author":{"gitId":"junrong98"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":3,"author":{"gitId":"junrong98"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"junrong98"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":5,"author":{"gitId":"junrong98"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-01-16"},{"lineNumber":6,"author":{"gitId":"junrong98"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"junrong98"},"content":"mark 2","lastModifiedDate":"2022-01-16"},{"lineNumber":8,"author":{"gitId":"junrong98"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"junrong98"},"content":"unmark 2","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"junrong98"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"junrong98"},"content":"bye","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"junrong98":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"junrong98"},"content":"java -classpath ..\\bin FunBox \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"junrong98":1}}]
