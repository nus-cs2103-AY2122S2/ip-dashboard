[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"    protected String by;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"        return \"[D]\" + super.getTask() + \"(by: \" + by + \")\";","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"punnyhuimin":14}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"import java.io.*;","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"import java.text.ParseException;","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"import java.util.Date;","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":" * @author Pun Hui Min","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"enum Commands {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"    BYE,","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"    HELP,","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"punnyhuimin"},"content":"    LIST,","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"punnyhuimin"},"content":"    EVENT,","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"punnyhuimin"},"content":"    DEADLINE,","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"punnyhuimin"},"content":"    TODO,","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"punnyhuimin"},"content":"    DELETE","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"punnyhuimin"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"punnyhuimin"},"content":"    public Duke() {","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"punnyhuimin"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"punnyhuimin"},"content":"    public void welcome() {","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"punnyhuimin"},"content":"        String logo \u003d \" ____              _\"","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"punnyhuimin"},"content":"                + \"\\n|  _ \\\\ _   _ _____| | ____ __\\n\"","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"punnyhuimin"},"content":"                + \"| | | | | | |  ___| |/ /\\\\ v /\\n\"","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"punnyhuimin"},"content":"                + \"| |_| | |_| | |___|   \u003c  | |\\n\"","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"punnyhuimin"},"content":"                + \"|____/ \\\\___/\\\\_____|_|\\\\_\\\\ |_|\\n\";","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":36,"author":{"gitId":"punnyhuimin"},"content":"        System.out.println(logo + \"Hello! I\u0027m Ducky! :)\\n\" + \"I am a task manager.\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"punnyhuimin"},"content":"                \"Type \u0027help\u0027 for more information on the commands you can give me.\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"punnyhuimin"},"content":"                \"What can I do for you today?\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"punnyhuimin"},"content":"                \"~--~~--~~--~~(~v~)~~--~~--~~--~\");","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"punnyhuimin"},"content":"    public void help() {","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"punnyhuimin"},"content":"        String helpResponse \u003d \"\u003e Type \u0027list\u0027 to see what you have in your task list\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"punnyhuimin"},"content":"                \"\u003e Type \u0027todo \u003cmessage\u003e\u0027 to put a todo in your list\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"punnyhuimin"},"content":"                \"\u003e Type \u0027deadline \u003cmessage\u003e /by \u003cdeadline\u003e\u0027 to put a deadline in your list.\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":46,"author":{"gitId":"punnyhuimin"},"content":"                \"\\n\\t - Deadline must be in \u0027DD/MM/YYYY\u0027 format\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"punnyhuimin"},"content":"                \"\\n\u003e Type \u0027event \u003cmessage\u003e /at \u003cdate\u003e\u0027 to put an event in your list\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"punnyhuimin"},"content":"                \"\\n\\t - Date must be in \u0027DD/MM/YYYY\u0027 format\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"punnyhuimin"},"content":"                \"\\n\u003e Type \u0027mark \u003cx\u003e\u0027 to mark a task in your list\" +","lastModifiedDate":"2022-01-19"},{"lineNumber":50,"author":{"gitId":"punnyhuimin"},"content":"                \"\\n\u003e Type \u0027unmark \u003cx\u003e\u0027 to unmark a task in your list\";","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"punnyhuimin"},"content":"        ;","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"punnyhuimin"},"content":"        System.out.println(helpResponse);","lastModifiedDate":"2022-01-19"},{"lineNumber":53,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":54,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"punnyhuimin"},"content":"    public void printTasks() throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":56,"author":{"gitId":"punnyhuimin"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-20"},{"lineNumber":57,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Please add some tasks first *(^.^)*\");","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"punnyhuimin"},"content":"        } else {","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"Here are your tasks:\");","lastModifiedDate":"2022-01-19"},{"lineNumber":60,"author":{"gitId":"punnyhuimin"},"content":"            for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2022-01-20"},{"lineNumber":61,"author":{"gitId":"punnyhuimin"},"content":"                Task currentTask \u003d this.tasks.get(i);","lastModifiedDate":"2022-01-20"},{"lineNumber":62,"author":{"gitId":"punnyhuimin"},"content":"                String message \u003d currentTask.getTask();","lastModifiedDate":"2022-01-19"},{"lineNumber":63,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(i + 1 + \". \" + message);","lastModifiedDate":"2022-01-19"},{"lineNumber":64,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-19"},{"lineNumber":65,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"punnyhuimin"},"content":"     * Prints the \u0027bye\u0027 response by Ducky. Usually called when the user says \"bye\"","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"punnyhuimin"},"content":"    public void printBye() {","lastModifiedDate":"2022-01-20"},{"lineNumber":72,"author":{"gitId":"punnyhuimin"},"content":"        String byeResponse \u003d \"Bye~ Hope to see you again soon!\";","lastModifiedDate":"2022-01-20"},{"lineNumber":73,"author":{"gitId":"punnyhuimin"},"content":"        System.out.println(byeResponse);","lastModifiedDate":"2022-01-20"},{"lineNumber":74,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":75,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":76,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"punnyhuimin"},"content":"     * Deletes the task specified by the user","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"punnyhuimin"},"content":"     * @param i ID of the task the user would like to delete.","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException if there is an IndexOutOfBoundsException.","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":82,"author":{"gitId":"punnyhuimin"},"content":"    public void deleteTask(String i) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":83,"author":{"gitId":"punnyhuimin"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":84,"author":{"gitId":"punnyhuimin"},"content":"            Task currTask \u003d this.tasks.get(Integer.parseInt(i) - 1);","lastModifiedDate":"2022-01-20"},{"lineNumber":85,"author":{"gitId":"punnyhuimin"},"content":"            this.tasks.remove(Integer.parseInt(i) - 1);","lastModifiedDate":"2022-01-20"},{"lineNumber":86,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"I have removed this from your tasks:\\n\" + currTask.getTask());","lastModifiedDate":"2022-01-20"},{"lineNumber":87,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"You now have \" + this.tasks.size() + \" tasks\");","lastModifiedDate":"2022-01-20"},{"lineNumber":88,"author":{"gitId":"punnyhuimin"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":89,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Oops! \\\\(@.@)/ This task does not exist.\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":90,"author":{"gitId":"punnyhuimin"},"content":"                    \"\\nPlease type \u0027list\u0027 to see existing tasks *(^.^)*\");","lastModifiedDate":"2022-01-20"},{"lineNumber":91,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":93,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":94,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"punnyhuimin"},"content":"     * Adds a Todo object to the list when specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"punnyhuimin"},"content":"     * @param description which is the task description from user.","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when there is no description provided by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":100,"author":{"gitId":"punnyhuimin"},"content":"    public void addTodo(String description) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":101,"author":{"gitId":"punnyhuimin"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-20"},{"lineNumber":102,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":103,"author":{"gitId":"punnyhuimin"},"content":"                    \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":104,"author":{"gitId":"punnyhuimin"},"content":"                    \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":105,"author":{"gitId":"punnyhuimin"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"punnyhuimin"},"content":"            Todo entry \u003d new Todo(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":107,"author":{"gitId":"punnyhuimin"},"content":"            this.tasks.add(entry);","lastModifiedDate":"2022-01-20"},{"lineNumber":108,"author":{"gitId":"punnyhuimin"},"content":"            String message \u003d entry.getTask();","lastModifiedDate":"2022-01-20"},{"lineNumber":109,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"I have added the following todo:\\n\" + message);","lastModifiedDate":"2022-01-20"},{"lineNumber":110,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"You now have \" + this.tasks.size() + \" tasks\");","lastModifiedDate":"2022-01-20"},{"lineNumber":111,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":112,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":113,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":114,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"punnyhuimin"},"content":"     * Adds a Deadline object to the list when specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"punnyhuimin"},"content":"     * @param description which is the task description from user.","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"punnyhuimin"},"content":"     * @param time        which is the deadline provided by user.","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when there is no description provided or when there is no time specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":121,"author":{"gitId":"punnyhuimin"},"content":"    public void addDeadline(String description, String time) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":122,"author":{"gitId":"punnyhuimin"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-20"},{"lineNumber":123,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":124,"author":{"gitId":"punnyhuimin"},"content":"                    \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":125,"author":{"gitId":"punnyhuimin"},"content":"                    \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":126,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":127,"author":{"gitId":"punnyhuimin"},"content":"        if (time.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-20"},{"lineNumber":128,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Oops! \\\\(@.@)/ You have not keyed in a due date for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":129,"author":{"gitId":"punnyhuimin"},"content":"                    \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":130,"author":{"gitId":"punnyhuimin"},"content":"                    \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":131,"author":{"gitId":"punnyhuimin"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"punnyhuimin"},"content":"            Deadline entry \u003d new Deadline(description, time);","lastModifiedDate":"2022-01-20"},{"lineNumber":133,"author":{"gitId":"punnyhuimin"},"content":"            this.tasks.add(entry);","lastModifiedDate":"2022-01-20"},{"lineNumber":134,"author":{"gitId":"punnyhuimin"},"content":"            String message \u003d entry.getTask();","lastModifiedDate":"2022-01-20"},{"lineNumber":135,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"I have added the following deadline:\\n\" + message);","lastModifiedDate":"2022-01-20"},{"lineNumber":136,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"You now have \" + this.tasks.size() + \" tasks\");","lastModifiedDate":"2022-01-20"},{"lineNumber":137,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":138,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":139,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":140,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":141,"author":{"gitId":"punnyhuimin"},"content":"     * Adds an Event object to the list when specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"punnyhuimin"},"content":"     * @param description which is the task description from user.","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"punnyhuimin"},"content":"     * @param time        which is the event time provided by user.","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when there is no description provided or when there is no time specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":147,"author":{"gitId":"punnyhuimin"},"content":"    public void addEvent(String description, String time) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":148,"author":{"gitId":"punnyhuimin"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-20"},{"lineNumber":149,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":150,"author":{"gitId":"punnyhuimin"},"content":"                    \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":151,"author":{"gitId":"punnyhuimin"},"content":"                    \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":152,"author":{"gitId":"punnyhuimin"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"punnyhuimin"},"content":"            Event entry \u003d new Event(description, time);","lastModifiedDate":"2022-01-20"},{"lineNumber":154,"author":{"gitId":"punnyhuimin"},"content":"            this.tasks.add(entry);","lastModifiedDate":"2022-01-20"},{"lineNumber":155,"author":{"gitId":"punnyhuimin"},"content":"            String message \u003d entry.getTask();","lastModifiedDate":"2022-01-20"},{"lineNumber":156,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"I have added the following event:\\n\" + message);","lastModifiedDate":"2022-01-20"},{"lineNumber":157,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"You now have \" + this.tasks.size() + \" tasks\");","lastModifiedDate":"2022-01-20"},{"lineNumber":158,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":159,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":160,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":161,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":162,"author":{"gitId":"punnyhuimin"},"content":"     * Unmarks the item specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":164,"author":{"gitId":"punnyhuimin"},"content":"     * @param strID which is the ID number of the task in the list","lastModifiedDate":"2022-01-20"},{"lineNumber":165,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when the specified ID number is not in the list","lastModifiedDate":"2022-01-26"},{"lineNumber":166,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":167,"author":{"gitId":"punnyhuimin"},"content":"    public void unmarkItem(String strID) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":168,"author":{"gitId":"punnyhuimin"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":169,"author":{"gitId":"punnyhuimin"},"content":"            Task currentTask \u003d this.tasks.get(Integer.parseInt(strID) - 1);","lastModifiedDate":"2022-01-20"},{"lineNumber":170,"author":{"gitId":"punnyhuimin"},"content":"            currentTask.setNotDone();","lastModifiedDate":"2022-01-19"},{"lineNumber":171,"author":{"gitId":"punnyhuimin"},"content":"            String message \u003d currentTask.getTask();","lastModifiedDate":"2022-01-19"},{"lineNumber":172,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"Sure, I have unmarked the following task:\\n\" + message);","lastModifiedDate":"2022-01-19"},{"lineNumber":173,"author":{"gitId":"punnyhuimin"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":174,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Sorry, I could not find that \\\\(T.T)/\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":175,"author":{"gitId":"punnyhuimin"},"content":"                    \"Please type \u0027list\u0027 to view your current entries.\");","lastModifiedDate":"2022-01-20"},{"lineNumber":176,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":177,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":178,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":179,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":180,"author":{"gitId":"punnyhuimin"},"content":"     * Marks the item specified by the user.","lastModifiedDate":"2022-01-26"},{"lineNumber":181,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":182,"author":{"gitId":"punnyhuimin"},"content":"     * @param strID which is the ID number of the task in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":183,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when the specified ID number is not in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":184,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":185,"author":{"gitId":"punnyhuimin"},"content":"    public void markItem(String strID) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":186,"author":{"gitId":"punnyhuimin"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":187,"author":{"gitId":"punnyhuimin"},"content":"            Task currentTask \u003d this.tasks.get(Integer.parseInt(strID) - 1);","lastModifiedDate":"2022-01-20"},{"lineNumber":188,"author":{"gitId":"punnyhuimin"},"content":"            currentTask.setDone();","lastModifiedDate":"2022-01-19"},{"lineNumber":189,"author":{"gitId":"punnyhuimin"},"content":"            String message \u003d currentTask.getTask();","lastModifiedDate":"2022-01-19"},{"lineNumber":190,"author":{"gitId":"punnyhuimin"},"content":"            System.out.println(\"Ok, I have marked the following task:\\n\" + message);","lastModifiedDate":"2022-01-19"},{"lineNumber":191,"author":{"gitId":"punnyhuimin"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":192,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Sorry, I could not find the item \\\\(T.T)/\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":193,"author":{"gitId":"punnyhuimin"},"content":"                    \"Please type \u0027list\u0027 to view your current entries.\");","lastModifiedDate":"2022-01-20"},{"lineNumber":194,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":195,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":196,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":197,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":198,"author":{"gitId":"punnyhuimin"},"content":"     * Processes the string inputted by the user. Filters the command and calls on other functions to print a string.","lastModifiedDate":"2022-01-26"},{"lineNumber":199,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":200,"author":{"gitId":"punnyhuimin"},"content":"     * @param ducky Takes in a Duke instance.","lastModifiedDate":"2022-01-26"},{"lineNumber":201,"author":{"gitId":"punnyhuimin"},"content":"     * @param myObj Takes in a Scanner object.","lastModifiedDate":"2022-01-26"},{"lineNumber":202,"author":{"gitId":"punnyhuimin"},"content":"     * @throws DukeException when the specified ID number is not in the list, if the time is not provided accurately,","lastModifiedDate":"2022-01-26"},{"lineNumber":203,"author":{"gitId":"punnyhuimin"},"content":"     * or if there was no description or command provided.","lastModifiedDate":"2022-01-26"},{"lineNumber":204,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":205,"author":{"gitId":"punnyhuimin"},"content":"    public void check(Duke ducky, Scanner myObj) throws DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":206,"author":{"gitId":"punnyhuimin"},"content":"        String response \u003d myObj.nextLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":207,"author":{"gitId":"punnyhuimin"},"content":"        String[] textEntered \u003d response.split(\" \", 2);","lastModifiedDate":"2022-01-20"},{"lineNumber":208,"author":{"gitId":"punnyhuimin"},"content":"        String command \u003d textEntered[0];","lastModifiedDate":"2022-01-20"},{"lineNumber":209,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":210,"author":{"gitId":"punnyhuimin"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":211,"author":{"gitId":"punnyhuimin"},"content":"            ducky.printBye();","lastModifiedDate":"2022-01-20"},{"lineNumber":212,"author":{"gitId":"punnyhuimin"},"content":"            System.exit(1);","lastModifiedDate":"2022-01-20"},{"lineNumber":213,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"help\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":214,"author":{"gitId":"punnyhuimin"},"content":"            ducky.help();","lastModifiedDate":"2022-01-20"},{"lineNumber":215,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":216,"author":{"gitId":"punnyhuimin"},"content":"            ducky.printTasks();","lastModifiedDate":"2022-01-20"},{"lineNumber":217,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"delete\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":218,"author":{"gitId":"punnyhuimin"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":219,"author":{"gitId":"punnyhuimin"},"content":"                String id \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":220,"author":{"gitId":"punnyhuimin"},"content":"                ducky.deleteTask(id);","lastModifiedDate":"2022-01-20"},{"lineNumber":221,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":222,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops! \\\\(@.@)/ You have not keyed in an ID!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":223,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":224,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":225,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":226,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"todo\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":227,"author":{"gitId":"punnyhuimin"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":228,"author":{"gitId":"punnyhuimin"},"content":"                String description \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":229,"author":{"gitId":"punnyhuimin"},"content":"                ducky.addTodo(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":230,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":231,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":232,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":233,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":234,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":235,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":236,"author":{"gitId":"punnyhuimin"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":237,"author":{"gitId":"punnyhuimin"},"content":"                String text \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":238,"author":{"gitId":"punnyhuimin"},"content":"                String[] textArr \u003d text.split(\"/by \");","lastModifiedDate":"2022-01-20"},{"lineNumber":239,"author":{"gitId":"punnyhuimin"},"content":"                String description \u003d textArr[0];","lastModifiedDate":"2022-01-20"},{"lineNumber":240,"author":{"gitId":"punnyhuimin"},"content":"                if (textArr.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-20"},{"lineNumber":241,"author":{"gitId":"punnyhuimin"},"content":"                    throw new DukeException(\"Oops, please specify a date!\");","lastModifiedDate":"2022-01-20"},{"lineNumber":242,"author":{"gitId":"punnyhuimin"},"content":"                }","lastModifiedDate":"2022-01-20"},{"lineNumber":243,"author":{"gitId":"punnyhuimin"},"content":"                String time \u003d textArr[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":244,"author":{"gitId":"punnyhuimin"},"content":"                SimpleDateFormat date \u003d new java.text.SimpleDateFormat(\"dd/MM/yyyy\");","lastModifiedDate":"2022-01-20"},{"lineNumber":245,"author":{"gitId":"punnyhuimin"},"content":"                date.parse(time);","lastModifiedDate":"2022-01-20"},{"lineNumber":246,"author":{"gitId":"punnyhuimin"},"content":"                ducky.addDeadline(description, time);","lastModifiedDate":"2022-01-20"},{"lineNumber":247,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":248,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":249,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":250,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":251,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":252,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops, please put a valid time format!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":253,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":254,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":255,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":256,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":257,"author":{"gitId":"punnyhuimin"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":258,"author":{"gitId":"punnyhuimin"},"content":"                String text \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":259,"author":{"gitId":"punnyhuimin"},"content":"                String[] textArr \u003d text.split(\"/at \");","lastModifiedDate":"2022-01-20"},{"lineNumber":260,"author":{"gitId":"punnyhuimin"},"content":"                String description \u003d textArr[0];","lastModifiedDate":"2022-01-20"},{"lineNumber":261,"author":{"gitId":"punnyhuimin"},"content":"                if (textArr.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-20"},{"lineNumber":262,"author":{"gitId":"punnyhuimin"},"content":"                    throw new DukeException(\"Oops, please specify a date!\");","lastModifiedDate":"2022-01-20"},{"lineNumber":263,"author":{"gitId":"punnyhuimin"},"content":"                }","lastModifiedDate":"2022-01-20"},{"lineNumber":264,"author":{"gitId":"punnyhuimin"},"content":"                String time \u003d textArr[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":265,"author":{"gitId":"punnyhuimin"},"content":"                SimpleDateFormat date \u003d new java.text.SimpleDateFormat(\"dd/MM/yyyy\");","lastModifiedDate":"2022-01-20"},{"lineNumber":266,"author":{"gitId":"punnyhuimin"},"content":"                date.parse(time);","lastModifiedDate":"2022-01-20"},{"lineNumber":267,"author":{"gitId":"punnyhuimin"},"content":"                ducky.addEvent(description, time);","lastModifiedDate":"2022-01-20"},{"lineNumber":268,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":269,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops! \\\\(@.@)/ You have not keyed in a description for the task!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":270,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":271,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":272,"author":{"gitId":"punnyhuimin"},"content":"            } catch (ParseException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":273,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(\"Oops, please put a valid time format!\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":274,"author":{"gitId":"punnyhuimin"},"content":"                        \"Let\u0027s try again ~(^.^)~\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":275,"author":{"gitId":"punnyhuimin"},"content":"                        \"Type \u0027help\u0027 if you need to know how to use this command\");","lastModifiedDate":"2022-01-20"},{"lineNumber":276,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":277,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":278,"author":{"gitId":"punnyhuimin"},"content":"            String strID \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":279,"author":{"gitId":"punnyhuimin"},"content":"            ducky.unmarkItem(strID);","lastModifiedDate":"2022-01-20"},{"lineNumber":280,"author":{"gitId":"punnyhuimin"},"content":"        } else if (command.equals(\"mark\")) {","lastModifiedDate":"2022-01-20"},{"lineNumber":281,"author":{"gitId":"punnyhuimin"},"content":"            String strID \u003d textEntered[1];","lastModifiedDate":"2022-01-20"},{"lineNumber":282,"author":{"gitId":"punnyhuimin"},"content":"            ducky.markItem(strID);","lastModifiedDate":"2022-01-20"},{"lineNumber":283,"author":{"gitId":"punnyhuimin"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":284,"author":{"gitId":"punnyhuimin"},"content":"            throw new DukeException(\"Sorry, I did not catch that! \\\\(T.T)/\\n\" +","lastModifiedDate":"2022-01-20"},{"lineNumber":285,"author":{"gitId":"punnyhuimin"},"content":"                    \"Please type \u0027help\u0027 to see all commands I can help with.\");","lastModifiedDate":"2022-01-20"},{"lineNumber":286,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":287,"author":{"gitId":"punnyhuimin"},"content":"        System.out.println(\"~--~~--~~--~~(~v~)~~--~~--~~--~\");","lastModifiedDate":"2022-01-20"},{"lineNumber":288,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":289,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":290,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":291,"author":{"gitId":"punnyhuimin"},"content":"     * Takes in the user input and creates a scanner.","lastModifiedDate":"2022-01-26"},{"lineNumber":292,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":293,"author":{"gitId":"punnyhuimin"},"content":"     * @param args Takes in the user input from the CLI","lastModifiedDate":"2022-01-26"},{"lineNumber":294,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-26"},{"lineNumber":296,"author":{"gitId":"punnyhuimin"},"content":"        Duke ducky \u003d new Duke();","lastModifiedDate":"2022-01-20"},{"lineNumber":297,"author":{"gitId":"punnyhuimin"},"content":"        ducky.welcome();","lastModifiedDate":"2022-01-20"},{"lineNumber":298,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":299,"author":{"gitId":"punnyhuimin"},"content":"        Scanner myObj \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-20"},{"lineNumber":300,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":301,"author":{"gitId":"punnyhuimin"},"content":"        while (true) {","lastModifiedDate":"2022-01-20"},{"lineNumber":302,"author":{"gitId":"punnyhuimin"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":303,"author":{"gitId":"punnyhuimin"},"content":"                ducky.check(ducky, myObj);","lastModifiedDate":"2022-01-20"},{"lineNumber":304,"author":{"gitId":"punnyhuimin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":305,"author":{"gitId":"punnyhuimin"},"content":"                System.out.println(e.toString() + \"\\n~--~~--~~--~~(~v~)~~--~~--~~--~\");","lastModifiedDate":"2022-01-20"},{"lineNumber":306,"author":{"gitId":"punnyhuimin"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":307,"author":{"gitId":"punnyhuimin"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-19"},{"lineNumber":310,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"-":4,"punnyhuimin":306}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"    String message;","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"        this.message \u003d errorMessage;","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"    public String toString(){","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"        return this.message;","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"punnyhuimin":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"    protected String at;","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"        return \"[E]\" + super.getTask() + \"(at: \" + at + \")\";","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"punnyhuimin":13}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"public class Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"    protected String description;","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"     * Gets the task description and status. Returns the formatted status and description of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"     * @return specified Task description","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"punnyhuimin"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"punnyhuimin"},"content":"        String icon \u003d this.getStatusIcon();","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"punnyhuimin"},"content":"        String output \u003d \"[\" + icon + \"] \" + this.description;","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"punnyhuimin"},"content":"        return output;","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"punnyhuimin"},"content":"     * Gets the task status. Returns the formatted task status icon.","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"punnyhuimin"},"content":"     * Can only be used in the Task class.","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"punnyhuimin"},"content":"     *","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"punnyhuimin"},"content":"     * @return specified Task status icon i.e. [X] or  [ ]","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"punnyhuimin"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"punnyhuimin"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":31,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"punnyhuimin"},"content":"     * Sets the task status. Changes task status to true.","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"punnyhuimin"},"content":"    public void setDone(){","lastModifiedDate":"2022-01-19"},{"lineNumber":35,"author":{"gitId":"punnyhuimin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-19"},{"lineNumber":36,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":37,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":38,"author":{"gitId":"punnyhuimin"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"punnyhuimin"},"content":"     * Sets the task status. Changes task status to false.","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"punnyhuimin"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"punnyhuimin"},"content":"    public void setNotDone(){","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"punnyhuimin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":43,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":44,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":45,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"punnyhuimin":45}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"    public String getTask() {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"        return \"[T]\" + super.getTask();","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"punnyhuimin":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"punnyhuimin"},"content":"help","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"punnyhuimin"},"content":"todo Java week 2","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"punnyhuimin"},"content":"event Ball /at 26th January 2021","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"punnyhuimin"},"content":"deadline quiz 2 /by 19th January 2021","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"punnyhuimin"},"content":"deadline /by 615","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"punnyhuimin"},"content":"deadline /by 01/07/2022","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"punnyhuimin"},"content":"deadline drawing /by 01/07/2022","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"punnyhuimin"},"content":"deadline","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"punnyhuimin"},"content":"event ball /at 10/02/2022","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"punnyhuimin"},"content":"event","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"punnyhuimin"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"punnyhuimin"},"content":"delete 100","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"punnyhuimin"},"content":"delete 2","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"punnyhuimin"},"content":"mark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"punnyhuimin"},"content":"mark 100","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"punnyhuimin"},"content":"mark 3","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"punnyhuimin"},"content":"unmark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"punnyhuimin"},"content":"unmark 20","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"punnyhuimin"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"punnyhuimin"},"content":"bye","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"punnyhuimin":20}}]
