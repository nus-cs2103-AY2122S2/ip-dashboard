[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"# duke.Duke project template","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"robinrojh":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"robinrojh":15,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"[T][ ] Test todo! | #IMPORTANT!","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"[D][ ] Input date format is yyyy-MM-dd hhmm (by: 18:00 Sunday, 12-25-2022)","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"[E][ ] Test out the program! (at: 18:30 Wednesday, 02-23-2022)","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"robinrojh":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"![UI Showcase](./Ui.png)","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"Duke chatbot provides a way to record and save your tasks efficiently!","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"- [Features](https://robinrojh.github.io/ip/#features)","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"- [Usage](https://robinrojh.github.io/ip/#usage)","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"  - [Add, Delete, and View](https://robinrojh.github.io/ip/#adding-and-deleting-tasks)","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    - [todo](https://robinrojh.github.io/ip/#todo---adding-a-todo-object)","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    - [deadline](https://robinrojh.github.io/ip/#deadline---adding-a-deadline-object)","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    - [event](https://robinrojh.github.io/ip/#event---adding-an-event-object)","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    - [delete](https://robinrojh.github.io/ip/#delete---delete-a-task)","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    - [list](https://robinrojh.github.io/ip/#list---list-all-your-tasks)","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"  - [Mark Your Tasks](https://robinrojh.github.io/ip/#marking-tasks)","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    - [mark](https://robinrojh.github.io/ip/#mark---mark-the-task-as-completed)","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    - [unmark]()","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"  - [Useful Features](https://robinrojh.github.io/ip/#useful-features)","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    - [find](https://robinrojh.github.io/ip/#find---find-a-task-in-the-list-based-on-a-keyword)","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    - [sort](https://robinrojh.github.io/ip/#sort---sort-the-list-based-on-date-or-content)","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"  - [Tagging Your Tasks](https://robinrojh.github.io/ip/#useful-features)","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    - [tag](https://robinrojh.github.io/ip/#tag---tag-a-task-with-a-keyword)","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    - [untag](https://robinrojh.github.io/ip/#untag---untag-the-task)","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"### Add, Delete, and View Your Tasks.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"In Duke chatbot, you can add any of the three types of Tasks. ","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"- Todo: A simple task object with only content as argument","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"- Event: A task object with datetime that the event occurs at","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"- Deadline: A task object with datetime that serves as a deadline for the task","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"### Mark Your Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"Furthermore, you can mark your task objects as complete using Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"- Mark a task marks it as completed","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"- Unmark a task by using the index number of the task","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"### Sort Your Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"Viewing tasks based on the date is quite important. Urgent items should be addressed first! \u003cbr/\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"Duke provides a sort feature to let you sort based on the date of the tasks and based on the contents of the tasks.","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"### Tag Your Tasks with Unique Tags","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"Duke also allows you to tag your tasks with tags of your own choice. This will allow you to view tasks more ","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"intuitively based on what the task is about.","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"- Add tag to a task","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"- Untag a task using the name of the existing tag","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"### Keyword Search on Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"Sometimes, you need to look through the whole list to find something you needed to do!","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"With keyword search, you can search for your task with keywords.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"### Load Up Your List with Locally Stored File","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"Duke automatically saves every item in the list of tasks after every action. On application booting, ","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"Duke loads the save file.","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"### Adding and Deleting Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"#### `todo` - Adding a ToDo object","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"Adds a ToDo task into the list. A ToDo task only has content, no date. ","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"Usage: `todo CONTENT`","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"Example: `todo hello world`","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"Adding a task: [T][] hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"Now you got 1 task in the list!","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"#### `deadline` - Adding a Deadline Object","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"Adds a Deadline task into the list. A Deadline task contains a content and a due date. The","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"date and time must be in the format of `yyyy/MM/dd hhmm`.","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"Usage: `deadline CONTENT \\by DATE`","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"Example: ","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"`deadline hello world \\by 2022-03-23 1600`","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"Adding a task: [D][ ] hello world (by: 16:00 Wednesday, 03-23-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"Now you got 1 task in the list!","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"#### `event` - Adding an Event Object","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"Adds an Event task into the list. A Event task contains a content and a date when the event occurs. ","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"The date and time must be in the format of `yyyy/MM/dd hhmm`.","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"Usage: `event CONTENT \\at DATE`","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"`event hello world \\at 2022-04-12 1600`","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"Adding a task: [E][ ] hello world (at: 16:00 Tuesday, 04-12-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"Now you got 1 task in the list!","lastModifiedDate":"2022-02-15"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"#### `delete` - Delete a Task","lastModifiedDate":"2022-02-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"Deletes a task using the index of the target task.","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"Usage: `delete INDEX`","lastModifiedDate":"2022-02-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"Example: ","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"todo hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"delete 1","lastModifiedDate":"2022-02-15"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"Ok, removing a task: [T][ ] hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"Now you got 0 tasks in the list!","lastModifiedDate":"2022-02-15"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"#### `list` - List all your tasks!","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"Lists all of your tasks that you have added until now.","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"Usage: `list`","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"todo hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"deadline CS stuff \\by 2022-12-25 1800","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"event meet up with friends \\at 2022-02-23 1830","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"1: [T][ ] hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"2: [D][ ] CS stuff (by: 18:00 Sunday, 12-25-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"3: [E][ ] meet up with friends (at: 18:30 Wednesday, 02-23-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"---","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"### Marking Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"#### `mark` - Mark the task as completed","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"Marks a task as completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"Usage: `mark INDEX` ","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"todo hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"mark 1","lastModifiedDate":"2022-02-15"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"Nice! I have marked this task as done: [T][X] hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"#### `unmark` - Unmark the task","lastModifiedDate":"2022-02-15"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"Removes the mark from the task, marking it as incomplete.","lastModifiedDate":"2022-02-15"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"Usage: `unmark INDEX`","lastModifiedDate":"2022-02-15"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"Example: ","lastModifiedDate":"2022-02-15"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"todo hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"mark 1","lastModifiedDate":"2022-02-15"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"unmark 1","lastModifiedDate":"2022-02-15"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":174,"author":{"gitId":"robinrojh"},"content":"I\u0027ve unmarked this task: [T][ ] hello world","lastModifiedDate":"2022-02-15"},{"lineNumber":175,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":176,"author":{"gitId":"robinrojh"},"content":"---","lastModifiedDate":"2022-02-15"},{"lineNumber":177,"author":{"gitId":"robinrojh"},"content":"### Useful Features","lastModifiedDate":"2022-02-15"},{"lineNumber":178,"author":{"gitId":"robinrojh"},"content":"#### `find` - Find a task in the list based on a keyword","lastModifiedDate":"2022-02-15"},{"lineNumber":179,"author":{"gitId":"robinrojh"},"content":"Finds a task based on the given keyword. Case sensitive.","lastModifiedDate":"2022-02-15"},{"lineNumber":180,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":181,"author":{"gitId":"robinrojh"},"content":"Usage: `find KEYWORD`","lastModifiedDate":"2022-02-15"},{"lineNumber":182,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":183,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":184,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":185,"author":{"gitId":"robinrojh"},"content":"todo CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":186,"author":{"gitId":"robinrojh"},"content":"deadline CS stuff \\by 2022-12-25 1800","lastModifiedDate":"2022-02-15"},{"lineNumber":187,"author":{"gitId":"robinrojh"},"content":"event meet up with friends \\at 2022-02-23 1830","lastModifiedDate":"2022-02-15"},{"lineNumber":188,"author":{"gitId":"robinrojh"},"content":"find CS","lastModifiedDate":"2022-02-15"},{"lineNumber":189,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":190,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":191,"author":{"gitId":"robinrojh"},"content":"Expected outcome: list of tasks with the given keyword.","lastModifiedDate":"2022-02-15"},{"lineNumber":192,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":193,"author":{"gitId":"robinrojh"},"content":"1: [T][ ] CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":194,"author":{"gitId":"robinrojh"},"content":"2: [D][ ] CS stuff (by: 18:00 Sunday, 12-25-2022)  ","lastModifiedDate":"2022-02-15"},{"lineNumber":195,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":196,"author":{"gitId":"robinrojh"},"content":"#### `sort` - Sort the list based on date or content","lastModifiedDate":"2022-02-15"},{"lineNumber":197,"author":{"gitId":"robinrojh"},"content":"Given a sort type of date or content, sorts the list based on that type.","lastModifiedDate":"2022-02-15"},{"lineNumber":198,"author":{"gitId":"robinrojh"},"content":"The only available sort types are `date` and `content`. ","lastModifiedDate":"2022-02-15"},{"lineNumber":199,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":200,"author":{"gitId":"robinrojh"},"content":"For date sorting, todo tasks will be pushed to the end of the list.","lastModifiedDate":"2022-02-15"},{"lineNumber":201,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":202,"author":{"gitId":"robinrojh"},"content":"Usage: `sort SORTTYPE` ","lastModifiedDate":"2022-02-15"},{"lineNumber":203,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":204,"author":{"gitId":"robinrojh"},"content":"Example","lastModifiedDate":"2022-02-15"},{"lineNumber":205,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":206,"author":{"gitId":"robinrojh"},"content":"todo CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":207,"author":{"gitId":"robinrojh"},"content":"deadline CS stuff \\by 2022-12-25 1800","lastModifiedDate":"2022-02-15"},{"lineNumber":208,"author":{"gitId":"robinrojh"},"content":"event meet up with friends \\at 2022-02-23 1830","lastModifiedDate":"2022-02-15"},{"lineNumber":209,"author":{"gitId":"robinrojh"},"content":"sort date","lastModifiedDate":"2022-02-15"},{"lineNumber":210,"author":{"gitId":"robinrojh"},"content":"sort content","lastModifiedDate":"2022-02-15"},{"lineNumber":211,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":212,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":213,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":214,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":215,"author":{"gitId":"robinrojh"},"content":"For date sorting:","lastModifiedDate":"2022-02-15"},{"lineNumber":216,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":217,"author":{"gitId":"robinrojh"},"content":"Sorting your tasks by date:","lastModifiedDate":"2022-02-15"},{"lineNumber":218,"author":{"gitId":"robinrojh"},"content":"1: [E][ ] meet up with friends (at: 18:30 Wednesday, 02-23-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":219,"author":{"gitId":"robinrojh"},"content":"2: [D][ ] CS stuff (by: 18:00 Sunday, 12-25-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":220,"author":{"gitId":"robinrojh"},"content":"3: [T][ ] CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":221,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":222,"author":{"gitId":"robinrojh"},"content":"For content sorting:","lastModifiedDate":"2022-02-15"},{"lineNumber":223,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":224,"author":{"gitId":"robinrojh"},"content":"sorting your tasks by content:","lastModifiedDate":"2022-02-15"},{"lineNumber":225,"author":{"gitId":"robinrojh"},"content":"1: [T][ ] CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":226,"author":{"gitId":"robinrojh"},"content":"2: [D][ ] CS stuff (by: 18:00 Sunday, 12-25-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":227,"author":{"gitId":"robinrojh"},"content":"3: [E][ ] meet up with friends (at: 18:30 Wednesday, 02-23-2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":228,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":229,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":230,"author":{"gitId":"robinrojh"},"content":"---","lastModifiedDate":"2022-02-15"},{"lineNumber":231,"author":{"gitId":"robinrojh"},"content":"### Tagging Tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":232,"author":{"gitId":"robinrojh"},"content":"#### `tag` - Tag a task with a keyword","lastModifiedDate":"2022-02-15"},{"lineNumber":233,"author":{"gitId":"robinrojh"},"content":"Tags the given word to a task. The tag must be single-worded (no spaces), and there can be multiple tags","lastModifiedDate":"2022-02-15"},{"lineNumber":234,"author":{"gitId":"robinrojh"},"content":"per task.","lastModifiedDate":"2022-02-15"},{"lineNumber":235,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":236,"author":{"gitId":"robinrojh"},"content":"Usage: `tag INDEX TAGNAME`","lastModifiedDate":"2022-02-15"},{"lineNumber":237,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":238,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":239,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":240,"author":{"gitId":"robinrojh"},"content":"todo CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":241,"author":{"gitId":"robinrojh"},"content":"deadline CS stuff \\by 2022-12-25 1800","lastModifiedDate":"2022-02-15"},{"lineNumber":242,"author":{"gitId":"robinrojh"},"content":"event meet up with friends \\at 2022-02-23 1830","lastModifiedDate":"2022-02-15"},{"lineNumber":243,"author":{"gitId":"robinrojh"},"content":"tag 1 beautifulTag","lastModifiedDate":"2022-02-15"},{"lineNumber":244,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":245,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":246,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":247,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":248,"author":{"gitId":"robinrojh"},"content":"Adding the following Tag #beautifulTag to [T][ ] CS project planning | #beautifulTag","lastModifiedDate":"2022-02-15"},{"lineNumber":249,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":250,"author":{"gitId":"robinrojh"},"content":"#### `untag` - Untag the task","lastModifiedDate":"2022-02-15"},{"lineNumber":251,"author":{"gitId":"robinrojh"},"content":"Deletes the tag of given word from a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":252,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":253,"author":{"gitId":"robinrojh"},"content":"Usage: `tag INDEX TAGNAME`","lastModifiedDate":"2022-02-15"},{"lineNumber":254,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":255,"author":{"gitId":"robinrojh"},"content":"Example:","lastModifiedDate":"2022-02-15"},{"lineNumber":256,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":257,"author":{"gitId":"robinrojh"},"content":"todo CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":258,"author":{"gitId":"robinrojh"},"content":"deadline CS stuff \\by 2022-12-25 1800","lastModifiedDate":"2022-02-15"},{"lineNumber":259,"author":{"gitId":"robinrojh"},"content":"event meet up with friends \\at 2022-02-23 1830","lastModifiedDate":"2022-02-15"},{"lineNumber":260,"author":{"gitId":"robinrojh"},"content":"tag 1 beautifulTag","lastModifiedDate":"2022-02-15"},{"lineNumber":261,"author":{"gitId":"robinrojh"},"content":"untag 1 beautifulTag","lastModifiedDate":"2022-02-15"},{"lineNumber":262,"author":{"gitId":"robinrojh"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":263,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":264,"author":{"gitId":"robinrojh"},"content":"Expected outcome:","lastModifiedDate":"2022-02-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":266,"author":{"gitId":"robinrojh"},"content":"Deleting the following Tag #beautifulTag from [T][ ] CS project planning","lastModifiedDate":"2022-02-15"},{"lineNumber":267,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"robinrojh":237,"-":30}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-02-14"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"            this.getStylesheets().add(this.getClass().getResource(\"/css/DialogBox.css\").toExternalForm());","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        displayPicture.setClip(new Circle(24, 24, 24));","lastModifiedDate":"2022-02-14"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    private void flip() {","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"        dialogBox.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2022-02-04"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"        dialogBox.dialog.setTextFill(Color.web(Ui.TERTIARY_COLOR));","lastModifiedDate":"2022-02-04"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"        dialogBox.dialog.setStyle(\"-fx-border-color: \" + Ui.TERTIARY_COLOR);","lastModifiedDate":"2022-02-14"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"        return dialogBox;","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-04"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-04"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"        dialogBox.flip();","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"        dialogBox.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"        dialogBox.dialog.setTextFill(Color.web(Ui.TERTIARY_COLOR));","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"        return dialogBox;","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":73}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":" * Contains main method for duke.Duke chatbot.","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":" * In charge of initializing UI and storage with taskList.","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"public class Duke {","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    private static final String filePath \u003d \"data/duke.txt\";","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    private Ui ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Loads the Duke chatbot with a default save file location.","lastModifiedDate":"2022-02-10"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * If there is no file in the filePath, Storage will create a new file.","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    public Duke() {","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        this.storage \u003d new Storage(filePath, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(storage.load(), ui);","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"File not found!\");","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(ui);","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * Loads the Duke chatbot with a given filePath to the saved file.","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * If there is no file in the filePath, Storage will create a new file.","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     * @param filePath File\u0027s path.","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        this.storage \u003d new Storage(filePath, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(storage.load(), ui);","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    File not found!\");","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(ui);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"     * Returns the Ui object.","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"     * @return Ui Ui object.","lastModifiedDate":"2022-02-10"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"    public Ui getUi() {","lastModifiedDate":"2022-02-04"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"        if (ui !\u003d null) {","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"            return ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-02-04"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"            return new Ui();","lastModifiedDate":"2022-02-04"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"     * Returns a String response from the chatbot to a user input.","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-04"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"            Command cmd \u003d Parser.parse(input, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"            if (cmd instanceof ByeCommand) {","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"                Platform.exit();","lastModifiedDate":"2022-02-08"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"                return \"\";","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"            cmd.executeCommand(tasks, ui, storage);","lastModifiedDate":"2022-02-04"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"            return e.toString();","lastModifiedDate":"2022-02-04"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"        return ui.getNextMessage();","lastModifiedDate":"2022-02-04"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":86}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class Launcher {","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import javafx.stage.StageStyle;","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.getNamespace().put(\"primary\", Ui.PRIMARY_COLOR);","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.getNamespace().put(\"secondary\", Ui.SECONDARY_COLOR);","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.getNamespace().put(\"tertiary\", Ui.TERTIARY_COLOR);","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"            stage.initStyle(StageStyle.TRANSPARENT);","lastModifiedDate":"2022-02-14"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"            stage.show();","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"            String css \u003d stage.getClass().getResource(\"/css/MainWindow.css\").toExternalForm();","lastModifiedDate":"2022-02-14"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"            scene.getStylesheets().add(css);","lastModifiedDate":"2022-02-14"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":38}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * Initializes the JavaFX.","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"            DialogBox.getDukeDialog(Ui.showUiForStart(), dukeImage)","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        );","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        userInput.setStyle(\"-fx-text-fill: \" + Ui.PRIMARY_COLOR);","lastModifiedDate":"2022-02-14"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     * and then appends them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    @FXML","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        );","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":60}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Command for adding a Task object to a taskList.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private Task task;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an AddCommand object with input task and commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * @param task         Task any type of task to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] array of String from String input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public AddCommand(Task task, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Executes the addTask from taskList and saves the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        taskList.addTask(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on Task comparison.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        if (this.task.compareTo(((AddCommand) command).task) \u003d\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":52}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Bye Command, in charge of bye command.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a ByeCommand with a commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array of input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    public ByeCommand(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * Shows UI for bye command. duke.Duke and Parser handles the termination.","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForBye();","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on first index of commandArrays.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        return this.getCommandArray()[0].equals(((ByeCommand) command).getCommandArray()[0]);","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":41}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Abstract class for commands to establish essential methods for all command subclasses.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * Enums to show the types of commands that exist.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    public enum CommandType {","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"        BYE,","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        FIND,","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"        LIST,","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        MARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        UNMARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        DELETE,","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        DEADLINE,","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        EVENT,","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        SORT,","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        TAG,","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        UNTAG,","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        TODO;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"         * Compares a String to this enum based while ignoring case.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"         * @param input String Input String to be compared","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"         * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        public boolean equals(String input) {","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"            if (input.equalsIgnoreCase(this.name())) {","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"                return true;","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"                return false;","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"         * Checks if the input string is a CommandType.","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"         * @param input String input.","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"         * @return boolean Boolean to show whether input string is a CommandType.","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        public static boolean isCommandType(String input) {","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"            for (CommandType commandType : CommandType.values()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"                if (commandType.equals(input)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"                    return true;","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    protected String[] commandArray;","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     * Instantiates Command object with an empty commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     * Represents an invalid command.","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"    public Command() {","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        this.commandArray \u003d new String[0];","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"     * Instantiates Command object based on commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array that contains the input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"    public Command(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"        this.commandArray \u003d commandArray;","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"    public String[] getCommandArray() {","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"        return commandArray;","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"     * Executes the command based on the class.","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage Storage object.","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"    public abstract void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-02-04"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":89}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Delete Command, in charge of delete command","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private int index;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a DeleteCommand object with an index and a commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * @param index int Index of Task to be deleted.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public DeleteCommand(int index, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Executes the delete command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        taskList.deleteTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on the index.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        if (this.index \u003d\u003d ((DeleteCommand) command).index) {","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":52}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Find Command.","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private String target;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a FindCommand object with target String and commandArray.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param target String Target for searching through the array.","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String array from input command.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public FindCommand(String target, String[] commandArray) {","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        this.target \u003d target;","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * Calls findTask in using the taskList object.","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList TaskList object.","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui Ui object.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage Storage object.","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        taskList.findTask(target);","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * Compares equality of two FindCommand objects based on target String.","lastModifiedDate":"2022-02-11"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param otherFind FindCommand The other FindCommand object to be compared to.","lastModifiedDate":"2022-02-11"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Shows whether the two objects are equal.","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-11"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object otherFind) {","lastModifiedDate":"2022-02-11"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) otherFind;","lastModifiedDate":"2022-02-11"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        return otherFindCommand.target.equals(this.target);","lastModifiedDate":"2022-02-11"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"robinrojh":45}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeCommandException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * An invalid command object.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private String message;","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an invalid command that throws a DukeCommandException on execution.","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    public InvalidCommand() {","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"        super();","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        message \u003d \"\";","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an invalid command that throws a DukeCommandException on execution with error message.","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message for an invalid command.","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    public InvalidCommand(String message) {","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        super();","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * Executes nothing. Invalid command to show error messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeCommandException {","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        throw new DukeCommandException(message);","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":45}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * List Command, in charge of showing the list of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a ListCommand using input commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    public ListCommand(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Executes the list command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForTaskList(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on commandArray index 0.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        return this.getCommandArray()[0].equals(((ListCommand) command).getCommandArray()[0]);","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":42}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Mark Command, in charge of marking a task as done/undone.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public enum Mark {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        MARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"        UNMARK;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private int index;","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    private Mark mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a MarkCommand object with index, mark enum, and commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param index int Index of task to be marked.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param mark Mark Type of marking (mark/unmark).","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    public MarkCommand(int index, Mark mark, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        this.mark \u003d mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Executes the mark/unmark command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        if (mark.equals(Mark.MARK)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"            taskList.markTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"            storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        } else if (mark.equals(Mark.UNMARK)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"            taskList.unmarkTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"            storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on the index and mark enum.","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        MarkCommand mark \u003d (MarkCommand) command;","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"        return this.index \u003d\u003d mark.index \u0026\u0026 this.mark.equals(mark.mark);","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":62}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Sort Command, in charge of sorting Tasks based on given set of sorting types.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private TaskList.SortType type;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param type SortType Sorting standard.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public SortCommand(TaskList.SortType type, String[] commandArray) {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * Executes the sortTask from taskList and saves the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        taskList.sortTaskList(this.type);","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on sortType comparison.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        SortCommand sortCommand \u003d (SortCommand) command;","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        return this.type.equals(sortCommand.type);","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":47}},{"path":"src/main/java/duke/command/TagCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"public class TagCommand extends Command {","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    public enum TagType {","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"        TAG,","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"        UNTAG;","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    private int index;","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    private TagType tagType;","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private String tagName;","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a TagCommand with target index, tag type (whether to tag or untag), and name of the tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * @param index int Index of the Task to be tagged.","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param tagType TagType Whether the command is tag or untag.","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param tagName String Name of the tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    public TagCommand(int index, TagType tagType, String tagName) {","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        this.tagType \u003d tagType;","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Executes the Tag command.","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList TaskList object.","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui Ui object.","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage Storage object.","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        Task targetTask \u003d taskList.getTasks().get(index - 1);","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        if (tagType.equals(TagType.TAG)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"            targetTask.getTagList().addTag(tagName, targetTask);","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        } else if (tagType.equals(TagType.UNTAG)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"            targetTask.getTagList().deleteTag(tagName, targetTask);","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"            throw new DukeException(\"Unknown error occurred\");","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"robinrojh":52}},{"path":"src/main/java/duke/exception/DukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when the user provides empty command or a non-existent command.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"public class DukeCommandException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public DukeCommandException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeCommandException.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        if (getMessage().isEmpty()) {","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"            return \"Please specify a command! \\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Unknown command: \" + this.getMessage() + \"\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":29}},{"path":"src/main/java/duke/exception/DukeDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"public class DukeDateTimeFormatException extends DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"     * Instantiates DukeTimeFormatException using the parent constructor from Exception.","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    public DukeDateTimeFormatException() {","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"        super(\"Date and time must be in the format of yyyy-MM-dd HHmm.\");","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        return getMessage();","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":15}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * Exceptions raised by features of duke.Duke chatbot extends this class.","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"     * Instantiates DukeException using the parent constructor from Exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":15}},{"path":"src/main/java/duke/exception/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when an invalid argument is a part of an input.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"public class DukeInvalidArgumentException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public DukeInvalidArgumentException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeInvalidArgumentException.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Invalid argument(s): \" + this.getMessage();","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":27}},{"path":"src/main/java/duke/exception/DukeMissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when a necessary argument is missing.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"public class DukeMissingArgumentException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public DukeMissingArgumentException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeMissingArgumentException.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"We are missing the following argument: \" + this.getMessage() + \"\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":26}},{"path":"src/main/java/duke/exception/DukeNumberFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"public class DukeNumberFormatException extends DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"     * Instantiates DukeException using the parent constructor from Exception.","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    public DukeNumberFormatException() {","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"        super(\"Index must be a number.\");","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        return getMessage();","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.parser;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.command.TagCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeCommandException;","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeDateTimeFormatException;","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeInvalidArgumentException;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeMissingArgumentException;","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeNumberFormatException;","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":" * Parses input String into a more decipherable object.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"public class Parser {","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * Formats an input String into a LocalDateTime object.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    public static final DateTimeFormatter INPUT_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"            .parseCaseInsensitive()","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"            .appendPattern(\"yyyy-MM-dd HHmm\")","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"            .toFormatter(Locale.ENGLISH);","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     * Parses a String to an int, but throws DukeNumberFormatException instead.","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     * @return int Integer value of the String.","lastModifiedDate":"2022-02-04"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeNumberFormatException Thrown when Integer class parseInt throws a NumberFormatException.","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    public static int parseInt(String input) throws DukeNumberFormatException {","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            return Integer.parseInt(input);","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"            throw new DukeNumberFormatException();","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"     * Parses a String input into a LocalDateTime object.","lastModifiedDate":"2022-02-11"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     * @param input String Date input.","lastModifiedDate":"2022-02-11"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     * @return LocalDateTime object.","lastModifiedDate":"2022-02-11"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeDateTimeFormatException Thrown when LocalDateTime parse throws a DateTimeParseException.","lastModifiedDate":"2022-02-11"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"    public static LocalDateTime parseDateTime(String input) throws DukeDateTimeFormatException {","lastModifiedDate":"2022-02-11"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"            return LocalDateTime.parse(input, INPUT_FORMATTER);","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"            throw new DukeDateTimeFormatException();","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"     * Parses a given inputCommand into a Command object for the ease of interpreting commands.","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"     * @param inputCommand String String of input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"     * @return Command Returns any subclass of Command based on the input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"    public static Command parse(String inputCommand, Ui ui) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"        if (inputCommand.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2022-02-04"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"            throw new DukeCommandException(\"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"        String[] inputArray \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"        String firstArg \u003d inputArray[0];","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"        if (inputArray.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"            if (Command.CommandType.BYE.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"                return new ByeCommand(inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.LIST.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"                return new ListCommand(inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.isCommandType(firstArg)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"                throw new DukeMissingArgumentException(firstArg);","lastModifiedDate":"2022-02-08"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"                throw new DukeCommandException(firstArg);","lastModifiedDate":"2022-02-04"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"            String secondArg \u003d inputArray[1];","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"            if (Command.CommandType.FIND.equals(firstArg)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"                String target \u003d inputCommand.substring(5);","lastModifiedDate":"2022-01-28"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"                if (!target.isEmpty()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"                    return new FindCommand(target, inputArray);","lastModifiedDate":"2022-01-28"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"target\");","lastModifiedDate":"2022-01-28"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-28"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.DELETE.equals(firstArg)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"                int index \u003d parseInt(secondArg);","lastModifiedDate":"2022-02-04"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"                return new DeleteCommand(index, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.DEADLINE.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"                if (secondArg.equals(\"\\\\by\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"task description\");","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"                String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"                int indexOfBy \u003d inputCommand.lastIndexOf(\"\\\\by \");","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"                if (indexOfBy \u003d\u003d -1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"\\\\by deadlineTime\");","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"                } else if (indexOfBy \u003e\u003d 0) {","lastModifiedDate":"2022-02-10"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"                    String by \u003d inputCommand.substring(indexOfBy + 4);","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"                    content \u003d inputCommand.substring(9, indexOfBy - 1);","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"                    LocalDateTime date \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"                    date \u003d parseDateTime(by);","lastModifiedDate":"2022-02-04"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"                    Task taskObj \u003d new Deadline(content, date, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"                    return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeException(\"unknown error occurred\");","lastModifiedDate":"2022-02-08"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.EVENT.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"                if (secondArg.equals(\"\\\\by\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"task description\");","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"                String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"                int indexOfAt \u003d inputCommand.lastIndexOf(\"\\\\at \");","lastModifiedDate":"2022-01-26"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"                if (indexOfAt \u003d\u003d -1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"\\\\at eventTime\");","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"                } else if (indexOfAt \u003e\u003d 0) {","lastModifiedDate":"2022-02-08"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"                    String by \u003d inputCommand.substring(indexOfAt + 4);","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"                    content \u003d inputCommand.substring(6, indexOfAt - 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"                    LocalDateTime date \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"                    date \u003d parseDateTime(by);","lastModifiedDate":"2022-02-04"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"                    Task taskObj \u003d new Event(content, date, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"                    return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeException(\"unknown error occurred\");","lastModifiedDate":"2022-02-08"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.TODO.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"                String content \u003d inputCommand.substring(5);","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"                Task taskObj \u003d new ToDo(content, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"                return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.MARK.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"                int index \u003d parseInt(secondArg);","lastModifiedDate":"2022-02-04"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"                return new MarkCommand(index, MarkCommand.Mark.MARK, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.UNMARK.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"                int index \u003d parseInt(secondArg);","lastModifiedDate":"2022-02-04"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"                return new MarkCommand(index, MarkCommand.Mark.UNMARK, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.SORT.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"                if (TaskList.SortType.CONTENT.equals(secondArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"                    return new SortCommand(TaskList.SortType.CONTENT, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"                } else if (TaskList.SortType.DATE.equals(secondArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"                    return new SortCommand(TaskList.SortType.DATE, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"sort type\");","lastModifiedDate":"2022-01-26"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.TAG.equals(firstArg)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"                if (inputArray.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"Too few arguments!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"                } else if (inputArray.length !\u003d 3) {","lastModifiedDate":"2022-02-08"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"Too many arguments!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-02-08"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"                String stringIndex \u003d inputArray[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"                String name \u003d inputArray[2];","lastModifiedDate":"2022-02-08"},{"lineNumber":171,"author":{"gitId":"robinrojh"},"content":"                int index \u003d parseInt(stringIndex);","lastModifiedDate":"2022-02-08"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"                return new TagCommand(index, TagCommand.TagType.TAG, name);","lastModifiedDate":"2022-02-08"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.UNTAG.equals(firstArg)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":174,"author":{"gitId":"robinrojh"},"content":"                if (inputArray.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":175,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"Too few arguments!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":176,"author":{"gitId":"robinrojh"},"content":"                } else if (inputArray.length !\u003d 3) {","lastModifiedDate":"2022-02-08"},{"lineNumber":177,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"Too many arguments!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":178,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-02-08"},{"lineNumber":179,"author":{"gitId":"robinrojh"},"content":"                String stringIndex \u003d inputArray[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":180,"author":{"gitId":"robinrojh"},"content":"                String name \u003d inputArray[2];","lastModifiedDate":"2022-02-08"},{"lineNumber":181,"author":{"gitId":"robinrojh"},"content":"                int index \u003d parseInt(stringIndex);","lastModifiedDate":"2022-02-08"},{"lineNumber":182,"author":{"gitId":"robinrojh"},"content":"                return new TagCommand(index, TagCommand.TagType.UNTAG, name);","lastModifiedDate":"2022-02-08"},{"lineNumber":183,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":184,"author":{"gitId":"robinrojh"},"content":"                return new InvalidCommand(inputCommand);","lastModifiedDate":"2022-02-04"},{"lineNumber":185,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":186,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":187,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":188,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":188}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-10"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.task.Tag;","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-10"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-10"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":" * Saves files to data/duke.txt and loads saved file.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"public class Storage {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    private final String filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    private final Ui ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Storage object with filePath and ui.","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * @param filePath String Path of the file.","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui UI object.","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    public Storage(String filePath, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * Loads the duke.txt file to get data from previous runs of duke.Duke.","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     * @return ArrayList of Tasks ArrayList that is populated with duke.txt save file.","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * @throws FileNotFoundException Exception thrown when file is not found.","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        BufferedReader bufferedReader \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        if (!Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"                file.createNewFile();","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        FileReader fileReader \u003d new FileReader(file);","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"            String line \u003d bufferedReader.readLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"                if (line.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"                    return taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"                    String typeAndIsDone \u003d line.substring(0, 6);","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"                    String type \u003d typeAndIsDone.substring(1, 2); // D, E, or T","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"                    String isDone \u003d typeAndIsDone.substring(4, 5);","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"                    int indexOfTag \u003d line.lastIndexOf(\" | \");","lastModifiedDate":"2022-02-10"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"                    if (indexOfTag \u003d\u003d -1) {","lastModifiedDate":"2022-02-10"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"                        if (!type.equals(\"T\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"                            String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"                            String dateString \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"                            if (type.equals(\"D\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"                                content \u003d line.substring(7, line.lastIndexOf(\" (by: \"));","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"                                dateString \u003d line.substring(line.lastIndexOf(\"by: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"                                LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"                                if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Deadline(content, dateTime, true, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"                                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Deadline(content, dateTime, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"                                }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"                                content \u003d line.substring(7, line.lastIndexOf(\" (at: \"));","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"                                dateString \u003d line.substring(line.lastIndexOf(\"at: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"                                LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"                                if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Event(content, dateTime, true, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"                                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Event(content, dateTime, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"                                }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"                        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"                            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"                                String content \u003d line.substring(7);","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new ToDo(content, true, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"                                String content \u003d line.substring(7);","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new ToDo(content, ui));","lastModifiedDate":"2022-02-08"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"                    } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"                        String tagString \u003d line.substring(indexOfTag + 3);","lastModifiedDate":"2022-02-10"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"                        String[] tagArray \u003d tagString.split(\" \");","lastModifiedDate":"2022-02-10"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"                        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-10"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"                        for (int k \u003d 0; k \u003c tagArray.length; k++) {","lastModifiedDate":"2022-02-10"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"                            tagArray[k] \u003d tagArray[k].substring(1);","lastModifiedDate":"2022-02-10"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-02-10"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"                        for (String str : tagArray) {","lastModifiedDate":"2022-02-10"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"                            Tag tag \u003d new Tag(str);","lastModifiedDate":"2022-02-10"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"                            tags.add(tag);","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-02-10"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"                        if (!type.equals(\"T\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"                            String content \u003d \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"                            String dateString \u003d \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"                            if (type.equals(\"D\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"                                content \u003d line.substring(7, line.lastIndexOf(\" (by: \"));","lastModifiedDate":"2022-02-10"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"                                dateString \u003d line.substring(line.lastIndexOf(\"by: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"                                LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-10"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"                                if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Deadline(content, dateTime, true, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"                                } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Deadline(content, dateTime, false, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"                                }","lastModifiedDate":"2022-02-10"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"                                content \u003d line.substring(7, line.lastIndexOf(\" (at: \"));","lastModifiedDate":"2022-02-10"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"                                dateString \u003d line.substring(line.lastIndexOf(\"at: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"                                LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-10"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"                                if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Event(content, dateTime, true, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"                                } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"                                    taskList.add(new Event(content, dateTime, false, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"                                }","lastModifiedDate":"2022-02-10"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-02-10"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"                        } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"                            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"                                String content \u003d line.substring(7, indexOfTag);","lastModifiedDate":"2022-02-10"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new ToDo(content, true, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"                                String content \u003d line.substring(7, indexOfTag);","lastModifiedDate":"2022-02-10"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new ToDo(content, false, tags, ui));","lastModifiedDate":"2022-02-10"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-02-10"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-02-10"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"                    }","lastModifiedDate":"2022-02-10"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"                line \u003d bufferedReader.readLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"        return taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"     * Saves the current tasks into data/duke.txt.","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"     * @param taskList taskList object that contains all tasks to be saved","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"    public void save(TaskList taskList) {","lastModifiedDate":"2022-01-26"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"        BufferedWriter bufferedWriter \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"            if (!file.exists()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"                file.createNewFile();","lastModifiedDate":"2022-01-26"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2022-01-26"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"            bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2022-01-26"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"                bufferedWriter.write(task.toString() + \"\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":171,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"            bufferedWriter.close();","lastModifiedDate":"2022-01-26"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":174,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    File error: not found\");","lastModifiedDate":"2022-01-26"},{"lineNumber":175,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":176,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":177,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    Error: cannot save file\");","lastModifiedDate":"2022-01-26"},{"lineNumber":178,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":179,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":180,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":180}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" * Task object with non-null LocalDateTime variable.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Deadline object with content and date.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public Deadline(String content, LocalDateTime date, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        super(content, date, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Deadline object with content and date and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    public Deadline(String content, LocalDateTime date, boolean isDone, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Deadline object with content and date and isDone.","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * @param tags    ArrayList of Tags.","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public Deadline(String content, LocalDateTime date, boolean isDone, ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone, tags, ui);","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of Deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"            return \"[D][X] \" + getContent() + \" (by: \" + date","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\" + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"            return \"[D][ ] \" + getContent() + \" (by: \" + date","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\" + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":63}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Event object with content and date.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    public Event(String content, LocalDateTime date, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        super(content, date, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Event object with content and date and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime date on which the event is occurring.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    public Event(String content, LocalDateTime date, boolean isDone, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Event object with content and date and isDone.","lastModifiedDate":"2022-02-10"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param tags    ArrayList of Tags.","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public Event(String content, LocalDateTime date, boolean isDone, ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone, tags, ui);","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of Event.","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            return \"[E][X] \" + getContent() + \" (at: \" + date","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\" + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"            return \"[E][ ] \" + getContent() + \" (at: \" + date","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\" + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":60}},{"path":"src/main/java/duke/task/Tag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * Tag object provides the function of attaching a tag to a Task object.","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" * A user can create its own tag by using the command \"tag indexNumber tagName\".","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" * Tag can only be one word!","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class Tag {","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    private String name;","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Tag object with given name and target task.","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * @param name Content of the tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    public Tag(String name) {","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Checks if two tags are equal based on its name.","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param otherTag Tag Tag object to be compared to.","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean on whether otherTag is equal to this Tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object otherTag) {","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        assert otherTag instanceof Tag;","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        Tag tagForComparison \u003d (Tag) otherTag;","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        return name.equals(tagForComparison.name);","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Creates and returns a String version of this Tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @return String Returns the String version of this Tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        return \"#\" + name;","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"robinrojh":42}},{"path":"src/main/java/duke/task/TagList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Contains the Ui and an ArrayList of Tag objects. Manages adding and deleting of tags.","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class TagList {","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private ArrayList\u003cTag\u003e tags;","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private Ui ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a new TagList with new ArrayList.","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    public TagList(Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"        tags \u003d new ArrayList\u003cTag\u003e();","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a new TagList with given Tags and Ui.","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param tags ArrayList of Tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param ui   Ui Ui object for display.","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    public TagList(ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Adds the tag to this TagList.","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param tagName String tag name.","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param task Task Task object.","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    public void addTag(String tagName, Task task) {","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        tags.add(new Tag(tagName));","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForTag(tagName, task);","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * Deletes a Tag from tags using a String input tagName.","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     * @param tagName String Name of the tag to be removed.","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"    public void deleteTag(String tagName, Task task) {","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        // Tag equality is based on Tag name.","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        boolean isRemoved \u003d tags.remove(new Tag(tagName));","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        if (isRemoved) {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            ui.showUiForUntag(tagName, task);","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"            ui.setNextMessage(\"That tag does not exist!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this TagList.","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of this TagList.","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        if (tags.size() !\u003d 0) {","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"            result +\u003d \" | \";","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"        for (int k \u003d 0; k \u003c tags.size(); k++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"            String tagString \u003d tags.get(k).toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"            if (k !\u003d tags.size() - 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"                result +\u003d tagString + \" \";","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"                result +\u003d tagString;","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"robinrojh":80}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"public class Task implements Comparable\u003cTask\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    protected String content;","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    protected LocalDateTime date;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    protected TagList tags;","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    protected Ui ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string.","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d null;","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        tags \u003d new TagList(ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string and whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, boolean isDone, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        tags \u003d new TagList(ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string and date.","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     * @param tags    ArrayList of Tag objects.","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, boolean isDone, ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-10"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"        this.tags \u003d new TagList(tags, ui);","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string and date.","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime date of Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, LocalDateTime date, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"        tags \u003d new TagList(ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string, date, and whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime date of Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, LocalDateTime date, boolean isDone, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"        tags \u003d new TagList(ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string, date, and whether the task is done.","lastModifiedDate":"2022-02-08"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-08"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime date of Task.","lastModifiedDate":"2022-02-08"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-08"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"     * @param tags    ArrayList of Tags.","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, LocalDateTime date, boolean isDone, ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-08"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-02-08"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-08"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"        this.tags \u003d new TagList(tags, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"     * Returns isDone instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"     * @return boolean isDone instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2022-01-19"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"        return isDone;","lastModifiedDate":"2022-01-19"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"     * Returns the content string.","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"     * @return String content instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"    public String getContent() {","lastModifiedDate":"2022-01-19"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"        return content;","lastModifiedDate":"2022-01-19"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"     * Returns the TagList.","lastModifiedDate":"2022-02-08"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"     * @return TagList object.","lastModifiedDate":"2022-02-08"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"    public TagList getTagList() {","lastModifiedDate":"2022-02-08"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"        return tags;","lastModifiedDate":"2022-02-08"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"     * Marks this task as done.","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"     * @return String Result of the mark.","lastModifiedDate":"2022-02-08"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"    public String mark() {","lastModifiedDate":"2022-02-08"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-19"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Nice! I\u0027ve marked this task as done: \" + this.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"     * Unmarks this task.","lastModifiedDate":"2022-01-27"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"     * @return String Result of the mark.","lastModifiedDate":"2022-02-08"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"    public String unmark() {","lastModifiedDate":"2022-02-08"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"I\u0027ve unmarked this task: \" + this.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"     * Compares two tasks based on date and content.","lastModifiedDate":"2022-01-27"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"     * A date is larger if it occurs earlier, and content is larger based on String compareTo.","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"     * @param task Task to be compared with.","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"     * @return int Integer that shows which is larger.","lastModifiedDate":"2022-01-27"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"    public int compareTo(Task task) {","lastModifiedDate":"2022-01-25"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"        if (this.date !\u003d null \u0026\u0026 task.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"            return this.date.compareTo(task.date);","lastModifiedDate":"2022-01-25"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"        } else if (this.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"            return -1;","lastModifiedDate":"2022-01-25"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"        } else if (task.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"            return 1;","lastModifiedDate":"2022-01-25"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"            return this.content.compareTo(task.content);","lastModifiedDate":"2022-01-25"},{"lineNumber":171,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":173}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeInvalidArgumentException;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":" * Stores data in an ArrayList and executes commands.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"public class TaskList {","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty ArrayList and new Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty ArrayList","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public TaskList(Ui ui) {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * Sets tasks and ui to given argument.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param tasks Task ArrayList with Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param ui    Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks, Ui ui) {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     * Returns the size of the task arraylist.","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     * @return int Size of the arrayList of tasks","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    public int size() {","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        return tasks.size();","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        return tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"     * Finds all Task objects that contains the target String.","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     * Shows the UI by creating a new temporary TaskList and using toString on it.","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     * @param target String Target String to be searched for.","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"    public void findTask(String target) {","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e(), ui);","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-01-28"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"            if (task.content.contains(target)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"                taskList.tasks.add(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForTaskList(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"     * Marks the task at index as complete.","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to mark (starts from 1).","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"    public void markTask(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2022-02-04"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"            ui.setNextMessage(\"No tasks are in the list right now!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"            throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"        ui.setNextMessage(tasks.get(index - 1).mark());","lastModifiedDate":"2022-02-08"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"     * Unmakrs the task at index as incomplete.","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to unmark (starts from 1).","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"    public void unmarkTask(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2022-02-04"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"            ui.setNextMessage(\"No tasks are in the list right now!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"            throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"        ui.setNextMessage(tasks.get(index - 1).unmark());","lastModifiedDate":"2022-02-08"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"     * Adds the specified task into the tasks ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"     * @param task Task to be added into tasks ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"        // divided in case I need to add other features like parsing date","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"        tasks.add(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForAdd(task, tasks.size());","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"     * Deletes the task at index.","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to be deleted (starts from 1)","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"    public void deleteTask(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2022-02-04"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"            ui.setNextMessage(\"No tasks are in the list right now!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"            throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"            Task removedTask \u003d tasks.remove(index - 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"            ui.showUiForDelete(removedTask, tasks.size());","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"     * Specifies the sorting order as an enum.","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"    public enum SortType {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"        DATE,","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"        CONTENT;","lastModifiedDate":"2022-01-26"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"         * Returns enum as a String in lower case.","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"         * @return String date or content.","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"        @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"        public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"            return this.name().toLowerCase();","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"         * Compares the enum\u0027s name to the input.","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"         * @param input Input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"         * @return boolean True if the name and input are equal.","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"        public boolean equals(String input) {","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"            if (input.equalsIgnoreCase(this.name())) {","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"                return true;","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"                return false;","lastModifiedDate":"2022-01-26"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"     * Sorts the taskList based on the sortType in ascending order.","lastModifiedDate":"2022-01-27"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"     * @param sortType Enum to specify what to sort based on.","lastModifiedDate":"2022-01-27"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"    public void sortTaskList(SortType sortType) {","lastModifiedDate":"2022-01-26"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"        Comparator\u003cTask\u003e comparator \u003d new Comparator\u003cTask\u003e() {","lastModifiedDate":"2022-01-26"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"            @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":171,"author":{"gitId":"robinrojh"},"content":"            public int compare(Task task1, Task task2) {","lastModifiedDate":"2022-01-26"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"                if (sortType.equals(SortType.DATE)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"                    return task1.compareTo(task2);","lastModifiedDate":"2022-01-26"},{"lineNumber":174,"author":{"gitId":"robinrojh"},"content":"                } else if (sortType.equals(SortType.CONTENT)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":175,"author":{"gitId":"robinrojh"},"content":"                    return task1.content.compareTo(task2.content);","lastModifiedDate":"2022-01-26"},{"lineNumber":176,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":177,"author":{"gitId":"robinrojh"},"content":"                    return -1;","lastModifiedDate":"2022-01-26"},{"lineNumber":178,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":179,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":180,"author":{"gitId":"robinrojh"},"content":"        };","lastModifiedDate":"2022-01-26"},{"lineNumber":181,"author":{"gitId":"robinrojh"},"content":"        tasks.sort(comparator);","lastModifiedDate":"2022-01-26"},{"lineNumber":182,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForSort(this, sortType);","lastModifiedDate":"2022-02-08"},{"lineNumber":183,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":184,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":185,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":186,"author":{"gitId":"robinrojh"},"content":"     * Compares two taskLists based on the content Tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":187,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":188,"author":{"gitId":"robinrojh"},"content":"     * @param taskList Other taskList to be compared with.","lastModifiedDate":"2022-01-27"},{"lineNumber":189,"author":{"gitId":"robinrojh"},"content":"     * @return boolean True if two taskLists have same tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":190,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":191,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":192,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object taskList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":193,"author":{"gitId":"robinrojh"},"content":"        TaskList taskListCast \u003d (TaskList) taskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":194,"author":{"gitId":"robinrojh"},"content":"        if (taskListCast.tasks.size() !\u003d this.tasks.size()) {","lastModifiedDate":"2022-01-27"},{"lineNumber":195,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":196,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":197,"author":{"gitId":"robinrojh"},"content":"            for (int k \u003d 0; k \u003c tasks.size(); k++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":198,"author":{"gitId":"robinrojh"},"content":"                if (tasks.get(k).compareTo(taskListCast.tasks.get(k)) !\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":199,"author":{"gitId":"robinrojh"},"content":"                    return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":200,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":201,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":202,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":203,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":204,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":205,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":206,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":207,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this taskList.","lastModifiedDate":"2022-02-08"},{"lineNumber":208,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":209,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of this TaskList object.","lastModifiedDate":"2022-02-08"},{"lineNumber":210,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":211,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":212,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":213,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-02-08"},{"lineNumber":214,"author":{"gitId":"robinrojh"},"content":"        ArrayList\u003cTask\u003e resultTasks \u003d this.tasks;","lastModifiedDate":"2022-02-08"},{"lineNumber":215,"author":{"gitId":"robinrojh"},"content":"        for (int index \u003d 0; index \u003c resultTasks.size(); index++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":216,"author":{"gitId":"robinrojh"},"content":"            int order \u003d (index + 1);","lastModifiedDate":"2022-02-08"},{"lineNumber":217,"author":{"gitId":"robinrojh"},"content":"            Task task \u003d resultTasks.get(index);","lastModifiedDate":"2022-02-08"},{"lineNumber":218,"author":{"gitId":"robinrojh"},"content":"            if (index \u003d\u003d resultTasks.size() - 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":219,"author":{"gitId":"robinrojh"},"content":"                result +\u003d order + \": \" + task.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":220,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":221,"author":{"gitId":"robinrojh"},"content":"                result +\u003d order + \": \" + task.toString() + \"\\n\";","lastModifiedDate":"2022-02-08"},{"lineNumber":222,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":223,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":224,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":225,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":226,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":227,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":227}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * A task object that only has content and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * No date or time is specified.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Instantiates ToDo object with given content.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param content Content for ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    public ToDo(String content, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"        super(content, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * Instantiates ToDo object with content and whether it\u0027s marked done.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param content String content for ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param isDone Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    public ToDo(String content, boolean isDone, Ui ui) {","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        super(content, isDone, ui);","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a ToDo object with content and date and isDone.","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-02-10"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param tags    ArrayList of Tags.","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param ui      Ui UI object.","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    public ToDo(String content, boolean isDone, ArrayList\u003cTag\u003e tags, Ui ui) {","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        super(content, isDone, tags, ui);","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"            return \"[T][X] \" + getContent() + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"            return \"[T][ ] \" + getContent() + tags.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":55}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"public class Ui {","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    public static final String PRIMARY_COLOR \u003d \"#2C3531\";","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    public static final String SECONDARY_COLOR \u003d \"#116466\";","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public static final String TERTIARY_COLOR \u003d \"#D1E8E2\";","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public static final String DIVIDER \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    public static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"            .ofPattern(\"HH:mm EEEE, MM-dd-yyyy\").localizedBy(Locale.ENGLISH);","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    public static final String BOT_NAME \u003d \"duke\";","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    private String nextMessage;","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty Ui object.","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    public Ui() {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d \"\";","lastModifiedDate":"2022-02-04"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * Returns the nextMessage variable.","lastModifiedDate":"2022-02-04"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * @return String nextMessage instance variable","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    public String getNextMessage() {","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        return nextMessage;","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * Sets the message to be printed to the argument.","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     * @param nextMessage String the new message to be printed.","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    public void setNextMessage(String nextMessage) {","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        this.nextMessage \u003d nextMessage;","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for the start of the program.","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"    public static String showUiForStart() {","lastModifiedDate":"2022-02-04"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Hello, I\u0027m \" + BOT_NAME + \".\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        result +\u003d \"What can I do for you?\";","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for the end of the program.","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    public String showUiForBye() {","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-04"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"     * Prints the divider.","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"    public static void printDivider() {","lastModifiedDate":"2022-01-19"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"     * Prints out every Task in the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList to be printed out.","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"    public String showUiForTaskList(TaskList taskList) {","lastModifiedDate":"2022-02-04"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"        assert taskList !\u003d null;","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"        assert taskList.size() !\u003d 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"        String result \u003d taskList.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-04"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for adding a task.","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"     * @param taskObj    Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"     * @param listLength int Length of the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"    public String showUiForAdd(Task taskObj, int listLength) {","lastModifiedDate":"2022-02-04"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"        assert taskObj !\u003d null;","lastModifiedDate":"2022-02-07"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Adding a task: \";","lastModifiedDate":"2022-02-04"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"        result +\u003d taskObj.toString() + \"\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"        if (listLength \u003d\u003d 1) {","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"            result +\u003d \"Now you got \" + (listLength) + \" task in the list!\";","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"            result +\u003d \"Now you got \" + (listLength) + \" tasks in the list!\";","lastModifiedDate":"2022-02-04"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-04"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for deleting a task.","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"     * @param taskObj    Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"     * @param listLength int Length of the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"    public String showUiForDelete(Task taskObj, int listLength) {","lastModifiedDate":"2022-02-04"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"        assert taskObj !\u003d null;","lastModifiedDate":"2022-02-07"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Ok, removing a task: \\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"        result +\u003d taskObj.toString() + \"\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"        if (listLength \u003d\u003d 1) {","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"            result +\u003d \"Now you got \" + (listLength) + \" task in the list!\";","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-02-15"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"            result +\u003d \"Now you got \" + (listLength) + \" tasks in the list!\";","lastModifiedDate":"2022-02-04"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-04"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"     * Shows all elements in the sorted list.","lastModifiedDate":"2022-02-08"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"     * @param taskList ArrayList of Task objects to be printed.","lastModifiedDate":"2022-02-08"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"     * @param sortType Type of sorting based on the enum.","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"    public String showUiForSort(TaskList taskList, TaskList.SortType sortType) {","lastModifiedDate":"2022-02-08"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"        assert taskList !\u003d null;","lastModifiedDate":"2022-02-08"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"        assert taskList.size() !\u003d 0;","lastModifiedDate":"2022-02-08"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Sorting your tasks by \" + sortType.toString() + \":\\n\";","lastModifiedDate":"2022-02-04"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"        result +\u003d taskList.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-08"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"     * Shows the Ui when adding a tag to a task.","lastModifiedDate":"2022-02-08"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"     * @param tagName String Name of the tag to be added.","lastModifiedDate":"2022-02-08"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"     * @param task    Task Task object.","lastModifiedDate":"2022-02-08"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"     * @return String String for adding a tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"    public String showUiForTag(String tagName, Task task) {","lastModifiedDate":"2022-02-08"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Adding the following Tag #\" + tagName + \" to \" + task.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-08"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-08"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"     * Shows the Ui when deleting a tag to a task.","lastModifiedDate":"2022-02-08"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"     * @param tagName String Name of the tag to be deleted.","lastModifiedDate":"2022-02-08"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"     * @param task    Task Task object.","lastModifiedDate":"2022-02-08"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"     * @return String String for adding a tag.","lastModifiedDate":"2022-02-08"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"    public String showUiForUntag(String tagName, Task task) {","lastModifiedDate":"2022-02-08"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"        String result \u003d \"Deleting the following Tag #\" + tagName + \" from \" + task.toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"        nextMessage \u003d result;","lastModifiedDate":"2022-02-04"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-02-04"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"robinrojh":162}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"\u003cfx:root fx:id\u003d\"root\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        \u003cfont\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"            \u003cFont size\u003d\"16.0\"/\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        \u003c/font\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"48.0\" fitWidth\u003d\"48.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":25}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"\u003cAnchorPane fx:id\u003d\"mainPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2022-02-14"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"20\" translateY\u003d\"-5\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"               prefHeight\u003d\"40.0\" prefWidth\u003d\"360.0\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    \u003cButton fx:id\u003d\"sendButton\" textFill\u003d\"#D1E8E2\" layoutX\u003d\"310.0\"","lastModifiedDate":"2022-02-14"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"            layoutY\u003d\"557.5\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"64.0\"","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"            text\u003d\"Send\"/\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"ALWAYS\" hvalue\u003d\"1.0\" prefHeight\u003d\"554.0\"","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"                prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        \u003ccontent\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        \u003c/content\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"robinrojh":23}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":" * Tests if Parser functions work as intended.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    private static final Ui ui \u003d new Ui();","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses an add command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    public void parseAddTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"deadline d1 \\\\by 2020-02-12 1600\";","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"        Command deadline \u003d new AddCommand(","lastModifiedDate":"2022-02-11"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"                new Deadline(\"d1\",","lastModifiedDate":"2022-02-11"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"                        Parser.parseDateTime(\"2020-02-12 1600\"), false, ui), inputCommand.split(\" \"));","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        Command deadlineResult \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(deadline, deadlineResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"event e1 \\\\at 2020-02-12 1600\";","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        Command event \u003d new AddCommand(","lastModifiedDate":"2022-02-11"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"                new Event(\"e1\",","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"                        Parser.parseDateTime(\"2020-02-12 1600\"), ui), inputCommand.split(\" \"));","lastModifiedDate":"2022-02-11"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        Command eventResult \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(event, eventResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"todo t1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        Command todo \u003d new AddCommand(new ToDo(\"t1\", ui), inputCommand.split(\" \"));","lastModifiedDate":"2022-02-11"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        Command todoResult \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(todo, todoResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a delete command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"    public void parseDeleteTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"delete 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"        Command delete \u003d new DeleteCommand(1, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(delete, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a find command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-02-11"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"    public void parseFindTest() throws DukeException {","lastModifiedDate":"2022-02-11"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"find hello\";","lastModifiedDate":"2022-02-11"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"        Command find \u003d new FindCommand(\"hello\", inputCommand.split(\" \"));","lastModifiedDate":"2022-02-11"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(find, result);","lastModifiedDate":"2022-02-11"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a list command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"    public void parseListTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"list\";","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"        Command list \u003d new ListCommand(inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(list, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a bye command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"    public void parseByeTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"bye\";","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"        Command bye \u003d new ByeCommand(inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(bye, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a mark command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"    public void parseMarkTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"mark 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"        Command mark \u003d new MarkCommand(1, MarkCommand.Mark.MARK, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(mark, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"unmark 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"        Command unmark \u003d new MarkCommand(1, MarkCommand.Mark.UNMARK, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"        Command result2 \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(unmark, result2);","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a sort command correctly.","lastModifiedDate":"2022-02-11"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException A potential exception that can occur during parsing.","lastModifiedDate":"2022-02-11"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"    public void parseSortTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"sort date\";","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"        Command sortDate \u003d new SortCommand(TaskList.SortType.DATE, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(sortDate, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"sort content\";","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"        Command sortContent \u003d new SortCommand(TaskList.SortType.CONTENT, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"        Command result2 \u003d Parser.parse(inputCommand, ui);","lastModifiedDate":"2022-02-11"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(sortContent, result2);","lastModifiedDate":"2022-02-02"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":142}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeInvalidArgumentException;","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":" * Tests whether TaskList functions work as intended.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private static TaskList initialList \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    private static Ui testUi \u003d new Ui();","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Populates taskList and initialList with the same content.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    @BeforeEach","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    public void setUpTaskList() {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().clear();","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"Hello\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"World\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().clear();","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"Hello\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"World\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * Tests whether addTask adds a task correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    public void addTaskTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        taskList.addTask(new ToDo(\"content\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"content\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(taskList, initialList);","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * Tests whether deleteTask deletes a task correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    public void deleteTaskTest() throws DukeInvalidArgumentException {","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"what\", testUi));","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        taskList.deleteTask(3);","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(taskList, initialList);","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"        String expectedMessage \u003d \"index is not in the list\";","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"        DukeException exception \u003d Assertions.assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"            taskList.deleteTask(6);","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        });","lastModifiedDate":"2022-02-11"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(expectedMessage, exception.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":58}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class UiTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    @BeforeAll","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public static void setUpForSystemOut() {","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"deadline hello \\by 2024-12-10 1600","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"event zeros \\at 2024-10-12 1800","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"todo haiya","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"todo nani","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"mark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"delete 1","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"sort Date","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"sort content","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"bye","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":16}}]
