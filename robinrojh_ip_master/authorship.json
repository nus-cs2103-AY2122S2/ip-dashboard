[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"[D][X] hello (by: 16:00 Friday, 02-25-2022)","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"[E][X] bros (at: 18:00 Saturday, 10-12-2024)","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"[T][ ] haiya","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"[T][ ] nani","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"[D][ ] hello (by: 16:00 Friday, 02-25-2022)","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":5}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":" * Contains main method for Duke chatbot.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":" * In charge of initializing UI and storage with taskList.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private static final String filePath \u003d \"data/duke.txt\";","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * Loads the Duke chatbot with a given filePath to the saved file.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * If there is no file in the filePath, Storage will create a new file.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param filePath File\u0027s path.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(storage.load(), ui);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    File not found!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"            this.tasks \u003d new TaskList(ui);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * Runs the Duke chatbot. Reads in user input commands,","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     * and it sends them to their respective classes.","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public void run() {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForStart();","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-16"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        String input \u003d \"\";","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"                input \u003d inputScanner.nextLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"                Command cmd \u003d Parser.parse(input);","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"                cmd.executeCommand(tasks, ui, storage);","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"                System.out.println(e.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     * Runs the bot.","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     * @param args String[] arguments.","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        Duke duke \u003d new Duke(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        duke.run();","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"robinrojh":65,"-":4}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Command for adding a Task object to a taskList.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private Task task;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an AddCommand object with input task and commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * @param task         Task any type of task to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] array of String from String input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public AddCommand(Task task, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Executes the addTask from taskList and saves the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        taskList.addTask(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on Task comparison.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        if (this.task.compareTo(((AddCommand) command).task) \u003d\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":52}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Bye Command, in charge of bye command.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a ByeCommand with a commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array of input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    public ByeCommand(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * Shows UI for bye command. Duke and Parser handles the termination.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForBye();","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on first index of commandArrays.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        return this.getCommandArray()[0].equals(((ByeCommand) command).getCommandArray()[0]);","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":41}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Abstract class for commands to establish essential methods for all command subclasses.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Enums to show the types of commands that exist.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public enum CommandType {","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        BYE,","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"        FIND,","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        LIST,","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"        MARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        UNMARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        DELETE,","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        DEADLINE,","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        EVENT,","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        SORT,","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        TODO;","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"         * Compares a String to this enum based while ignoring case.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"         * @param input String Input String to be compared","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"         * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        public boolean equals(String input) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"            if (input.equalsIgnoreCase(this.name())) {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"                return true;","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"                return false;","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    protected String[] commandArray;","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     * Instantiates Command object with an empty commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * Represents an invalid command.","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    public Command() {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        this.commandArray \u003d new String[0];","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     * Instantiates Command object based on commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array that contains the input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"    public Command(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        this.commandArray \u003d commandArray;","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"    public String[] getCommandArray() {","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"        return commandArray;","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"     * Executes the command based on the class.","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage Storage object.","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"    public abstract void executeCommand(TaskList taskList, Ui ui, Storage storage);","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":71}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Delete Command, in charge of delete command","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private int index;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a DeleteCommand object with an index and a commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param index int Index of Task to be deleted.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    public DeleteCommand(int index, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * Executes the delete command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        taskList.deleteTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on the index.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        if (this.index \u003d\u003d ((DeleteCommand) command).index) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":51}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Find Command.","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private String target;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a FindCommand object with target String and commandArray.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param target String Target for searching through the array.","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String array from input command.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public FindCommand(String target, String[] commandArray) {","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        this.target \u003d target;","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * Calls findTask in using the taskList object.","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList TaskList object.","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui Ui object.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage Storage object.","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        taskList.findTask(target);","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"robinrojh":33}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * An invalid command object.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    public InvalidCommand() {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"        super();","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * Executes nothing. Invalid command to show error messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Invalid Command\");","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":26}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * List Command, in charge of showing the list of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a ListCommand using input commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    public ListCommand(String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * Executes the list command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForTaskList(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on commandArray index 0.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        return this.getCommandArray()[0].equals(((ListCommand) command).getCommandArray()[0]);","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":42}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Mark Command, in charge of marking a task as done/undone.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    public enum Mark {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"        MARK,","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        UNMARK;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    private int index;","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    private Mark mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a MarkCommand object with index, mark enum, and commandArray.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * @param index int Index of task to be marked.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param mark Mark Type of marking (mark/unmark).","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    public MarkCommand(int index, Mark mark, String[] commandArray) {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.mark \u003d mark;","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Executes the mark/unmark command using TaskList object.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @param ui       Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * @param storage  Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        if (mark.equals(Mark.MARK)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"            taskList.markTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"            storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        } else if (mark.equals(Mark.UNMARK)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"            taskList.unmarkTask(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"            storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on the index and mark enum.","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        MarkCommand mark \u003d (MarkCommand) command;","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        return this.index \u003d\u003d mark.index \u0026\u0026 this.mark.equals(mark.mark);","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":61}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Sort Command, in charge of sorting Tasks based on given set of sorting types.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private TaskList.SortType type;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param type SortType Sorting standard.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param commandArray String[] String array from input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public SortCommand(TaskList.SortType type, String[] commandArray) {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        super(commandArray);","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * Executes the sortTask from taskList and saves the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList input taskList object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui input ui object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param storage Storage input storage object from Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    public void executeCommand(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        taskList.sortTaskList(this.type);","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        storage.save(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     * Checks the equality of two Command objects based on sortType comparison.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param command Object Another command object to be compared to.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     * @return boolean Boolean value to show if this equals command.","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object command) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        SortCommand sortCommand \u003d (SortCommand) command;","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        return this.type.equals(sortCommand.type);","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":47}},{"path":"src/main/java/duke/exception/DukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when the user provides empty command or a non-existent command.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class DukeCommandException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public DukeCommandException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeCommandException.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        if (getMessage().isEmpty()) {","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"            return Ui.DIVIDER + \"\\n\" + \"    Please specify a command! \\n\" + Ui.DIVIDER;","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        String result \u003d Ui.DIVIDER + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        result +\u003d \"    Unknown command: \" + this.getMessage() + \"\\n\";","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        result +\u003d Ui.DIVIDER;","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":33}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * Exceptions raised by features of Duke chatbot extends this class.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"     * Instantiates DukeException using the parent constructor from Exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":15}},{"path":"src/main/java/duke/exception/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when an invalid argument is a part of an input.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class DukeInvalidArgumentException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public DukeInvalidArgumentException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeInvalidArgumentException.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        String result \u003d Ui.DIVIDER + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        result +\u003d \"    Invalid argument(s): \" + this.getMessage() + \"\\n\";","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        result +\u003d Ui.DIVIDER;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":31}},{"path":"src/main/java/duke/exception/DukeMissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" * This exception occurs when a necessary argument is missing.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class DukeMissingArgumentException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * Instantiates this exception with an input error message, using parent constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * @param message String Error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public DukeMissingArgumentException(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        super(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * Returns a String representation of this exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of DukeMissingArgumentException.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        String result \u003d Ui.DIVIDER + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"        result +\u003d \"    We are missing the following argument: \" + this.getMessage() + \"\\n\";","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        result +\u003d Ui.DIVIDER;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        return result;","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"robinrojh":30}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.parser;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeCommandException;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeInvalidArgumentException;","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeMissingArgumentException;","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":" * Parses input String into a more decipherable object.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"public class Parser {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Formats an input String into a LocalDateTime object.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    public static final DateTimeFormatter INPUT_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"            .parseCaseInsensitive()","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"            .appendPattern(\"yyyy-MM-dd HHmm\")","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"            .toFormatter(Locale.ENGLISH);","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"     * Parses a given inputCommand into a Command object for the ease of interpreting commands.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     * @param inputCommand String String of input command.","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"     * @return Command Returns any subclass of Command based on the input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    public static Command parse(String inputCommand) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        if (inputCommand.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"                throw new DukeCommandException(\"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"            } catch (DukeCommandException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"                System.out.println(e);","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"                return new InvalidCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        String[] inputArray \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        String firstArg \u003d inputArray[0];","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        if (inputArray.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"            if (Command.CommandType.BYE.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"                return new ByeCommand(inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.LIST.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"                return new ListCommand(inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"                throw new DukeMissingArgumentException(firstArg);","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"            String secondArg \u003d inputArray[1];","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"            if (Command.CommandType.FIND.equals(firstArg)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"                String target \u003d inputCommand.substring(5);","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"                if (!target.isEmpty()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"                    return new FindCommand(target, inputArray);","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"target\");","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.DELETE.equals(firstArg)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"                try {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"                    int index \u003d Integer.parseInt(secondArg);","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"                    return new DeleteCommand(index, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"                    System.out.println(\"    index must be a number!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.DEADLINE.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"                if (secondArg.equals(\"\\\\by\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"task description\");","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"                String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"                int indexOfBy \u003d inputCommand.lastIndexOf(\"\\\\by \");","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"                if (indexOfBy \u003d\u003d -1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"\\\\by deadlineTime\");","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"                    String by \u003d inputCommand.substring(indexOfBy + 4);","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"                    content \u003d inputCommand.substring(9, indexOfBy - 1);","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"                    LocalDateTime date \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"                    try {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"                        date \u003d LocalDateTime.parse(by, INPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"                        Task taskObj \u003d new Deadline(content, date);","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"                        return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"                        System.out.println(\"Wrong date format!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"                        e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.EVENT.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"                if (secondArg.equals(\"\\\\by\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"task description\");","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"                String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"                int indexOfAt \u003d inputCommand.lastIndexOf(\"\\\\at \");","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"                if (indexOfAt \u003d\u003d -1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeMissingArgumentException(\"\\\\at eventTime\");","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"                    String by \u003d inputCommand.substring(indexOfAt + 4);","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"                    content \u003d inputCommand.substring(6, indexOfAt - 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"                    LocalDateTime date \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"                    try {","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"                        date \u003d LocalDateTime.parse(by, INPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"                        Task taskObj \u003d new Event(content, date);","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"                        return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"                        System.out.println(\"Wrong date format!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"                        e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.TODO.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"                String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"                for (int k \u003d 1; k \u003c inputArray.length; k++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"                    content +\u003d inputArray[k];","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"                Task taskObj \u003d new ToDo(content);","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"                return new AddCommand(taskObj, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.MARK.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"                try {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"                    int index \u003d Integer.parseInt(secondArg);","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"                    return new MarkCommand(index, MarkCommand.Mark.MARK, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"                    System.out.println(\"    index must be a number!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.UNMARK.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"                try {","lastModifiedDate":"2022-01-26"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"                    int index \u003d Integer.parseInt(secondArg);","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"                    return new MarkCommand(index, MarkCommand.Mark.UNMARK, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"                    System.out.println(\"    index must be a number!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"            } else if (Command.CommandType.SORT.equals(firstArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"                if (TaskList.SortType.CONTENT.equals(secondArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"                    return new SortCommand(TaskList.SortType.CONTENT, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"                } else if (TaskList.SortType.DATE.equals(secondArg)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"                    return new SortCommand(TaskList.SortType.DATE, inputArray);","lastModifiedDate":"2022-01-26"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"                    throw new DukeInvalidArgumentException(\"sort type\");","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"                return new InvalidCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"        return new InvalidCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":160}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":" * Saves files to data/duke.txt and loads saved file.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"public class Storage {","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    private final String filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * Loads the duke.txt file to get data from previous runs of Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     * @return ArrayList of Tasks ArrayList that is populated with duke.txt save file.","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @throws FileNotFoundException Exception thrown when file is not found.","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        BufferedReader bufferedReader \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        if (!Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"                file.createNewFile();","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"        FileReader fileReader \u003d new FileReader(file);","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"        bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"            String line \u003d bufferedReader.readLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"                if (line.length() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"                    return taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"                    String typeAndIsDone \u003d line.substring(0, 6);","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"                    String type \u003d typeAndIsDone.substring(1, 2); // D, E, or T","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"                    String isDone \u003d typeAndIsDone.substring(4, 5);","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"                    if (!type.equals(\"T\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"                        String content \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"                        String dateString \u003d \"\";","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"                        if (type.equals(\"D\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"                            content \u003d line.substring(7, line.lastIndexOf(\" (by: \"));","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"                            dateString \u003d line.substring(line.lastIndexOf(\"by: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"                            LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"                            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new Deadline(content, dateTime, true));","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new Deadline(content, dateTime));","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"                        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"                            content \u003d line.substring(7, line.lastIndexOf(\" (at: \"));","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"                            dateString \u003d line.substring(line.lastIndexOf(\"at: \") + 4, line.lastIndexOf(\")\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"                            LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, Ui.OUTPUT_FORMATTER);","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"                            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new Event(content, dateTime, true));","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"                            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"                                taskList.add(new Event(content, dateTime));","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"                            }","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"                    } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"                        if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"                            String content \u003d line.substring(7);","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"                            taskList.add(new ToDo(content, true));","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"                        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"                            String content \u003d line.substring(7);","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"                            taskList.add(new ToDo(content));","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"                        }","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"                line \u003d bufferedReader.readLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"        return taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"     * Saves the current tasks into data/duke.txt.","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"     * @param taskList taskList object that contains all tasks to be saved","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"    public void save(TaskList taskList) {","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"        BufferedWriter bufferedWriter \u003d null;","lastModifiedDate":"2022-01-26"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"            if (!file.exists()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"                file.createNewFile();","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"            bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"                bufferedWriter.write(task.toString() + \"\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"            bufferedWriter.close();","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    File error: not found\");","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    Error: cannot save file\");","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":125}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" * Task object with non-null LocalDateTime variable.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Deadline object with content and date.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public Deadline(String content, LocalDateTime date) {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        super(content, date);","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Deadline object with content and date and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"    public Deadline(String content, LocalDateTime date, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of Deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"            return \"[D][X] \" + getContent() + \" (by: \" + date","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"            return \"[D][ ] \" + getContent() + \" (by: \" + date","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":48}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Event object with content and date.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime due date.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    public Event(String content, LocalDateTime date) {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"        super(content, date);","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * Instantiates a Event object with content and date and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"     * @param content String content.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"     * @param date    LocalDateTime date on which the event is occurring.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * @param isDone  Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    public Event(String content, LocalDateTime date, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        super(content, date, isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of Event.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"            return \"[E][X] \" + getContent() + \" (at: \" + date","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"            return \"[E][ ] \" + getContent() + \" (at: \" + date","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"                    .format(Ui.OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":45}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"public class Task implements Comparable\u003cTask\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"    protected String content;","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    protected LocalDateTime date;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public Task(String content) {","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d null;","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string and whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param isDone boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string and date.","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param date LocalDateTime date of Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, LocalDateTime date) {","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"     * Constructs a Task object with content string, date, and whether the task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     * @param content String content to be put in the task.","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     * @param date LocalDateTime date of Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     * @param isDone boolean boolean to show whether task is done.","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"    public Task(String content, LocalDateTime date, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        this.content \u003d content;","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"     * Returns isDone instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"     * @return boolean isDone instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2022-01-19"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"        return isDone;","lastModifiedDate":"2022-01-19"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"     * Returns the content string.","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"     * @return String content instance variable.","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"    public String getContent() {","lastModifiedDate":"2022-01-19"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"        return content;","lastModifiedDate":"2022-01-19"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"     * Marks this task as done.","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"    public void mark() {","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-19"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"        Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2022-01-19"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    \" + this.toString());","lastModifiedDate":"2022-01-20"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"        Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"     * Unmarks this task.","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"    public void unmark() {","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-19"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"        Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    I\u0027ve unmarked this task: \");","lastModifiedDate":"2022-01-19"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    \" + this.toString());","lastModifiedDate":"2022-01-20"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"        Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"     * Compares two tasks based on date and content.","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"     * A date is larger if it occurs earlier, and content is larger based on String compareTo.","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"     * @param task Task to be compared with.","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"     * @return int Integer that shows which is larger.","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"    public int compareTo(Task task) {","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"        if (this.date !\u003d null \u0026\u0026 task.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"            return this.date.compareTo(task.date);","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"        } else if (this.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"            return -1;","lastModifiedDate":"2022-01-25"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"        } else if (task.date !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"            return 1;","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"            return this.content.compareTo(task.content);","lastModifiedDate":"2022-01-25"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":118}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeInvalidArgumentException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":" * Stores data in an ArrayList and executes commands.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"public class TaskList {","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty ArrayList and new Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty ArrayList","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * @param ui Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    public TaskList(Ui ui) {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"     * Sets tasks and ui to given argument.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"     * @param tasks Task ArrayList with Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * @param ui    Ui object.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks, Ui ui) {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        return tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     * Finds all Task objects that contains the target String.","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     * Shows the UI by creating a new temporary TaskList and using toString on it.","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"     * @param target String Target String to be searched for.","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"    public void findTask(String target) {","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e(), ui);","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"            if (task.content.contains(target)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"                taskList.tasks.add(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForTaskList(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"     * Marks the task at index as complete.","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to mark (starts from 1).","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"    public void markTask(int index) {","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    No tasks are in the list right now!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"                throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"            } catch (DukeInvalidArgumentException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"                System.out.println(e.toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        tasks.get(index - 1).mark();","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"     * Unmakrs the task at index as incomplete.","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to unmark (starts from 1).","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"    public void unmarkTask(int index) {","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    No tasks are in the list right now!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"                throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"            } catch (DukeInvalidArgumentException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"                System.out.println(e.toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"        tasks.get(index - 1).unmark();","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"     * Adds the specified task into the tasks ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"     * @param task Task to be added into tasks ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"        // divided in case I need to add other features like parsing date","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"        tasks.add(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForAdd(task, tasks.size());","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"     * Deletes the task at index.","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"     * @param index Index of the task to be deleted (starts from 1)","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    No tasks are in the list right now!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"robinrojh"},"content":"            Ui.printDivider();","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"robinrojh"},"content":"        } else if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"robinrojh"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"robinrojh"},"content":"                throw new DukeInvalidArgumentException(\"index is not in the list\");","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"robinrojh"},"content":"            } catch (DukeInvalidArgumentException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"robinrojh"},"content":"                System.out.println(e.toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":133,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"robinrojh"},"content":"            Task removedTask \u003d tasks.remove(index - 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"robinrojh"},"content":"            ui.showUiForDelete(removedTask, tasks.size());","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"robinrojh"},"content":"     * Specifies the sorting order as an enum.","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"robinrojh"},"content":"    public enum SortType {","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"robinrojh"},"content":"        DATE,","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"robinrojh"},"content":"        CONTENT;","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"robinrojh"},"content":"         * Returns enum as a String in lower case.","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"robinrojh"},"content":"         * @return String date or content.","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"robinrojh"},"content":"        @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"robinrojh"},"content":"        public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"robinrojh"},"content":"            return this.name().toLowerCase();","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"robinrojh"},"content":"        /**","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"robinrojh"},"content":"         * Compares the enum\u0027s name to the input.","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"robinrojh"},"content":"         *","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"robinrojh"},"content":"         * @param input Input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":160,"author":{"gitId":"robinrojh"},"content":"         * @return boolean True if the name and input are equal.","lastModifiedDate":"2022-01-27"},{"lineNumber":161,"author":{"gitId":"robinrojh"},"content":"         */","lastModifiedDate":"2022-01-27"},{"lineNumber":162,"author":{"gitId":"robinrojh"},"content":"        public boolean equals(String input) {","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"robinrojh"},"content":"            if (input.equalsIgnoreCase(this.name())) {","lastModifiedDate":"2022-01-26"},{"lineNumber":164,"author":{"gitId":"robinrojh"},"content":"                return true;","lastModifiedDate":"2022-01-26"},{"lineNumber":165,"author":{"gitId":"robinrojh"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":166,"author":{"gitId":"robinrojh"},"content":"                return false;","lastModifiedDate":"2022-01-26"},{"lineNumber":167,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":168,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":169,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":170,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":171,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":172,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":173,"author":{"gitId":"robinrojh"},"content":"     * Sorts the taskList based on the sortType in ascending order.","lastModifiedDate":"2022-01-27"},{"lineNumber":174,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":175,"author":{"gitId":"robinrojh"},"content":"     * @param sortType Enum to specify what to sort based on.","lastModifiedDate":"2022-01-27"},{"lineNumber":176,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":177,"author":{"gitId":"robinrojh"},"content":"    public void sortTaskList(SortType sortType) {","lastModifiedDate":"2022-01-26"},{"lineNumber":178,"author":{"gitId":"robinrojh"},"content":"        Comparator\u003cTask\u003e comparator \u003d new Comparator\u003cTask\u003e() {","lastModifiedDate":"2022-01-26"},{"lineNumber":179,"author":{"gitId":"robinrojh"},"content":"            @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":180,"author":{"gitId":"robinrojh"},"content":"            public int compare(Task task1, Task task2) {","lastModifiedDate":"2022-01-26"},{"lineNumber":181,"author":{"gitId":"robinrojh"},"content":"                if (sortType.equals(SortType.DATE)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":182,"author":{"gitId":"robinrojh"},"content":"                    return task1.compareTo(task2);","lastModifiedDate":"2022-01-26"},{"lineNumber":183,"author":{"gitId":"robinrojh"},"content":"                } else if (sortType.equals(SortType.CONTENT)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":184,"author":{"gitId":"robinrojh"},"content":"                    return task1.content.compareTo(task2.content);","lastModifiedDate":"2022-01-26"},{"lineNumber":185,"author":{"gitId":"robinrojh"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":186,"author":{"gitId":"robinrojh"},"content":"                    return -1;","lastModifiedDate":"2022-01-26"},{"lineNumber":187,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":188,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":189,"author":{"gitId":"robinrojh"},"content":"        };","lastModifiedDate":"2022-01-26"},{"lineNumber":190,"author":{"gitId":"robinrojh"},"content":"        tasks.sort(comparator);","lastModifiedDate":"2022-01-26"},{"lineNumber":191,"author":{"gitId":"robinrojh"},"content":"        ui.showUiForSort(tasks, sortType);","lastModifiedDate":"2022-01-26"},{"lineNumber":192,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":193,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":194,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":195,"author":{"gitId":"robinrojh"},"content":"     * Compares two taskLists based on the content Tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":196,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":197,"author":{"gitId":"robinrojh"},"content":"     * @param taskList Other taskList to be compared with.","lastModifiedDate":"2022-01-27"},{"lineNumber":198,"author":{"gitId":"robinrojh"},"content":"     * @return boolean True if two taskLists have same tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":199,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":200,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":201,"author":{"gitId":"robinrojh"},"content":"    public boolean equals(Object taskList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":202,"author":{"gitId":"robinrojh"},"content":"        TaskList taskListCast \u003d (TaskList) taskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":203,"author":{"gitId":"robinrojh"},"content":"        if (taskListCast.tasks.size() !\u003d this.tasks.size()) {","lastModifiedDate":"2022-01-27"},{"lineNumber":204,"author":{"gitId":"robinrojh"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":205,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":206,"author":{"gitId":"robinrojh"},"content":"            for (int k \u003d 0; k \u003c tasks.size(); k++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":207,"author":{"gitId":"robinrojh"},"content":"                if (tasks.get(k).compareTo(taskListCast.tasks.get(k)) !\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":208,"author":{"gitId":"robinrojh"},"content":"                    return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":209,"author":{"gitId":"robinrojh"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":210,"author":{"gitId":"robinrojh"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":211,"author":{"gitId":"robinrojh"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":212,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":213,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":214,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":215,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"robinrojh":215}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":" * A task object that only has content and isDone.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":" * No date or time is specified.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"     * Instantiates ToDo object with given content.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"     * @param content Content for ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    public ToDo(String content) {","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"        super(content);","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     * Instantiates ToDo object with content and whether it\u0027s marked done.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"     * @param content String content for ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"     * @param isDone Boolean to show if the task is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"    public ToDo(String content, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        super(content, isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"     * Returns the String representation of this class object.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * @return String String representation of ToDo.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        if (getIsDone()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"            return \"[T][X] \" + getContent();","lastModifiedDate":"2022-01-19"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        } else {","lastModifiedDate":"2022-01-19"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"            return \"[T][ ] \" + getContent();","lastModifiedDate":"2022-01-19"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":39}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class Ui {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    public static final String DIVIDER \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    public static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"            .ofPattern(\"HH:mm EEEE, MM-dd-yyyy\").localizedBy(Locale.ENGLISH);","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public static final String BOT_NAME \u003d \"duke\";","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"     * Instantiates an empty Ui object.","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"    public Ui() {","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for the start of the program.","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    public void showUiForStart() {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Hello, I\u0027m \" + BOT_NAME + \".\");","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    What can I do for you?\");","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for the end of the program.","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    public void showUiForBye() {","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-01-19"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"     * Prints the divider.","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"    public static void printDivider() {","lastModifiedDate":"2022-01-19"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"     * Prints out every Task in the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     * @param taskList TaskList to be printed out.","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"    public void showUiForTaskList(TaskList taskList) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        for (int index \u003d 0; index \u003c tasks.size(); index++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"            int order \u003d (index + 1);","lastModifiedDate":"2022-01-19"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"            String result \u003d \"    \" + order + \": \" + task.toString();","lastModifiedDate":"2022-01-19"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"            System.out.println(result);","lastModifiedDate":"2022-01-19"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for adding a task.","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"     * @param taskObj Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"     * @param listLength int Length of the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"    public void showUiForAdd(Task taskObj, int listLength) {","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Adding a task: \");","lastModifiedDate":"2022-01-19"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"      \" + taskObj.toString());","lastModifiedDate":"2022-01-19"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Now you got \" + (listLength) + \" tasks in the list!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-19"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"     * Prints the UI for deleting a task.","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"     * @param taskObj Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"     * @param listLength int Length of the task list.","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"    public void showUiForDelete(Task taskObj, int listLength) {","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-20"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Ok, removing a task: \");","lastModifiedDate":"2022-01-20"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"      \" + taskObj.toString());","lastModifiedDate":"2022-01-20"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Now you got \" + (listLength) + \" tasks in the list!\");","lastModifiedDate":"2022-01-24"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"     * Prints all elements in the sorted list.","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"     * @param tasks ArrayList of Task objects to be printed.","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"     * @param sortType Type of sorting based on the enum.","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"    public void showUiForSort(ArrayList\u003cTask\u003e tasks, TaskList.SortType sortType) {","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"        System.out.println(\"    Sorting your tasks by \" + sortType.toString() + \":\");","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-01-25"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"            System.out.println(\"    \" + task.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"        printDivider();","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"robinrojh":108}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"//import duke.command.FindCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"//import duke.command.InvalidCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":" * Tests if Parser functions work as intended.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses an add command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    public void parseAddTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"deadline d1 \\\\by 2020-02-12 1600\";","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        Command deadline \u003d new AddCommand(new Deadline(\"d1\",","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"                LocalDateTime.parse(\"2020-02-12 1600\", Parser.INPUT_FORMATTER)), inputCommand.split(\" \"));","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        Command deadlineResult \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(deadline, deadlineResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"event e1 \\\\at 2020-02-12 1600\";","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"        Command event \u003d new AddCommand(new Event(\"e1\",","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"                LocalDateTime.parse(\"2020-02-12 1600\", Parser.INPUT_FORMATTER)), inputCommand.split(\" \"));","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"        Command eventResult \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(event, eventResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"todo t1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        Command todo \u003d new AddCommand(new ToDo(\"t1\"), inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"        Command todoResult \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(todo, todoResult);","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a delete command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"robinrojh"},"content":"    public void parseDeleteTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"delete 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"robinrojh"},"content":"        Command delete \u003d new DeleteCommand(1, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(delete, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a list command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"robinrojh"},"content":"    public void parseListTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"list\";","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"robinrojh"},"content":"        Command list \u003d new ListCommand(inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(list, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a bye command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"robinrojh"},"content":"    public void parseByeTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"bye\";","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"robinrojh"},"content":"        Command bye \u003d new ByeCommand(inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(bye, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a mark command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"robinrojh"},"content":"    public void parseMarkTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"mark 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"robinrojh"},"content":"        Command mark \u003d new MarkCommand(1, MarkCommand.Mark.MARK, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(mark, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"unmark 1\";","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"robinrojh"},"content":"        Command unmark \u003d new MarkCommand(1, MarkCommand.Mark.UNMARK, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"robinrojh"},"content":"        Command result2 \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(unmark, result2);","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"robinrojh"},"content":"     * Tests if the parser parses a sort command correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"robinrojh"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"robinrojh"},"content":"     * @throws DukeException","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"robinrojh"},"content":"    public void parseSortTest() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"robinrojh"},"content":"        String inputCommand \u003d \"sort date\";","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"robinrojh"},"content":"        Command sortDate \u003d new SortCommand(TaskList.SortType.DATE, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"robinrojh"},"content":"        Command result \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(sortDate, result);","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"robinrojh"},"content":"        inputCommand \u003d \"sort content\";","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"robinrojh"},"content":"        Command sortContent \u003d new SortCommand(TaskList.SortType.CONTENT, inputCommand.split(\" \"));","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"robinrojh"},"content":"        Command result2 \u003d Parser.parse(inputCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(sortContent, result2);","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":124}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":" * Tests whether TaskList functions work as intended.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"    private static TaskList initialList \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"     * Populates taskList and initialList with the same content.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"    @BeforeEach","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"robinrojh"},"content":"    public void setUpTaskList() {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().clear();","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"Hello\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"World\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().clear();","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"Hello\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"World\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"robinrojh"},"content":"     * Tests whether addTask adds a task correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"robinrojh"},"content":"    public void addTaskTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"robinrojh"},"content":"        taskList.addTask(new ToDo(\"content\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"robinrojh"},"content":"        initialList.getTasks().add(new ToDo(\"content\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(taskList, initialList);","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"robinrojh"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"robinrojh"},"content":"     * Tests whether deleteTask deletes a task correctly","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"robinrojh"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"robinrojh"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"robinrojh"},"content":"    public void deleteTaskTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"robinrojh"},"content":"        taskList.getTasks().add(new ToDo(\"what\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"robinrojh"},"content":"        taskList.deleteTask(3);","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"robinrojh"},"content":"        Assertions.assertEquals(taskList, initialList);","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":47}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"package duke.ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"public class UiTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"    @BeforeAll","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"    public static void setUpForSystemOut() {","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"robinrojh"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"robinrojh":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"robinrojh"},"content":"delete 1","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"robinrojh"},"content":"deadline hello \\by 2024-12-10 1600","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"robinrojh"},"content":"event zeros \\at 2024-10-12 1800","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"robinrojh"},"content":"todo haiya","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"robinrojh"},"content":"todo nani","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"robinrojh"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"robinrojh"},"content":"mark 2","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"robinrojh"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"robinrojh"},"content":"delete 1","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"robinrojh"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"robinrojh"},"content":"sort Date","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"robinrojh"},"content":"sort content","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"robinrojh"},"content":"bye","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"robinrojh":16}}]
