[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"# duke.Duke project template","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"soloplxya":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"checkstyle {","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2022-02-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":45,"soloplxya":20}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"T,0,1","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"T,0,2","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"T,0,5","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"soloplxya":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"# Duke User Guide","lastModifiedDate":"2022-02-14"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"\u003cimg width\u003d\"278\" alt\u003d\"Ui\" src\u003d\"https://user-images.githubusercontent.com/69782911/154522477-e967f1cc-4352-4db4-a1e4-4f62c222c137.png\"\u003e","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"#### Add tasks ","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"Duke allows users add tasks to the task list. ","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"There are three main types of tasks: ","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"- Todos ","lastModifiedDate":"2022-02-14"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"- Events ","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"- Deadlines ","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"#### View tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"Duke allows users to view the tasks in the task list. ","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"#### Mark/Unmark tasks ","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"Duke allows users to mark a task when the task is completed. Duke also allows","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"users to unmark the task if they made a mistake when marking the task. ","lastModifiedDate":"2022-02-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"#### Delete tasks ","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"Users can delete tasks from Duke if there are too many tasks in the task list. ","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"#### Find tasks ","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"Users can find tasks quickly and easily just by keying in a simple search query.","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"#### Undo recent command ","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"Users can undo their most recent command if they made a typo in their task description. ","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Usage ","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"### `todo` - Add a todo task","lastModifiedDate":"2022-02-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"Adds a todo to the task list. Useful for tasks with no imminent deadlines. ","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"`todo paynow money to friend`","lastModifiedDate":"2022-02-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"Duke will add the todo to the task list.","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"We have added [T][] paynow money to friend to the list.","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"You now have a total of 9 tasks in your list! Subarashii!","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"### `event` - Add an event task","lastModifiedDate":"2022-02-14"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"Adds an event to the task list. Useful for tasks that happens on a specific date.","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"`event company dinner /at 12-12-2022`","lastModifiedDate":"2022-02-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"Duke will add the event to the task list.","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"We have added [E][] company dinner (at: 12-Dec-2022) to the list.","lastModifiedDate":"2022-02-17"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"You now have a total of 9 tasks in your list! Subarashii!","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"### `deadline` - Add a deadline task","lastModifiedDate":"2022-02-18"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"Adds a deadline to the task list. Useful for tasks that needs to be completed by a specific date.","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"`deadline CS3243 assignment /by 12-12-2022`","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"Duke will add the deadline to the task list.","lastModifiedDate":"2022-02-18"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"We have added [D][] CS3243 assignment (by: 12-Dec-2022) to the list.","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"You now have a total of 9 tasks in your list! Subarashii!","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"### `mark` - Mark a task","lastModifiedDate":"2022-02-14"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"Marks a task as completed. ","lastModifiedDate":"2022-02-14"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"`mark 1`","lastModifiedDate":"2022-02-14"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"Duke will mark the first task as completed.","lastModifiedDate":"2022-02-14"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":" Sugoi! I have marked this task as done!","lastModifiedDate":"2022-02-14"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":" [T][X] paynow money to friend","lastModifiedDate":"2022-02-14"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"### `unmark` - Unmark a task","lastModifiedDate":"2022-02-14"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"Unmarks a completed task.","lastModifiedDate":"2022-02-14"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"`unmark 1`","lastModifiedDate":"2022-02-14"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"Duke will unmark the first task.","lastModifiedDate":"2022-02-14"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":" Daijoubu! I have unmarked this task for you!","lastModifiedDate":"2022-02-14"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":" [T][ ] paynow money to friend","lastModifiedDate":"2022-02-14"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2022-02-14"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"Deletes a task in the list.","lastModifiedDate":"2022-02-14"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"`delete 1`","lastModifiedDate":"2022-02-14"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"Duke will delete the first task in the list.","lastModifiedDate":"2022-02-14"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":" Otsukaresamadeshita! You have finally completed one task!","lastModifiedDate":"2022-02-14"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":" [T][ ] paynow money to friend","lastModifiedDate":"2022-02-14"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"### `list` - list all tasks in the task list","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"List tasks in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"`list`","lastModifiedDate":"2022-02-14"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"Duke will list all tasks in the task list. ","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":" 1. [T][ ] paynow money to friend","lastModifiedDate":"2022-02-14"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"### `find` - Finds queried task in task list","lastModifiedDate":"2022-02-18"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":152,"author":{"gitId":"soloplxya"},"content":"Duke will look at the descriptions of all the tasks and return a list of tasks ","lastModifiedDate":"2022-02-17"},{"lineNumber":153,"author":{"gitId":"soloplxya"},"content":"containing a matching substring.","lastModifiedDate":"2022-02-17"},{"lineNumber":154,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":155,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":157,"author":{"gitId":"soloplxya"},"content":"`find eat breakfast`","lastModifiedDate":"2022-02-17"},{"lineNumber":158,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":159,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-17"},{"lineNumber":160,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":161,"author":{"gitId":"soloplxya"},"content":"Duke will print out the tasks that it found in the task list.","lastModifiedDate":"2022-02-17"},{"lineNumber":162,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":163,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-17"},{"lineNumber":164,"author":{"gitId":"soloplxya"},"content":" This is what we found!","lastModifiedDate":"2022-02-17"},{"lineNumber":165,"author":{"gitId":"soloplxya"},"content":" 1. [T][] eat breakfast","lastModifiedDate":"2022-02-17"},{"lineNumber":166,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-17"},{"lineNumber":167,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":168,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":169,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":170,"author":{"gitId":"soloplxya"},"content":"### `undo` - Undo the most recent command","lastModifiedDate":"2022-02-18"},{"lineNumber":171,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":172,"author":{"gitId":"soloplxya"},"content":"Undoes the latest command the user has keyed in.","lastModifiedDate":"2022-02-14"},{"lineNumber":173,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":174,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":175,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":176,"author":{"gitId":"soloplxya"},"content":"`undo`","lastModifiedDate":"2022-02-14"},{"lineNumber":177,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":178,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":179,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":180,"author":{"gitId":"soloplxya"},"content":"Duke will undo the latest command and revert the state of the task list.","lastModifiedDate":"2022-02-14"},{"lineNumber":181,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":182,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":183,"author":{"gitId":"soloplxya"},"content":" Add has been undone!","lastModifiedDate":"2022-02-14"},{"lineNumber":184,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":185,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":186,"author":{"gitId":"soloplxya"},"content":"### `bye` - Exits the program","lastModifiedDate":"2022-02-14"},{"lineNumber":187,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":188,"author":{"gitId":"soloplxya"},"content":"Exits the Duke program.","lastModifiedDate":"2022-02-14"},{"lineNumber":189,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":190,"author":{"gitId":"soloplxya"},"content":"Example of usage:","lastModifiedDate":"2022-02-14"},{"lineNumber":191,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":192,"author":{"gitId":"soloplxya"},"content":"`bye`","lastModifiedDate":"2022-02-14"},{"lineNumber":193,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":194,"author":{"gitId":"soloplxya"},"content":"Expected outcome:","lastModifiedDate":"2022-02-14"},{"lineNumber":195,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":196,"author":{"gitId":"soloplxya"},"content":"Duke will terminate the program and say farewell to the user.","lastModifiedDate":"2022-02-14"},{"lineNumber":197,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":198,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":199,"author":{"gitId":"soloplxya"},"content":" Sayonara! Hope to see you again soon!","lastModifiedDate":"2022-02-14"},{"lineNumber":200,"author":{"gitId":"soloplxya"},"content":"```","lastModifiedDate":"2022-02-14"},{"lineNumber":201,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":202,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":203,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":204,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":205,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":206,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":207,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":208,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":209,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":210,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-14"}],"authorContributionMap":{"soloplxya":183,"-":27}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":" * Represents a Duke chat bot","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    private final TextUi ui;","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private final Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-22"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a Duke chat bot.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * It requires a directory path and file path to locate the storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     * The storage file contains the tasks that the user has keyed in before.","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * @param directoryPath Directory path to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     * @param filePath File path to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    public Duke(String directoryPath, String filePath) {","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"        TaskList tasks1;","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"        this.ui \u003d new TextUi();","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"        this.storage \u003d new Storage(directoryPath, filePath);","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-22"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"            tasks1 \u003d new TaskList(storage.readFromDukeFile());","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"            tasks1 \u003d new TaskList();","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-01-13"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        this.tasks \u003d tasks1;","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"     * Method that returns the response from running the Duke Program.","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"     * This response could either be a success string that has executed what the user","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"     * has typed in or an error message if the program is unable to run the text","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"     * that the user has keyed in.","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"            Command c \u003d parser.parseInput(input);","lastModifiedDate":"2022-02-06"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"            return c.execute(tasks, ui, storage);","lastModifiedDate":"2022-02-06"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-01-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-14"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"soloplxya":45,"-":8}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke;","lastModifiedDate":"2022-01-23"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.commands.AddDeadline;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.commands.AddEvent;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.commands.AddToDo;","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Bye;","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Delete;","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Find;","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import duke.commands.List;","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Mark;","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Undo;","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"import duke.commands.Unmark;","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":" * Represents a parser object that parses commands that the user types into the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"public class Parser {","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    private Command previousCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    enum CommandType {","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, FIND, LIST, BYE, UNDO;","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"        static CommandType getCommandType(String input) throws DukeException {","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"            for (CommandType type : CommandType.values()) {","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"                if (input.equalsIgnoreCase(type.toString())) {","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"                    return type;","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"                }","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2022-02-06"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"     * Returns a command based on the command type that the user has keyed in.","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"     * This method is specific to command types that require index manipulation.","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"     * (For e.g. Delete, mark and un-mark commands).","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"     * @param commandType Type of command the the user has keyed in.","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"     * @param index Index of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     * @throws TaskException if task index provided is not a number or if the task cannot be","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * found within the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * @throws InvalidCommandException if the commandType provided is invalid.","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    private Command taskAction(CommandType commandType, String... index) throws InvalidCommandException, TaskException {","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"        String taskIdParameter \u003d index[0];","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"            int taskId \u003d Integer.parseInt(taskIdParameter);","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"            boolean isWithinBoundary \u003d taskId \u003e 0 \u0026\u0026 taskId \u003c (TaskList.getTaskSize() + 1);","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"            if (!(isWithinBoundary)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"                throw new TaskException(\"UNFOUND_TASK\");","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"            Command currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"            switch (commandType) {","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"            case DELETE:","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"                currentCommand \u003d new Delete(taskId);","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"                previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"                break;","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"            case UNMARK:","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"                currentCommand \u003d new Unmark(taskId);","lastModifiedDate":"2022-02-08"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"                previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"                break;","lastModifiedDate":"2022-02-08"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"            case MARK:","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"                currentCommand \u003d new Mark(taskId);","lastModifiedDate":"2022-02-08"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"                previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"                break;","lastModifiedDate":"2022-02-08"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"            default:","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"                assert false : commandType;","lastModifiedDate":"2022-02-05"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2022-02-06"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"            return currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-23"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"            throw new TaskException(\"INVALID_TASKID\");","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"     * Returns a command based on the input the user has parsed into the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"     * Throws an exception if the input that the user has parsed is unreadable","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"     * by the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"     * @param input Input that the user has keyed into the GUI commandline.","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"     * @return A command that can be executed to perform an action.","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the string input provided by the user cannot","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"     * be interpreted by the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"    public Command parseInput(String input) throws DukeException {","lastModifiedDate":"2022-02-05"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"        String[] inputArray \u003d input.split(\" \");","lastModifiedDate":"2022-01-23"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"        CommandType commandType \u003d CommandType.getCommandType(inputArray[0]);","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"        if (inputArray.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-23"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"            return parseSingleCommand(commandType);","lastModifiedDate":"2022-02-06"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"        StringBuilder taskDetailsBuilder \u003d new StringBuilder();","lastModifiedDate":"2022-01-23"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"        for (int i \u003d 1; i \u003c inputArray.length; i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"            if (i !\u003d inputArray.length - 1) {","lastModifiedDate":"2022-01-23"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"                taskDetailsBuilder.append(inputArray[i]).append(\" \");","lastModifiedDate":"2022-01-23"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"                taskDetailsBuilder.append(inputArray[i]);","lastModifiedDate":"2022-01-23"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"        String taskDetails \u003d taskDetailsBuilder.toString();","lastModifiedDate":"2022-01-23"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"        return parseMultiCommand(commandType, inputArray[1], taskDetails);","lastModifiedDate":"2022-02-06"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"     * Returns a command for an input that contains more than 1 input words.","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"     * These commands include mark, find, delete, as well as all add commands.","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"     * @param commandType CommandType of the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Index of task (used for mark, find, delete).","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"     * @param taskDetails Details of task (used for todo, event, deadline).","lastModifiedDate":"2022-02-15"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"     * @return A Command that can be executed. This command is dependent on the commandType","lastModifiedDate":"2022-02-15"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"     * that has been provided to the method.","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the commandType that has been provided is an invalid command.","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"    private Command parseMultiCommand(CommandType commandType, String taskId, String taskDetails) throws DukeException {","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"        String description \u003d \"\";","lastModifiedDate":"2022-01-23"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":"        String date \u003d \"\";","lastModifiedDate":"2022-01-23"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":"        String dateTime \u003d \"\";","lastModifiedDate":"2022-01-23"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"        // Process Event \u0026 Deadline commands","lastModifiedDate":"2022-02-06"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"        if (taskDetails.contains(\"/by\")) {","lastModifiedDate":"2022-01-23"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"            try {","lastModifiedDate":"2022-02-06"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"                description \u003d taskDetails.split(\"/by\", 2)[0];","lastModifiedDate":"2022-01-23"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"                date \u003d taskDetails.split(\"/by\", 2)[1].substring(1).trim();","lastModifiedDate":"2022-02-17"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-06"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"                throw new DukeException(\"Missing deadline date or description!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"        } else if (taskDetails.contains(\"/at\")) {","lastModifiedDate":"2022-01-23"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"            try {","lastModifiedDate":"2022-02-06"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"                description \u003d taskDetails.split(\"/at\", 2)[0];","lastModifiedDate":"2022-01-23"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"                dateTime \u003d taskDetails.split(\"/at\", 2)[1].substring(1).trim();","lastModifiedDate":"2022-02-17"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-06"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"                throw new DukeException(\"Missing event date or description!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"        return interpretCommandType(commandType, taskId, description, date, dateTime, taskDetails);","lastModifiedDate":"2022-02-17"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":152,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":153,"author":{"gitId":"soloplxya"},"content":"     * Returns a command based on the commandType provided.","lastModifiedDate":"2022-02-17"},{"lineNumber":154,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":155,"author":{"gitId":"soloplxya"},"content":"     * @param commandType Type of command that the user has keyed in.","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Id of task. (For delete, mark and unmark commands)","lastModifiedDate":"2022-02-17"},{"lineNumber":157,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of task. (For add commands)","lastModifiedDate":"2022-02-17"},{"lineNumber":158,"author":{"gitId":"soloplxya"},"content":"     * @param date Date of task. (For event/deadline commands)","lastModifiedDate":"2022-02-17"},{"lineNumber":159,"author":{"gitId":"soloplxya"},"content":"     * @param dateTime Datetime of task. (For event/deadline commands)","lastModifiedDate":"2022-02-17"},{"lineNumber":160,"author":{"gitId":"soloplxya"},"content":"     * @param taskDetails Details of task (For add commands)","lastModifiedDate":"2022-02-17"},{"lineNumber":161,"author":{"gitId":"soloplxya"},"content":"     * @return Command corresponding to the command type of the task.","lastModifiedDate":"2022-02-17"},{"lineNumber":162,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the commandType is invalid.","lastModifiedDate":"2022-02-17"},{"lineNumber":163,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":164,"author":{"gitId":"soloplxya"},"content":"    private Command interpretCommandType(CommandType commandType, String taskId,","lastModifiedDate":"2022-02-17"},{"lineNumber":165,"author":{"gitId":"soloplxya"},"content":"        String description, String date, String dateTime, String taskDetails) throws DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        //@@author saad-haider-pp","lastModifiedDate":"2022-02-17"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        //Reused from :","lastModifiedDate":"2022-02-17"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // https://github.com/saad-haider-pp/Duke-chatbot-CS2103T-/blob/master/src/main/java/duke/Parser.java","lastModifiedDate":"2022-02-17"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Command currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        switch (commandType) {","lastModifiedDate":"2022-01-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        case FIND:","lastModifiedDate":"2022-01-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            currentCommand \u003d new Find(taskDetails);","lastModifiedDate":"2022-02-17"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        case DELETE:","lastModifiedDate":"2022-01-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return taskAction(CommandType.DELETE, taskId);","lastModifiedDate":"2022-02-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        case UNMARK:","lastModifiedDate":"2022-01-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return taskAction(CommandType.UNMARK, taskId);","lastModifiedDate":"2022-02-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        case MARK:","lastModifiedDate":"2022-01-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return taskAction(CommandType.MARK, taskId);","lastModifiedDate":"2022-02-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        case TODO:","lastModifiedDate":"2022-01-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            currentCommand \u003d new AddToDo(taskDetails);","lastModifiedDate":"2022-02-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            currentCommand \u003d new AddDeadline(description, date);","lastModifiedDate":"2022-02-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        case EVENT:","lastModifiedDate":"2022-01-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            currentCommand \u003d new AddEvent(description, dateTime);","lastModifiedDate":"2022-02-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            previousCommand \u003d currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2022-01-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2022-02-06"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return currentCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Returns a command for an input that contains only one input word.","lastModifiedDate":"2022-02-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * These commands are specific to list, bye and undo.","lastModifiedDate":"2022-02-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @param commandType CommandType of the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @return A Command that can be executed. This command is dependent on the commandType","lastModifiedDate":"2022-02-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * that has been provided to the method.","lastModifiedDate":"2022-02-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * @throws DukeException if the commandType that has been provided is an invalid command.","lastModifiedDate":"2022-02-15"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    private Command parseSingleCommand(CommandType commandType) throws DukeException {","lastModifiedDate":"2022-02-15"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        switch (commandType) {","lastModifiedDate":"2022-02-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        case UNDO:","lastModifiedDate":"2022-02-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            Command undo \u003d new Undo(previousCommand);","lastModifiedDate":"2022-02-17"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            previousCommand \u003d null;","lastModifiedDate":"2022-02-17"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return undo;","lastModifiedDate":"2022-02-17"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        case BYE:","lastModifiedDate":"2022-02-06"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            return new Bye();","lastModifiedDate":"2022-02-06"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        case LIST:","lastModifiedDate":"2022-02-06"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            return new List();","lastModifiedDate":"2022-02-06"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2022-02-06"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2022-02-06"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"soloplxya":165,"-":61}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke;","lastModifiedDate":"2022-01-23"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.io.File;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-23"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.StorageException;","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":" * Represents a Storage object that tracks and stores the tasks that the user has keyed in","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":" * previous interactions with the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"public class Storage {","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    protected static String directoryPath;","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    protected static String filePath;","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-30"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a storage object given a directory path and a file path.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * The directory path and file path provides the information of where the","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * storage file should be stored.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"     * @param directoryPath Directory path to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     * @param filePath File path to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"    public Storage(String directoryPath, String filePath) {","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        Storage.directoryPath \u003d directoryPath;","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        Storage.filePath \u003d filePath;","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     * Default constructor of a Storage object.","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * This constructor does not take in any arguments.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"    public Storage() {}","lastModifiedDate":"2022-01-23"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"     * Method that takes in a list of tasks and writes it into the storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * Throws an exception if the program is unable to find the file that it needs","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     * to write the tasks to.","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the file cannot be found in the directory path provided.","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"    public static void writeToDukeFile() throws DukeException {","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"            for (Task task: tasks) {","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"                fw.write(task.toFileFormat() + \"\\n\");","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"            fw.close();","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"            throw new StorageException(\"FILE_NOT_FOUND\");","lastModifiedDate":"2022-02-17"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"     * Method that reads from the file and outputs a list of tasks that have been read from the storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"     * @return List of tasks that have been stored in the storage file object.","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the program is unable to read content from duke file or if the file does not exist","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"     * at the location specified.","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"    public ArrayList\u003cTask\u003e readFromDukeFile() throws DukeException {","lastModifiedDate":"2022-01-23"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"        createDirectory();","lastModifiedDate":"2022-02-05"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"            Scanner readFile \u003d new Scanner(new File(filePath));","lastModifiedDate":"2022-02-18"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"            while (readFile.hasNextLine()) {","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"                Task taskToAdd;","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"                String taskData \u003d readFile.nextLine();","lastModifiedDate":"2022-01-23"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"                String[] taskDataArray \u003d taskData.split(\",\");","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"                String taskInput \u003d taskDataArray[0].toUpperCase(Locale.ROOT);","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"                taskToAdd \u003d parseTaskInput(taskInput, taskDataArray);","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"                if (taskToAdd \u003d\u003d null) {","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"                    throw new StorageException(\"FILE_READ_ERROR\");","lastModifiedDate":"2022-02-17"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"                }","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"                if (taskDataArray[1].equals(\"1\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"                    taskToAdd.markIsDone();","lastModifiedDate":"2022-01-23"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"                }","lastModifiedDate":"2022-01-23"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"                tasks.add(taskToAdd);","lastModifiedDate":"2022-01-23"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"            throw new StorageException(\"FILE_NOT_FOUND\");","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"        return tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"     * Returns a task based on the stored file format of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"     * Throws an exception if the file is corrupted or if the tasks have been stored","lastModifiedDate":"2022-02-15"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"     * in a format that is unreadable by the parser.","lastModifiedDate":"2022-02-15"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"     * @param taskInput Stored file format of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"     * @param taskDataArray Array containing the information of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"     * @return A task that is generated based on the information in the taskArray as well as","lastModifiedDate":"2022-02-15"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"     * the task input.","lastModifiedDate":"2022-02-15"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the parser is unable to convert the file format of the task","lastModifiedDate":"2022-02-15"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"     * to a Task object.","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"    private Task parseTaskInput(String taskInput, String[] taskDataArray) throws DukeException {","lastModifiedDate":"2022-02-15"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"        switch (taskInput) {","lastModifiedDate":"2022-02-15"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"        case \"E\":","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"            if (taskDataArray.length \u003d\u003d 4) {","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"                return new Event(taskDataArray[2], taskDataArray[3]);","lastModifiedDate":"2022-02-15"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"                return null;","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"        case \"T\":","lastModifiedDate":"2022-01-23"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"            if (taskDataArray.length \u003d\u003d 3) {","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"                return new Todo(taskDataArray[2]);","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"                return null;","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":"        case \"D\":","lastModifiedDate":"2022-01-23"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":"            if (taskDataArray.length \u003d\u003d 4) {","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"                return new Deadline(taskDataArray[2], taskDataArray[3]);","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"                return null;","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"        default:","lastModifiedDate":"2022-01-23"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"            assert false : taskInput;","lastModifiedDate":"2022-02-05"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"            return null;","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"     * Method that creates a directory for the storage file if it does not exist.","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"     * Throws an exception if there is already an existing directory that contains","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"     * the file.","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":"     * @throws StorageException if there is an error that occurs when trying to create the","lastModifiedDate":"2022-02-17"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"     * directory.","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"    public void createDirectory() throws DukeException {","lastModifiedDate":"2022-02-05"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"        boolean isDirectoryExists \u003d new File(directoryPath).exists();","lastModifiedDate":"2022-02-18"},{"lineNumber":152,"author":{"gitId":"soloplxya"},"content":"        boolean isFileExists \u003d new File(filePath).exists();","lastModifiedDate":"2022-02-18"},{"lineNumber":153,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":154,"author":{"gitId":"soloplxya"},"content":"            if (!isDirectoryExists) {","lastModifiedDate":"2022-02-05"},{"lineNumber":155,"author":{"gitId":"soloplxya"},"content":"                Files.createDirectories(Path.of(directoryPath));","lastModifiedDate":"2022-02-18"},{"lineNumber":156,"author":{"gitId":"soloplxya"},"content":"                File dukeFile \u003d new File(filePath);","lastModifiedDate":"2022-02-18"},{"lineNumber":157,"author":{"gitId":"soloplxya"},"content":"                if (!dukeFile.createNewFile()) {","lastModifiedDate":"2022-02-05"},{"lineNumber":158,"author":{"gitId":"soloplxya"},"content":"                    throw new IOException();","lastModifiedDate":"2022-02-17"},{"lineNumber":159,"author":{"gitId":"soloplxya"},"content":"                }","lastModifiedDate":"2022-02-05"},{"lineNumber":160,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-02-05"},{"lineNumber":161,"author":{"gitId":"soloplxya"},"content":"                if (!isFileExists) {","lastModifiedDate":"2022-02-05"},{"lineNumber":162,"author":{"gitId":"soloplxya"},"content":"                    File dukeFile \u003d new File(filePath);","lastModifiedDate":"2022-02-18"},{"lineNumber":163,"author":{"gitId":"soloplxya"},"content":"                    if (!dukeFile.createNewFile()) {","lastModifiedDate":"2022-02-05"},{"lineNumber":164,"author":{"gitId":"soloplxya"},"content":"                        throw new IOException();","lastModifiedDate":"2022-02-17"},{"lineNumber":165,"author":{"gitId":"soloplxya"},"content":"                    }","lastModifiedDate":"2022-02-05"},{"lineNumber":166,"author":{"gitId":"soloplxya"},"content":"                }","lastModifiedDate":"2022-02-05"},{"lineNumber":167,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":168,"author":{"gitId":"soloplxya"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":169,"author":{"gitId":"soloplxya"},"content":"            throw new StorageException(\"DIRECTORY_CREATION_ERROR\");","lastModifiedDate":"2022-02-17"},{"lineNumber":170,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":171,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":172,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":173,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":174,"author":{"gitId":"soloplxya"},"content":"     * Returns a string that is shown to the user when the application first launches.","lastModifiedDate":"2022-02-15"},{"lineNumber":175,"author":{"gitId":"soloplxya"},"content":"     * It contains all the tasks that have been saved in duke from the user\u0027s previous","lastModifiedDate":"2022-02-15"},{"lineNumber":176,"author":{"gitId":"soloplxya"},"content":"     * interactions with the Duke GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":177,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":178,"author":{"gitId":"soloplxya"},"content":"     * @return A string containing all the list of tasks that has been stored in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":179,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":180,"author":{"gitId":"soloplxya"},"content":"    public String getStorageTasks() {","lastModifiedDate":"2022-02-01"},{"lineNumber":181,"author":{"gitId":"soloplxya"},"content":"        String tasksPreview \u003d tasks.size() \u003e 0 ? TaskList.listTasks(tasks) : \"-\";","lastModifiedDate":"2022-02-17"},{"lineNumber":182,"author":{"gitId":"soloplxya"},"content":"        return \"Here is the list of tasks we have saved! \\n\"","lastModifiedDate":"2022-02-17"},{"lineNumber":183,"author":{"gitId":"soloplxya"},"content":"                + tasksPreview;","lastModifiedDate":"2022-02-17"},{"lineNumber":184,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":185,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-23"},{"lineNumber":186,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":186}},{"path":"src/main/java/duke/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke;","lastModifiedDate":"2022-01-23"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"/** Represents a TextUI Object that contains the automated responses","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":" * that Duke will return the user depending on their input.","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"public class TextUi {","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    private static final String LOGO \u003d \" ____        _\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"            + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a ui object.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    public TextUi() {}","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * Method that greets the user when the file first runs.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public String greeting() {","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        return \"Konnichiwassup from\\n\" + LOGO + showDivider() + \"\\nWhat do you need help with?\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * Method that shows a divider to the user.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    public String showDivider() {","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"        return DIVIDER;","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     * Method that says bye to the user.","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"    public String sayBye() {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        return \"Sayonara! Hope to see you again soon!\";","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"     * Method that informs the user when a task has been deleted from the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * @param preview Task that has been deleted from the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * @return Message that informs the user of a successful deletion of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    public String showDeleteMsg(Task preview) {","lastModifiedDate":"2022-02-06"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"        return \"Otsukaresamadeshita! You have finally completed one task.\\n\"","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"                + preview;","lastModifiedDate":"2022-02-06"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     * Method that informs the user when a task has been added to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"     * @param taskListSize Updated number of tasks. (Inclusive of the new task added)","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"     * @return Message that informs the user of a successful addition of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"    public String showAddMsg(Integer taskListSize, Task preview) {","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"        return \"We have added \" + preview + \" to the list. \\n\" + \"You now have a total of \"","lastModifiedDate":"2022-02-17"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"                + taskListSize + \" tasks in your list! Subarashii!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"     * Method that informs the user when Duke has marked a task as completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"     * @param preview Task that has been marked as completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"     * @return Message that informs the user that a task has been marked as completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"    public String showMarkDoneMsg(Task preview) {","lastModifiedDate":"2022-02-06"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"        return \"Sugoi! I have marked this task as done!\\n\"","lastModifiedDate":"2022-02-06"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"                + preview;","lastModifiedDate":"2022-02-06"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"     * Method that informs the user when Duke has unmarked a task as not completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"     * @param preview Task that has been unmarked as not completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"     * @return Message that informs the user that a task has been unmarked as not completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"    public String showMarkUndoneMsg(Task preview) {","lastModifiedDate":"2022-02-06"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"        return \"Daijoubu! I have unmarked this task for you!\\n\"","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"                + preview;","lastModifiedDate":"2022-02-06"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"     * Method that displays all tasks that matches the user\u0027s description of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"     * @param tasks List of tasks found.","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"     * @return Message that shows the user all the tasks that the program has found.","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"    public String showFindTaskMsg(String tasks) {","lastModifiedDate":"2022-02-06"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"        return \"This is what we found! \\n\" + tasks;","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"     * Method that warns the user that their task list is empty.","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"     * @return A string indicating that the user\u0027s task list is empty.","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"    public String showEmptyMsg() {","lastModifiedDate":"2022-02-06"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"        return \"Empty Much!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"     * Method that tells the user that their most recent command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"     * @param action The type of command that has been undone. (For eg. Add, Delete ... )","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"     * @return A string telling the user the task that has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"    public String showUndoMsg(String action) {","lastModifiedDate":"2022-02-08"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"        return action + \" has been undone!\";","lastModifiedDate":"2022-02-08"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"soloplxya":115}},{"path":"src/main/java/duke/commands/AddDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows user to add a deadline task","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" * to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"public class AddDeadline extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    private final String description;","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    private final String date;","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * Initialize an AddDeadline Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * @param date Duedate of the deadline task.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public AddDeadline(String description, String date) {","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after a successful execution of an add deadline command.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"     * @return Message after a deadline has successfully been added to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            if (description.equals(\"\") || date.equals(\"\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"                throw new DukeException(\"Deadline command is invalid!\");","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"            Task deadline \u003d new Deadline(description, date);","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"            return TaskList.addTask(deadline);","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of an AddDeadline Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * Throws a DukeException when there errors undoing the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     * @return Success message after an AddDeadline command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the program is unable to undo the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"        return TaskList.deleteLastTask();","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":62}},{"path":"src/main/java/duke/commands/AddEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows user to add an event task","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" * to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"public class AddEvent extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    private final String description;","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    private final String dateTime;","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * Initialize an AddEvent Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * @param dateTime Due date of the event task.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public AddEvent(String description, String dateTime) {","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after a successful execution of an add event command.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"     * @return Message after an event has successfully been added to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            if (description.equals(\"\") || dateTime.equals(\"\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"                throw new DukeException(\"Event command is invalid!\");","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"            Task event \u003d new Event(description, dateTime);","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"            return TaskList.addTask(event);","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of an AddEvent Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * Throws a DukeException when there errors undoing the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     * @return Success message after an AddEvent command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the program is unable to undo the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"        return TaskList.deleteLastTask();","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":62}},{"path":"src/main/java/duke/commands/AddToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows user to add a todo task","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" * to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"public class AddToDo extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    private final String taskDetails;","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * Initialize the AddToDo Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     * @param taskDetails Description of task.","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    public AddToDo(String taskDetails) {","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        this.taskDetails \u003d taskDetails;","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after a successful execution of an add to-do command.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * @return Message after a to-do has successfully been added to the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            if (taskDetails.equals(\"\")) {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"                throw new DukeException(\"Todo command is invalid!\");","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"            Task todo \u003d new Todo(taskDetails);","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"            return TaskList.addTask(todo);","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of an AddTodo Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"     * Throws a DukeException when there errors undoing the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     * @return Success message after an AddTodo command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the program is unable to undo the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"        return TaskList.deleteLastTask();","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":60}},{"path":"src/main/java/duke/commands/Bye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.UndoException;","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows users to exit the duke chat bot.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"public class Bye extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     * Returns a string that indicates the exiting of the Duke program.","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"     * The JavaFX program will be terminated upon receiving this \"bye\" message.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @return An exit message to signal the termination of the program.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        return \"bye\";","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Returns an UndoException since a bye command cannot be undone.","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @throws UndoException since the program is unable to undo a list command.","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     **/","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws UndoException {","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        throw new UndoException(\"NOTHING\");","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":36}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" * Class that handles the different types of commands that the user keys in.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     * Returns nothing.","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"     * This method will be overridden in its child classes.","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"     * to perform different command actions.","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if there are issues with executing a particular command.","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    public abstract String execute(TaskList taskList, TextUi ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     * Returns nothing.","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * This method will overridden in the AddDeadline, AddEvent, AddTodo,","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Delete, Mark, Unmark, Undo classes so as to undo the specific","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * actions that these classes have done.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if there are issues with undoing a particular command.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    public abstract String undo(TaskList taskList) throws DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":34}},{"path":"src/main/java/duke/commands/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows users to delete a task from the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"public class Delete extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    private final Integer taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private Task deletedTask;","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * Initialize a Delete Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @param taskId The index of the task to be deleted.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    public Delete(Integer taskId) {","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"        this.taskId \u003d taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after a successful deletion of a task in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @return A success message after a task is deleted from the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"            deletedTask \u003d taskList.getTasks().get(taskId - 1);","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            return TaskList.deleteTask(taskId);","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of a Delete Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * Throws a DukeException when there errors undoing the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"     * @return Success message after a Delete Command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if the program is unable to undo the command.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"        return TaskList.addTaskBack(taskId, deletedTask);","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":55}},{"path":"src/main/java/duke/commands/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.UndoException;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows users to find tasks","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * based on the input that the user has keyed into Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" * */","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"public class Find extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private final String query;","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * Initialize A Find Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @param query A search query that the user has keyed in.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    public Find(String query) {","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"        this.query \u003d query;","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after the system has queried the task list given the search query.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @return A success message after the queried results are retrieved from the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        return TaskList.findTask(query);","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"     * Returns an UndoException since a find command cannot be undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException since the program is unable to undo a find command.","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"        throw new UndoException(\"NOTHING\");","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":49}},{"path":"src/main/java/duke/commands/List.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.UndoException;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" * Represents a command that lists tasks that have been stored in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"public class List extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string containing the list of items that are present in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * @return A string containing the list of tasks that is stored in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        return TaskList.listTasks();","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Returns an UndoException since a list command cannot be undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @throws UndoException since the program is unable to undo a list command.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     **/","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws UndoException {","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        throw new UndoException(\"NOTHING\");","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":36}},{"path":"src/main/java/duke/commands/Mark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows users to mark a task at a","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" * specific index in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"public class Mark extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    private final Integer taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"     * Initialize a Mark Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Index of the task to be marked.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"    public Mark(Integer taskId) {","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"        this.taskId \u003d taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     * Returns a string after a task has successfully been marked as completed","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Returns an error message if there were issues faced when marking","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * a task as completed in task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * @return Message after a task has successfully been marked as completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            return TaskList.markTask(taskId, true);","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of a mark Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * The task list will be reverted to the state where the task was unmarked.","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     * @return Message after a mark command has been successfully undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"            return TaskList.markTask(taskId, false);","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"soloplxya":61}},{"path":"src/main/java/duke/commands/Undo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-08"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.UndoException;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows the user to undo the most recent command.","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Commands that can be undone: AddDeadline, AddEvent, AddTodo, Delete, Mark, Unmark.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"public class Undo extends Command {","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private Command previousCommand;","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * Instantiates an undo command.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @param previousCommand The command that the system needs to undo.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    public Undo(Command previousCommand) {","lastModifiedDate":"2022-02-08"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"        this.previousCommand \u003d previousCommand;","lastModifiedDate":"2022-02-08"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after the most recent command has been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Throws an error if there are no previous commands left to undo.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @return A success message after a particular task has successfully been undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        if (previousCommand !\u003d null) {","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            return previousCommand.undo(taskList);","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        throw new UndoException(\"EMPTY_PREVIOUS\");","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"     * Returns an UndoException since a undo command cannot be undone.","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * @throws UndoException since the program is unable to undo a list command.","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     **/","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) throws UndoException {","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"        throw new UndoException(\"NOTHING\");","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"soloplxya":53}},{"path":"src/main/java/duke/commands/Unmark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.commands;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":" * Represents a command that allows users to unmark duke.tasks in the task list","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"public class Unmark extends Command {","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    private final Integer taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"     * Initialize an unmark Command","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * @param taskId index of the task to be marked","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    public Unmark(Integer taskId) {","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"        this.taskId \u003d taskId;","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     * Returns a string after a task has successfully been unmarked as not completed","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     * in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * Returns an error message if there were issues faced when un-marking","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * a task as not completed in task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * @param ui A UI object that is used to print the System\u0027s response.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @param storage A storage object that is able to read and write to storage file.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * @return Message after a task has successfully been unmarked as not completed.","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    public String execute(TaskList taskList, TextUi ui, Storage storage) {","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            return TaskList.markTask(taskId, false);","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after a successful undo of a Unmark Command.","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * The task list will be reverted to the state where the task was marked.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     * @param taskList A taskList containing all existing tasks in Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"     * @return Message after an un-mark command has been successfully undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    public String undo(TaskList taskList) {","lastModifiedDate":"2022-02-08"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"            return TaskList.markTask(taskId, true);","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"soloplxya":59}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/** An exception that is thrown when there are problems running","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" *  the Duke program.","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a DukeException.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     * @param errorMessage The detail message.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"     * The detail message is saved for later retrieval by the Throwable.getMessage() method.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * Default constructor that instantiates a DukeException without an error message.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    public DukeException() {}","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     * Returns the detail message of the error that has occurred in the program.","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * @return Detail message of a DukeException.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-01-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    public String toString() {","lastModifiedDate":"2022-01-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        return this.getMessage();","lastModifiedDate":"2022-01-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"soloplxya":32}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents an exception that will be thrown when the user keys in an invalid command.","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" **/","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"     * Initializes an InvalidCommandException.","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"        super(\"Sumimasen! I don\u0027t recognize this command. Please try again!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"soloplxya":13}},{"path":"src/main/java/duke/exceptions/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents an exception that is thrown when there are errors when parsing","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" * the storage file.","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"public class StorageException extends DukeException {","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    private final String errorCode;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a StorageException.","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    public StorageException(String errorCode) {","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"        this.errorCode \u003d errorCode;","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * Returns the detail message of the error that has occurred when trying to","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * read or write from the storage file.","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * @return Detail message of an StorageException.","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public String getMessage() {","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"        switch (errorCode) {","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"        case \"DIRECTORY_CREATION_ERROR\":","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Error with directory initialization!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        case \"FILE_NOT_FOUND\":","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Nani?? Your file cannot be found!\"","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"                    + \" Please make sure it exists in the correct folder!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        case \"FILE_READ_ERROR\":","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Sumimasen! We had some problems reading your file!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            assert false : errorCode;","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        return message;","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"soloplxya":42}},{"path":"src/main/java/duke/exceptions/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents a task exception that is thrown when there are errors","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" * when processing tasks that the users have keyed into Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"public class TaskException extends DukeException {","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    private final String errorCode;","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     * Initializes a Task Exception.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     * @param errorCode Takes in an errorCode that will determine the message","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"     * that gets printed out.","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    public TaskException(String errorCode) {","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"        this.errorCode \u003d errorCode;","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * Returns the detail message of the error that has occurred when processing","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * the tasks.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     * @return Detail message of a TaskException.","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-06"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    public String getMessage() {","lastModifiedDate":"2022-02-06"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-02-06"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"        switch (errorCode) {","lastModifiedDate":"2022-02-06"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        case \"INVALID_TASKID\":","lastModifiedDate":"2022-02-06"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Task ID has to be an integer!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        case \"UNFOUND_TASK\":","lastModifiedDate":"2022-02-06"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Task cannot be found within the task list! Please fix your machigai!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        case \"UNDONE\":","lastModifiedDate":"2022-02-06"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"This task has yet to be done!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        case \"DONE\":","lastModifiedDate":"2022-02-06"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"This task has already been marked done!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"        case \"INVALID_DATE_FORMAT\":","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"The date format parsed is incorrect!\"","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"                    + \" It should be dd-MM-yyyy or dd-MM-yyyy HH:mm!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"        default:","lastModifiedDate":"2022-02-06"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"            assert false : errorCode;","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"        return message;","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"soloplxya":51}},{"path":"src/main/java/duke/exceptions/UndoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-08"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents an exception that is thrown when there are errors when processing","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" * the undo command.","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"public class UndoException extends DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    private final String errorCode;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     * Instantiates an UndoException","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    public UndoException(String errorCode) {","lastModifiedDate":"2022-02-08"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"        this.errorCode \u003d errorCode;","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * Returns the detail message of the error that has occurred when undoing","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * a command that the user has keyed in.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * @return Detail message of an UndoException.","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public String getMessage() {","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"        switch (errorCode) {","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"        case \"NOTHING\":","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"Nothing to undo here!\";","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        case \"EMPTY_PREVIOUS\":","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"            message \u003d \"No previous commands can be found!\";","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"            break;","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        default:","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            assert false : errorCode;","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        return message;","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-08"}],"authorContributionMap":{"soloplxya":38}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2022-02-14"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2022-02-14"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-02-14"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"     * Initialize a DialogBox with a text label and a corresponding image.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"     * @param text Text label.","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"     * @param img Image corresponding to the user type.","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"        Circle clip \u003d new Circle(40, 40, 40);","lastModifiedDate":"2022-02-14"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"        displayPicture.setClip(clip);","lastModifiedDate":"2022-02-14"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"    private void flip() {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"     * Method that alters the design of the dialog box depending on the type of user.","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"     * @param isUser Boolean to indicate if the person is a user or Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"    private void setDesign(boolean isUser) {","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        //@@author Tiffanylin21","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        //Reused from : https://github.com/Tiffanylin21/ip/blob/master/src/main/java/duke/view/DialogBox.java","lastModifiedDate":"2022-02-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String backgroundColor \u003d isUser ? \"#e75480\" : \"#f0efeb\";","lastModifiedDate":"2022-02-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String textColor \u003d isUser ? \"#FFF\" : \"#000\";","lastModifiedDate":"2022-02-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Color textColorFill \u003d Color.web(textColor);","lastModifiedDate":"2022-02-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Background dukeBackground \u003d new Background(new BackgroundFill(","lastModifiedDate":"2022-02-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                Color.web(backgroundColor), new CornerRadii(20), new Insets(5, 3, 3, 2)));","lastModifiedDate":"2022-02-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.dialog.setBackground(dukeBackground);","lastModifiedDate":"2022-02-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.dialog.setTextFill(textColorFill);","lastModifiedDate":"2022-02-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Method that returns the dialog box of the user.","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * On the JavaFX application, it is the user on the right of the screen.","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @param text Text label.","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @param img User image.","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @return User dialog box.","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        DialogBox box \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        box.setDesign(true);","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return box;","lastModifiedDate":"2022-02-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Method that returns the dialog box of Duke.","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * On the JavaFX application, it is the user on the left of the screen.","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param text Text label.","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param img Duke\u0027s image.","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @return Duke\u0027s dialog box.","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        db.flip();","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        db.setDesign(false);","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return db;","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":71,"-":41}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"public class Launcher {","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    private static final String directoryPath \u003d \"./data\";","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    private static final String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    private Duke duke \u003d new Duke(directoryPath, filePath);","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * Main entry point for the Duke JavaFX application.","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     * @param stage Top-level JavaFX container.","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2022-02-05"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"            stage.setResizable(false);","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"            stage.show();","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":40}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"import javafx.util.Duration;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    private final TextUi ui \u003d new TextUi();","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    private final Storage storage \u003d new Storage();","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"     * Controller for duke.gui.MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"        String previousTasks \u003d storage.getStorageTasks();","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"        String welcome \u003d ui.greeting();","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcome, dukeImage),","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"                DialogBox.getDukeDialog(previousTasks, dukeImage));","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * Duke\u0027s reply and then appends them to the dialog container.","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     * Clears the user input after processing.","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"        if (response.equals(\"bye\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"            String byeMessage \u003d ui.sayBye();","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"                    DialogBox.getDukeDialog(byeMessage, dukeImage)","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"            );","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(0.5));","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"            pause.setOnFinished(event -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"                Platform.exit();","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"                System.exit(0);","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"            });","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"            pause.play();","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"            );","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"            userInput.clear();","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":79}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Represents a deadline task. A deadline is something that needs to be completed by a","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" * specific date.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-14"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-14"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter OUTPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter OUTPUT_DATETIME \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yy HH:mm\");","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter INPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter INPUT_DATETIME \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-14"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    protected LocalDate by;","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    protected LocalDateTime byTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a new Deadline object.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * An exception is thrown if the program fails to parse the date/datetime provided.","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the deadline. (E.g. company meeting)","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * @param by Date/Datetime of the deadline.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @throws TaskException if the program is unable to parse the date/datetime field.","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    public Deadline(String description, String by) throws TaskException {","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"        super(description);","lastModifiedDate":"2022-01-14"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        if (isDateFormat(by)) {","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            this.by \u003d LocalDate.parse(by, INPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        } else if (isDateTimeFormat(by)) {","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"            this.byTime \u003d LocalDateTime.parse(by, INPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        } else if (isFileDateFormat(by)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            this.by \u003d LocalDate.parse(by, OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        } else if (isFileDatetimeFormat(by)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"            this.byTime \u003d LocalDateTime.parse(by, OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"            throw new TaskException(\"INVALID_DATE_FORMAT\");","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-14"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-14"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a deadline to its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"     * This format is what you will see in the storage file stored in the data folder.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a deadline with its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-01-22"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"    public String toFileFormat() {","lastModifiedDate":"2022-01-22"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"        if (by !\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"            return \"D\" + super.toFileFormat() + \",\" + formatDate(by);","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"            return \"D\" + super.toFileFormat() + \",\" + formatDateTime(byTime);","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-22"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-22"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a deadline to its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"     * This format is what will be shown to the user on the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a deadline with its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-01-14"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"    public String toString() {","lastModifiedDate":"2022-01-14"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"        if (this.by !\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + formatDate(by) + \")\";","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + formatDateTime(byTime) + \")\";","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and check if its in input date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDate library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"     * @param dateString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if a string is in input date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"    private boolean isDateFormat(String dateString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"            LocalDate.parse(dateString, INPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-01-23"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and check if its in output date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDate library is unable to parse the string.","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"     * @param dateString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if a string is in output date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"    private boolean isFileDateFormat(String dateString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"            LocalDate.parse(dateString, OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-02-17"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and checks if its in input dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDateTime library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"     * @param dateTimeString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if the string is in input dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"    private boolean isDateTimeFormat(String dateTimeString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"            LocalDateTime.parse(dateTimeString, INPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-01-23"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-02-17"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-14"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and checks if its in output dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDateTime library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"     * @param dateTimeString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if the string is in output dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"    private boolean isFileDatetimeFormat(String dateTimeString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"            LocalDateTime.parse(dateTimeString, OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-02-17"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-01-23"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-14"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"     * Returns a string representing a formatted date-time given a LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"     * @param dateTime LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"     * @return String format of the LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"    public String formatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-01-23"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"        return dateTime.format(OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"     * Returns a string representing a formatted date given a LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"     * @param date LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"     * @return String format of the LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"    public String formatDate(LocalDate date) {","lastModifiedDate":"2022-01-23"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"        return date.format(OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":152,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-23"},{"lineNumber":153,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"soloplxya":153}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":" * Represents an event task. An event is something that happens on a specific date.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter OUTPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter OUTPUT_DATETIME \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yy HH:mm\");","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter INPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    private static final DateTimeFormatter INPUT_DATETIME \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    protected LocalDate at;","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    protected LocalDateTime atTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a new Event object.","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     * An exception is thrown if the program fails to parse the date/datetime provided.","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the event. (E.g. company meeting)","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"     * @param at Date/Datetime of the event.","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"     * @throws TaskException if the program is unable to parse the date/datetime field.","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    public Event(String description, String at) throws TaskException {","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"        super(description);","lastModifiedDate":"2022-01-14"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        if (isDateFormat(at)) {","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"            this.at \u003d LocalDate.parse(at, INPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"        } else if (isDateTimeFormat(at)) {","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"            this.atTime \u003d LocalDateTime.parse(at, INPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        } else if (isFileDatetimeFormat(at)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"            this.atTime \u003d LocalDateTime.parse(at, OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"        } else if (isFileDateFormat(at)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"            this.at \u003d LocalDate.parse(at, OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"            throw new TaskException(\"INVALID_DATE_FORMAT\");","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-14"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-14"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a event to its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * This format is what you will see in the storage file stored in the data folder.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a deadline with its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-01-22"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"    public String toFileFormat() {","lastModifiedDate":"2022-01-22"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"        if (at !\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"            return \"E\" + super.toFileFormat() + \",\" + formatDate(at);","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"            return \"E\" + super.toFileFormat() + \",\" + formatDateTime(atTime);","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-22"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-22"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"     * Method that converts an event to its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"     * This format is what will be shown to the user on the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a deadline with its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-01-14"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"    public String toString() {","lastModifiedDate":"2022-01-14"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"        if (this.at !\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + formatDate(at) + \")\";","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + formatDateTime(atTime) + \")\";","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and check if its in input date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDate library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"     * @param dateString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if a string is in input date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"    private boolean isDateFormat(String dateString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"            LocalDate.parse(dateString, INPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-01-23"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and check if its in output date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDate library is unable to parse the string.","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"     * @param dateString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if a string is in output date format.","lastModifiedDate":"2022-02-17"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"    private boolean isFileDateFormat(String dateString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"            LocalDate.parse(dateString, OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-02-17"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and checks if its in input dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDateTime library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"     * @param dateTimeString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if the string is in input dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"    private boolean isDateTimeFormat(String dateTimeString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"            LocalDateTime.parse(dateTimeString, INPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-01-23"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-23"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-02-17"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"     * A method that takes in a string and checks if its in output dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"     * Exception will be thrown if LocalDateTime library is unable to parse the string.","lastModifiedDate":"2022-02-17"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"     * @param dateTimeString Date/Datetime of the task in string form.","lastModifiedDate":"2022-02-17"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"     * @return A boolean that indicates if the string is in output dateTime format.","lastModifiedDate":"2022-02-17"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"    private boolean isFileDatetimeFormat(String dateTimeString) {","lastModifiedDate":"2022-02-17"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"            LocalDateTime.parse(dateTimeString, OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"            return true;","lastModifiedDate":"2022-02-17"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"            return false;","lastModifiedDate":"2022-01-23"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-14"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"     * Returns a string representing a formatted date-time given a LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"     * The date will be formatted in dd-MMM-yyyy HH:mm format.","lastModifiedDate":"2022-02-17"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"     * @param dateTime LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"     * @return String format of the LocalDateTime object.","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"    public String formatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-01-23"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"        return dateTime.format(OUTPUT_DATETIME);","lastModifiedDate":"2022-02-17"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"     * Returns a string representing a formatted date given a LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"     * The date will be formatted in dd-MMM-yyyy format.","lastModifiedDate":"2022-02-17"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"     * @param date LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"     * @return String format of the LocalDate object.","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":"    public String formatDate(LocalDate date) {","lastModifiedDate":"2022-01-23"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"        return date.format(OUTPUT_DATE);","lastModifiedDate":"2022-02-17"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-14"}],"authorContributionMap":{"soloplxya":151}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents a task object. Parent class of Event, Deadline and To-do objects.","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"public class Task {","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"    protected String description;","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     * Initialize a Task object.","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    public Task(String description) {","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     * Method that returns the statusIcon of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     * This method will be used in converting the task to UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"     * @return A string marked with X if the task has been completed, otherwise \" \".","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * Method that returns the status number of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     * This method will be used in converting the task to file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"     * @return A string marked with 1 if the task has been completed, other wise 0.","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"    public String getStatusNumber() {","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"        return (isDone ? \"1\" : \"0\");","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"     * Method that marks a task as done.","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    public void markIsDone() {","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * Method that marks a task as undone.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"    public void markUndone() {","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a task to its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"     * This format is what you will see in the storage file stored in the data folder.","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"     * @return A string that represents a tasks in its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"    public String toFileFormat() {","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"        return \",\" + getStatusNumber() + \",\" + this.description;","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a task to its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"     * This format is what will be shown to the user on the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a task with its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"     * Returns a string containing the description of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"     * @return String description of a task.","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"        return this.description;","lastModifiedDate":"2022-02-15"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"soloplxya":79}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import duke.Storage;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"import duke.TextUi;","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.UndoException;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"public class TaskList {","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    private static final TextUi ui \u003d new TextUi();","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a taskList with a list of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @param tasks list of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2022-01-23"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        TaskList.tasks \u003d tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a taskList","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    public TaskList() { }","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after a successful deletion of a task from the taskList","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"     * If the taskId is invalid, an exception will be thrown.","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Index of task.","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException If the task cannot be found in the list.","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"    public static String deleteTask(int taskId) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"        Task preview \u003d tasks.get(taskId - 1);","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        tasks.remove(taskId - 1);","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"        Storage.writeToDukeFile();","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"        return ui.showDeleteMsg(preview);","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":44,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"soloplxya"},"content":"     * Returns a success string after marking a particular task in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"soloplxya"},"content":"     * If the taskId provided to the function is invalid, a TaskException will be thrown.","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Index of task.","lastModifiedDate":"2022-02-15"},{"lineNumber":48,"author":{"gitId":"soloplxya"},"content":"     * @param mark Boolean indicating whether to mark the task as done.","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException If the task has yet to be done.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"soloplxya"},"content":"    public static String markTask(int taskId, boolean mark) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"soloplxya"},"content":"        Task toSet \u003d tasks.get(taskId - 1);","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"soloplxya"},"content":"        if (mark) {","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"soloplxya"},"content":"            if (!toSet.isDone) {","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"soloplxya"},"content":"                toSet.markIsDone();","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"soloplxya"},"content":"                tasks.set(taskId - 1, toSet);","lastModifiedDate":"2022-01-23"},{"lineNumber":57,"author":{"gitId":"soloplxya"},"content":"                Storage.writeToDukeFile();","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"soloplxya"},"content":"                return ui.showMarkDoneMsg(toSet);","lastModifiedDate":"2022-02-06"},{"lineNumber":59,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"soloplxya"},"content":"                throw new TaskException(\"DONE\");","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":62,"author":{"gitId":"soloplxya"},"content":"        } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":63,"author":{"gitId":"soloplxya"},"content":"            if (toSet.isDone) {","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"soloplxya"},"content":"                toSet.markUndone();","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"soloplxya"},"content":"                tasks.set(taskId - 1, toSet);","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"soloplxya"},"content":"                Storage.writeToDukeFile();","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"soloplxya"},"content":"                return ui.showMarkUndoneMsg(toSet);","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"soloplxya"},"content":"            } else {","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"soloplxya"},"content":"                throw new TaskException(\"UNDONE\");","lastModifiedDate":"2022-02-06"},{"lineNumber":70,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":71,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"soloplxya"},"content":"     * Method that takes in a task and adds it to tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"soloplxya"},"content":"     * @param task task object","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException if unable to add task to tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"soloplxya"},"content":"    public static String addTask(Task task) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"soloplxya"},"content":"        tasks.add(task);","lastModifiedDate":"2022-01-23"},{"lineNumber":81,"author":{"gitId":"soloplxya"},"content":"        Storage.writeToDukeFile();","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"soloplxya"},"content":"        return ui.showAddMsg(tasks.size(), task);","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":85,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"soloplxya"},"content":"     * Returns a string displaying all the current tasks in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"soloplxya"},"content":"     * Will return an empty message if there are no tasks in the task list.","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"soloplxya"},"content":"    public static String listTasks() {","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"soloplxya"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-23"},{"lineNumber":91,"author":{"gitId":"soloplxya"},"content":"            return ui.showEmptyMsg();","lastModifiedDate":"2022-02-06"},{"lineNumber":92,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":93,"author":{"gitId":"soloplxya"},"content":"        StringBuilder listOfTasks \u003d new StringBuilder();","lastModifiedDate":"2022-01-23"},{"lineNumber":94,"author":{"gitId":"soloplxya"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":95,"author":{"gitId":"soloplxya"},"content":"            listOfTasks.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2022-01-23"},{"lineNumber":96,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":97,"author":{"gitId":"soloplxya"},"content":"        return listOfTasks.toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":99,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":100,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"soloplxya"},"content":"     * Returns a string displaying all the tasks provided by the tasks arraylist.","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"soloplxya"},"content":"     * Will return an empty message if there are no tasks in the tasks list.","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"soloplxya"},"content":"     * @param tasks An arraylist of tasks.","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"soloplxya"},"content":"    public static String listTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"soloplxya"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-23"},{"lineNumber":107,"author":{"gitId":"soloplxya"},"content":"            return ui.showEmptyMsg();","lastModifiedDate":"2022-02-06"},{"lineNumber":108,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":109,"author":{"gitId":"soloplxya"},"content":"        StringBuilder listOfTasks \u003d new StringBuilder();","lastModifiedDate":"2022-01-23"},{"lineNumber":110,"author":{"gitId":"soloplxya"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":111,"author":{"gitId":"soloplxya"},"content":"            listOfTasks.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2022-01-23"},{"lineNumber":112,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":113,"author":{"gitId":"soloplxya"},"content":"        return listOfTasks.toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":114,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":115,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":116,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"soloplxya"},"content":"     * Returns the size of the task list that is saved in the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"soloplxya"},"content":"     * @return Integer that indicates the size/length of tasks.","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"soloplxya"},"content":"    public static Integer getTaskSize() {","lastModifiedDate":"2022-01-23"},{"lineNumber":121,"author":{"gitId":"soloplxya"},"content":"        return tasks.size();","lastModifiedDate":"2022-01-23"},{"lineNumber":122,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":123,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":124,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"soloplxya"},"content":"     * Returns a string of tasks that matches the keyword that the user has inputted into the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"soloplxya"},"content":"     * Returns an empty message if no matching tasks can be found.","lastModifiedDate":"2022-02-15"},{"lineNumber":127,"author":{"gitId":"soloplxya"},"content":"     * @param keyWord task keyword","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"soloplxya"},"content":"    public static String findTask(String keyWord) {","lastModifiedDate":"2022-02-01"},{"lineNumber":130,"author":{"gitId":"soloplxya"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"soloplxya"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"soloplxya"},"content":"            String taskDescription \u003d task.getDescription().toLowerCase(Locale.ROOT).trim();","lastModifiedDate":"2022-02-17"},{"lineNumber":133,"author":{"gitId":"soloplxya"},"content":"            String keyWordDescription \u003d keyWord.toLowerCase(Locale.ROOT);","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"soloplxya"},"content":"            if (taskDescription.contains(keyWordDescription)) {","lastModifiedDate":"2022-02-17"},{"lineNumber":135,"author":{"gitId":"soloplxya"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"soloplxya"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"soloplxya"},"content":"        return ui.showFindTaskMsg(listTasks(matchingTasks));","lastModifiedDate":"2022-02-06"},{"lineNumber":139,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":142,"author":{"gitId":"soloplxya"},"content":"     * Returns the task list that is stored in the system.","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"soloplxya"},"content":"     * @return an arraylist of tasks","lastModifiedDate":"2022-02-08"},{"lineNumber":144,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":145,"author":{"gitId":"soloplxya"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-02-08"},{"lineNumber":146,"author":{"gitId":"soloplxya"},"content":"        return tasks;","lastModifiedDate":"2022-02-08"},{"lineNumber":147,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":148,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":149,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":150,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after the successful undo of a delete command.","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"soloplxya"},"content":"     * If there are no more commands to undo, it will throw an UndoException.","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"soloplxya"},"content":"     * Additionally, it will throw a DukeException if there are problems writing to the Duke file.","lastModifiedDate":"2022-02-15"},{"lineNumber":153,"author":{"gitId":"soloplxya"},"content":"     * @param taskId Index of the task.","lastModifiedDate":"2022-02-15"},{"lineNumber":154,"author":{"gitId":"soloplxya"},"content":"     * @param removedTask The type of task that is removed.","lastModifiedDate":"2022-02-15"},{"lineNumber":155,"author":{"gitId":"soloplxya"},"content":"     * @return A message stating the successful undo of a delete command.","lastModifiedDate":"2022-02-15"},{"lineNumber":156,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException When there are problems writing to duke file or there are","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"soloplxya"},"content":"     * issues with undoing the previous command.","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":159,"author":{"gitId":"soloplxya"},"content":"    public static String addTaskBack(Integer taskId, Task removedTask) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":160,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":161,"author":{"gitId":"soloplxya"},"content":"            tasks.add(taskId - 1, removedTask);","lastModifiedDate":"2022-02-08"},{"lineNumber":162,"author":{"gitId":"soloplxya"},"content":"            Storage.writeToDukeFile();","lastModifiedDate":"2022-02-08"},{"lineNumber":163,"author":{"gitId":"soloplxya"},"content":"            return ui.showUndoMsg(\"Delete\");","lastModifiedDate":"2022-02-08"},{"lineNumber":164,"author":{"gitId":"soloplxya"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":165,"author":{"gitId":"soloplxya"},"content":"            throw new UndoException(\"EMPTY_PREVIOUS\");","lastModifiedDate":"2022-02-08"},{"lineNumber":166,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":167,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":168,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":169,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":170,"author":{"gitId":"soloplxya"},"content":"     * Returns a success message after the successful undo of a todo/event/deadline command.","lastModifiedDate":"2022-02-15"},{"lineNumber":171,"author":{"gitId":"soloplxya"},"content":"     *  f there are no more commands to undo, it will throw an UndoException.","lastModifiedDate":"2022-02-15"},{"lineNumber":172,"author":{"gitId":"soloplxya"},"content":"     * Additionally, it will throw a DukeException if there are problems writing to the Duke file.","lastModifiedDate":"2022-02-15"},{"lineNumber":173,"author":{"gitId":"soloplxya"},"content":"     * @return a message stating the successful undo of an add command.","lastModifiedDate":"2022-02-15"},{"lineNumber":174,"author":{"gitId":"soloplxya"},"content":"     * @throws DukeException when there are problems writing to duke file or there are issues with","lastModifiedDate":"2022-02-15"},{"lineNumber":175,"author":{"gitId":"soloplxya"},"content":"     * undoing the previous command.","lastModifiedDate":"2022-02-15"},{"lineNumber":176,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":177,"author":{"gitId":"soloplxya"},"content":"    public static String deleteLastTask() throws DukeException {","lastModifiedDate":"2022-02-15"},{"lineNumber":178,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":179,"author":{"gitId":"soloplxya"},"content":"            tasks.remove(tasks.size() - 1);","lastModifiedDate":"2022-02-08"},{"lineNumber":180,"author":{"gitId":"soloplxya"},"content":"            Storage.writeToDukeFile();","lastModifiedDate":"2022-02-08"},{"lineNumber":181,"author":{"gitId":"soloplxya"},"content":"            return ui.showUndoMsg(\"Add\");","lastModifiedDate":"2022-02-08"},{"lineNumber":182,"author":{"gitId":"soloplxya"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":183,"author":{"gitId":"soloplxya"},"content":"            throw new UndoException(\"EMPTY_PREVIOUS\");","lastModifiedDate":"2022-02-08"},{"lineNumber":184,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":185,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":186,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":187,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"soloplxya":187}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"/**","lastModifiedDate":"2022-02-15"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":" * Represents a todo task. A task that needs to be done but has no specific deadline.","lastModifiedDate":"2022-02-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":" */","lastModifiedDate":"2022-02-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"     * Instantiates a new To-do by taking in a description.","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"     * @param description Description of the todo.","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"        super(description);","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a todo to its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"     * This format is what you will see in the storage file stored in the data folder.","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a todo with its storage file format.","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"    public String toFileFormat() {","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        return \"T\" + super.toFileFormat();","lastModifiedDate":"2022-02-15"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"     * Method that converts a todo to its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"     * This format is what will be shown to the user on the GUI.","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"     * @return A string that describes a todo with its UI format.","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"    @Override","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"    public String toString() {","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"soloplxya":37}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" style\u003d\"-fx-padding: 15;\u0026#10;-fx-border-insets: 5;\u0026#10;-fx-border-radius: 15px;\u0026#10; -fx-text-fill: green; -fx-font-family: Courier New; \" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\" -fx-padding: 23;\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\" -fx-padding: 23;\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"370.0\" style\u003d\"-fx-background-color: #fad2e1;\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"549.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"321.0\" promptText\u003d\"Type something here...\" style\u003d\"-fx-background-radius: 20px; -fx-text-fill: #b81153; -fx-border-color: #b81153; -fx-border-radius: 20px;\" AnchorPane.bottomAnchor\u003d\"9.666666666666629\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"            \u003cFont name\u003d\"System Bold Italic\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"332.0\" layoutY\u003d\"548.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"39.0\" style\u003d\"-fx-background-radius: 100; -fx-background-color: transparent;\" text\u003d\"\u0026gt;\" textFill\u003d\"#b81153c2\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"            \u003cFont size\u003d\"19.0\" /\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"539.0\" prefWidth\u003d\"370.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"541.0\" prefWidth\u003d\"370.0\" style\u003d\"-fx-background-color: #fad2e1;\" /\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"soloplxya":26}},{"path":"src/test/java/duke/TextUiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"public class TextUiTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"    public void testDivider() {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"        TextUi ui \u003d new TextUi();","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"        assertEquals(DIVIDER, ui.showDivider());","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"soloplxya":16}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    private Deadline deadline;","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    public void testCorrectDeadlineString() {","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"        String deadlineExpected \u003d \"[D][ ] CS3243 Assignment (by: 20-Feb-22 23:59)\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"        String deadlineActual \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"            deadline \u003d new Deadline(\"CS3243 Assignment\", \"20-02-2022 23:59\");","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"            deadlineActual \u003d deadline.toString();","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException duke) {","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"        assertEquals(deadlineActual, deadlineExpected);","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    public void testWrongDeadlineString() {","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        String deadlineExpected \u003d \"The date format parsed is incorrect! It should be dd-MM-yyyy or dd-MM-yyyy HH:mm!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"        String deadlineActual \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            deadline \u003d new Deadline(\"Eat apple\", \"02/05/2021\");","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException duke) {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"            deadlineActual \u003d duke.toString();","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        } finally {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            assertEquals(deadlineActual, deadlineExpected);","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"soloplxya":42}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"public class EventTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    private Event event;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"    public void testCorrectEventString() {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"        String eventExpected \u003d \"[E][ ] Eat apple (at: 02-May-2021)\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"        String eventActual \u003d \"\";","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"            event \u003d new Event(\"Eat apple\", \"02-05-2021\");","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"            eventActual \u003d event.toString();","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException duke) {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"            Assertions.fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"        assertEquals(eventActual, eventExpected);","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"soloplxya"},"content":"    public void testWrongEventString() {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"soloplxya"},"content":"        String eventExpected \u003d \"The date format parsed is incorrect! It should be dd-MM-yyyy or dd-MM-yyyy HH:mm!\";","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"soloplxya"},"content":"        String eventActual \u003d \"\";","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"soloplxya"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"soloplxya"},"content":"            event \u003d new Event(\"Eat apple\", \"02/05/2021\");","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"soloplxya"},"content":"        } catch (DukeException duke) {","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"soloplxya"},"content":"            eventActual \u003d duke.toString();","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"soloplxya"},"content":"        } finally {","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"soloplxya"},"content":"            assertEquals(eventActual, eventExpected);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"soloplxya"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"soloplxya":42}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"public class TodoTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"    public void testTodoString() {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"        String todoExpected \u003d \"[T][ ] test\";","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"        assertEquals(todoExpected, todo.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"    public void testMarkedTodoString() {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"soloplxya"},"content":"        String todoExpected \u003d \"[T][X] test\";","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"soloplxya"},"content":"        todo.markIsDone();","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"soloplxya"},"content":"        assertEquals(todoExpected, todo.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"soloplxya"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"soloplxya"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"soloplxya":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"soloplxya"},"content":"todo something","lastModifiedDate":"2022-01-15"},{"lineNumber":2,"author":{"gitId":"soloplxya"},"content":"deadline test test /by Sunday","lastModifiedDate":"2022-01-15"},{"lineNumber":3,"author":{"gitId":"soloplxya"},"content":"event drink coffee /at Sunday 2-4pm","lastModifiedDate":"2022-01-15"},{"lineNumber":4,"author":{"gitId":"soloplxya"},"content":"todo list","lastModifiedDate":"2022-01-15"},{"lineNumber":5,"author":{"gitId":"soloplxya"},"content":"list","lastModifiedDate":"2022-01-15"},{"lineNumber":6,"author":{"gitId":"soloplxya"},"content":"mark 1","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"soloplxya"},"content":"mark 2","lastModifiedDate":"2022-01-15"},{"lineNumber":8,"author":{"gitId":"soloplxya"},"content":"mark 3","lastModifiedDate":"2022-01-15"},{"lineNumber":9,"author":{"gitId":"soloplxya"},"content":"mark 4","lastModifiedDate":"2022-01-15"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"list","lastModifiedDate":"2022-01-15"},{"lineNumber":11,"author":{"gitId":"soloplxya"},"content":"unmark 1","lastModifiedDate":"2022-01-15"},{"lineNumber":12,"author":{"gitId":"soloplxya"},"content":"unmark 2","lastModifiedDate":"2022-01-15"},{"lineNumber":13,"author":{"gitId":"soloplxya"},"content":"unmark 3","lastModifiedDate":"2022-01-15"},{"lineNumber":14,"author":{"gitId":"soloplxya"},"content":"unmark 4","lastModifiedDate":"2022-01-15"},{"lineNumber":15,"author":{"gitId":"soloplxya"},"content":"delete 1","lastModifiedDate":"2022-01-15"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"delete 1","lastModifiedDate":"2022-01-15"},{"lineNumber":17,"author":{"gitId":"soloplxya"},"content":"delete 1","lastModifiedDate":"2022-01-15"},{"lineNumber":18,"author":{"gitId":"soloplxya"},"content":"delete 1","lastModifiedDate":"2022-01-15"},{"lineNumber":19,"author":{"gitId":"soloplxya"},"content":"list","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"soloplxya":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"soloplxya"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java","lastModifiedDate":"2022-01-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"soloplxya":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"soloplxya"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java","lastModifiedDate":"2022-01-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"soloplxya":1}}]
