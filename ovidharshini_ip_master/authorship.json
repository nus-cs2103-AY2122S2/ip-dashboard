[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2022-02-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ovidharshini":1,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" * The Duke program implements a simple task bot with CRUD functionality.","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" * The program can add three different types of tasks (todo, deadline,","lastModifiedDate":"2022-02-10"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":" * event), mark tasks as done, and delete tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"    private final Ui ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for Duke.","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"     * Instantiates UI and storage, and loads Tasks from a file into tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"     * If there is an error with loading Tasks from the specified file, it","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"     * initializes tasks to bean empty TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * @param filePath path of the storage file from the current directory","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"     * Handles the execution and main logic of the Duke program.","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"     * It polls for user input continuously, parses user input and","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"     * displays appropriate messages until user input is \"bye\",","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"     * upon which it displays a goodbye message and terminates the program.","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"    public void run() {","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"        ui.showWelcome();","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"        while (!isExit) {","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"            try {","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"                String input \u003d ui.readInput();","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"                String command \u003d Parser.parse(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"                if (command.equals(\"\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"                    ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"                    continue;","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"                input \u003d Parser.handleInput(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"                try {","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"                    switch (command) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"                    case \"list\":","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"                    case \"do\":","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"                        int i \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\",","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"                                \"\")) - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"                        tasks.get(i).markComplete();","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"                    case \"undo\":","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"                        int j \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\",","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"                                \"\")) - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"                        tasks.get(j).markIncomplete();","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"ovidharshini"},"content":"                    case \"delete\":","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"ovidharshini"},"content":"                        int k \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\",","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"ovidharshini"},"content":"                                \"\")) - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":81,"author":{"gitId":"ovidharshini"},"content":"                        tasks.remove(k);","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"ovidharshini"},"content":"                    case \"todo\":","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"ovidharshini"},"content":"                        Todo t \u003d new Todo(input);","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"ovidharshini"},"content":"                        tasks.add(t);","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"ovidharshini"},"content":"                        System.out.println(t);","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"ovidharshini"},"content":"                    case \"find\":","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"ovidharshini"},"content":"                        System.out.println(tasks.find(input));","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"ovidharshini"},"content":"                    case \"deadline\":","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"ovidharshini"},"content":"                        String datetime \u003d input.replaceAll(\".* by \", \"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"ovidharshini"},"content":"                        input \u003d input.replaceAll(\" by .*\", \"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"ovidharshini"},"content":"                        Deadline d \u003d new Deadline(input, datetime);","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"ovidharshini"},"content":"                        tasks.add(d);","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"ovidharshini"},"content":"                        System.out.println(d);","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"ovidharshini"},"content":"                    case \"event\":","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"ovidharshini"},"content":"                        String time \u003d input.replaceAll(\".* at \", \"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"ovidharshini"},"content":"                        input \u003d input.replaceAll(\" at .*\", \"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"ovidharshini"},"content":"                        Event e \u003d new Event(input, time);","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"ovidharshini"},"content":"                        tasks.add(e);","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"ovidharshini"},"content":"                        ui.showCommandMessage(command, tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"ovidharshini"},"content":"                        System.out.println(e);","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"ovidharshini"},"content":"                    default:","lastModifiedDate":"2022-02-10"},{"lineNumber":111,"author":{"gitId":"ovidharshini"},"content":"                        break;","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"ovidharshini"},"content":"                    }","lastModifiedDate":"2022-01-25"},{"lineNumber":113,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"ovidharshini"},"content":"                    if (!command.equals(\"list\") \u0026\u0026 !command.equals(\"bye\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"ovidharshini"},"content":"                        storage.save(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":116,"author":{"gitId":"ovidharshini"},"content":"                    }","lastModifiedDate":"2022-01-20"},{"lineNumber":117,"author":{"gitId":"ovidharshini"},"content":"                } catch (Exception e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":118,"author":{"gitId":"ovidharshini"},"content":"                    throw new RuntimeException(e.getMessage());","lastModifiedDate":"2022-02-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2019-07-29"},{"lineNumber":120,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"ovidharshini"},"content":"                isExit \u003d command.equals(\"bye\");","lastModifiedDate":"2022-02-01"},{"lineNumber":122,"author":{"gitId":"ovidharshini"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"ovidharshini"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":125,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":126,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":127,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"ovidharshini"},"content":"     * Main method that starts the program.","lastModifiedDate":"2022-02-10"},{"lineNumber":130,"author":{"gitId":"ovidharshini"},"content":"     * It calls a new instance of Duke with a specified file path.","lastModifiedDate":"2022-02-10"},{"lineNumber":131,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"ovidharshini"},"content":"     * @param args command-line arguments","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"ovidharshini"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":135,"author":{"gitId":"ovidharshini"},"content":"        new Duke(\"../../../data/tasks.txt\").run();","lastModifiedDate":"2022-02-01"},{"lineNumber":136,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ovidharshini":135,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Represents a class that validates and interprets user input with a","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" * pre-generated list of allowable input formats.","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":" * Note: Current allowable formats are \"list\", \"bye\", \"do X\", \"undo X\",","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" * \"delete X\", \"todo S\", \"deadline S by T\", \"event S at T\", \"find W\",","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" * where X is an integer, S is a string descriptor of the task, W is a","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" * singular keyword and T is a string descriptor of the date(s) and/or","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" * time(s) associated with the task.","lastModifiedDate":"2022-02-10"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"public class Parser {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"     * Extracts the non-command contents of a given input string.","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"     * Strips the string of leading whitespaces and removes the first word.","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"     * @param input  input string","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"     * @return input consisting of the non-command contents of the input string","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    public static String handleInput(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"        input \u003d input.trim();","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"        if (input.contains(\" \")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"            input \u003d input.substring(input.indexOf(\" \"));","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"        return input;","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"     * Validates input format and extracts command.","lastModifiedDate":"2022-02-10"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"     * Note: Current allowable formats are \"list\", \"bye\", \"do X\", \"undo X\",","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"     * \"delete X\", \"todo S\", \"find W\", \"deadline S by T\", \"event S at T\",","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"     * where X is an integer, S is a string descriptor of the task, W is a","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"     * singular keyword and T is a string descriptor of the date(s) and/or","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"     * time(s) associated with the task.","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"     * @param input input string to be parsed","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"     * @return command from input string if input is of a valid format,","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"     * \"\" otherwise","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"    public static String parse(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"        input \u003d input.trim();","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"        String command \u003d input.replaceAll(\" .*\", \"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"        input \u003d input.trim();","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"        if (input.equals(\"bye\") || input.equals(\"list\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"            return command;","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"        // Handle do, undo, delete","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"        String firstWord \u003d input.replaceAll(\" .*\", \"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"        input \u003d input.substring(firstWord.length()).trim();","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"        switch (firstWord) {","lastModifiedDate":"2022-02-10"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"        case \"do\":","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"            // Fallthrough","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"        case \"undo\":","lastModifiedDate":"2022-02-10"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"            // Fallthrough","lastModifiedDate":"2022-02-10"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"            input \u003d input.replaceAll(\".* \", \"\");","lastModifiedDate":"2022-02-10"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"            if (input.matches(\"[0-9]+\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"                return command;","lastModifiedDate":"2022-02-10"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"You need to specify the task you want to \"","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"                    + firstWord + \" by its index :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"            return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-10"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"            if (input.equals(\"\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"Oops, you need to mention what the \"","lastModifiedDate":"2022-02-10"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"                        + \"task is :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"            return command;","lastModifiedDate":"2022-02-10"},{"lineNumber":77,"author":{"gitId":"ovidharshini"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-10"},{"lineNumber":78,"author":{"gitId":"ovidharshini"},"content":"            if (!input.contains(\" by \")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":79,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"Oops, you need to format deadline tasks \"","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"ovidharshini"},"content":"                        + \"as \\\"deadline X by Y\\\" :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":81,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":82,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":83,"author":{"gitId":"ovidharshini"},"content":"            String lastWord \u003d input.substring(input.lastIndexOf(\" \") + 1);","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"ovidharshini"},"content":"            if (lastWord.equals(\"by\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":85,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":86,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":87,"author":{"gitId":"ovidharshini"},"content":"            return command;","lastModifiedDate":"2022-02-10"},{"lineNumber":88,"author":{"gitId":"ovidharshini"},"content":"        case \"event\":","lastModifiedDate":"2022-02-10"},{"lineNumber":89,"author":{"gitId":"ovidharshini"},"content":"            if (!input.contains(\" at \")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":90,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"Oops, you need to format event tasks \"","lastModifiedDate":"2022-02-10"},{"lineNumber":91,"author":{"gitId":"ovidharshini"},"content":"                        + \"as \\\"event X at Y\\\" :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":93,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":94,"author":{"gitId":"ovidharshini"},"content":"            String finalWord \u003d input.substring(input.lastIndexOf(\" \") + 1);","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"ovidharshini"},"content":"            if (finalWord.equals(\"at\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":98,"author":{"gitId":"ovidharshini"},"content":"            return command;","lastModifiedDate":"2022-02-10"},{"lineNumber":99,"author":{"gitId":"ovidharshini"},"content":"        case \"find\":","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"ovidharshini"},"content":"            if (input.equals(\"\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":101,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"Oops, you need to mention what \"","lastModifiedDate":"2022-02-10"},{"lineNumber":102,"author":{"gitId":"ovidharshini"},"content":"                        + \"the keyword is :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":103,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":104,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":105,"author":{"gitId":"ovidharshini"},"content":"            if (input.contains(\" \")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":106,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"Oops, you can only search for \"","lastModifiedDate":"2022-02-10"},{"lineNumber":107,"author":{"gitId":"ovidharshini"},"content":"                        + \"one keyword at a time :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":108,"author":{"gitId":"ovidharshini"},"content":"                return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":109,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-10"},{"lineNumber":110,"author":{"gitId":"ovidharshini"},"content":"            return command;","lastModifiedDate":"2022-02-10"},{"lineNumber":111,"author":{"gitId":"ovidharshini"},"content":"        default:","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"ovidharshini"},"content":"            return \"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":113,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":115}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import java.io.File;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":" * Represents a storage space for tasks on hard-drive.","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":" * It handles the loading of tasks from a file and saving","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":" * of tasks to the same file.","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"public class Storage {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    private String filePath;","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * Suppresses any unused warnings from a given boolean result.","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"     * @param result variable to suppress warnings from","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"    //@@author Eric Lange-reused","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    //Reused from https://stackoverflow.com/questions/27904329/warning-file-mkdir-is-ignored#answer-54341862","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"    // with minor modifications","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"    @SuppressWarnings(\"unused\")","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"    private static void ignoreResult(boolean result) {","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructor for Storage.","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Initializes the Storage object with a given file path.","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * It parses input from the specified file and saves the list of Tasks from","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * the specified file, if any. If file does not exist, it creates the file.","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Note: any missing parent directories in the specified file path are","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * created prior to file creation.","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param filePath path of the specified file from the current directory","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IOException if an exception occurs in the creation/access of","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * the specified file","lastModifiedDate":"2022-02-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws RuntimeException if file at specified path contains data in a","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * non-standard format","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    Storage(String filePath) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        File data \u003d new File(filePath);","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        data.getParentFile().mkdirs();","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        //make preceding directories, if any are not found","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ignoreResult(data.getParentFile().mkdirs());","lastModifiedDate":"2022-02-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!data.createNewFile()) { //if file exists","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Scanner fileReader \u003d new Scanner(data);","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                String line \u003d fileReader.nextLine();","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                String[] tmp \u003d line.split(\"\\\\|\");","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                boolean isDone \u003d tmp[1].trim().equals(\"D\");","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                switch (tmp[0].trim()) {","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                case \"T\":","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    Todo t \u003d new Todo(tmp[2].trim());","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    if (isDone) {","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                        t.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    tasks.add(t);","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    break;","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                case \"D\":","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                    Deadline d \u003d new Deadline(tmp[2].trim(), tmp[3].trim());","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    if (isDone) {","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                        d.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    tasks.add(d);","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    break;","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                case \"E\":","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    Event e \u003d new Event(tmp[2].trim(), tmp[3].trim());","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    if (isDone) {","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                        e.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    tasks.add(e);","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                    break;","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                default:","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    throw new RuntimeException(\"Corrupted data in data file at \"","lastModifiedDate":"2022-02-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                            + filePath);","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            fileReader.close();","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Retrieves and returns Tasks saved from the storage file.","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @return ArrayList of saved Tasks","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return tasks;","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Updates the list of Tasks saved on hard-drive at filePath.","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * This overwrites the existing file at filePath.","lastModifiedDate":"2022-02-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Note: File creation is to be handled via load() prior this method as","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * this assumes that filePath is valid and that the file exists at filePath.","lastModifiedDate":"2022-02-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @param tasks TaskList of Tasks to be saved on hard-drive","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws IOException if an exception occurs in the saving of","lastModifiedDate":"2022-02-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * data to the file at filePath","lastModifiedDate":"2022-02-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void save(TaskList tasks) throws IOException {","lastModifiedDate":"2022-02-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        File data \u003d new File(filePath);","lastModifiedDate":"2022-02-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        FileWriter f;","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        f \u003d new FileWriter(data, false);","lastModifiedDate":"2022-02-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        boolean isFirst \u003d true;","lastModifiedDate":"2022-02-01"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String s \u003d isFirst ? \"\" : \"\\n\";","lastModifiedDate":"2022-02-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            f.write(s + tasks.get(i).writeToFile());","lastModifiedDate":"2022-02-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            isFirst \u003d false;","lastModifiedDate":"2022-02-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        f.close();","lastModifiedDate":"2022-02-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":38,"-":95}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" * Represents a UI class that deals with user input and application output.","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"public class Ui {","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"    private Scanner reader \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-10"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"     * Displays a welcome message.","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"    public void showWelcome() {","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"        System.out.println(\"Hello, traveller! My name in Paimon.\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"                + \"How can I help you today?\");","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"     * Displays a goodbye message and closes the associated Scanner.","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"    public void showGoodbye() {","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"        System.out.println(\"Bye, hope to see you again soon!\");","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"        reader.close();","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"     * Formats the input line, reads and returns the next line of user input.","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"     * @return user input","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    public String readInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"        System.out.print(\"| \\r\");","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"        return reader.nextLine();","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"     * Displays a generic error message about failed data loading from a file.","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"        System.out.println(\"Oh no, an error occurred with processing the data \"","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"                + \"file :c\");","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"     * Displays a specific error message about some exception in the program.","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"     * @param s string describing error","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"    public void showError(String s) {","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"        System.out.println(\"Oh no, the following error occurred while running \"","lastModifiedDate":"2022-02-10"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"                + \"the program:\");","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"        System.out.println(s);","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"     * Handles display output for commands.","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"     * Displays the associated message with a given command and prints the list","lastModifiedDate":"2022-02-10"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"     * of tasks if necessary.","lastModifiedDate":"2022-02-10"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"     * @param command string describing command","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"     * @param tasks current TaskList of tasks","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"    public void showCommandMessage(String command, TaskList tasks) {","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"        switch (command) {","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"        case \"list\":","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Hmm... Paimon keeps a clear record in her \"","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"                    + \"diary.\");","lastModifiedDate":"2022-02-10"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"ovidharshini"},"content":"        case \"do\":","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"ovidharshini"},"content":"            //Fallthrough","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"ovidharshini"},"content":"        case \"undo\":","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Task successfully updated.\");","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"ovidharshini"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Noted, the task has been scrubbed off the \"","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"ovidharshini"},"content":"                    + \"list!\");","lastModifiedDate":"2022-02-10"},{"lineNumber":85,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"ovidharshini"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Got it! I have noted down the following task \"","lastModifiedDate":"2022-02-10"},{"lineNumber":89,"author":{"gitId":"ovidharshini"},"content":"                    + \"in your list.\");","lastModifiedDate":"2022-02-10"},{"lineNumber":90,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"ovidharshini"},"content":"        case \"find\":","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"ovidharshini"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Got it! I have noted down the following task in\"","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"ovidharshini"},"content":"                    + \" your list. \\nRemember the deadline!\");","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"ovidharshini"},"content":"        case \"event\":","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"Got it! I have noted down the following task in\"","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"ovidharshini"},"content":"                    + \" your list.\\nDo be there on time!\");","lastModifiedDate":"2022-02-10"},{"lineNumber":101,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"ovidharshini"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-01"},{"lineNumber":103,"author":{"gitId":"ovidharshini"},"content":"            showGoodbye();","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"ovidharshini"},"content":"            break;","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"ovidharshini"},"content":"        default:","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"ovidharshini"},"content":"            System.out.println(\"That went over Paimon\u0027s head a little...\");","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":109}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Represents a task that occurs at a particular date and/or time","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" * Note: the allowable formats for date and time to be interpreted","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":" * correctly by Deadline is YYYY/MM/DD (with ./| being valid separators)","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" * and HHMM.","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"public class Deadline extends TaskWithDateTime {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"    private String by;","lastModifiedDate":"2022-02-10"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"     * Initializes Deadline with a given description and dateTime string.","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"     * @param description description of Deadline","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"     * @param by dateTime string associated with Deadline","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"        super(description, by);","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns the description, dateTime of","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     * Deadline with its completion status and Deadline marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of the description, dateTime and completeness","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"     * status of Deadline with a Deadline marker","lastModifiedDate":"2022-02-10"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"        String s \u003d \"[D]\" + super.toString();","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"        return s.replace(\" (at: \", \" (by: \");","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"     * Parses contents of Deadline into a csv-like format delimited by \u0027|\u0027.","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of Deadline, its dateTime, completion status","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"     * and a Deadline marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"    public String writeToFile() {","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"        return \"D | \" + super.writeToFile();","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"ovidharshini":50}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Represents a task that occurs at a particular date and/or time.","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" * Note: the allowable formats for date and time to be interpreted correctly","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":" * by Event is YYYY/MM/DD (with * ./| being valid separators) and HHMM.","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"public class Event extends TaskWithDateTime {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"    private String at;","lastModifiedDate":"2022-02-10"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for Event.","lastModifiedDate":"2022-02-10"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"     * Initializes the Event with a given description and dateTime string.","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"     * @param description description of Event","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"     * @param at dateTime string associated with Event","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"        super(description, at);","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns the description, dateTime","lastModifiedDate":"2022-02-10"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * of Event with its completion status and Event marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of the description, dateTime and completeness","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"     * status of Event with an Event marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"        return \"[E]\" + super.toString();","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"     * Parses contents of Event into a csv-like format delimited by \u0027|\u0027.","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of Event, its dateTime, completion status","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"     * and an Event marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"    public String writeToFile() {","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"        return \"E | \" + super.writeToFile();","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"ovidharshini":48}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Represents a task and consists of its description and completeness status.","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"public class Task {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"    private String description;","lastModifiedDate":"2022-02-10"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"    private boolean isDone;","lastModifiedDate":"2022-02-10"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for Task that initializes the task with a given description.","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"     * @param description description of task","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"     * Marks Task as having been completed.","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"    public void markComplete() {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"     * Marks Task as explicitly being incomplete.","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"     * Note: this is true by default for all Task objects.","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"    public void markIncomplete() {","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"     * Checks if Task is an empty (invalid) Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"     * @return true if task description \u003d \"\", false otherwise","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"        return description.equals(\"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"     * Returns the state of completeness of Task.","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"     * @return \"X\" if Task is completed, \" \" otherwise","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns the description of Task with","lastModifiedDate":"2022-02-10"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"     * its completion status.","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of the description and completeness status","lastModifiedDate":"2022-02-10"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"     * of Task.","lastModifiedDate":"2022-02-10"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"     * Parses contents of Task into a csv-like format delimited by \u0027|\u0027.","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of Task and its completion status","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"    public String writeToFile() {","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"        String s \u003d (isDone) ? \"D\" : \"N\";","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"        return s + \" | \" + description;","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"ovidharshini":76}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import java.util.List;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import java.util.LinkedList;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" * Represents a collection of tasks.","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"public class TaskList {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-10"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"     * Empty constructor for TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"     * Initializes the TaskList with an empty linked list.","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"        this.tasks \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"     * Initializes TaskList with a given list of Tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * @param tasks list of Task objects","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"        this.tasks \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"        this.tasks.addAll(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"     * Returns the length of TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"     * @return number of elements in tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"    public int size() {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"        return tasks.size();","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"     * Retrieves and returns Task at a given index in TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"     * @param i index of Task to be retrieved in TaskList","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"     * @return Task at a given index in tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"    public Task get(int i) {","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"        if (i \u003c size() \u0026\u0026 i \u003e\u003d 0) {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"            return tasks.get(i);","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"        return null;","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"     * Deletes Task at a given index in TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"     * @param i index of task to be removed","lastModifiedDate":"2022-02-10"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"    public void remove(int i) {","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"        if (i \u003c size() \u0026\u0026 i \u003e\u003d 0) {","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"            tasks.remove(i);","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"     * Appends Task to end of TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"     * @param t  Task to be added","lastModifiedDate":"2022-02-10"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"    public void add(Task t) {","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"        tasks.add(t);","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"ovidharshini"},"content":"     * Searches for occurrences of a given word in tasks.","lastModifiedDate":"2022-02-10"},{"lineNumber":79,"author":{"gitId":"ovidharshini"},"content":"     * Returns a list of Tasks that contain it.","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"ovidharshini"},"content":"     * @param word keyword to be searched for","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"ovidharshini"},"content":"     * @return TaskList of the Tasks containing the specified word","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"ovidharshini"},"content":"    public TaskList find(String word) {","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"ovidharshini"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"ovidharshini"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"ovidharshini"},"content":"            if (tasks.get(i).toString().contains(word)) {","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"ovidharshini"},"content":"                matchingTasks.add(tasks.get(i));","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"ovidharshini"},"content":"        return new TaskList(matchingTasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns a string of all tasks in","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"ovidharshini"},"content":"     * TaskList and the number of tasks in TaskList.","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of all Tasks in TaskList and number of","lastModifiedDate":"2022-02-10"},{"lineNumber":99,"author":{"gitId":"ovidharshini"},"content":"     * Tasks in TaskList delimited by newlines.","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"ovidharshini"},"content":"        String s \u003d \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":103,"author":{"gitId":"ovidharshini"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"ovidharshini"},"content":"            if (!tasks.get(i).isEmpty()) {","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"ovidharshini"},"content":"                int index \u003d i + 1;","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"ovidharshini"},"content":"                s +\u003d \"  \" + index + \". \" + tasks.get(i) + \"\\n\";","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"ovidharshini"},"content":"            } else {","lastModifiedDate":"2022-02-10"},{"lineNumber":108,"author":{"gitId":"ovidharshini"},"content":"                s +\u003d \"You have \" + i + \" tasks on your list.\";","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"ovidharshini"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":110,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":112,"author":{"gitId":"ovidharshini"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2022-02-01"},{"lineNumber":113,"author":{"gitId":"ovidharshini"},"content":"            s \u003d  \"You now have 0 tasks on your list.\";","lastModifiedDate":"2022-02-01"},{"lineNumber":114,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":116,"author":{"gitId":"ovidharshini"},"content":"        return s;","lastModifiedDate":"2022-02-01"},{"lineNumber":117,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":118,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":118}},{"path":"src/main/java/duke/task/TaskWithDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":" * Represents a task with an associated date and/or time.","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":" * Note: the allowable formats for date and time to be interpreted correctly","lastModifiedDate":"2022-02-10"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":" * by TaskWithDateTime is YYYY/MM/DD (with ./| being valid separators) and HHMM.","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"public class TaskWithDateTime extends Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"    private LocalDate day;","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"    private LocalTime timeOfDay;","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"    private String dateTime;","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for TaskWithDateTime.","lastModifiedDate":"2022-02-10"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"     * Initializes the Task with a given description and dateTime.","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"     * @param description description of task","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"     * @param dateTime datetime associated with task in string format","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"    public TaskWithDateTime(String description, String dateTime) {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"        super(description);","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"        String temp \u003d dateTime.trim();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"        this.dateTime \u003d dateTime.trim();","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"        // Extract date, if any","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"        String regexDate \u003d \"\\\\d{4}[-|/.]\\\\d{2}[-|/.]\\\\d{2}\";","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"        Matcher m \u003d Pattern.compile(regexDate).matcher(dateTime);","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"ovidharshini"},"content":"        if (m.find()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"ovidharshini"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"ovidharshini"},"content":"                day \u003d LocalDate.parse(m.group(0).replaceAll(\"[./|]\", \"-\"));","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"ovidharshini"},"content":"                dateTime \u003d dateTime.replace(m.group(0),","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"ovidharshini"},"content":"                        day.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"ovidharshini"},"content":"                this.dateTime \u003d dateTime;","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"ovidharshini"},"content":"                temp \u003d temp.replace(m.group(0), \"\");","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"ovidharshini"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"The date specified is invalid and has \"","lastModifiedDate":"2022-02-10"},{"lineNumber":52,"author":{"gitId":"ovidharshini"},"content":"                        + \"automatically been changed to tomorrow.\");","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"ovidharshini"},"content":"                this.dateTime \u003d dateTime.replace(m.group(0),","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"ovidharshini"},"content":"                        LocalDate.now().plus(1, ChronoUnit.DAYS).toString());","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"ovidharshini"},"content":"                temp \u003d temp.replace(m.group(0), \"\");","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"ovidharshini"},"content":"        // Extract time, if any","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"ovidharshini"},"content":"        String regexTime \u003d \"\\\\d{4}\";","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"ovidharshini"},"content":"        m \u003d Pattern.compile(regexTime).matcher(temp);","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"ovidharshini"},"content":"        if (m.find()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"ovidharshini"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"ovidharshini"},"content":"                timeOfDay \u003d LocalTime.parse(m.group(0).substring(0, 2)","lastModifiedDate":"2022-02-10"},{"lineNumber":66,"author":{"gitId":"ovidharshini"},"content":"                        + \":\" + m.group(0).substring(2));","lastModifiedDate":"2022-02-10"},{"lineNumber":67,"author":{"gitId":"ovidharshini"},"content":"                this.dateTime \u003d this.dateTime.replace(m.group(0),","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"ovidharshini"},"content":"                        timeOfDay.toString());","lastModifiedDate":"2022-02-10"},{"lineNumber":69,"author":{"gitId":"ovidharshini"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"ovidharshini"},"content":"                System.out.println(\"The time specified is invalid and has \"","lastModifiedDate":"2022-02-10"},{"lineNumber":71,"author":{"gitId":"ovidharshini"},"content":"                        + \"automatically been changed to an hour from now.\");","lastModifiedDate":"2022-02-10"},{"lineNumber":72,"author":{"gitId":"ovidharshini"},"content":"                this.dateTime \u003d this.dateTime.replace(m.group(0),","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"ovidharshini"},"content":"                        LocalTime.now().plus(1, ChronoUnit.HOURS).toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"ovidharshini"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"ovidharshini"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns a formatted string of the","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"ovidharshini"},"content":"     * contents of TaskWithDateTime.","lastModifiedDate":"2022-02-10"},{"lineNumber":81,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of description, dateTime and completion","lastModifiedDate":"2022-02-10"},{"lineNumber":83,"author":{"gitId":"ovidharshini"},"content":"     * status of the TaskWithDateTime object.","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"ovidharshini"},"content":"        return super.toString() + \" (at: \" + dateTime.trim() + \")\";","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"ovidharshini"},"content":"     * Parses contents of TaskWithDateTime into a csv-like format","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"ovidharshini"},"content":"     * delimited by \u0027|\u0027.","lastModifiedDate":"2022-02-10"},{"lineNumber":93,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of TaskWithDateTime, its completion","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"ovidharshini"},"content":"     * status and associated dateTime.","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"ovidharshini"},"content":"    public String writeToFile() {","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"ovidharshini"},"content":"        return super.writeToFile() + \" | \" + dateTime.trim();","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":101,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"ovidharshini":101}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"/**","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":" * Represents a todo - a task with a description and no time limit.","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":" *","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":" * @author  Elumalai Oviya Dharshini","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":" * @version 0.1","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":" */","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"     * Constructor for Todo that initializes the Todo with a given description.","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"     * @param description description of Todo","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        super(description);","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"     * Default toString method that returns the description of Todo","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"     * with its completion status and Todo marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of the description and completeness","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"ovidharshini"},"content":"     * status of Todo with a Todo marker.","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"ovidharshini"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"ovidharshini"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"ovidharshini"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"ovidharshini"},"content":"     * Parses contents of Todo into a csv-like format delimited by \u0027|\u0027.","lastModifiedDate":"2022-02-10"},{"lineNumber":34,"author":{"gitId":"ovidharshini"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"ovidharshini"},"content":"     * @return formatted string of Todo, its completion status and a Todo marker","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"ovidharshini"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"ovidharshini"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"ovidharshini"},"content":"    public String writeToFile() {","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"ovidharshini"},"content":"        return \"T | \" + super.writeToFile();","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"ovidharshini":41}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"public class ParserTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"    public void testParsing() {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"hi\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"todo\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"todo \"));","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"event \"));","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"event birthday at\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"event birthday at \"));","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"event\", Parser.parse(\"event birthday at 1500\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"deadline cs2103t week 3 ip tasks by\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"\", Parser.parse(\"deadline cs2103t week 3 ip tasks by \"));","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"deadline\", Parser.parse(\"deadline cs2103t week 3 ip tasks by 2022/01/27 2359\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":22}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"        Deadline d \u003d new Deadline(\"read a book\",\"2022/12/01 2359\");","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"[D][ ] read a book (by: Dec 1 2022 23:59)\", d.toString());","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"    public void testWriteToFile() {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"        Deadline d \u003d new Deadline(\"read a book\",\"2022/12/01 2359\");","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        d.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"D | D | read a book | Dec 1 2022 23:59\", d.writeToFile());","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":20}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"public class EventTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"        Event e \u003d new Event(\"read a book\",\"2022/12/01 2359\");","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"[E][ ] read a book (at: Dec 1 2022 23:59)\", e.toString());","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"    public void testWriteToFile() {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"        Event e \u003d new Event(\"read a book\",\"2022/12/01 2359\");","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        e.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"E | D | read a book | Dec 1 2022 23:59\", e.writeToFile());","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":20}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"public class TodoTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"[T][ ] read a book\", new Todo(\"read a book\").toString());","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"ovidharshini"},"content":"    public void testWriteToFile() {","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"ovidharshini"},"content":"        Todo t \u003d new Todo(\"read a book\");","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"ovidharshini"},"content":"        t.markComplete();","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"ovidharshini"},"content":"        assertEquals(\"T | D | read a book\", t.writeToFile());","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"ovidharshini"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"ovidharshini"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"ovidharshini"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"ovidharshini":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ovidharshini"},"content":"todo take down Stormterror","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"ovidharshini"},"content":"list","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"ovidharshini"},"content":"event windtrace festival at last week of January","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"ovidharshini"},"content":"list","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"ovidharshini"},"content":"deadline pull for Shenqi by 25 Jan 2022","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"ovidharshini"},"content":"list","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"ovidharshini"},"content":"do 1","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"ovidharshini"},"content":"do 2","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"ovidharshini"},"content":"do 3","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"ovidharshini"},"content":"list","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"ovidharshini"},"content":"undo 1","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"ovidharshini"},"content":"list","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"ovidharshini"},"content":"bye","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"ovidharshini":13}}]
