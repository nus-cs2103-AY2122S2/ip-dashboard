[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"T | 1 | read book","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"D | 0 | return book | June 6th","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"E | 0 | project meeting | Aug 6th 2-4pm","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"T | 1 | join sports club","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"D | 0 | return book | today","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dannytayjy":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.command.CommandType;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.command.PrintCommand;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":" * The driver class that runs the program.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    private final Ui ui;","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    private final Parser parser;","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Duke class with folder","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * name and file name.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * @param folderName Folder name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param fileName File name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    public Duke(String folderName, String fileName) {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"            storage \u003d new Storage(folderName, fileName);","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            taskList \u003d storage.loadTasksFromFile();","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * Executes the program.","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    public void run() {","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        ui.displayWelcome();","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        Command command \u003d null;","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        while (!isExit) {","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"            try {","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"                String commandLine \u003d ui.readCommand();","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"                command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"                command.execute(taskList, ui, storage);","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"                ui.displayError(e.getMessage());","lastModifiedDate":"2022-01-20"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            } finally {","lastModifiedDate":"2022-01-20"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"                checkAndDisplayFilteredTasks(command);","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"                ui.displayLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the task list has filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"     * Displays the filtered tasks message if there are filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"     * @param command Executed command","lastModifiedDate":"2022-01-30"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    public void checkAndDisplayFilteredTasks(Command command) {","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.hasFilter()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"            String filteredTasksMessage;","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"            if (taskList.getFilterCommandType() \u003d\u003d CommandType.PRINT \u0026\u0026 !(command instanceof PrintCommand)) {","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"                filteredTasksMessage \u003d ui.tasksOnDateMessage(taskList, taskList.getFilterInfo());","lastModifiedDate":"2022-01-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"            } else if (taskList.getFilterCommandType() \u003d\u003d CommandType.FIND \u0026\u0026 !(command instanceof FindCommand)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"                filteredTasksMessage \u003d ui.tasksWithKeywordMessage(taskList, taskList.getFilterInfo());","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"                filteredTasksMessage \u003d \"\";","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"            if (!filteredTasksMessage.isEmpty()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"                ui.displayFilteredTasks(filteredTasksMessage);","lastModifiedDate":"2022-01-30"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-30"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"     * Starts the execution of the program.","lastModifiedDate":"2022-01-28"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"     * @param args Command line arguments","lastModifiedDate":"2022-01-28"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-28"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"        new Duke(\"data\", \"tasks.txt\").run();","lastModifiedDate":"2022-01-28"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"dannytayjy":98,"-":2}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * An abstract class that represents a command to add a task.","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"public abstract class AddCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    private final String taskDescription;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of AddCommand class with","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * task description.","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Task description","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    public AddCommand(String taskDescription) {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * Returns the task description.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * @return Task description","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"        return taskDescription;","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is an Add command","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * An abstract method to execute the command.","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * The method will be implemented in the extended classes.","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":55}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to add a Deadline task.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private final String taskDateTime;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of AddDeadlineCommand class","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * with task information.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param taskInfo Task information (description and date/time)","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public AddDeadlineCommand(String taskInfo) {","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        // Task description","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        super(taskInfo.split(\"/\", 2)[0].trim());","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        // Task date/time","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String taskByDateTime \u003d taskInfo.split(\"/\", 2)[1].trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        taskDateTime \u003d taskByDateTime.split(\"\\\\s+\", 2)[1].trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of adding the new Deadline task to the task list","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * and saving the updated task list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        Task newDeadlineTask \u003d taskList.addDeadlineTask(super.getTaskDescription(), taskDateTime);","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newDeadlineTask)","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.numOfTasksInListMessage(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":50}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to add an Event task.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private final String taskDateTime;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of AddEventCommand class","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * with task information.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param taskInfo Task information (description and date/time)","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public AddEventCommand(String taskInfo) {","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        // Task description","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        super(taskInfo.split(\"/\", 2)[0].trim());","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        // Task date/time","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String taskAtDateTime \u003d taskInfo.split(\"/\", 2)[1].trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        taskDateTime \u003d taskAtDateTime.split(\"\\\\s+\", 2)[1].trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of adding the new Event task to the task list","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * and saving the updated task list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        Task newEventTask \u003d taskList.addEventTask(super.getTaskDescription(), taskDateTime);","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newEventTask)","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.numOfTasksInListMessage(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":50}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to add a ToDo task.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class AddToDoCommand extends AddCommand {","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of AddToDoCommand class","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * with task description.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Task description","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    public AddToDoCommand(String taskDescription) {","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"        super(taskDescription);","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of adding the new ToDo task to the task list","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * and saving the updated task list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        Task newToDoTask \u003d taskList.addToDoTask(super.getTaskDescription());","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newToDoTask)","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.numOfTasksInListMessage(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":43}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * An interface that represents a command.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public interface Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * @return Flag to indicate if the command is an Exit command","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    boolean isExit();","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the List of tasks in the task list is","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * empty or if there are any errors when retrieving the tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":32}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An enumeration that defines different command types.","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public enum CommandType {","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    LIST(\"list\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    PRINT(\"print\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    FIND(\"find\");","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    private final String label;","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of CommandType enumeration","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * with command field.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param label Label of the command type","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    CommandType(String label) {","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        this.label \u003d label;","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Returns the label of the command type.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return The label of the command type","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public String getLabel() {","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        return label;","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":38}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to delete a task.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    private final int taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of DeleteCommand class with","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * task number.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Task number","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public DeleteCommand(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a Delete command","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of deleting the task from the task list and","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * saving the updated list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        Task taskDeleted \u003d !taskList.hasFilter()","lastModifiedDate":"2022-01-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"                ? deleteTaskBasedOnAllTasks(taskList)","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"                : deleteTaskBasedOnFilteredTasks(taskList);","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfFilteredTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            // Reset the List of filteredTasks when the List is empty","lastModifiedDate":"2022-01-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            // This will clear the List of filteredTasks","lastModifiedDate":"2022-01-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            taskList.resetFilteredTasks();","lastModifiedDate":"2022-01-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskDeletedMessage(taskDeleted)","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"                + ui.numOfTasksInListMessage(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"     * Deletes the task based on the corresponding task number in the","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"     * List of tasks and then returns the deleted task.","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was deleted","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    public Task deleteTaskBasedOnAllTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"            return taskList.deleteTask(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     * Deletes the task based on the corresponding task number in the","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"     * List of filtered tasks and then returns the deleted task.","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was deleted","lastModifiedDate":"2022-01-30"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"    public Task deleteTaskBasedOnFilteredTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfFilteredTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"            return taskList.deleteTask(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":99}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to exit the program.","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public class ExitCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of ExitCommand class.","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public ExitCommand() {","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @return True as the command is an Exit command","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        return true;","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of exiting the program.","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        // Reset the List of filteredTasks when ExitCommand is executed","lastModifiedDate":"2022-01-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        // This will clear the List of filteredTasks","lastModifiedDate":"2022-01-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        taskList.resetFilteredTasks();","lastModifiedDate":"2022-01-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        ui.displayExit();","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to find tasks by searching","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * for a keyword in the description.","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private final String keyword;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of PrintCommand class","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * with keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param keyword Keyword","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a Find command","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of finding tasks in the task list that","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * contains the keyword in the description.","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the List of tasks in the task list","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * is empty or if there are no tasks that contains the keyword","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * in the description","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_NO_TASKS_IN_LIST.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        taskList.setFilteredTasksByKeyword(keyword);","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfFilteredTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            // Reset the List of filteredTasks when FindCommand is executed","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            // and there are no matching tasks","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            // This will clear the List of filteredTasks","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            taskList.resetFilteredTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_NO_MATCHING_TASKS_IN_LIST.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.tasksWithKeywordMessage(taskList, keyword);","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"dannytayjy":67}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to list all the tasks.","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of ListCommand class.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    public ListCommand() {","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a List command","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of listing all the tasks in the task list.","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the List of tasks in the task list is empty","lastModifiedDate":"2022-01-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_NO_TASKS_IN_LIST.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"        // Reset the List of filteredTasks when ListCommand is executed","lastModifiedDate":"2022-01-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        // This will clear the List of filteredTasks","lastModifiedDate":"2022-01-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        taskList.resetFilteredTasks();","lastModifiedDate":"2022-01-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.tasksInListMessage(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":50}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to mark a task as done.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    private final int taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of MarkCommand class with","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * task number.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Task number","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public MarkCommand(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a Done command","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of marking the task in the task list as done","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * and saving the updated list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        Task taskDone \u003d !taskList.hasFilter()","lastModifiedDate":"2022-01-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"                ? markTaskDoneBasedOnAllTasks(taskList)","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"                : markTaskDoneBasedOnFilteredTasks(taskList);","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskDoneMessage(taskDone);","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as done based on the corresponding task number","lastModifiedDate":"2022-01-30"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * in the List of tasks and then returns the task.","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as done","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    public Task markTaskDoneBasedOnAllTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"            return taskList.markDone(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as done based on the corresponding task number","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"     * in the List of filtered tasks and then returns the task.","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as done","lastModifiedDate":"2022-01-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"    public Task markTaskDoneBasedOnFilteredTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfFilteredTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"            return taskList.markDone(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":91}},{"path":"src/main/java/duke/command/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to print deadlines/events","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * occurring on a specific date.","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class PrintCommand implements Command {","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private final String dateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of PrintCommand class","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * with specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public PrintCommand(String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        this.dateStr \u003d dateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a Print command","lastModifiedDate":"2022-01-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-30"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of printing deadlines/events in the task","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * list that occurs on the specified date.","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the List of tasks in the task list","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * is empty or if there are no deadlines/events that occurs on","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * the specified date","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_NO_TASKS_IN_LIST.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        taskList.setFilteredTasksByDate(dateStr);","lastModifiedDate":"2022-01-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.getNumOfFilteredTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            // Reset the List of filteredTasks when PrintCommand is executed","lastModifiedDate":"2022-01-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            // and there are no deadlines/events on the specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            // This will clear the List of filteredTasks","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            taskList.resetFilteredTasks();","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_NO_TASKS_ON_DATE.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.tasksOnDateMessage(taskList, dateStr);","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"dannytayjy":67}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a command to mark a task as not done yet.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    private final int taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of UnmarkCommand class with","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * task number.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Task number","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public UnmarkCommand(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command is an Exit command.","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @return False as the command is a Done command","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of marking the task in the task list as not","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * done yet and saving the updated list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle I/O operations","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to handle file operations","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        Task taskNotDone \u003d !taskList.hasFilter()","lastModifiedDate":"2022-01-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"                ? markTaskNotDoneBasedOnAllTasks(taskList)","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"                : markTaskNotDoneBasedOnFilteredTasks(taskList);","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskNotDoneMessage(taskNotDone);","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        storage.saveTasksToFile(taskList);","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as not done yet based on the corresponding task number","lastModifiedDate":"2022-01-30"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * in the List of tasks and then returns the task.","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as not done yet","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    public Task markTaskNotDoneBasedOnAllTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"            return taskList.markNotDone(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as not done yet based on the corresponding task number","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"     * in the List of filtered tasks and then returns the task.","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list","lastModifiedDate":"2022-01-30"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as not done yet","lastModifiedDate":"2022-01-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task is not found","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"    public Task markTaskNotDoneBasedOnFilteredTasks(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.getNumOfFilteredTasks()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"            return taskList.markNotDone(taskNum);","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_TASK_NOT_FOUND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":91}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.exception;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class that handles any exceptions during the program execution.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize and instance of DukeException class","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * with error message.","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param errorMessage Error message of the exception","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":16}},{"path":"src/main/java/duke/exception/ErrorMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.exception;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An enumeration that defines different error messages.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public enum ErrorMessage {","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DATETIME_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"            + \"The date/time of a deadline cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"            + \"[Note: Enter /by before specifying the date/time]\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"            + \"The description and date/time of a deadline cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"            + \"[Note: Enter /by before specifying the date/time]\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"            + \"The description of a deadline cannot be empty!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_EMPTY_AND_WRONG_COMMAND_DATETIME(\"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"            + \"The description of a deadline cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /by before specifying the date/time!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_DEADLINE_WRONG_COMMAND_DATETIME(\"WRONG COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /by before specifying the date/time!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DATETIME_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"            + \"The date/time of an event cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            + \"[Note: Enter /at before specifying the date/time]\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"            + \"The description and date/time of an event cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"            + \"[Note: Enter /at before specifying the date/time]\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"            + \"The description of an event cannot be empty!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_EMPTY_AND_WRONG_COMMAND_DATETIME(\"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"            + \"The description of an event cannot be empty!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /at before specifying the date/time!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_EVENT_WRONG_COMMAND_DATETIME(\"WRONG COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /at before specifying the date/time!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    ERROR_ADD_TODO_DESC_EMPTY(\"The description of a todo cannot be empty!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    ERROR_DELETE_TASK_NUM_EMPTY(\"Please enter a valid task number to be deleted!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"    ERROR_DELETE_TASK_NUM_INVALID(\"Please enter a task number to be deleted!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"    ERROR_FIND_KEYWORD_EMPTY(\"Please enter the keyword to search for matching tasks!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    ERROR_INVALID_COMMAND(\"INVALID COMMAND. Please try again!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    ERROR_INVALID_TYPE_OF_TASK(\"INVALID TYPE OF TASK FOUND\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"    ERROR_MARK_TASK_NUM_EMPTY(\"Please enter a task number to be marked as done!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"    ERROR_MARK_TASK_NUM_INVALID(\"Please enter a valid task number to be marked as done!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    ERROR_NO_MATCHING_TASKS_IN_LIST(\"There are no matching tasks in your list!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    ERROR_NO_TASKS_IN_LIST(\"There are no tasks in your list!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"    ERROR_NO_TASKS_ON_DATE(\"There are no tasks on this date!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"    ERROR_PRINT_INCOMPLETE_COMMAND(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /on before specifying the date!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"    ERROR_PRINT_INCOMPLETE_COMMAND_DATE_EMPTY(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"            + \"The date is not specified!\"","lastModifiedDate":"2022-01-31"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"            + \"[Note: Enter /on before specifying the date]\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    ERROR_PRINT_WRONG_COMMAND_DATE(\"WRONG COMMAND\"","lastModifiedDate":"2022-01-31"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-31"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"            + \"Enter /on before specifying the date!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"    ERROR_TASK_NOT_FOUND(\"Task not found. Please try again!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"    ERROR_UNABLE_INITIALISE_DIRECTORY(\"Unable to initialise directory\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"    ERROR_UNABLE_INITIALISE_FILE(\"Unable to initialise file\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"    ERROR_UNMARK_TASK_NUM_EMPTY(\"Please enter a task number to be marked as not done yet!\"),","lastModifiedDate":"2022-01-31"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"    ERROR_UNMARK_TASK_NUM_INVALID(\"Please enter a valid task number to be marked as not done yet!\");","lastModifiedDate":"2022-01-31"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"    private final String errorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of ErrorMessage enumeration","lastModifiedDate":"2022-01-31"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"     * with error message field.","lastModifiedDate":"2022-01-31"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"     * @param errorMessage Error message","lastModifiedDate":"2022-01-31"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"    ErrorMessage(String errorMessage) {","lastModifiedDate":"2022-01-31"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the error message.","lastModifiedDate":"2022-01-31"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the error message","lastModifiedDate":"2022-01-31"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"        return errorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"dannytayjy":125}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.parser;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.command.CommandType;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"import duke.command.PrintCommand;","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":" * A class that handles the logic of parsing the user command.","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"public class Parser {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    static final String DATETIME_COMMAND_FOR_DEADLINE \u003d \"by\";","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    static final String DATETIME_COMMAND_FOR_EVENT \u003d \"at\";","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    static final String DATE_COMMAND_FOR_PRINT \u003d \"/on\";","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * Parses the command line input, validates the command type and","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * initialises the command.","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param commandLine The command line input from the user","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @return The Command object that is initialised","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command is invalid or if there","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * are any errors when initialising the command","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public Command parse(String commandLine) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        String[] commandLineParts \u003d commandLine.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        CommandType commandType \u003d validateCommandType(commandLineParts[0].toLowerCase());","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        if (commandType \u003d\u003d null) {","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_INVALID_COMMAND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        String commandInfo \u003d (commandLineParts.length \u003d\u003d 2) ? commandLineParts[1] : \"\";","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        boolean isCommandTypeBye \u003d commandType \u003d\u003d CommandType.BYE;","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        boolean isCommandTypeList \u003d commandType \u003d\u003d CommandType.LIST;","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        boolean isCommandInfoEmpty \u003d commandInfo.isEmpty();","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        // If user inputs extra information for \"bye\" or \"list\" commands,","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        // then it is not a valid command","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"        if ((isCommandTypeBye || isCommandTypeList) \u0026\u0026 !isCommandInfoEmpty) {","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_INVALID_COMMAND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        return initialiseCommand(commandType, commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"     * Validates the command type to check if it is a valid command.","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * @param commandType Command type in String","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     * @return The command type in CommandType object if it is a","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     * valid command, null otherwise","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    private CommandType validateCommandType(String commandType) {","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"        for (CommandType c : CommandType.values()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"            if (c.getLabel().equals(commandType)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"                return c;","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        return null;","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"     * Initialise the command.","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"     * @param commandType Command type","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     * @return The Command object that is initialised","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command is invalid or if there","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     * are any errors when initialising the command","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"    private Command initialiseCommand(CommandType commandType, String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"        Command command;","lastModifiedDate":"2022-01-28"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"        int taskNum;","lastModifiedDate":"2022-01-28"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"        String taskDescription;","lastModifiedDate":"2022-01-28"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        String taskInfo;","lastModifiedDate":"2022-01-28"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"        String date;","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"        String keyword;","lastModifiedDate":"2022-01-31"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"        switch (commandType) {","lastModifiedDate":"2022-01-28"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"        case BYE:","lastModifiedDate":"2022-01-28"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new ExitCommand();","lastModifiedDate":"2022-01-28"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"        case LIST:","lastModifiedDate":"2022-01-28"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2022-01-28"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"        case MARK:","lastModifiedDate":"2022-01-28"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"            taskNum \u003d getTaskNumFromMarkCommand(commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new MarkCommand(taskNum);","lastModifiedDate":"2022-01-28"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"        case UNMARK:","lastModifiedDate":"2022-01-28"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"            taskNum \u003d getTaskNumFromUnmarkCommand(commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new UnmarkCommand(taskNum);","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"        case DELETE:","lastModifiedDate":"2022-01-28"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"            taskNum \u003d getTaskNumFromDeleteCommand(commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new DeleteCommand(taskNum);","lastModifiedDate":"2022-01-28"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"        case TODO:","lastModifiedDate":"2022-01-28"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"            taskDescription \u003d getTaskDescriptionFromToDoCommand(commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddToDoCommand(taskDescription);","lastModifiedDate":"2022-01-28"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-28"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"            taskInfo \u003d getTaskInfoFromDeadlineCommand(commandInfo);","lastModifiedDate":"2022-01-31"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddDeadlineCommand(taskInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"        case EVENT:","lastModifiedDate":"2022-01-28"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"            taskInfo \u003d getTaskInfoFromEventCommand(commandInfo);","lastModifiedDate":"2022-01-31"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddEventCommand(taskInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"        case PRINT:","lastModifiedDate":"2022-01-30"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"            date \u003d getDateFromPrintCommand(commandInfo);","lastModifiedDate":"2022-01-30"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new PrintCommand(date);","lastModifiedDate":"2022-01-30"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-30"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"        case FIND:","lastModifiedDate":"2022-01-31"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"            keyword \u003d getKeywordFromFindCommand(commandInfo);","lastModifiedDate":"2022-01-31"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new FindCommand(keyword);","lastModifiedDate":"2022-01-31"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2022-01-31"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"        default:","lastModifiedDate":"2022-01-28"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"            // Error detection for any invalid commands has already been","lastModifiedDate":"2022-01-28"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"            // handled before this initialiseCommand method. Hence, the","lastModifiedDate":"2022-01-30"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"            // default case should not be reached, but serves as an","lastModifiedDate":"2022-01-30"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"            // additional layer of check.","lastModifiedDate":"2022-01-28"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_INVALID_COMMAND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"        return command;","lastModifiedDate":"2022-01-28"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task number from Mark command.","lastModifiedDate":"2022-01-31"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"     * @return The task number","lastModifiedDate":"2022-01-31"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is empty or not a valid integer","lastModifiedDate":"2022-01-31"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"    private int getTaskNumFromMarkCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumEmpty \u003d ErrorMessage.ERROR_MARK_TASK_NUM_EMPTY.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumInvalid \u003d ErrorMessage.ERROR_MARK_TASK_NUM_INVALID.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"        return getTaskNumFromCommandInfo(commandInfo, errorMessageTaskNumEmpty, errorMessageTaskNumInvalid);","lastModifiedDate":"2022-01-31"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task number from Unmark command.","lastModifiedDate":"2022-01-31"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"     * @return The task number","lastModifiedDate":"2022-01-31"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is empty or not a valid integer","lastModifiedDate":"2022-01-31"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"    private int getTaskNumFromUnmarkCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumEmpty \u003d ErrorMessage.ERROR_UNMARK_TASK_NUM_EMPTY.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumInvalid \u003d ErrorMessage.ERROR_UNMARK_TASK_NUM_INVALID.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"        return getTaskNumFromCommandInfo(commandInfo, errorMessageTaskNumEmpty, errorMessageTaskNumInvalid);","lastModifiedDate":"2022-01-31"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task number from Delete command.","lastModifiedDate":"2022-01-31"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"     * @return The task number","lastModifiedDate":"2022-01-31"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is empty or not a valid integer","lastModifiedDate":"2022-01-31"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"    private int getTaskNumFromDeleteCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumEmpty \u003d ErrorMessage.ERROR_DELETE_TASK_NUM_EMPTY.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"        String errorMessageTaskNumInvalid \u003d ErrorMessage.ERROR_DELETE_TASK_NUM_INVALID.toString();","lastModifiedDate":"2022-01-31"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"        return getTaskNumFromCommandInfo(commandInfo, errorMessageTaskNumEmpty, errorMessageTaskNumInvalid);","lastModifiedDate":"2022-01-31"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task number from command information","lastModifiedDate":"2022-01-31"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"     * @param errorMessageTaskNumEmpty Error message if the task number is empty","lastModifiedDate":"2022-01-31"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"     * @param errorMessageTaskNumInvalid Error message if the task number is invalid","lastModifiedDate":"2022-01-31"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"     * @return The task number","lastModifiedDate":"2022-01-31"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is empty or not a valid integer","lastModifiedDate":"2022-01-31"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"    private int getTaskNumFromCommandInfo(String commandInfo, String errorMessageTaskNumEmpty,","lastModifiedDate":"2022-01-31"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"                                          String errorMessageTaskNumInvalid) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(errorMessageTaskNumEmpty);","lastModifiedDate":"2022-01-31"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"            return Integer.parseInt(commandInfo);","lastModifiedDate":"2022-01-28"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(errorMessageTaskNumInvalid);","lastModifiedDate":"2022-01-31"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task description from ToDo command.","lastModifiedDate":"2022-01-31"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"     * @return The task description","lastModifiedDate":"2022-01-31"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task description is empty","lastModifiedDate":"2022-01-31"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskDescriptionFromToDoCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_ADD_TODO_DESC_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"        return commandInfo;","lastModifiedDate":"2022-01-31"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task information from Deadline command.","lastModifiedDate":"2022-01-31"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"     * @return The task information","lastModifiedDate":"2022-01-31"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command information is incomplete","lastModifiedDate":"2022-01-31"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"     * or has wrong date/time command","lastModifiedDate":"2022-01-31"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":227,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskInfoFromDeadlineCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":228,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":229,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":230,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":231,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":232,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":233,"author":{"gitId":"dannytayjy"},"content":"        String[] taskInfoParts \u003d commandInfo.split(\"/\", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":234,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":235,"author":{"gitId":"dannytayjy"},"content":"        if (taskInfoParts.length !\u003d 2) {","lastModifiedDate":"2022-01-28"},{"lineNumber":236,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":237,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":238,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":239,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":240,"author":{"gitId":"dannytayjy"},"content":"        String taskDescription \u003d taskInfoParts[0];","lastModifiedDate":"2022-01-28"},{"lineNumber":241,"author":{"gitId":"dannytayjy"},"content":"        String taskDateTime \u003d taskInfoParts[1];","lastModifiedDate":"2022-01-28"},{"lineNumber":242,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":243,"author":{"gitId":"dannytayjy"},"content":"        if (!taskDateTime.startsWith(DATETIME_COMMAND_FOR_DEADLINE)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":244,"author":{"gitId":"dannytayjy"},"content":"            if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":245,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":246,"author":{"gitId":"dannytayjy"},"content":"                        ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_EMPTY_AND_WRONG_COMMAND_DATETIME.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":247,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":248,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":249,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":250,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_DEADLINE_WRONG_COMMAND_DATETIME.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":251,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":252,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":253,"author":{"gitId":"dannytayjy"},"content":"        String dateTime \u003d taskDateTime.trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":254,"author":{"gitId":"dannytayjy"},"content":"        String[] dateTimeParts \u003d dateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":255,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":256,"author":{"gitId":"dannytayjy"},"content":"        if (dateTimeParts.length !\u003d 2) {","lastModifiedDate":"2022-01-31"},{"lineNumber":257,"author":{"gitId":"dannytayjy"},"content":"            if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":258,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":259,"author":{"gitId":"dannytayjy"},"content":"                        ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":260,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":261,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":262,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":263,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":264,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":265,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":266,"author":{"gitId":"dannytayjy"},"content":"        if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":267,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":268,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_DEADLINE_INCOMPLETE_COMMAND_DESC_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":269,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":270,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":271,"author":{"gitId":"dannytayjy"},"content":"        return commandInfo;","lastModifiedDate":"2022-01-28"},{"lineNumber":272,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":273,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":274,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":275,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task information from Event command.","lastModifiedDate":"2022-01-31"},{"lineNumber":276,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":277,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":278,"author":{"gitId":"dannytayjy"},"content":"     * @return The task information","lastModifiedDate":"2022-01-31"},{"lineNumber":279,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command information is incomplete","lastModifiedDate":"2022-01-31"},{"lineNumber":280,"author":{"gitId":"dannytayjy"},"content":"     * or has wrong date/time command","lastModifiedDate":"2022-01-31"},{"lineNumber":281,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":282,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskInfoFromEventCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":283,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":284,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":285,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":286,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":287,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":288,"author":{"gitId":"dannytayjy"},"content":"        String[] taskInfoParts \u003d commandInfo.split(\"/\", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":289,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":290,"author":{"gitId":"dannytayjy"},"content":"        if (taskInfoParts.length !\u003d 2) {","lastModifiedDate":"2022-01-28"},{"lineNumber":291,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":292,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":293,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":294,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":295,"author":{"gitId":"dannytayjy"},"content":"        String taskDescription \u003d taskInfoParts[0];","lastModifiedDate":"2022-01-28"},{"lineNumber":296,"author":{"gitId":"dannytayjy"},"content":"        String taskDateTime \u003d taskInfoParts[1];","lastModifiedDate":"2022-01-28"},{"lineNumber":297,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":298,"author":{"gitId":"dannytayjy"},"content":"        if (!taskDateTime.startsWith(DATETIME_COMMAND_FOR_EVENT)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":299,"author":{"gitId":"dannytayjy"},"content":"            if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":300,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":301,"author":{"gitId":"dannytayjy"},"content":"                        ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_EMPTY_AND_WRONG_COMMAND_DATETIME.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":302,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":303,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":304,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":305,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_EVENT_WRONG_COMMAND_DATETIME.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":306,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":307,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":308,"author":{"gitId":"dannytayjy"},"content":"        String dateTime \u003d taskDateTime.trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":309,"author":{"gitId":"dannytayjy"},"content":"        String[] dateTimeParts \u003d dateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":310,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":311,"author":{"gitId":"dannytayjy"},"content":"        if (dateTimeParts.length !\u003d 2) {","lastModifiedDate":"2022-01-31"},{"lineNumber":312,"author":{"gitId":"dannytayjy"},"content":"            if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":313,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":314,"author":{"gitId":"dannytayjy"},"content":"                        ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_AND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":315,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":316,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":317,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":318,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DATETIME_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":319,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":320,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":321,"author":{"gitId":"dannytayjy"},"content":"        if (!isTaskDescriptionPresent(taskDescription)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":322,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":323,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_ADD_EVENT_INCOMPLETE_COMMAND_DESC_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":324,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":325,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":326,"author":{"gitId":"dannytayjy"},"content":"        return commandInfo;","lastModifiedDate":"2022-01-31"},{"lineNumber":327,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":328,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":329,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":330,"author":{"gitId":"dannytayjy"},"content":"     * Gets the date from Print command.","lastModifiedDate":"2022-01-31"},{"lineNumber":331,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":332,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":333,"author":{"gitId":"dannytayjy"},"content":"     * @return The date","lastModifiedDate":"2022-01-31"},{"lineNumber":334,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command information is incomplete","lastModifiedDate":"2022-01-31"},{"lineNumber":335,"author":{"gitId":"dannytayjy"},"content":"     * or has wrong date command","lastModifiedDate":"2022-01-31"},{"lineNumber":336,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":337,"author":{"gitId":"dannytayjy"},"content":"    private String getDateFromPrintCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-30"},{"lineNumber":338,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":339,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":340,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_PRINT_INCOMPLETE_COMMAND.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":341,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":342,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":343,"author":{"gitId":"dannytayjy"},"content":"        if (!commandInfo.trim().startsWith(DATE_COMMAND_FOR_PRINT)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":344,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":345,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_PRINT_WRONG_COMMAND_DATE.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":346,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":347,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":348,"author":{"gitId":"dannytayjy"},"content":"        String[] specificDateParts \u003d commandInfo.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-01-30"},{"lineNumber":349,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":350,"author":{"gitId":"dannytayjy"},"content":"        if (specificDateParts.length !\u003d 2) {","lastModifiedDate":"2022-01-31"},{"lineNumber":351,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.","lastModifiedDate":"2022-01-31"},{"lineNumber":352,"author":{"gitId":"dannytayjy"},"content":"                    ERROR_PRINT_INCOMPLETE_COMMAND_DATE_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":353,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":354,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":355,"author":{"gitId":"dannytayjy"},"content":"        return specificDateParts[1];","lastModifiedDate":"2022-01-30"},{"lineNumber":356,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":357,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":358,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":359,"author":{"gitId":"dannytayjy"},"content":"     * Gets the keyword from Find command.","lastModifiedDate":"2022-01-31"},{"lineNumber":360,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":361,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":362,"author":{"gitId":"dannytayjy"},"content":"     * @return The keyword","lastModifiedDate":"2022-01-31"},{"lineNumber":363,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the keyword is empty","lastModifiedDate":"2022-01-31"},{"lineNumber":364,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":365,"author":{"gitId":"dannytayjy"},"content":"    private String getKeywordFromFindCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2022-01-31"},{"lineNumber":366,"author":{"gitId":"dannytayjy"},"content":"        if (!isCommandInfoPresent(commandInfo)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":367,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(ErrorMessage.ERROR_FIND_KEYWORD_EMPTY.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":368,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":369,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":370,"author":{"gitId":"dannytayjy"},"content":"        return commandInfo;","lastModifiedDate":"2022-01-31"},{"lineNumber":371,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":372,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":373,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":374,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the command information is present.","lastModifiedDate":"2022-01-31"},{"lineNumber":375,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":376,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo Command information","lastModifiedDate":"2022-01-31"},{"lineNumber":377,"author":{"gitId":"dannytayjy"},"content":"     * @return True if command information is present, false otherwise","lastModifiedDate":"2022-01-31"},{"lineNumber":378,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":379,"author":{"gitId":"dannytayjy"},"content":"    private boolean isCommandInfoPresent(String commandInfo) {","lastModifiedDate":"2022-01-31"},{"lineNumber":380,"author":{"gitId":"dannytayjy"},"content":"        return commandInfo.trim().length() \u003e 0;","lastModifiedDate":"2022-01-31"},{"lineNumber":381,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":382,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":383,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":384,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the task description is present.","lastModifiedDate":"2022-01-31"},{"lineNumber":385,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":386,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Task description","lastModifiedDate":"2022-01-31"},{"lineNumber":387,"author":{"gitId":"dannytayjy"},"content":"     * @return True if task description is present, false otherwise","lastModifiedDate":"2022-01-31"},{"lineNumber":388,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":389,"author":{"gitId":"dannytayjy"},"content":"    private boolean isTaskDescriptionPresent(String taskDescription) {","lastModifiedDate":"2022-01-31"},{"lineNumber":390,"author":{"gitId":"dannytayjy"},"content":"        return taskDescription.trim().length() \u003e 0;","lastModifiedDate":"2022-01-31"},{"lineNumber":391,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":392,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":392}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.ErrorMessage;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"import java.io.File;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":" * A class that handles create, read and write file operations.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"public class Storage {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    private final File directory;","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    private final File dataFile;","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Storage class with","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * folder name and file name.","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param folderName Folder name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param fileName File name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the directory cannot be initialised","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the storage file cannot be initialised","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public Storage(String folderName, String fileName) throws DukeException, IOException {","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        directory \u003d initialiseDirectory(folderName);","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        dataFile \u003d initialiseFile(directory, fileName);","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * Initializes the directory of the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * Creates the directory if it does not exist.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @param folderName Folder name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @return The relative pathname of the directory","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the directory cannot be initialised","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    private File initialiseDirectory(String folderName) throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        File directory \u003d new File(folderName);","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        boolean hasDirectory \u003d directory.exists();","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"        if (!hasDirectory) {","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"            hasDirectory \u003d directory.mkdir();","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        if (!hasDirectory) {","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"\\t\" + ErrorMessage.ERROR_UNABLE_INITIALISE_DIRECTORY);","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        return directory;","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     * Initializes the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     * Creates the data file if it does not exist.","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"     * @param directory Relative pathname of the directory","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"     * @param fileName File name of the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"     * @return The data file","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the data file cannot be initialised","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"    private File initialiseFile(File directory, String fileName) throws IOException {","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        File file \u003d new File(directory + \"/\" + fileName);","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"        boolean hasFile \u003d file.exists();","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"        if (!hasFile) {","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"            hasFile \u003d file.createNewFile();","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"        if (!hasFile) {","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"            throw new IOException(\"\\t\" + ErrorMessage.ERROR_UNABLE_INITIALISE_FILE);","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"        return file;","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"     * Returns the relative pathname of the directory.","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"     * @return The relative pathname of the directory","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"    public File getDirectory() {","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"        return directory;","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"     * Returns the data file.","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"     * @return The data file","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"    public File getDataFile() {","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"        return dataFile;","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"     * Loads all the tasks in the data file to the task list.","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"     * @return The task list containing the tasks","lastModifiedDate":"2022-01-28"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the data file or task cannot be read","lastModifiedDate":"2022-01-28"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If an invalid type of task is found","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"    public TaskList loadTasksFromFile() throws IOException, DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-28"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"        FileReader fileReader \u003d new FileReader(dataFile);","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"        String line;","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"        while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"            String[] taskDetails \u003d line.trim().split(\"\\\\|\");","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"            String type \u003d taskDetails[0].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"            boolean isDone \u003d (Integer.parseInt(taskDetails[1].trim()) \u003d\u003d 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"            String description \u003d taskDetails[2].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"            if (type.equals(TaskType.TODO.getAbbreviation())) {","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"                Task todoTask \u003d new ToDo(description, isDone);","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"                taskList.addTask(todoTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"            } else if (type.equals(TaskType.DEADLINE.getAbbreviation())) {","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"                String dateTime \u003d taskDetails[3].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"                Task deadlineTask \u003d new Deadline(description, dateTime, isDone);","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"                taskList.addTask(deadlineTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"            } else if (type.equals(TaskType.EVENT.getAbbreviation())) {","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"                String dateTime \u003d taskDetails[3].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"                Task eventTask \u003d new Event(description, dateTime, isDone);","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"                taskList.addTask(eventTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"                // Error detection for any invalid type of tasks found in the","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"                // storage file. This should not happen since the user is only","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"                // allowed to create todo [T], deadline [D] and event [E] tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(ErrorMessage.ERROR_INVALID_TYPE_OF_TASK.toString());","lastModifiedDate":"2022-01-31"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"        bufferedReader.close();","lastModifiedDate":"2022-01-27"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"        return taskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"     * Saves all the tasks in the task list to the data file.","lastModifiedDate":"2022-01-28"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list containing the tasks to be saved","lastModifiedDate":"2022-01-28"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved to the data file","lastModifiedDate":"2022-01-28"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"    public void saveTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"        FileWriter fileWriter \u003d new FileWriter(dataFile,false);","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c taskList.getNumOfTasks(); i++) {","lastModifiedDate":"2022-01-28"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"            Task task \u003d taskList.getTask(i);","lastModifiedDate":"2022-01-28"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"            bufferedWriter.write(task.saveFormat() + System.lineSeparator());","lastModifiedDate":"2022-01-27"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"        bufferedWriter.close();","lastModifiedDate":"2022-01-27"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dannytayjy":166}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a Deadline task.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class Deadline extends TaskWithDateTime {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Deadline class with task description","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * and date/time input.","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the Deadline task","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time by which the Deadline task needs to be completed","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public Deadline(String description, String dateTimeInput) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.DEADLINE, description, dateTimeInput);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Deadline class with task description,","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * date/time input and isDone flag.","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the Deadline task","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time by which the Deadline task needs to be completed","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the Deadline task is done","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public Deadline(String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.DEADLINE, description, dateTimeInput, isDone);","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Returns the date/time information by which the Deadline task needs to be completed.","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the date/time information","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public String dateTimeInfo() {","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        return \"(by: \" + super.getDateTimeOutput() + \")\";","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":39}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class that represents an Event task.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class Event extends TaskWithDateTime {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Event class with task description","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * and date/time input.","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the Event task","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time at which the Event task is taking place","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public Event(String description, String dateTimeInput) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.EVENT, description, dateTimeInput);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Event class with task description,","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * date/time input and isDone flag.","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the Event task","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time at which the Event task is taking place","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the Event task is done","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public Event(String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.EVENT, description, dateTimeInput, isDone);","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Returns the date/time information at which the Event task is taking place.","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the date/time information","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public String dateTimeInfo() {","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        return \"(at: \" + super.getDateTimeOutput() +\")\";","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An abstract class that represents a task.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    private final TaskType type;","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    private final String description;","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Task class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     * type and description.","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    public Task(TaskType type, String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        // By default, the task is not done","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        this(type, description, false);","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Task class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * type, description and isDone flag.","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the task is done","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    public Task(TaskType type, String description, boolean isDone) {","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * Returns the status icon based on whether the task is done.","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * @return ✔ if the task is done, empty otherwise","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"        return (isDone ? \"[✔]\" : \"[ ]\"); // mark done task with ✔","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     * Sets the isDone flag to true if the task is done.","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void setDone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"     * Sets the isDone flag to false if the task is not done.","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"    public void setNotDone() {","lastModifiedDate":"2022-01-20"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the date of the task is on the specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * The method will be overridden in TaskWithDateTime class that","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     * represents Deadline and Event tasks with date attached.","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"     * @return False as a general task does not have any date attached","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    public boolean isOnDate(String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the description of the task contains the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"     * @param keyword Keyword","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"     * @return Flag to indicate if the description of the task contains","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"     * the keyword","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"        return description.toLowerCase().contains(keyword.toLowerCase());","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2022-01-20"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"        return \"[\" + type.getAbbreviation() + \"] \" + getStatusIcon() + \" \" + description;","lastModifiedDate":"2022-01-20"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the task in save format.","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the task to be saved","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"        return type.getAbbreviation() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":101}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.CommandType;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import java.util.List;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * A class that represents the List of tasks and List of filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"public class TaskList {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private List\u003cTask\u003e filteredTasks;","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    private CommandType filterCommandType;","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    private String filterInfo;","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of TaskList class with List of","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * tasks as a new ArrayList, List of filteredTasks as a new ArrayList,","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * filterCommandType as null and filterInfo as null.","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        filterCommandType \u003d null;","lastModifiedDate":"2022-01-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        filterInfo \u003d null;","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Returns the number of tasks in the List of tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return The number of tasks in the List of tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public int getNumOfTasks() {","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        return tasks.size();","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * Returns the number of tasks in the List of filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @return The number of tasks in the List of filtered tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    public int getNumOfFilteredTasks() {","lastModifiedDate":"2022-01-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        return filteredTasks.size();","lastModifiedDate":"2022-01-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * Returns the task at the specified position in the List of tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * @param index Index of the task in the List of tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     * @return The task at the specified position in the List of tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        return tasks.get(index);","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"     * Returns the task at the specified position in the List of filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * @param index Index of the task in the List of filtered tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * @return The task at the specified position in the List of filtered tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"    public Task getFilteredTask(int index) {","lastModifiedDate":"2022-01-30"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        return filteredTasks.get(index);","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the task list has filtered tasks, i.e., List of filtered tasks","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"     * is not empty.","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"     * @return True if the List of filteredTasks is not empty, false otherwise","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"    public boolean hasFilter() {","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"        return !filteredTasks.isEmpty();","lastModifiedDate":"2022-01-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"     * Returns the filter command type.","lastModifiedDate":"2022-01-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     * @return The filter command type","lastModifiedDate":"2022-01-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"    public CommandType getFilterCommandType() {","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"        return filterCommandType;","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"     * Returns the filter information.","lastModifiedDate":"2022-01-30"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"     * @return The filter information","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"    public String getFilterInfo() {","lastModifiedDate":"2022-01-30"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"        return filterInfo;","lastModifiedDate":"2022-01-30"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"     * Resets the filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"     * This will initialise List of filteredTasks as a new ArrayList,","lastModifiedDate":"2022-01-30"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"     * filterCommandType as null and filterInfo as null.","lastModifiedDate":"2022-01-30"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"    public void resetFilteredTasks() {","lastModifiedDate":"2022-01-30"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"        filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-30"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"        filterCommandType \u003d null;","lastModifiedDate":"2022-01-30"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"        filterInfo \u003d null;","lastModifiedDate":"2022-01-30"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"     * Sets the filtered tasks with tasks that occurs on the specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"     * This will initialise List of filteredTasks with the tasks that occurs","lastModifiedDate":"2022-01-31"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"     * on the specified date, filterCommandType as Print CommandType and","lastModifiedDate":"2022-01-31"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"     * filterInfo as the specified date.","lastModifiedDate":"2022-01-31"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"    public void setFilteredTasksByDate(String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"        filteredTasks \u003d tasks.stream()","lastModifiedDate":"2022-01-30"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"                .filter(task -\u003e task.isOnDate(dateStr))","lastModifiedDate":"2022-01-30"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-01-30"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"        filterCommandType \u003d CommandType.PRINT;","lastModifiedDate":"2022-01-30"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"        filterInfo \u003d dateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"     * Sets the filtered tasks with tasks that contains the keyword in the","lastModifiedDate":"2022-01-31"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"     * description.","lastModifiedDate":"2022-01-31"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"     * This will initialise List of filteredTasks with the tasks that contains","lastModifiedDate":"2022-01-31"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"     * the keyword in the description, filterCommandType as Find CommandType","lastModifiedDate":"2022-01-31"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"     * and filterInfo as the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"     * @param keyword Keyword in the description","lastModifiedDate":"2022-01-31"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"    public void setFilteredTasksByKeyword(String keyword) {","lastModifiedDate":"2022-01-31"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"        filteredTasks \u003d tasks.stream()","lastModifiedDate":"2022-01-31"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"                .filter(task -\u003e task.hasKeyword(keyword))","lastModifiedDate":"2022-01-31"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-01-31"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"        filterCommandType \u003d CommandType.FIND;","lastModifiedDate":"2022-01-31"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"        filterInfo \u003d keyword;","lastModifiedDate":"2022-01-31"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"     * Adds the ToDo task to the List of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Description of the ToDo task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"     * @return The ToDo task that was added","lastModifiedDate":"2022-01-28"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"    public Task addToDoTask(String taskDescription) {","lastModifiedDate":"2022-01-28"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"        Task toDoTask \u003d new ToDo(taskDescription);","lastModifiedDate":"2022-01-28"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"        addTask(toDoTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"        return toDoTask;","lastModifiedDate":"2022-01-28"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"     * Adds the Deadline task to the List of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Description of the Deadline task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDateTime Date/time of the Deadline task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"     * @return The Deadline task that was added","lastModifiedDate":"2022-01-28"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"    public Task addDeadlineTask(String taskDescription, String taskDateTime) {","lastModifiedDate":"2022-01-28"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"        Task deadlineTask \u003d new Deadline(taskDescription, taskDateTime);","lastModifiedDate":"2022-01-28"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"        addTask(deadlineTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"        return deadlineTask;","lastModifiedDate":"2022-01-28"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"     * Adds the Event task to the List of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Description of the Event task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDateTime Date/time of the Event task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"     * @return The Event task that was added","lastModifiedDate":"2022-01-28"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"    public Task addEventTask(String taskDescription, String taskDateTime) {","lastModifiedDate":"2022-01-28"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"        Task eventTask \u003d new Event(taskDescription, taskDateTime);","lastModifiedDate":"2022-01-28"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"        addTask(eventTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"        return eventTask;","lastModifiedDate":"2022-01-28"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"     * Adds the task to the List of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"     * @param task Task to be added","lastModifiedDate":"2022-01-28"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-01-28"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"        tasks.add(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"        // Reset the List of filteredTasks when a new task is added to","lastModifiedDate":"2022-01-31"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"        // the List of tasks","lastModifiedDate":"2022-01-31"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"        resetFilteredTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as done based on the corresponding task number","lastModifiedDate":"2022-01-30"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"     * in the List of tasks or List of filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Corresponding task number of the task in the","lastModifiedDate":"2022-01-31"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"     *                respective list to be marked as done","lastModifiedDate":"2022-01-31"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as done","lastModifiedDate":"2022-01-28"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"    public Task markDone(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"        Task task \u003d getTaskBasedOnFilterAndTaskNum(taskNum);","lastModifiedDate":"2022-01-31"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"        task.setDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"        return task;","lastModifiedDate":"2022-01-28"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as not done yet based on the corresponding","lastModifiedDate":"2022-01-31"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"     * task number in the List of tasks or List of filtered tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Corresponding task number of the task in the","lastModifiedDate":"2022-01-31"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"     *                respective list to be marked as not done yet","lastModifiedDate":"2022-01-31"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was marked as not done yet","lastModifiedDate":"2022-01-28"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"    public Task markNotDone(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"        Task task \u003d getTaskBasedOnFilterAndTaskNum(taskNum);","lastModifiedDate":"2022-01-31"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"        task.setNotDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"        return task;","lastModifiedDate":"2022-01-28"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"     * Deletes the task based on the corresponding task number in","lastModifiedDate":"2022-01-31"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"     * the List of tasks or List of filtered tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":227,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":228,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Corresponding task number of the task in the","lastModifiedDate":"2022-01-31"},{"lineNumber":229,"author":{"gitId":"dannytayjy"},"content":"     *                respective list to be deleted","lastModifiedDate":"2022-01-31"},{"lineNumber":230,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was deleted","lastModifiedDate":"2022-01-28"},{"lineNumber":231,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":232,"author":{"gitId":"dannytayjy"},"content":"    public Task deleteTask(int taskNum) {","lastModifiedDate":"2022-01-28"},{"lineNumber":233,"author":{"gitId":"dannytayjy"},"content":"        Task task \u003d getTaskBasedOnFilterAndTaskNum(taskNum);","lastModifiedDate":"2022-01-31"},{"lineNumber":234,"author":{"gitId":"dannytayjy"},"content":"        tasks.remove(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":235,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":236,"author":{"gitId":"dannytayjy"},"content":"        if (hasFilter()) {","lastModifiedDate":"2022-01-30"},{"lineNumber":237,"author":{"gitId":"dannytayjy"},"content":"            filteredTasks.remove(task);","lastModifiedDate":"2022-01-30"},{"lineNumber":238,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":239,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":240,"author":{"gitId":"dannytayjy"},"content":"        return task;","lastModifiedDate":"2022-01-28"},{"lineNumber":241,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":242,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":243,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":244,"author":{"gitId":"dannytayjy"},"content":"     * Returns the task based on the corresponding task number in","lastModifiedDate":"2022-01-31"},{"lineNumber":245,"author":{"gitId":"dannytayjy"},"content":"     * the List of tasks or List of filtered tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":246,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":247,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Corresponding task number of the task in the","lastModifiedDate":"2022-01-31"},{"lineNumber":248,"author":{"gitId":"dannytayjy"},"content":"     *                respective list","lastModifiedDate":"2022-01-31"},{"lineNumber":249,"author":{"gitId":"dannytayjy"},"content":"     * @return The task that was retrieved","lastModifiedDate":"2022-01-31"},{"lineNumber":250,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":251,"author":{"gitId":"dannytayjy"},"content":"    public Task getTaskBasedOnFilterAndTaskNum(int taskNum) {","lastModifiedDate":"2022-01-31"},{"lineNumber":252,"author":{"gitId":"dannytayjy"},"content":"        return !hasFilter()","lastModifiedDate":"2022-01-31"},{"lineNumber":253,"author":{"gitId":"dannytayjy"},"content":"                ? getTask(taskNum - 1)","lastModifiedDate":"2022-01-31"},{"lineNumber":254,"author":{"gitId":"dannytayjy"},"content":"                : getFilteredTask(taskNum - 1);","lastModifiedDate":"2022-01-31"},{"lineNumber":255,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":256,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":257,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":258,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the List of tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":259,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":260,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the List of tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":261,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":262,"author":{"gitId":"dannytayjy"},"content":"    public String listOfTasksString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":263,"author":{"gitId":"dannytayjy"},"content":"        StringBuilder listBuilder \u003d new StringBuilder();","lastModifiedDate":"2022-01-28"},{"lineNumber":264,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":265,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c getNumOfTasks(); i++) {","lastModifiedDate":"2022-01-28"},{"lineNumber":266,"author":{"gitId":"dannytayjy"},"content":"            String listItem \u003d (i + 1) + \".\" + \"\\t\" + getTask(i);","lastModifiedDate":"2022-01-28"},{"lineNumber":267,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":268,"author":{"gitId":"dannytayjy"},"content":"            if (i !\u003d 0) {","lastModifiedDate":"2022-01-28"},{"lineNumber":269,"author":{"gitId":"dannytayjy"},"content":"                listBuilder.append(System.lineSeparator());","lastModifiedDate":"2022-01-28"},{"lineNumber":270,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":271,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":272,"author":{"gitId":"dannytayjy"},"content":"            listBuilder.append(\"\\t\").append(listItem);","lastModifiedDate":"2022-01-28"},{"lineNumber":273,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":274,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":275,"author":{"gitId":"dannytayjy"},"content":"        return listBuilder.toString();","lastModifiedDate":"2022-01-28"},{"lineNumber":276,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":277,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":278,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":279,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the List of filtered tasks.","lastModifiedDate":"2022-01-30"},{"lineNumber":280,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":281,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the List of filtered tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":282,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":283,"author":{"gitId":"dannytayjy"},"content":"    public String listOfFilteredTasksString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":284,"author":{"gitId":"dannytayjy"},"content":"        StringBuilder listBuilder \u003d new StringBuilder();","lastModifiedDate":"2022-01-30"},{"lineNumber":285,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":286,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c getNumOfFilteredTasks(); i++) {","lastModifiedDate":"2022-01-30"},{"lineNumber":287,"author":{"gitId":"dannytayjy"},"content":"            String listItem \u003d (i + 1) + \".\" + \"\\t\" + getFilteredTask(i);","lastModifiedDate":"2022-01-30"},{"lineNumber":288,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":289,"author":{"gitId":"dannytayjy"},"content":"            if (i !\u003d 0) {","lastModifiedDate":"2022-01-30"},{"lineNumber":290,"author":{"gitId":"dannytayjy"},"content":"                listBuilder.append(System.lineSeparator());","lastModifiedDate":"2022-01-30"},{"lineNumber":291,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-30"},{"lineNumber":292,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":293,"author":{"gitId":"dannytayjy"},"content":"            listBuilder.append(\"\\t\").append(listItem);","lastModifiedDate":"2022-01-30"},{"lineNumber":294,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":295,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":296,"author":{"gitId":"dannytayjy"},"content":"        return listBuilder.toString();","lastModifiedDate":"2022-01-30"},{"lineNumber":297,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":298,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":299,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":300,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the task list.","lastModifiedDate":"2022-01-30"},{"lineNumber":301,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":302,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the List of tasks if there","lastModifiedDate":"2022-01-30"},{"lineNumber":303,"author":{"gitId":"dannytayjy"},"content":"     * is no filter and the List of filtered tasks if there is a filter","lastModifiedDate":"2022-01-30"},{"lineNumber":304,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":305,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":306,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":307,"author":{"gitId":"dannytayjy"},"content":"        return !hasFilter() ? listOfTasksString() : listOfFilteredTasksString();","lastModifiedDate":"2022-01-30"},{"lineNumber":308,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":309,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"dannytayjy":309}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An enumeration that defines different task types.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public enum TaskType {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    TODO(\"T\"),","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    DEADLINE(\"D\"),","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    EVENT(\"E\");","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private final String abbreviation;","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of TaskType enumeration","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * with abbreviation field.","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * @param abbreviation Abbreviation of the task type","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    TaskType(String abbreviation) {","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        this.abbreviation \u003d abbreviation;","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * Returns the abbreviation of the task type.","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * @return The abbreviation of the task type","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    public String getAbbreviation() {","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        return abbreviation;","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":31}},{"path":"src/main/java/duke/task/TaskWithDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" * An abstract class that represents a task with date/time.","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"public abstract class TaskWithDateTime extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private String dateTimeInput;","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    private String dateInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private LocalDate date;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /* DateTime of the task to be printed */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    private String dateTimeOutput;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of TaskWithDateTime class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * type, description and date/time input.","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time input of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    public TaskWithDateTime(TaskType type, String description, String dateTimeInput) {","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        this(type, description, dateTimeInput, false);","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of TaskWithDateTime class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * type, description, date/time input and isDone flag.","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time input of the task","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the task is done","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    public TaskWithDateTime(TaskType type, String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, isDone);","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        this.dateTimeInput \u003d dateTimeInput;","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"        processDateTimeInput();","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     * Processes the date/time input string to check if it is a valid date/time","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     * format accepted by the system. If it is a valid date/time format, generate","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * output with the proper date/time, otherwise generate output with the input.","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"    private void processDateTimeInput() {","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"        String[] dateTimeInputParts \u003d dateTimeInput.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        String timeInput;","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        if (dateTimeInputParts.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            dateInput \u003d dateTimeInputParts[0].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            timeInput \u003d dateTimeInputParts[1].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"            // Omit any additional whitespaces in between date and time inputs","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            dateTimeInput \u003d dateInput + \" \" + timeInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"            dateInput \u003d dateTimeInputParts[0].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"            timeInput \u003d \"\";","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"            // Omit any additional whitespaces that comes with date input","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"            dateTimeInput \u003d dateInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"        // Process date input","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"        date \u003d processDateInput(dateInput);","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        // Process time input","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"        LocalTime time \u003d isTimeInputProper(timeInput) ? processTimeInput(timeInput) : null;","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"        // Generate dateTime output","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"        dateTimeOutput \u003d generateDateTimeOutput(date, dateInput, time, timeInput, isTimeInputProper(timeInput));","lastModifiedDate":"2022-01-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     * Returns the date in LocalDate format if date input string is a valid date","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     * format accepted by the system.","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     * @param dateInput Date input of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     * @return The date, if valid, in LocalDate format, null otherwise","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    private LocalDate processDateInput(String dateInput) {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"            return LocalDate.parse(dateInput);","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"            return null;","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the time input string is in a proper time format of 4 digits","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"     * string and within the possible range (0000 to 2359).","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"     * If time input string is not in a proper time format of 4 digits, it is","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"     * still considered a proper time input defined by the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"     * @param timeInput Time input of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"     * @return True if time input is proper and within range, false otherwise","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"    private boolean isTimeInputProper(String timeInput) {","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"            int timeInputInInt \u003d Integer.parseInt(timeInput);","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"            return timeInput.length() \u003d\u003d 4 \u0026\u0026 (timeInputInInt \u003e\u003d 0 \u0026\u0026 timeInputInInt \u003c\u003d 2359);","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"            return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"     * Returns the time in LocalTime format if time input string is a valid time","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"     * format accepted by the system.","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"     * @param timeInput Time input of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"     * @return The time, if valid, in LocalTime format, null otherwise.","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"    private LocalTime processTimeInput(String timeInput) {","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"            int timeInputInInt \u003d Integer.parseInt(timeInput);","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"            int hour \u003d timeInputInInt / 100;","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"            int min \u003d timeInputInInt - (hour * 100);","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"            String timeInputInTimeFormat \u003d (hour \u003c 10 ? \"0\" + hour : hour)","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"                    + \":\" + (min \u003c 10 ? \"0\" + min : min);","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ISO_LOCAL_TIME;","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"            return LocalTime.parse(timeInputInTimeFormat, timeFormatter);","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"        } catch (DateTimeParseException | NumberFormatException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"            return null;","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"     * Generates the date/time output of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"     * @param date Date in LocalDate format","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"     * @param dateInput Date input of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"     * @param time Time in LocalTime format","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"     * @param timeInput Time input of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"     * @param isTimeInputProper Flag to indicate if the input time is proper","lastModifiedDate":"2022-01-27"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"     * @return The date/time output of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"    private String generateDateTimeOutput(LocalDate date, String dateInput, LocalTime time,","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"                                          String timeInput, boolean isTimeInputProper) {","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"        String dateTimeOutput \u003d \"\";","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"        // Put date into output String","lastModifiedDate":"2022-01-31"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2022-01-27"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"            dateTimeOutput \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"            dateTimeOutput \u003d dateInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"        // Put time into output String","lastModifiedDate":"2022-01-31"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"        if (time !\u003d null) {","lastModifiedDate":"2022-01-27"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"            dateTimeOutput +\u003d \", \" + time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"            if (!timeInput.equals(\"\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"                dateTimeOutput +\u003d \", \" + timeInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"                if (!isTimeInputProper) {","lastModifiedDate":"2022-01-27"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"                    dateTimeOutput +\u003d \" [Note: Invalid time format]\";","lastModifiedDate":"2022-01-27"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"        return dateTimeOutput;","lastModifiedDate":"2022-01-27"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the date/time in output format.","lastModifiedDate":"2022-01-27"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the date/time for output","lastModifiedDate":"2022-01-27"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"    public String getDateTimeOutput() {","lastModifiedDate":"2022-01-27"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"        return dateTimeOutput;","lastModifiedDate":"2022-01-27"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"     * An abstract method to return the date/time information of the task.","lastModifiedDate":"2022-01-20"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"     * The method will be implemented in the extended classes.","lastModifiedDate":"2022-01-20"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the date/time information","lastModifiedDate":"2022-01-20"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"    public abstract String dateTimeInfo();","lastModifiedDate":"2022-01-20"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"     * Checks if the date of the task is on the specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"     * @return Flag to indicate if the date of the task is on the specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"    public boolean isOnDate(String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-30"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"            LocalDate dateToSearch \u003d LocalDate.parse(dateStr);","lastModifiedDate":"2022-01-30"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"            return date !\u003d null ? date.equals(dateToSearch) : dateInput.equals(dateStr);","lastModifiedDate":"2022-01-31"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-30"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"            return dateInput.equals(dateStr);","lastModifiedDate":"2022-01-30"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the task with date/time information.","lastModifiedDate":"2022-01-20"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the task with date/time information","lastModifiedDate":"2022-01-20"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"        return super.toString() + \" \" + dateTimeInfo();","lastModifiedDate":"2022-01-27"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"     * Returns the string representation of the task with date/time in save format.","lastModifiedDate":"2022-01-27"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the task with date/time to be saved","lastModifiedDate":"2022-01-27"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-01-27"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"        return super.saveFormat() + \" | \" + dateTimeInput;","lastModifiedDate":"2022-01-27"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":226}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class that represents a ToDo task.","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of ToDo class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * description.","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the ToDo task","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.TODO, description);","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initializes an instance of ToDo class with task","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * description and isDone flag.","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param description Description of the ToDo task","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the ToDo task is done","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        super(TaskType.TODO, description, isDone);","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":27}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.ui;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" * A class that handles the interactions with the user.","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"public class Ui {","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Constructor to initialize an instance of Ui class.","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    public Ui() {","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * Reads the command line input from the user.","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @return The command line that was entered","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    public String readCommand() {","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"ENTER COMMAND:\");","lastModifiedDate":"2022-01-20"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        System.out.print(\"\\t\");","lastModifiedDate":"2022-01-20"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        return sc.nextLine().trim();","lastModifiedDate":"2022-01-20"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * Displays the welcome message.","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public void displayWelcome() {","lastModifiedDate":"2022-01-20"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        String logo \u003d \"\\t\" + \" ____        _        \" + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"|  _ \\\\ _   _| | _____\" + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"| | | | | | | |/ / _\" + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"| |_| | |_| |   \u003c  __/\" + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\" + System.lineSeparator();","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        String welcomeMessage \u003d \"\\t\" + \"Hello! I\u0027m Duke, your Personal Assistant ChatBot.\"","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"                /* + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"                + logo */","lastModifiedDate":"2022-01-20"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-20"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"What can I do for you?\";","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        displayResponse(welcomeMessage);","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"     * Displays the goodbye message on exiting.","lastModifiedDate":"2022-01-20"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"    public void displayExit() {","lastModifiedDate":"2022-01-20"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        String exitMessage \u003d \"\\t\" + \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-01-20"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        displayResponse(exitMessage);","lastModifiedDate":"2022-01-20"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * Displays the response message with proper formatting.","lastModifiedDate":"2022-01-20"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     * @param message Response message to be displayed","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"    public void displayResponse(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(message);","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"     * Displays the error message with proper formatting.","lastModifiedDate":"2022-01-20"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"     * @param message Error message to be displayed","lastModifiedDate":"2022-01-20"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"    public void displayError(String message) {","lastModifiedDate":"2022-01-20"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2022-01-20"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"ERROR MESSAGE:\");","lastModifiedDate":"2022-01-20"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"\\t\" + \"☹ \" + message);","lastModifiedDate":"2022-01-20"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"     * Displays the filtered tasks message with proper formatting.","lastModifiedDate":"2022-01-30"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     * @param message Filtered tasks message to be displayed","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"    public void displayFilteredTasks(String message) {","lastModifiedDate":"2022-01-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2022-01-30"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"[FILTERED TASKS]\" + System.lineSeparator());","lastModifiedDate":"2022-01-30"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(message);","lastModifiedDate":"2022-01-30"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"     * Displays a line to separate different parts of a message.","lastModifiedDate":"2022-01-20"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"    public void displayLine() {","lastModifiedDate":"2022-01-20"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"        String horizontalLine \u003d \"____________________________________________________________\";","lastModifiedDate":"2022-01-20"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2022-01-20"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message when the task is added.","lastModifiedDate":"2022-01-20"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"     * @param task Task that is added","lastModifiedDate":"2022-01-20"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"    public String taskAddedMessage(Task task) {","lastModifiedDate":"2022-01-20"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Got it. I\u0027ve added this task:\"","lastModifiedDate":"2022-01-20"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2022-01-20"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message when the task is marked as done.","lastModifiedDate":"2022-01-20"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"     * @param task Task that is marked as done","lastModifiedDate":"2022-01-20"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"    public String taskDoneMessage(Task task) {","lastModifiedDate":"2022-01-20"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Nice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2022-01-20"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2022-01-20"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message when the task is marked as not done yet.","lastModifiedDate":"2022-01-20"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"     * @param task Task that is marked as not done yet","lastModifiedDate":"2022-01-20"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"    public String taskNotDoneMessage(Task task) {","lastModifiedDate":"2022-01-20"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"OK, I\u0027ve marked this task as not done yet:\"","lastModifiedDate":"2022-01-20"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2022-01-20"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message when the task is removed.","lastModifiedDate":"2022-01-20"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"     * @param task Task that is removed","lastModifiedDate":"2022-01-20"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"    public String taskDeletedMessage(Task task) {","lastModifiedDate":"2022-01-20"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Noted. I\u0027ve removed this task:\"","lastModifiedDate":"2022-01-20"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2022-01-20"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message with the number of tasks in the task list.","lastModifiedDate":"2022-01-20"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list containing all the tasks","lastModifiedDate":"2022-01-28"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"    public String numOfTasksInListMessage(TaskList taskList) {","lastModifiedDate":"2022-01-28"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Now you have \" + taskList.getNumOfTasks()","lastModifiedDate":"2022-01-28"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"                + (taskList.getNumOfTasks() \u003e 1 ? \" tasks\" : \" task\")","lastModifiedDate":"2022-01-28"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"                + \" in the list.\";","lastModifiedDate":"2022-01-20"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message with all the tasks in the task list.","lastModifiedDate":"2022-01-20"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-20"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list containing all the tasks","lastModifiedDate":"2022-01-28"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-20"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"    public String tasksInListMessage(TaskList taskList) {","lastModifiedDate":"2022-01-28"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Here\"","lastModifiedDate":"2022-01-28"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"                + (taskList.getNumOfTasks() \u003e 1 ? \" are the tasks \" : \" is the task \")","lastModifiedDate":"2022-01-28"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"                + \"in your list:\"","lastModifiedDate":"2022-01-28"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-28"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"[Legend: T \u003d todo, D \u003d deadline, E \u003d event]\"","lastModifiedDate":"2022-01-28"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-28"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-28"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"                + taskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message with the tasks in the task list that","lastModifiedDate":"2022-01-30"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"     * occurs on the specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list containing all the tasks","lastModifiedDate":"2022-01-30"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-30"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"    public String tasksOnDateMessage(TaskList taskList, String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Here\"","lastModifiedDate":"2022-01-30"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"                + (taskList.getNumOfFilteredTasks() \u003e 1 ? \" are the tasks \" : \" is the task \")","lastModifiedDate":"2022-01-30"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"                + \"on this date (\" + processDateStr(dateStr) + \"):\"","lastModifiedDate":"2022-01-30"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-30"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" +  \"[Legend: T \u003d todo, D \u003d deadline, E \u003d event]\"","lastModifiedDate":"2022-01-30"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-30"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-30"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"                + taskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"     * Returns the specified date string after processing.","lastModifiedDate":"2022-01-30"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"     * If the specified date is a valid date format accepted by","lastModifiedDate":"2022-01-30"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"     * the system, return the date in LocalDate (MMM d yyyy) format,","lastModifiedDate":"2022-01-30"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"     * otherwise return the original specified date.","lastModifiedDate":"2022-01-30"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-30"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr Specified date","lastModifiedDate":"2022-01-30"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"     * @return Specified date string after processing","lastModifiedDate":"2022-01-30"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"    private String processDateStr(String dateStr) {","lastModifiedDate":"2022-01-30"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"        LocalDate date;","lastModifiedDate":"2022-01-30"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"        String processedDateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-30"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"            date \u003d LocalDate.parse(dateStr);","lastModifiedDate":"2022-01-30"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"            processedDateStr \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-01-30"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-01-30"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"            processedDateStr \u003d dateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"        return processedDateStr;","lastModifiedDate":"2022-01-30"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"     * Returns the message with the tasks in the task list that","lastModifiedDate":"2022-01-31"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"     * contains the keyword in the description.","lastModifiedDate":"2022-01-31"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList Task list containing all the tasks","lastModifiedDate":"2022-01-31"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"     * @param keyword Keyword in the description","lastModifiedDate":"2022-01-31"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the message","lastModifiedDate":"2022-01-31"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"    public String tasksWithKeywordMessage(TaskList taskList, String keyword) {","lastModifiedDate":"2022-01-31"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Here\"","lastModifiedDate":"2022-01-31"},{"lineNumber":227,"author":{"gitId":"dannytayjy"},"content":"                + (taskList.getNumOfFilteredTasks() \u003e 1 ? \" are the matching tasks \" : \" is the matching task \")","lastModifiedDate":"2022-01-31"},{"lineNumber":228,"author":{"gitId":"dannytayjy"},"content":"                + \"in your list:\"","lastModifiedDate":"2022-01-31"},{"lineNumber":229,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-31"},{"lineNumber":230,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"[Keyword Search: \" + keyword + \"]\"","lastModifiedDate":"2022-01-31"},{"lineNumber":231,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-31"},{"lineNumber":232,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"[Legend: T \u003d todo, D \u003d deadline, E \u003d event]\"","lastModifiedDate":"2022-01-31"},{"lineNumber":233,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-31"},{"lineNumber":234,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2022-01-31"},{"lineNumber":235,"author":{"gitId":"dannytayjy"},"content":"                + taskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":236,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":237,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":237}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import java.io.File;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"public class AddCommandTest {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    public void execute_addToDoCommand() throws DukeException, IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"        Storage storage \u003d new Storage(\"data\",\"test.txt\");","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        AddCommand addToDoCommand \u003d new AddToDoCommand(\"Test ToDo Task\");","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        addToDoCommand.execute(taskList, ui, storage);","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        Task toDoTask \u003d taskList.getTask(0);","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[T] [ ] Test ToDo Task\", toDoTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        // Deletes the data file and its directory after JUnit test","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"        File dataFile \u003d storage.getDataFile();","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"        File directory \u003d storage.getDirectory();","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(dataFile.delete() \u0026\u0026 directory.delete());","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public void execute_addDeadlineCommand() throws DukeException, IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        Storage storage \u003d new Storage(\"data\",\"test.txt\");","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        AddCommand addDeadlineCommand \u003d new AddDeadlineCommand(\"Test Deadline Task /by 2022-01-30 2359\");","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        addDeadlineCommand.execute(taskList, ui, storage);","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        Task deadlineTask \u003d taskList.getTask(0);","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[D] [ ] Test Deadline Task (by: Jan 30 2022, 11:59 PM)\", deadlineTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        // Deletes the data file and its directory after JUnit test","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        File dataFile \u003d storage.getDataFile();","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        File directory \u003d storage.getDirectory();","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(dataFile.delete() \u0026\u0026 directory.delete());","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    public void execute_addEventCommand() throws DukeException, IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        Storage storage \u003d new Storage(\"data\",\"test.txt\");","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"        AddCommand addEventCommand \u003d new AddEventCommand(\"Test Event Task /at 2022-01-31 7-10pm\");","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        addEventCommand.execute(taskList, ui, storage);","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"        Task eventTask \u003d taskList.getTask(0);","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[E] [ ] Test Event Task (at: Jan 31 2022, 7-10pm)\", eventTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        // Deletes the data file and its directory after JUnit test","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"        File dataFile \u003d storage.getDataFile();","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"        File directory \u003d storage.getDirectory();","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(dataFile.delete() \u0026\u0026 directory.delete());","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"dannytayjy":70}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.parser;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addToDoCommand_success() throws DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"todo Test ToDo Task\";","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"        Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(command instanceof AddToDoCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addToDoCommand_missingDescription_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"todo\";","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddToDoCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"The description of a todo cannot be empty!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addDeadlineCommand_success() throws DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"deadline Test Deadline Task /by 2022-01-30 2359\";","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(command instanceof AddDeadlineCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addDeadlineCommand_missingDescription_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"deadline /by 2022-01-30 2359\";","lastModifiedDate":"2022-01-29"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddToDoCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description of a deadline cannot be empty!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addDeadlineCommand_wrongCommand_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"deadline Test Deadline Task /at 2022-01-30 2359\";","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddDeadlineCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"WRONG COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"                    + \"Enter /by before specifying the date/time!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addDeadlineCommand_missingDescriptionAndWrongCommand_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"deadline /at 2022-01-30 2359\";","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddToDoCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description of a deadline cannot be empty!\"","lastModifiedDate":"2022-01-29"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"                    + \"Enter /by before specifying the date/time!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addEventCommand_success() throws DukeException {","lastModifiedDate":"2022-01-29"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"event Test Event Task /at 2022-01-31 7-10pm\";","lastModifiedDate":"2022-01-29"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"        Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"        assertTrue(command instanceof AddEventCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addEventCommand_missingDescription_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"event /at 2022-01-31 7-10pm\";","lastModifiedDate":"2022-01-29"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddEventCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"INCOMPLETE COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description of an event cannot be empty!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addEventCommand_wrongCommand_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"event Test Event Task /by 2022-01-31 7-10pm\";","lastModifiedDate":"2022-01-29"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddEventCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"WRONG COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"                    + \"Enter /at before specifying the date/time!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"    public void parse_addEventCommand_missingDescriptionAndWrongCommand_exceptionThrown() {","lastModifiedDate":"2022-01-29"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-01-29"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"        String commandLine \u003d \"event /by 2022-01-31 7-10pm\";","lastModifiedDate":"2022-01-29"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"            Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2022-01-29"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"            assertTrue(command instanceof AddEventCommand);","lastModifiedDate":"2022-01-29"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-01-29"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"            String errorMessage \u003d \"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2022-01-29"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description of an event cannot be empty!\"","lastModifiedDate":"2022-01-29"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2022-01-29"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"                    + \"Enter /at before specifying the date/time!\";","lastModifiedDate":"2022-01-29"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"            assertEquals(errorMessage, e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"dannytayjy":160}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"public class TaskTest {","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    public void toStringAndSaveFormat_toDoTask() {","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"        Task toDoTask \u003d new ToDo(\"Test ToDo Task\");","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[T] [ ] Test ToDo Task\", toDoTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"T | 0 | Test ToDo Task\", toDoTask.saveFormat());","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    public void toStringAndSaveFormat_deadlineTask() {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"        Task deadlineTask \u003d new Deadline(\"Test Deadline Task\", \"2022-01-30 2359\");","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[D] [ ] Test Deadline Task (by: Jan 30 2022, 11:59 PM)\", deadlineTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"D | 0 | Test Deadline Task | 2022-01-30 2359\", deadlineTask.saveFormat());","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public void toStringAndSaveFormat_eventTask() {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        Task eventTask \u003d new Event(\"Test Event Task\", \"2022-01-31 7-10pm\");","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[E] [ ] Test Event Task (at: Jan 31 2022, 7-10pm)\", eventTask.toString());","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"E | 0 | Test Event Task | 2022-01-31 7-10pm\", eventTask.saveFormat());","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"dannytayjy":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"todo read book","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"deadline return book /by Jun 6th","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"todo join sports club","lastModifiedDate":"2022-01-20"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"mark 4","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"todo borrow book","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"event project meeting /at Monday 2-4pm","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"bye","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"dannytayjy":19}}]
