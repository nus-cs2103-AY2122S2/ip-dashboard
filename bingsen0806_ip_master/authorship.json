[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"# duke.main.Duke project template","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"3. After that, locate the `src/main/java/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bingsen0806":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"    mainClassName \u003d \"duke.main.Main\"","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":45,"bingsen0806":2}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"T | 0 | test","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"D | 1 | cs2103 level 8 | 2022/01/24 0200","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"E | 0 | cs2010 lect | 2022/01/24 0800","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"bingsen0806":3}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, adds a Deadline object into a given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    private String description;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new AddDeadlineCommand instance with the initialized description and deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"     * @param description Description of the Deadline object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"     * @param deadline Deadline of the Deadline object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    public AddDeadlineCommand(String description, LocalDateTime deadline) {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     * Adds the Deadline object to the TaskList and displays the newly added Deadline on Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance in which the Deadline object is added into.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"        Deadline newDeadline \u003d new Deadline(description, deadline);","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"        String message \u003d String.format(\"%s\\n  %s\\nThere are %d tasks in the burning list.\",","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"                Ui.ADD_MESSAGE, newDeadline, tasks.getSize());","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"        ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":44}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, adds an Event object into a given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    private String description;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new AddEventCommand instance with the initialized description and deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"     * @param description Description of the Event object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"     * @param dateTime Date and Time of the Event object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    public AddEventCommand(String description, LocalDateTime dateTime) {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     * Adds the Event object to the TaskList and displays the newly added Event on Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance in which the Event object is added into.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"        Event newEvent \u003d new Event(description, dateTime);","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"        String message \u003d String.format(\"%s\\n  %s\\nThere are %d tasks in the burning list.\",","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"                Ui.ADD_MESSAGE, newEvent, tasks.getSize());","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"        ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":44}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, adds a ToDo object into a given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"    private String description;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new AddTodoCommand instance with the initialized description and deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"     * @param description Description of the ToDo object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"     * Adds the ToDo object to the TaskList and displays the newly added Event on Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance in which the ToDo object is added into.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"        ToDo newTodo \u003d new ToDo(description);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"        String message \u003d String.format(\"%s\\n  %s\\nThere are %d tasks in the burning list.\",","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"                Ui.ADD_MESSAGE, newTodo, tasks.getSize());","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"        ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":39}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"    private boolean isExit;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"    public Command(boolean isExit) {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        return isExit;","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":19}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, deletes a Task from the given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    private int taskIndex;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new DeleteCommand instance with the initialized index.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     * @param taskIndex Zero based index of the Task to be deleted.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"     * Deletes the Task object to the TaskList and displays the deleted Task on Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     * Displays the error message on Ui if the given Task cannot be deleted successfully.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance in which the Task object is deleted from.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"            Task task \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"            tasks.delete(taskIndex);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"            String message \u003d String.format(\"%s\\n  %s\\nThere are %d tasks in the burning list.\",","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"                    Ui.REMOVE_MESSAGE, task.toString(), tasks.getSize());","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"            ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":45}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, exits the Duke Program.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d true;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new ExitCommand instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"    public ExitCommand() {","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"     * Saves all user tasks into disk and displays an exit message on the Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     * Displays the error message on Ui if the tasks cannot be stored successfully.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList object that contains all user tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying the Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"     * @param storage The Storage object used for storing tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"            storage.saveFileData(tasks.getTasks());","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"            ui.appendMessage(Ui.BYE_MESSAGE);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, finds all matching Task objects in the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    private String searchDescription;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new FindCommand instance with the specified search description.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"     * @param searchDescription The text which descriptions of matching tasks are expected to contain","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"    public FindCommand(String searchDescription) {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"        this.searchDescription \u003d searchDescription;","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     * Displays all matching Task objects from the given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance to be searched.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying the Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d tasks.findTasks(searchDescription);","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"        String message \u003d \"Charizard found some stuff from the burning list:\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"        for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"            message +\u003d String.format(\"%d. %s\", i + 1, matchedTasks.get(i));","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"            if (i \u003c matchedTasks.size() - 1) {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"                message +\u003d \"\\n\";","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"        ui.appendMessage(message);","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"bingsen0806":45}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, lists all Task objects in the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new ListCommand instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"    public ListCommand() {","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"     * Displays all Task objects from the given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance that contains the Task objects to be displayed.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying the Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"            String message \u003d \"Charizard\u0027s burning wish list:\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"                message +\u003d String.format(\"%d. %s\", i + 1, tasks.getTask(i).toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"                if (i \u003c tasks.getSize() - 1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"                    message +\u003d \"\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"            ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":42}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import duke.main.TaskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.main.Ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":" * Represents a Command which, when executed, marks or unmarks a Task from the given TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    private static final boolean IS_EXIT \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"    private int taskIndex;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new MarkCommand instance with the initialized index and action.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"     * @param taskIndex Zero based index of the Task to be marked or unmarked.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"     * @param isDone The intended state of the Task after execution of Command.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"     *               true if the intended action is to mark the task, false if the","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"     *               intended action is to unmark the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    public MarkCommand(int taskIndex, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"        super(IS_EXIT);","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     * Marks or unmarks the Task object in the TaskList and displays the message on Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     * Displays the error message on Ui if the given Task cannot be marked or unmarked successfully.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The TaskList instance containing the Task object to be marked or unmarked.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"     * @param ui The Ui object used for displaying messages.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"            tasks.markTask(taskIndex, isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"            String message;","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"            if (isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"                message \u003d Ui.MARK_MESSAGE;","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"            } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"                message \u003d String.format(Ui.UNMARK_MESSAGE);","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"            message +\u003d String.format(\"\\n  %s\", tasks.getTask(taskIndex).toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"            ui.appendMessage(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":53}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-16"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_NO_COMMAND \u003d \"Charizard does not know this move. Try a different command.\";","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_PARSE_INT \u003d \"Charizard\u0027s can only remember numbers. Try specifying a task number.\"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"            + \"\\n(Use \\\"list\\\" command to see the tasks and their corresponding task number).\";","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_INVALID_INDEX \u003d \"duke.task.Task number does not exist. Charizard is confused..\";","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_TODO_NO_NAME \u003d \"Please specify the name of new task to be burnt\";","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_FIND_NO_NAME \u003d \"Please specify the name of task to find\";","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_WRONG_FORMAT \u003d \"Charizard remembers this move but cannot recognize the format.\";","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"    public static final String ERROR_IO_INPUT \u003d \"Unable to read from input.\";","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    public static final String FORMAT_DEADLINE \u003d \"Try using \\\"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\\\".\";","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"    public static final String FORMAT_EVENT \u003d \"Try using \\\"event \u003ctask_name\u003e /by \u003cevent_time\u003e\\\".\";","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    public static final String FORMAT_DATE \u003d \"Date and time must be in yyyy/MM/dd HHmm format.\";","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    public DukeException(String displayMessage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        super(displayMessage);","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-16"}],"authorContributionMap":{"bingsen0806":19}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"    private final Ui ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"     * Constructs a Duke program that stores task data at the specified file path.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"     * @param filePath String representing path for storage","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"     * Runs the Duke program.","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    public void run() {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"        ui.showWelcome();","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"        while (!isExit) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"            try {","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"                String fullCommand \u003d ui.readFullCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"                ui.showBorder(false);","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"                Command c \u003d Parser.parseCommand(fullCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"                ui.showResponse();","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"                ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"            } finally {","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"                ui.showBorder(true);","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"                if (!isExit) {","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"                    ui.showQuestionPrompt();","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-15"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"bingsen0806":47,"-":3}},{"path":"src/main/java/duke/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"public class Main {","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":7}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":" * Parser is a utility class with static methods used to parse","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":" * user input into Command and LocalDateTime objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":" * the output on the screen.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"public class Parser {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"     * Returns a Command object representing the user input.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"     * @param fullCommand Raw input from user.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"     * @return A Command representing the user input.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If user input is not a valid command or valid but in the wrong format.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"    static Command parseCommand(String fullCommand) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"        if (fullCommand.trim().compareToIgnoreCase(\"bye\") \u003d\u003d 0) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"            return new ListCommand();","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"mark\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"mark\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"            return parseMarkCommand(inputWithoutCommand, true);","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"unmark\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"unmark\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"            return parseMarkCommand(inputWithoutCommand, false);","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"todo\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"todo\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"            return parseTodoCommand(inputWithoutCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"deadline\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"deadline\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"            return parseDeadlineCommand(inputWithoutCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"event\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"event\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"            return parseEventCommand(inputWithoutCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"delete\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"delete\", \"\").trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"            return parseDeleteCommand(inputWithoutCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"        } else if (fullCommand.startsWith(\"find\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"            String inputWithoutCommand \u003d fullCommand.replaceFirst(\"find\", \"\").trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"            return parseFindCommand(inputWithoutCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"        } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_NO_COMMAND);","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"     * Returns a java.time.LocalDateTime object representing the input.","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"     * @param input The input to be parsed, \"yyyy/MM/dd HHmm\" format.","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"     * @return The parsed LocalDateTime.","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If the input cannot be parsed based on the stated format.","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"    static LocalDateTime parseDateTime(String input) throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(input, format);","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"            return dateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.FORMAT_DATE);","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"    private static MarkCommand parseMarkCommand(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"            int taskId \u003d Integer.parseInt(input) - 1;","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"            return new MarkCommand(taskId, isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_PARSE_INT);","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"    private static AddTodoCommand parseTodoCommand(String input) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"        if (input.matches(\"\\\\s*\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_TODO_NO_NAME);","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"        return new AddTodoCommand(input);","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"    private static AddDeadlineCommand parseDeadlineCommand(String input) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"        String[] splitInputs \u003d input.split(\"/by\");","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"        if (!validateDeadlineEventSplit(splitInputs)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_WRONG_FORMAT + \"\\n\" + DukeException.FORMAT_DEADLINE);","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"        String description \u003d splitInputs[0].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"        String deadlineString \u003d splitInputs[1].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"        LocalDateTime deadline \u003d parseDateTime(deadlineString);","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"        return new AddDeadlineCommand(description, deadline);","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"bingsen0806"},"content":"    private static AddEventCommand parseEventCommand(String input) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"bingsen0806"},"content":"        String[] splitInputs \u003d input.split(\"/at\");","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"bingsen0806"},"content":"        if (!validateDeadlineEventSplit(splitInputs)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_WRONG_FORMAT + \"\\n\" + DukeException.FORMAT_EVENT);","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"bingsen0806"},"content":"        String description \u003d splitInputs[0].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"bingsen0806"},"content":"        String timeString \u003d splitInputs[1].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"bingsen0806"},"content":"        LocalDateTime time \u003d parseDateTime(timeString);","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"bingsen0806"},"content":"        return new AddEventCommand(description, time);","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"bingsen0806"},"content":"    private static DeleteCommand parseDeleteCommand(String input) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"bingsen0806"},"content":"            int taskId \u003d Integer.parseInt(input) - 1;","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"bingsen0806"},"content":"            return new DeleteCommand(taskId);","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"bingsen0806"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_PARSE_INT);","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"bingsen0806"},"content":"    private static FindCommand parseFindCommand(String input) throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"bingsen0806"},"content":"        if (input.matches(\"\\\\s*\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_FIND_NO_NAME);","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"bingsen0806"},"content":"        return new FindCommand(input);","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"bingsen0806"},"content":"    private static boolean validateDeadlineEventSplit(String[] splitInput) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"bingsen0806"},"content":"        if (splitInput.length !\u003d 2 || splitInput[0].matches(\"\\\\s*\") || splitInput[1].matches(\"\\\\s*\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"bingsen0806"},"content":"            return false;","lastModifiedDate":"2022-01-26"},{"lineNumber":136,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"bingsen0806"},"content":"        return true;","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":139}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import java.io.File;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":" * Storage is a utility class representing the file path on the disk","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":" * storing the user\u0027s list of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":" * \u003cp/\u003e","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":" * This class contains functions to load and save tasks to the disk.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"public class Storage {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    private String filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"     * Creates a new Storage instance with the given file path.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     * @param filePath The file path on the disk for saving and loading tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"     * Returns an ArrayList of tasks stored in the file path of this storage.","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"     * @return An ArrayList containing the tasks loaded from the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"     * If the file does not exist, returns an empty ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If file input cannot be read of file input has wrong format.","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"        if (!file.exists()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"            return new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"            BufferedReader fileReader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"            String taskInput;","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"            ArrayList\u003cTask\u003e readTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"            while ((taskInput \u003d fileReader.readLine()) !\u003d null) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"                String[] splitTaskInput \u003d taskInput.split(\" \\\\| \");","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"                Task newTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"                if (splitTaskInput[0].equals(\"T\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"                    newTask \u003d new ToDo(splitTaskInput[2]);","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"                } else if (splitTaskInput[0].equals(\"D\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"                    LocalDateTime dateTime \u003d Parser.parseDateTime(splitTaskInput[3]);","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"                    newTask \u003d new Deadline(splitTaskInput[2], dateTime);","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"                } else if (splitTaskInput[0].equals(\"E\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"                    LocalDateTime dateTime \u003d Parser.parseDateTime(splitTaskInput[3]);","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"                    newTask \u003d new Event(splitTaskInput[2], dateTime);","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"                } else {","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"                    throw new DukeException(\"Error: duke.task.Task type is not T,D or E in file\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"                int i \u003d Integer.parseInt(splitTaskInput[1]);","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"                if (i \u003d\u003d 1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"                    newTask.mark(true);","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"                readTasks.add(newTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"            return readTasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(\"Error: File input cannot be read\\n\" + e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(\"Error: isDone field is not indicated by 0 or 1 in file\\n\" + e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"     * Stores an ArrayList of tasks to the file path of this storage.","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The ArrayList of tasks to be stored.","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If the contents cannot be written to the specified file.","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"    public void saveFileData(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"            if (Files.notExists(Paths.get(filePath))) {","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"                Files.createDirectories(Paths.get(\"data/\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"                Files.createFile(Paths.get(filePath));","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"            BufferedWriter bw \u003d Files.newBufferedWriter(Paths.get(filePath), Charset.forName(\"UTF-8\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"            for (Task t : tasks) {","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"                bw.append(t.getFileSaveFormat());","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"                bw.append(\"\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"            bw.close();","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(\"Unable to write to file\\n\" + e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":105}},{"path":"src/main/java/duke/main/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":" * Represents a list of Task objects.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"public class TaskList {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"     * Constructs a new empty TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"     * Constructs a new TaskList instance initialized to contain the specified tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"     * @param tasks The Arraylist whose elements are to be placed in this TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"     * Constructs a new TaskList instance initialized to contain the specified tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"     * @param zeroBasedIndex Index of the Task to be marked or unmarked.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"     * @param isDone Boolean indicating mark or unmark action. A true value indicates mark","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"     *               and false value indicates unmark.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If the given zeroBasedIndex is out of bounds.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"    public void markTask(int zeroBasedIndex, boolean isDone) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"            tasks.get(zeroBasedIndex).mark(isDone);","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_INVALID_INDEX);","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"     * Adds a new Task to the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"     * @param task The Task object to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"        tasks.add(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"     * Deletes a Task object from the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"     * @param zeroBasedIndex Index of the Task object to be deleted.","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If the given zeroBasedIndex is out of bounds.","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"    public void delete(int zeroBasedIndex) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"            tasks.remove(zeroBasedIndex);","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_INVALID_INDEX);","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"     * Returns a Task object from the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"     * @param zeroBasedIndex Index of the Task object to be returned.","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If the given zeroBasedIndex is out of bounds.","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"    public Task getTask(int zeroBasedIndex) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"            return this.tasks.get(zeroBasedIndex);","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_INVALID_INDEX);","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"     * Returns an ArrayList representing the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"     * @return An ArrayList representing the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"        return tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"     * Returns the number of Task objects in the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"     * @return Number of Task objects in the TaskList instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"    public int getSize() {","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"        return tasks.size();","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"     * Returns an ArrayList of tasks that matches the description.","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"     * @param searchDescription Search text to be partially matched with task\u0027s description.","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"bingsen0806"},"content":"     * @return ArrayList of tasks that matches the description.","lastModifiedDate":"2022-02-03"},{"lineNumber":107,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"bingsen0806"},"content":"    public ArrayList\u003cTask\u003e findTasks(String searchDescription) {","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"bingsen0806"},"content":"        return new ArrayList\u003cTask\u003e(tasks.stream()","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"bingsen0806"},"content":"                .filter(task -\u003e task.hasSubstring(searchDescription))","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"bingsen0806"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":113}},{"path":"src/main/java/duke/main/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import java.io.OutputStreamWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":" * Ui is a utility class for reading and writing input to the Duke program.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":" * \u003cp/\u003e","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":" * Ui is a wrapper around BufferedReader and PrintWriter that reads from System.in InputStream","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":" * and writes to System.out OutputStream.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":" * \u003c/p\u003e","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":" * An Ui instance also stores the message to be shown before showResponse flushes the message to the outputsteam.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"public class Ui {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    public static final String BYE_MESSAGE \u003d \"Roarrr....Let\u0027s burn more tasks next time!\";","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"    public static final String ADD_MESSAGE \u003d \"Charizard is ready to burn task:\";","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"    public static final String REMOVE_MESSAGE \u003d \"Charizard got tired of waiting and deleted this task\";","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    public static final String MARK_MESSAGE \u003d \"Charizard breathe out fire and burned the task.\";","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"    public static final String UNMARK_MESSAGE \u003d \"Oh no! The task was not burnt completely!\";","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    private static final int BORDER_LENGTH \u003d 80;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    private static final String GREET_MESSAGE \u003d \"Roarrr.... I\u0027m Burning Charizard, tasked to burnnn down your tasks.\\n\"","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"            + \"Which task shall we burn today?\";","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    private static final String QUESTION_MESSAGE \u003d \"What should Charizard do next?\";","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    private BufferedReader reader;","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"    private PrintWriter writer;","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"    private StringBuilder message;","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"     * Constructs a new Ui instance.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    public Ui() {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"        reader \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        writer \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"        message \u003d new StringBuilder();","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"     * Appends the message to the stored message in Ui.","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"     * @param message The message to be appended.","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"    public void appendMessage(String message) {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"        this.message.append(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"     * Returns the raw input command typed by the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"     * @return The raw input command typed by the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"     * @throws DukeException If unable to read from the input.","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"    String readFullCommand() throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"            return reader.readLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"            throw new DukeException(DukeException.ERROR_IO_INPUT);","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"     * Flushes the stored message in the Ui and displays the message to the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"    void showResponse() {","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"        if (message.length() \u003c 1) {","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"            return;","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"        String respondMessage \u003d message.toString();","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"        message.setLength(0);","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"        showMessageInBorder(respondMessage);","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"     * Displays an error message to the user. This method does not store the message in the Ui","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"     * instance, and instead immediately displays the error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"     * @param errorMessage The error message to be displayed.","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"    public void showErrorMessage(String errorMessage) {","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"        showMessageInBorder(errorMessage);","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"     * Displays a prompt to the user to signify request for user input.","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"     * This method does not store the message in the Ui instance,","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"     * and instead immediately displays the error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"    void showQuestionPrompt() {","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"        showMessageOutsideBorder(QUESTION_MESSAGE);","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"     * Immediately displays loading error to the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"    void showLoadingError() {","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"        showMessageOutsideBorder(\"Unable to read saved task from file.\\nStarting with a new task list..\");","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"     * Immediately displays the welcome message to the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"bingsen0806"},"content":"    void showWelcome() {","lastModifiedDate":"2022-01-26"},{"lineNumber":108,"author":{"gitId":"bingsen0806"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"bingsen0806"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"bingsen0806"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"bingsen0806"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"bingsen0806"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"bingsen0806"},"content":"        showMessageOutsideBorder(\"Hello from\\n\" + logo);","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"bingsen0806"},"content":"        showBorder(false);","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"bingsen0806"},"content":"        showMessageInBorder(GREET_MESSAGE);","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"bingsen0806"},"content":"        showBorder(true);","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"bingsen0806"},"content":"     * Immediately draws the border surrounding the response to the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"bingsen0806"},"content":"     * @param haveEmptyLineAfter If true, displays an empty line after the border.","lastModifiedDate":"2022-01-27"},{"lineNumber":123,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"bingsen0806"},"content":"    void showBorder(boolean haveEmptyLineAfter) {","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"bingsen0806"},"content":"        drawBorder(BORDER_LENGTH);","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"bingsen0806"},"content":"        if (haveEmptyLineAfter) {","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"bingsen0806"},"content":"            showMessageOutsideBorder(\"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"bingsen0806"},"content":"    private void showMessageOutsideBorder(String message) {","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"bingsen0806"},"content":"        writer.println(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":133,"author":{"gitId":"bingsen0806"},"content":"        writer.flush();","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":136,"author":{"gitId":"bingsen0806"},"content":"    private void showMessageInBorder(String message) {","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"bingsen0806"},"content":"        String[] lines \u003d message.split(\"\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"bingsen0806"},"content":"        for (String line: lines) {","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"bingsen0806"},"content":"            writer.println(\"    \" + line);","lastModifiedDate":"2022-01-26"},{"lineNumber":140,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":141,"author":{"gitId":"bingsen0806"},"content":"        writer.flush();","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"bingsen0806"},"content":"    private void drawBorder(int length) {","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"bingsen0806"},"content":"        for (int i \u003d 0; i \u003c length; i++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"bingsen0806"},"content":"            writer.print(\"*\");","lastModifiedDate":"2022-01-26"},{"lineNumber":147,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"bingsen0806"},"content":"        ;","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"bingsen0806"},"content":"        writer.println(\"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":150,"author":{"gitId":"bingsen0806"},"content":"        writer.flush();","lastModifiedDate":"2022-01-26"},{"lineNumber":151,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":152}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"     * Creates a Deadline with the given description and deadline.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"     * @param description The name of the Deadline task.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"     * @param deadline The deadline of the Deadline task.","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"        super(description, TaskType.DEADLINE);","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-01-15"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-15"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    public String toString() {","lastModifiedDate":"2022-01-15"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"%s (by: %shrs)\", super.toString(), deadline.format(format));","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    public String getFileSaveFormat() {","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\");","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"%s | %s\", super.getFileSaveFormat(), deadline.format(format));","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":31}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"    private LocalDateTime time;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"     * Creates an Event with the given description and time.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"     * @param description The name of the event.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"     * @param time The time of the event.","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"    public Event(String description, LocalDateTime time) {","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"        super(description, TaskType.EVENT);","lastModifiedDate":"2022-01-15"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-01-15"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-15"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    public String toString() {","lastModifiedDate":"2022-01-15"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"%s (at: %shrs)\", super.toString(), time.format(format));","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    public String getFileSaveFormat() {","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\");","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"%s | %s\", super.getFileSaveFormat(), time.format(format));","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":31}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"    private final String description;","lastModifiedDate":"2022-01-15"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-15"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"    private TaskType type;","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"     * Creates a Task with the given description and type.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"     * @param description The name of the task.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"     * @param type The type of the task, such as TODO, DEADLINE, or EVENT.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    public Task(String description, TaskType type) {","lastModifiedDate":"2022-01-15"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-15"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-15"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    public void mark(boolean done) {","lastModifiedDate":"2022-01-15"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"        isDone \u003d done;","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"    public String getFileSaveFormat() {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"        String doneString \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"%s | %s | %s\", getSymbol(), doneString, description);","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    public boolean hasSubstring(String searchText) {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"        return description.contains(searchText);","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"        return String.format(\"[%s][%s] %s\", getSymbol(), getStatusSymbol(), description);","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"    private String getStatusSymbol() {","lastModifiedDate":"2022-01-15"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"    private String getSymbol() {","lastModifiedDate":"2022-01-16"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"        switch (type) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"        case TODO:","lastModifiedDate":"2022-01-16"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"            return \"T\";","lastModifiedDate":"2022-01-16"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-16"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"            return \"D\";","lastModifiedDate":"2022-01-16"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"        case EVENT:","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"            return \"E\";","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"        default:","lastModifiedDate":"2022-01-16"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"            return \" \";","lastModifiedDate":"2022-01-16"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-16"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"    };","lastModifiedDate":"2022-01-16"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":54}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"public enum TaskType {","lastModifiedDate":"2022-01-15"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"    TODO, EVENT, DEADLINE","lastModifiedDate":"2022-01-15"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":5}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-15"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-01-15"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"        super(description, TaskType.TODO);","lastModifiedDate":"2022-01-15"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-15"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":7}},{"path":"src/test/java/duke/main/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validExit_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse exit command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validList_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"list\") instanceof ListCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse list command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validMark_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"mark 1\") instanceof MarkCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse mark command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_invalidMark_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"mark \");","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to catch invalid mark command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"            assertEquals(e.getMessage(), DukeException.ERROR_PARSE_INT);","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validUnmark_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"unmark 1\");","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse unmark command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"    void parsetTest_invalidUnmark_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"unmark anything\");","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to catch invalid unmark command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"            assertEquals(e.getMessage(), DukeException.ERROR_PARSE_INT);","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validDelete_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"delete 1\");","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse delete command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_invalidDelete_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"delete anything\");","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to catch invalid delete command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"            assertEquals(e.getMessage(), DukeException.ERROR_PARSE_INT);","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validAddTodo_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"todo test\") instanceof AddTodoCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse todo command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_emptyTodo_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"bingsen0806"},"content":"            Parser.parseCommand(\"todo \");","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to catch empty todo command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":108,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"bingsen0806"},"content":"            assertEquals(e.getMessage(), DukeException.ERROR_TODO_NO_NAME);","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validAddDeadline_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"deadline test /by 2022/01/26 1200\") instanceof AddDeadlineCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse deadline command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_invalidAddDeadline_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"bingsen0806"},"content":"        assertAll(\"Invalid Add Deadline\", () -\u003e {","lastModifiedDate":"2022-02-03"},{"lineNumber":125,"author":{"gitId":"bingsen0806"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"bingsen0806"},"content":"                Parser.parseCommand(\"deadline testDeadline /by /by anything\");","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"bingsen0806"},"content":"                Assertions.fail(\"Parser fails to catch deadline command with invalid structure\");","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"bingsen0806"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"bingsen0806"},"content":"                assertEquals(e.getMessage(), DukeException.ERROR_WRONG_FORMAT + \"\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":130,"author":{"gitId":"bingsen0806"},"content":"                        + DukeException.FORMAT_DEADLINE);","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"bingsen0806"},"content":"        }, () -\u003e {","lastModifiedDate":"2022-02-03"},{"lineNumber":133,"author":{"gitId":"bingsen0806"},"content":"                try {","lastModifiedDate":"2022-01-26"},{"lineNumber":134,"author":{"gitId":"bingsen0806"},"content":"                    Parser.parseCommand(\"deadline testDeadline /by notADate format\");","lastModifiedDate":"2022-01-26"},{"lineNumber":135,"author":{"gitId":"bingsen0806"},"content":"                    Assertions.fail(\"Parser fails to catch deadline command with invalid date format\");","lastModifiedDate":"2022-01-26"},{"lineNumber":136,"author":{"gitId":"bingsen0806"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"bingsen0806"},"content":"                    assertEquals(e.getMessage(), DukeException.FORMAT_DATE);","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":140,"author":{"gitId":"bingsen0806"},"content":"        );","lastModifiedDate":"2022-01-26"},{"lineNumber":141,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_validAddEvent_success() {","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"bingsen0806"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"bingsen0806"},"content":"            assertTrue(Parser.parseCommand(\"event test /at 2022/01/26 1200\") instanceof AddEventCommand);","lastModifiedDate":"2022-01-26"},{"lineNumber":147,"author":{"gitId":"bingsen0806"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"bingsen0806"},"content":"            Assertions.fail(\"Parser fails to parse event command\");","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"bingsen0806"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":150,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":151,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"bingsen0806"},"content":"    void parserTest_invalidAddEvent_throwsDukeException() {","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"bingsen0806"},"content":"        assertAll(\"Invalid Add Event\", () -\u003e {","lastModifiedDate":"2022-02-03"},{"lineNumber":155,"author":{"gitId":"bingsen0806"},"content":"            try {","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"bingsen0806"},"content":"                Parser.parseCommand(\"event /at anything\");","lastModifiedDate":"2022-01-26"},{"lineNumber":157,"author":{"gitId":"bingsen0806"},"content":"                Assertions.fail(\"Parser fails to catch event command with invalid structure\");","lastModifiedDate":"2022-01-26"},{"lineNumber":158,"author":{"gitId":"bingsen0806"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":159,"author":{"gitId":"bingsen0806"},"content":"                assertEquals(e.getMessage(), DukeException.ERROR_WRONG_FORMAT + \"\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":160,"author":{"gitId":"bingsen0806"},"content":"                        + DukeException.FORMAT_EVENT);","lastModifiedDate":"2022-01-26"},{"lineNumber":161,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":162,"author":{"gitId":"bingsen0806"},"content":"        }, () -\u003e {","lastModifiedDate":"2022-02-03"},{"lineNumber":163,"author":{"gitId":"bingsen0806"},"content":"                try {","lastModifiedDate":"2022-01-26"},{"lineNumber":164,"author":{"gitId":"bingsen0806"},"content":"                    Parser.parseCommand(\"event testEvent /at notADate format\");","lastModifiedDate":"2022-01-26"},{"lineNumber":165,"author":{"gitId":"bingsen0806"},"content":"                    Assertions.fail(\"Parser fails to catch event command with invalid date format\");","lastModifiedDate":"2022-01-26"},{"lineNumber":166,"author":{"gitId":"bingsen0806"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":167,"author":{"gitId":"bingsen0806"},"content":"                    assertEquals(e.getMessage(), DukeException.FORMAT_DATE);","lastModifiedDate":"2022-01-26"},{"lineNumber":168,"author":{"gitId":"bingsen0806"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":169,"author":{"gitId":"bingsen0806"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":170,"author":{"gitId":"bingsen0806"},"content":"        );","lastModifiedDate":"2022-01-26"},{"lineNumber":171,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":172,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":172}},{"path":"src/test/java/duke/main/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"package duke.main;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"    void getTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"                testList.getTask(0));","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"        assertEquals(exception.getMessage(), DukeException.ERROR_INVALID_INDEX);","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"    @Test","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"    void deleteTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"                testList.delete(-1));","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"        assertEquals(exception.getMessage(), DukeException.ERROR_INVALID_INDEX);","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"bingsen0806":26}},{"path":"text-ui-test/EXPECTED..txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":" ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"|  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"| | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"| |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"|____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"    Roarrr.... I\u0027m Burning Charizard, tasked to burnnn down your tasks.","lastModifiedDate":"2022-01-15"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"    Which task shall we burn today?","lastModifiedDate":"2022-01-15"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"    Charizard is ready to burn task:","lastModifiedDate":"2022-01-15"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"      [T][ ] read book","lastModifiedDate":"2022-01-15"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"    There are 1 tasks in the burning list.","lastModifiedDate":"2022-01-16"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-15"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"    1. [T][ ] read book","lastModifiedDate":"2022-01-15"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":26,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":27,"author":{"gitId":"bingsen0806"},"content":"    Charizard breathe out fire and burned the task.","lastModifiedDate":"2022-01-15"},{"lineNumber":28,"author":{"gitId":"bingsen0806"},"content":"      [T][X] read book","lastModifiedDate":"2022-01-15"},{"lineNumber":29,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":30,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":31,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":32,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":33,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-15"},{"lineNumber":34,"author":{"gitId":"bingsen0806"},"content":"    1. [T][X] read book","lastModifiedDate":"2022-01-15"},{"lineNumber":35,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":36,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":37,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":38,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":39,"author":{"gitId":"bingsen0806"},"content":"    Charizard is ready to burn task:","lastModifiedDate":"2022-01-15"},{"lineNumber":40,"author":{"gitId":"bingsen0806"},"content":"      [D][ ] return book (by: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"bingsen0806"},"content":"    There are 2 tasks in the burning list.","lastModifiedDate":"2022-01-16"},{"lineNumber":42,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":43,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":44,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":45,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":46,"author":{"gitId":"bingsen0806"},"content":"    Charizard is ready to burn task:","lastModifiedDate":"2022-01-15"},{"lineNumber":47,"author":{"gitId":"bingsen0806"},"content":"      [E][ ] project meeting (at: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"bingsen0806"},"content":"    There are 3 tasks in the burning list.","lastModifiedDate":"2022-01-16"},{"lineNumber":49,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":50,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":51,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":52,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":53,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-15"},{"lineNumber":54,"author":{"gitId":"bingsen0806"},"content":"    1. [T][X] read book","lastModifiedDate":"2022-01-15"},{"lineNumber":55,"author":{"gitId":"bingsen0806"},"content":"    2. [D][ ] return book (by: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"bingsen0806"},"content":"    3. [E][ ] project meeting (at: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":58,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-15"},{"lineNumber":59,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-15"},{"lineNumber":60,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":61,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s can only remember numbers. Try specifying a task number.","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"bingsen0806"},"content":"    (Use \"list\" command to see the tasks and their corresponding task number).","lastModifiedDate":"2022-01-16"},{"lineNumber":63,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":64,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":65,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":66,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":67,"author":{"gitId":"bingsen0806"},"content":"    Task number does not exist. Charizard is confused..","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"bingsen0806"},"content":"    ","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":70,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":71,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":72,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":73,"author":{"gitId":"bingsen0806"},"content":"    Oh no! The task was not burnt completely!","lastModifiedDate":"2022-01-16"},{"lineNumber":74,"author":{"gitId":"bingsen0806"},"content":"      [T][ ] read book","lastModifiedDate":"2022-01-16"},{"lineNumber":75,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":76,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":77,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":78,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":79,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-16"},{"lineNumber":80,"author":{"gitId":"bingsen0806"},"content":"    1. [T][ ] read book","lastModifiedDate":"2022-01-16"},{"lineNumber":81,"author":{"gitId":"bingsen0806"},"content":"    2. [D][ ] return book (by: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"bingsen0806"},"content":"    3. [E][ ] project meeting (at: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":84,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":85,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":86,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":87,"author":{"gitId":"bingsen0806"},"content":"    Please specify the name of new task to be burnt","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":89,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":90,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":91,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":92,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s can only remember numbers. Try specifying a task number.","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"bingsen0806"},"content":"    (Use \"list\" command to see the tasks and their corresponding task number).","lastModifiedDate":"2022-01-16"},{"lineNumber":94,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":95,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":96,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":97,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":98,"author":{"gitId":"bingsen0806"},"content":"    Task number does not exist. Charizard is confused..","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"bingsen0806"},"content":"    ","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":101,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":102,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":103,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":104,"author":{"gitId":"bingsen0806"},"content":"    Charizard remembers this move but cannot recognize the format.","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"bingsen0806"},"content":"    Try using \"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\".","lastModifiedDate":"2022-01-16"},{"lineNumber":106,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":107,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":108,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":109,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":110,"author":{"gitId":"bingsen0806"},"content":"    Charizard remembers this move but cannot recognize the format.","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"bingsen0806"},"content":"    Try using \"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\".","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":113,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":114,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":115,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":116,"author":{"gitId":"bingsen0806"},"content":"    Charizard remembers this move but cannot recognize the format.","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"bingsen0806"},"content":"    Try using \"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\".","lastModifiedDate":"2022-01-16"},{"lineNumber":118,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":119,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":120,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":121,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":122,"author":{"gitId":"bingsen0806"},"content":"    Charizard remembers this move but cannot recognize the format.","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"bingsen0806"},"content":"    Try using \"event \u003ctask_name\u003e /by \u003cevent_time\u003e\".","lastModifiedDate":"2022-01-16"},{"lineNumber":124,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":125,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":126,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":127,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":128,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-16"},{"lineNumber":129,"author":{"gitId":"bingsen0806"},"content":"    1. [T][ ] read book","lastModifiedDate":"2022-01-16"},{"lineNumber":130,"author":{"gitId":"bingsen0806"},"content":"    2. [D][ ] return book (by: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"bingsen0806"},"content":"    3. [E][ ] project meeting (at: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":132,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":133,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":134,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":135,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":136,"author":{"gitId":"bingsen0806"},"content":"    Task number does not exist. Charizard is confused..","lastModifiedDate":"2022-01-26"},{"lineNumber":137,"author":{"gitId":"bingsen0806"},"content":"    ","lastModifiedDate":"2022-01-26"},{"lineNumber":138,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":139,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":140,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":141,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":142,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s can only remember numbers. Try specifying a task number.","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"bingsen0806"},"content":"    (Use \"list\" command to see the tasks and their corresponding task number).","lastModifiedDate":"2022-01-16"},{"lineNumber":144,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":145,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":146,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":147,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":148,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s can only remember numbers. Try specifying a task number.","lastModifiedDate":"2022-01-26"},{"lineNumber":149,"author":{"gitId":"bingsen0806"},"content":"    (Use \"list\" command to see the tasks and their corresponding task number).","lastModifiedDate":"2022-01-16"},{"lineNumber":150,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":151,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":152,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":153,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":154,"author":{"gitId":"bingsen0806"},"content":"    Charizard got tired of waiting and deleted this task","lastModifiedDate":"2022-01-16"},{"lineNumber":155,"author":{"gitId":"bingsen0806"},"content":"      [T][ ] read book","lastModifiedDate":"2022-01-16"},{"lineNumber":156,"author":{"gitId":"bingsen0806"},"content":"    There are 2 tasks in the burning list.","lastModifiedDate":"2022-01-16"},{"lineNumber":157,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":158,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":159,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":160,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":161,"author":{"gitId":"bingsen0806"},"content":"    Charizard\u0027s burning wish list:","lastModifiedDate":"2022-01-16"},{"lineNumber":162,"author":{"gitId":"bingsen0806"},"content":"    1. [D][ ] return book (by: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":163,"author":{"gitId":"bingsen0806"},"content":"    2. [E][ ] project meeting (at: Jan 26 2022 0200hrs)","lastModifiedDate":"2022-01-26"},{"lineNumber":164,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":165,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":166,"author":{"gitId":"bingsen0806"},"content":"What should Charizard do next?","lastModifiedDate":"2022-01-16"},{"lineNumber":167,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":168,"author":{"gitId":"bingsen0806"},"content":"    Roarrr....Let\u0027s burn more tasks next time!","lastModifiedDate":"2022-01-15"},{"lineNumber":169,"author":{"gitId":"bingsen0806"},"content":"********************************************************************************","lastModifiedDate":"2022-01-16"},{"lineNumber":170,"author":{"gitId":"bingsen0806"},"content":"","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"-":7,"bingsen0806":163}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bingsen0806"},"content":"todo read book","lastModifiedDate":"2022-01-15"},{"lineNumber":2,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-15"},{"lineNumber":3,"author":{"gitId":"bingsen0806"},"content":"mark 1","lastModifiedDate":"2022-01-15"},{"lineNumber":4,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-15"},{"lineNumber":5,"author":{"gitId":"bingsen0806"},"content":"deadline return book /by 2022/01/26 0200","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"bingsen0806"},"content":"event project meeting /at 2022/01/26 0200","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-15"},{"lineNumber":8,"author":{"gitId":"bingsen0806"},"content":"unmark anything","lastModifiedDate":"2022-01-16"},{"lineNumber":9,"author":{"gitId":"bingsen0806"},"content":"unmark 4","lastModifiedDate":"2022-01-16"},{"lineNumber":10,"author":{"gitId":"bingsen0806"},"content":"unmark 1","lastModifiedDate":"2022-01-16"},{"lineNumber":11,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":12,"author":{"gitId":"bingsen0806"},"content":"todo","lastModifiedDate":"2022-01-16"},{"lineNumber":13,"author":{"gitId":"bingsen0806"},"content":"mark anything","lastModifiedDate":"2022-01-16"},{"lineNumber":14,"author":{"gitId":"bingsen0806"},"content":"mark -1","lastModifiedDate":"2022-01-16"},{"lineNumber":15,"author":{"gitId":"bingsen0806"},"content":"deadline /by 2022/01/26 0200","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"bingsen0806"},"content":"deadline 2103T level-6 /by Sunday 2359 /by 2022/01/27 1200","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"bingsen0806"},"content":"deadline 2103T level-6","lastModifiedDate":"2022-01-16"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"event","lastModifiedDate":"2022-01-16"},{"lineNumber":19,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":20,"author":{"gitId":"bingsen0806"},"content":"delete 0","lastModifiedDate":"2022-01-16"},{"lineNumber":21,"author":{"gitId":"bingsen0806"},"content":"delete anything","lastModifiedDate":"2022-01-16"},{"lineNumber":22,"author":{"gitId":"bingsen0806"},"content":"delete","lastModifiedDate":"2022-01-16"},{"lineNumber":23,"author":{"gitId":"bingsen0806"},"content":"delete 1","lastModifiedDate":"2022-01-16"},{"lineNumber":24,"author":{"gitId":"bingsen0806"},"content":"list","lastModifiedDate":"2022-01-16"},{"lineNumber":25,"author":{"gitId":"bingsen0806"},"content":"bye","lastModifiedDate":"2022-01-15"}],"authorContributionMap":{"bingsen0806":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bingsen0806"},"content":"java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"bingsen0806":1}}]
