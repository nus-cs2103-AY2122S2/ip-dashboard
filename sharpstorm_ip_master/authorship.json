[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    testImplementation \"org.mockito:mockito-core:3.+\"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"javadoc {","lastModifiedDate":"2022-01-30"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    source \u003d sourceSets.main.allJava","lastModifiedDate":"2022-01-30"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    classpath \u003d sourceSets.main.runtimeClasspath","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-30"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sharpstorm":23,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.command.Parser;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * Represents an instance of the Duke application.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"public class Duke extends Application {","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    /** Global task list for all operations. */","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public void init() throws Exception {","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        super.init();","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        this.initializeTaskList();","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * Performs pre-execution initialization of resources required throughout the application lifecycle.","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * Loads any existing database and attaches observers for saving the database to disk.","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * @return The current instance of the application being initialized.","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    Duke initializeTaskList() {","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            taskList \u003d Storage.load();","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIoException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            System.out.println(\"Encountered an error during initialization:\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"                    + \"\\t \" + ex.getMessage() + \" \\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"                    + \"Please check that you have read / write permissions in the current folder.\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"                    + \"If the saved data file is corrupted, consider deleting the data folder.\\n\"","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"                    + \"Will not save any changes!\");","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            return this;","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        taskList.registerListener(store -\u003e {","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            try {","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"                Storage.save(store);","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            } catch (DukeIoException ex) {","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"                System.out.println(\"Warning: An error occurred while saving Task list\");","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-24"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        // Hand off to UI to build stage","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            Ui.getInstance().buildStage(primaryStage, this::processCommand);","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIoException ex) {","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            System.out.println(ex.getMessage());","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            Platform.exit();","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        assert primaryStage.getScene() !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        primaryStage.show();","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        Ui.getInstance().greet();","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * Passes the input string to \u003ccode\u003eParser\u003c/code\u003e to process.","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     * @param input Input string to process.","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public void processCommand(String input) {","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        boolean isRunning \u003d Ui.getInstance().printCommand((linePrinter) -\u003e {","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"            try {","lastModifiedDate":"2022-01-24"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"                return Parser.parse(input).execute(linePrinter, taskList);","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"            } catch (DukeException ex) {","lastModifiedDate":"2022-01-24"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"                Ui.getInstance().printError(linePrinter, ex);","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        if (!isRunning) {","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"            Platform.exit();","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sharpstorm":86,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" * Serves as the main entry point for the application.","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Launches the Duke JavaFX lifecycle by calling {@link Application#launch(Class, String...)}.","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public class Launcher {","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     * Main entry point for the application.","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * @param args The arguments passed in during application launch.","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public static void main(String ... args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        new Duke().initializeTaskList();","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"sharpstorm":19}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.File;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.serializer.TaskListSerializer;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * Handles all persistence-related operations on the file system for the inflation and serialization","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" * of the \u003ccode\u003eTaskList\u003c/code\u003e object. Performs the creation of relevant directory structures and files.","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class Storage {","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    /** Name of the data directory. */","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private static final String DATA_FOLDER_PATH \u003d \"data/\";","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    /** Name of the database file. */","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private static final String DATABASE_FILENAME \u003d \"store.db\";","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * Loads any previous data, if any, that was saved by a previous run of the application.","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     * Inflates the \u003ccode\u003eTaskList\u003c/code\u003e object stored by the previous run.","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003ccode\u003eTaskList\u003c/code\u003e object read from database file.","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during any I/O operation or the database file read is","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     *                         in an invalid format.","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public static TaskList load() throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        final FileInputStream dbStream \u003d openDatabaseRead();","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        return TaskListSerializer.inflate(dbStream);","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     * Saves the provided \u003ccode\u003eTaskList\u003c/code\u003e object to disk.","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * Serializes and writes the object to a predetermined location on the file system.","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e object to save.","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during the write operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    public static void save(TaskList taskList) throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        final FileOutputStream dbStream \u003d openDatabaseWrite();","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        TaskListSerializer.deflate(taskList, dbStream);","lastModifiedDate":"2022-01-24"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     * Creates the directory structure required for saving the database file.","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during folder creation.","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"    private static void initDataStore() throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        final File dataFolder \u003d new File(DATA_FOLDER_PATH);","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        if (dataFolder.exists() \u0026\u0026 !dataFolder.isDirectory()) {","lastModifiedDate":"2022-01-24"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Data Store is not a directory at: \"","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"                    + dataFolder.getAbsolutePath());","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        } else if (!dataFolder.exists() \u0026\u0026 !dataFolder.mkdir()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Cannot create data store directory at: \"","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"                    + dataFolder.getAbsolutePath());","lastModifiedDate":"2022-01-24"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        assert dataFolder.exists();","lastModifiedDate":"2022-02-06"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * Creates a read-stream from the database file on disk.","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003cCode\u003eFileInputStream\u003c/Code\u003e for the database file.","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during the internal {@link #initDataStore()} operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    private static FileInputStream openDatabaseRead() throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        initDataStore(); // throws DukeIoException","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        final File database \u003d Paths.get(DATA_FOLDER_PATH, DATABASE_FILENAME).toFile();","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"            return new FileInputStream(database);","lastModifiedDate":"2022-01-24"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        } catch (FileNotFoundException ex) {","lastModifiedDate":"2022-01-24"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"            // Does not create the database until a change is made","lastModifiedDate":"2022-01-24"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"            return null;","lastModifiedDate":"2022-01-24"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * Creates a write-stream to the database file stored on disk.","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     * Overwrites any existing data in the file.","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003ccode\u003eFileOutputStream\u003c/code\u003e for the database file.","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during the internal {@link #initDataStore()} or write","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"     *                         operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"    private static FileOutputStream openDatabaseWrite() throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        initDataStore(); // throws DukeIoException","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        final File database \u003d Paths.get(DATA_FOLDER_PATH, DATABASE_FILENAME).toFile();","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            if (!database.exists() \u0026\u0026 !database.createNewFile()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"                throw new DukeIoException(\"Could not create database\");","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-24"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"            assert database.exists();","lastModifiedDate":"2022-02-06"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"            return new FileOutputStream(database);","lastModifiedDate":"2022-01-24"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-01-24"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Could not create database\");","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":112}},{"path":"src/main/java/duke/command/BetweenCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the between command.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class BetweenCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the between command.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    BetweenCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        final String[] argParts \u003d args.split(\" and \");","lastModifiedDate":"2022-01-24"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        if (argParts.length \u003c 2) {","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Not in the format \u003cdate\u003e and \u003cdate\u003e\");","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime start \u003d parseDateTime(argParts[0]);","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime end \u003d parseDateTime(argParts[1]);","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assert start !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assert end !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"Here are your tasks in between %s and %s:\",","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"                argParts[0], argParts[1]));","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        taskList.doForEach((index, task) -\u003e {","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            task.getDate().ifPresent(date -\u003e {","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"                if (date.isBefore(end) \u0026\u0026 date.isAfter(start)) {","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"                    linePrinter.print(task.getReadableString());","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            });","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":45}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" * Represents a command handler that executes actions based on supplied arguments.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    protected static final int OFFSET_READABLE_TO_LOGICAL \u003d -1;","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    protected static final int OFFSET_LOGICAL_TO_READABLE \u003d 1;","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    protected static final String DEFAULT_TIME \u003d \" 00:00\";","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    protected static final String FORMAT_DEFAULT_DATETIME \u003d \"dd/MM/yyyy HH:mm\";","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    /** Arguments supplied to the command handler. */","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    protected final String args;","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * Creates a command object.","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    protected Command(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        this.args \u003d args;","lastModifiedDate":"2022-01-24"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Reads an integer from the argument string.","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     * @return The integer read from the argument.","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the argument string is not in a numerical format.","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    protected int parseTaskNumber() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        int taskIndex;","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            taskIndex \u003d Integer.parseInt(this.args);","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Task Number must be a number\");","lastModifiedDate":"2022-01-24"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        // Convert UI 1-based indexing to task storage 0-based indexing","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return taskIndex + OFFSET_READABLE_TO_LOGICAL;","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * Searches the supplied task list for the task at the numerical index given in the argument string.","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList Task list to search.","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     * @return Task in the task list at the given index of the argument string.","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the index supplied is invalid.","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    protected Task parseSelectTask(TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        int taskIndex \u003d this.parseTaskNumber();","lastModifiedDate":"2022-01-24"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        Task task \u003d taskList.getTaskByIndex(taskIndex);","lastModifiedDate":"2022-01-24"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2022-01-24"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"No matching task with given number\");","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return task;","lastModifiedDate":"2022-01-24"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * Translates a date string to a {@link LocalDateTime} object.","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     * @param dateString Date string to process.","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * @return A {@link LocalDateTime} that represents the supplied date at 00:00 hours.","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the supplied date string is not in a valid format.","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    protected LocalDateTime parseDate(String dateString) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        return parseDateTime(dateString + DEFAULT_TIME, FORMAT_DEFAULT_DATETIME);","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"     * Translates a date-time string to a {@link LocalDateTime} object.","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"     * @param dateString Date-time string to process.","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"     * @return A {@link LocalDateTime} that represents the supplied date-time.","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the supplied date-time string is not in a valid format.","lastModifiedDate":"2022-01-26"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    protected LocalDateTime parseDateTime(String dateString) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        return parseDateTime(dateString, FORMAT_DEFAULT_DATETIME);","lastModifiedDate":"2022-02-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     * Translates a patterned string to a {@link LocalDateTime} object based on the given format.","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     * @param dateString Date-time string to process.","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     * @param pattern Pattern format that the date-time string is in.","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"     * @return A {@link LocalDateTime} that represents the supplied date-time.","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the supplied date-time string is not in the given pattern.","lastModifiedDate":"2022-01-26"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    protected LocalDateTime parseDateTime(String dateString, String pattern)","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2022-01-24"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-24"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            return LocalDateTime.parse(dateString, formatter);","lastModifiedDate":"2022-01-24"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-01-24"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Date not in the format \" + pattern);","lastModifiedDate":"2022-01-24"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"     * Parses the arguments supplied and executes the actions relevant to the command.","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"     * @param linePrinter {@link Printable} object that the command executor can output to.","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList Current list of tasks that the command executor updates.","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"     * @return A boolean indicating if the application should continue execution.","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeException If an error is encountered while running the command.","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"    public abstract boolean execute(Printable linePrinter, TaskList taskList) throws DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":117}},{"path":"src/main/java/duke/command/CreateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the todo, deadline and event commands.","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * Encapsulates the creation logic for all available types of tasks.","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class CreateCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    private final TaskType taskType;","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for a creation command.","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * @param taskType The type of task to be created.","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    CreateCommand(String args, TaskType taskType) {","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        if (this.taskType \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            this.parseCreateTodo(linePrinter, taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        } else if (this.taskType \u003d\u003d TaskType.DEADLINE) {","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            this.parseCreateDeadline(linePrinter, taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        } else if (this.taskType \u003d\u003d TaskType.EVENT) {","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            this.parseCreateEvent(linePrinter, taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            assert false : \"Trying to create invalid task type\";","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Unknown task type to be created\");","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * Parses and creates a Todo object.","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     * @param linePrinter Object that the command handler outputs responses to.","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList Current task list that the command handler should add a new task to.","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the argument string is empty.","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    private void parseCreateTodo(Printable linePrinter, TaskList taskList)","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        // Check for invalid task name","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        validateTaskDescription(this.args);","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assert args.length() \u003e 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        final Task task \u003d taskList.addTask(new Todo(this.args));","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        this.printResponse(linePrinter, task, taskList, \"Todo\");","lastModifiedDate":"2022-01-24"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"     * Parses and creates a Deadline object.","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"     * @param linePrinter Object that the command handler outputs responses to.","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList Current task list that the command handler should add a new task to.","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the argument string does not follow the expected format.","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    private void parseCreateDeadline(Printable linePrinter, TaskList taskList)","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        // Check for syntax correctness by delimiter","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        final String[] argParts \u003d this.parseDelimitedCommand(this.args, \" /by \");","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        final String taskDescription \u003d validateTaskDescription(argParts[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime taskBy \u003d parseDateTime(argParts[1]);","lastModifiedDate":"2022-01-24"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        assert taskBy !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        final Task task \u003d taskList.addTask(new Deadline(taskDescription, taskBy));","lastModifiedDate":"2022-01-24"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        this.printResponse(linePrinter, task, taskList, \"Deadline\");","lastModifiedDate":"2022-01-24"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"     * Parses and creates a Event object.","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"     * @param linePrinter Object that the command handler outputs responses to.","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList Current task list that the command handler should add a new task to.","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the argument string does not follow the expected format.","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    private void parseCreateEvent(Printable linePrinter, TaskList taskList)","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        // Check for syntax correctness by delimiter","lastModifiedDate":"2022-02-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        final String[] argParts \u003d this.parseDelimitedCommand(this.args, \" /at \");","lastModifiedDate":"2022-02-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        final String taskDescription \u003d validateTaskDescription(argParts[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime taskAt \u003d parseDateTime(argParts[1]);","lastModifiedDate":"2022-01-24"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        assert taskAt !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        final Task task \u003d taskList.addTask(new Event(taskDescription, taskAt));","lastModifiedDate":"2022-01-24"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        this.printResponse(linePrinter, task, taskList, \"Event\");","lastModifiedDate":"2022-01-24"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     * Validates a 2-part command separated by a delimiter and returns the parts if command is valid.","lastModifiedDate":"2022-02-07"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"     * @param command The 2-part command to be validated.","lastModifiedDate":"2022-02-07"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"     * @param delimiter The phrase separating the 2 parts of the command.","lastModifiedDate":"2022-02-07"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"     * @return The 2 parts of the command in a String array.","lastModifiedDate":"2022-02-07"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the command is not in a valid format.","lastModifiedDate":"2022-02-07"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"    private String[] parseDelimitedCommand(String command, String delimiter)","lastModifiedDate":"2022-02-07"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIllegalArgumentException {","lastModifiedDate":"2022-02-07"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        final String[] parts \u003d command.split(delimiter);","lastModifiedDate":"2022-02-07"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(","lastModifiedDate":"2022-02-07"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"                    String.format(\"Not in the format \u003cTask name\u003e%s\u003cDate\u003e\", delimiter));","lastModifiedDate":"2022-02-07"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        return parts;","lastModifiedDate":"2022-02-07"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"     * Validates that the task description passed as an argument is not empty.","lastModifiedDate":"2022-02-07"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"     * @param taskDescription Task description to validate.","lastModifiedDate":"2022-02-07"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"     * @return The task description passed in as an argument.","lastModifiedDate":"2022-02-07"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the task description is empty.","lastModifiedDate":"2022-02-07"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"    private String validateTaskDescription(String taskDescription) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-02-07"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        if (taskDescription.equals(\"\")) {","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Task description cannot be empty\");","lastModifiedDate":"2022-02-07"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"        assert taskDescription.length() \u003e 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        return taskDescription;","lastModifiedDate":"2022-02-07"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"    private void printResponse(Printable linePrinter, Task task, TaskList taskList, String type) {","lastModifiedDate":"2022-01-26"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"Added the following %s Task:\", type));","lastModifiedDate":"2022-01-24"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"\\t%s\", task.getReadableString()));","lastModifiedDate":"2022-01-24"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"Now you have %d task(s) in the list\", taskList.getTaskCount()));","lastModifiedDate":"2022-01-24"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":143}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the delete command.","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the delete command.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    DeleteCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        final int taskIndex \u003d parseTaskNumber();","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        final Task deletedTask \u003d taskList.deleteTask(taskIndex);","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        if (deletedTask \u003d\u003d null) {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"No matching task with given number\");","lastModifiedDate":"2022-01-24"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(\"Deleted the task:\");","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"\\t %s\", deletedTask.getReadableString()));","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":34}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the exit command.","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the exit command.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    ExitCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(\"Goodbye! Have a Nice Day.\");","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        return false;","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the find command.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the find command.","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    FindCommand(String args) {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        if (this.args.equals(\"\")) {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Search term cannot be empty\");","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        final String searchTerm \u003d this.args.toLowerCase();","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assert searchTerm.length() \u003e 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(\"Here are the tasks related to your search:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        taskList.doForEach((index, task) -\u003e {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            if (task.getDescription().toLowerCase().contains(searchTerm)) {","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                linePrinter.print(String.format(\"%d. %s\", index + OFFSET_LOGICAL_TO_READABLE,","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                        task.getReadableString()));","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":38}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the list command.","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the list command.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    ListCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(\"This is your task list:\");","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        taskList.doForEach((index, task) -\u003e {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            assert index \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            // Note that index passed into this consumer is 0-based. Increment index by 1 for readability.","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(String.format(\"%d. %s\", index + OFFSET_LOGICAL_TO_READABLE,","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"                    task.getReadableString()));","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":32}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the mark and unmark commands.","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Encapsulates all set completion logic.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    private final boolean isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the mark or unmark command, depending on the supplied argument.","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     * @param isDone The new completion state that the handler should set a task to.","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    MarkCommand(String args, boolean isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        final Task task \u003d parseSelectTask(taskList);","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        if (task.isDone() \u003d\u003d this.isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(String.format(\"Task is already %s:\", this.isDone ? \"done\" : \"not done\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        } else if (this.isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            taskList.markTask(task, true);","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(\"Great Job Finishing the task:\");","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            taskList.markTask(task, false);","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(\"Marking the task as not done yet:\");","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"\\t %s\", task.getReadableString()));","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":43}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeInvalidCommandException;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Factory for {@link Command} objects.","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Translates command strings to an instance of some subclass of \u003ccode\u003eCommand\u003c/code\u003e","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" * that can subsequently be executed.","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class Parser {","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_EXIT \u003d \"bye\";","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2022-01-24"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2022-01-24"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_CREATE_TODO \u003d \"todo\";","lastModifiedDate":"2022-01-24"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_CREATE_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-01-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_CREATE_EVENT \u003d \"event\";","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_UPCOMING \u003d \"upcoming\";","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_BETWEEN \u003d \"between\";","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_SCHEDULE \u003d \"schedule\";","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@link Command} object based on the supplied command string.","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     * @param command Command string to be translated.","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * @return An instance of the associated \u003ccode\u003eCommand\u003c/code\u003e object for handling the command.","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeInvalidCommandException If an invalid command string is supplied.","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    public static Command parse(String command) throws DukeInvalidCommandException {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        final String[] commandParts \u003d command.split(\" \");","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        final String commandLowerCase \u003d commandParts[0].toLowerCase();","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        final String args \u003d command.substring(commandLowerCase.length()).trim();","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        switch (commandLowerCase) {","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            return new ExitCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"            return new ListCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_MARK:","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            // Fallthrough","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_UNMARK:","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            return new MarkCommand(args, commandLowerCase.equals(COMMAND_MARK));","lastModifiedDate":"2022-01-24"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_CREATE_TODO:","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"            return new CreateCommand(args, TaskType.TODO);","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_CREATE_DEADLINE:","lastModifiedDate":"2022-01-24"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"            return new CreateCommand(args, TaskType.DEADLINE);","lastModifiedDate":"2022-01-24"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_CREATE_EVENT:","lastModifiedDate":"2022-01-24"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            return new CreateCommand(args, TaskType.EVENT);","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            return new DeleteCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_UPCOMING:","lastModifiedDate":"2022-01-24"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            return new UpcomingCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_SCHEDULE:","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            return new ScheduleCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_BETWEEN:","lastModifiedDate":"2022-01-24"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            return new BetweenCommand(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            return new FindCommand(args);","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        default:","lastModifiedDate":"2022-01-24"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeInvalidCommandException(String.format(\"No such command: %s\", commandLowerCase));","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":66}},{"path":"src/main/java/duke/command/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the schedule command.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class ScheduleCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the schedule command.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    ScheduleCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime dayStart \u003d parseDate(this.args);","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime dayEnd \u003d dayStart.plusDays(1);","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"Here are your tasks on %s:\", this.args));","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        taskList.doForEach((index, task) -\u003e {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            task.getDate().ifPresent(date -\u003e {","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                if (date.isBefore(dayEnd) \u0026\u0026 date.isAfter(dayStart)) {","lastModifiedDate":"2022-01-24"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                    linePrinter.print(task.getReadableString());","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            });","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":38}},{"path":"src/main/java/duke/command/UpcomingCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * Represents a handler for the upcoming command.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"public class UpcomingCommand extends Command {","lastModifiedDate":"2022-01-24"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     * Creates a handler for the upcoming command.","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * @param args Arguments supplied to the command handler.","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    UpcomingCommand(String args) {","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        super(args);","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public boolean execute(Printable linePrinter, TaskList taskList) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        int days \u003d this.parseDays(this.args);","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        final LocalDateTime endTime \u003d LocalDateTime.now().plus(days, ChronoUnit.DAYS);","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.print(String.format(\"Here are your tasks in %d days:\", days));","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        taskList.doForEach((index, task) -\u003e {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            task.getDate().ifPresent(date -\u003e {","lastModifiedDate":"2022-01-24"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                if (date.isBefore(endTime)) {","lastModifiedDate":"2022-01-24"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"                    linePrinter.print(task.getReadableString());","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"                }","lastModifiedDate":"2022-01-24"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            });","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     * Parses the days argument and ensures that it is a non-negative integer.","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * @param daysInString The days argument as a String.","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     * @return The parsed days argument as an Integer.","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIllegalArgumentException If the days argument is not a non-negative integer.","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    private int parseDays(String daysInString) throws DukeIllegalArgumentException {","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        int days;","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            days \u003d Integer.parseInt(daysInString);","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Days must be a non-negative number\");","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        if (days \u003c 0) {","lastModifiedDate":"2022-02-07"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIllegalArgumentException(\"Days must be a non-negative number\");","lastModifiedDate":"2022-02-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        return days;","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":61}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.exception;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents an application-specific error that may be raised during runtime.","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2022-01-18"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"     * Sole constructor for the \u003ccode\u003eDukeException\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"     * @param message Error-specific message.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"sharpstorm":15}},{"path":"src/main/java/duke/exception/DukeIllegalArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.exception;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents an error related to the parsing of a user input.","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public class DukeIllegalArgumentException extends DukeException {","lastModifiedDate":"2022-01-18"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"     * Sole constructor for the \u003ccode\u003eDukeIllegalArgumentException\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"     * @param message Error-specific message.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public DukeIllegalArgumentException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"sharpstorm":15}},{"path":"src/main/java/duke/exception/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.exception;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents an error related to the invocation of an invalid command.","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public class DukeInvalidCommandException extends DukeException {","lastModifiedDate":"2022-01-18"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"     * Sole constructor for the \u003ccode\u003eDukeInvalidCommandException\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"     * @param message Error-specific message.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public DukeInvalidCommandException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"sharpstorm":15}},{"path":"src/main/java/duke/exception/DukeIoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.exception;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents an error related to a read or write operation on some Input/Output stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public class DukeIoException extends DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"     * Sole constructor for the \u003ccode\u003eDukeIoException\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"     * @param message Error-specific message.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public DukeIoException(String message) {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        super(message);","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"sharpstorm":15}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * Represents a deadline type task.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Contains a description and an associated limit date.","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private LocalDateTime by;","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     * Creates a deadline type task.","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * @param task Description of the deadline.","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * @param by Limit date of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public Deadline(String task, LocalDateTime by) {","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        super(TaskType.DEADLINE, task);","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * Creates an empty instance of the class to be populated by the","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * {@link #readSerializedData(DataInputStream)} method.","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Usage should be avoided as there is potential for inconsistent states when the attributes are","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     * not immediately populated after creation.","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    protected Deadline() {","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        this(\"\", null);","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cLocalDateTime\u003e getDate() {","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        return Optional.of(this.by);","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public String getReadableString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        return String.format(\"%s (by: %s)\", super.getReadableString(),","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"                this.by.format(DateTimeFormatter.ofPattern(FORMAT_DATETIME)));","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void serialize(DataOutputStream dOut) throws IOException {","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        super.serialize(dOut);","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        dOut.writeUTF(by.toString());","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    protected Task readSerializedData(DataInputStream dIn) throws IOException {","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        super.readSerializedData(dIn);","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        this.by \u003d LocalDateTime.parse(dIn.readUTF());","lastModifiedDate":"2022-01-24"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":61}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" * Represents an event type task.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":" * Contains a description and an associated date.","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private LocalDateTime at;","lastModifiedDate":"2022-01-23"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     * Creates an event type task.","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * @param task Description of the event.","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * @param at Date associated with the event.","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public Event(String task, LocalDateTime at) {","lastModifiedDate":"2022-01-23"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        super(TaskType.EVENT, task);","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * Creates an empty instance of the class to be populated by the","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * {@link #readSerializedData(DataInputStream)} method.","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Usage should be avoided as there is potential for inconsistent states when the attributes are","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     * not immediately populated after creation.","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    protected Event() {","lastModifiedDate":"2022-01-23"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        this(\"\", null);","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cLocalDateTime\u003e getDate() {","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        return Optional.of(this.at);","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public String getReadableString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        return String.format(\"%s (at: %s)\", super.getReadableString(),","lastModifiedDate":"2022-01-23"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"                this.at.format(DateTimeFormatter.ofPattern(FORMAT_DATETIME)));","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    public void serialize(DataOutputStream dOut) throws IOException {","lastModifiedDate":"2022-01-23"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        super.serialize(dOut);","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        dOut.writeUTF(this.at.toString());","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    protected Task readSerializedData(DataInputStream dIn) throws IOException {","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        super.readSerializedData(dIn);","lastModifiedDate":"2022-01-23"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        this.at \u003d LocalDateTime.parse(dIn.readUTF());","lastModifiedDate":"2022-01-24"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-23"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":61}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-23"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.Optional;","lastModifiedDate":"2022-01-23"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Serializable;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    protected static final String FORMAT_DATETIME \u003d \"d MMM yyyy \u0027-\u0027 hh:mm a\";","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    private final TaskType type;","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private String description;","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     * Sole Constructor for {@link Task}.","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * @param type Type of the task to be created.","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param description Description of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    protected Task(TaskType type, String description) {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Marks the task as completed or uncompleted, depending on the argument.","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     * @param isDone New completion status of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    void setDone(boolean isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-24"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     * Returns the user-provided description of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"     * @return Description of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        return this.description;","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * Returns the completion status of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     * @return Completion status of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        return this.isDone;","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     * Returns an icon associated with the current completion status of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * @return X if the task is completed, single whitespace otherwise.","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"     * Returns the date, if any, associated with the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * @return {@link Optional} object containing a {@link LocalDateTime} object.","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public Optional\u003cLocalDateTime\u003e getDate() {","lastModifiedDate":"2022-01-23"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        return Optional.empty();","lastModifiedDate":"2022-01-23"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     * Returns a summary string containing all the current attributes of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * @return Human-readable String that contains the current attributes.","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    public String getReadableString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        return String.format(\"[%s][%s] %s\", this.type.getShorthand(), this.getStatusIcon(),","lastModifiedDate":"2022-01-17"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"                this.description);","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"     * Flattens and writes the task object into the supplied {@link DataOutputStream}.","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"     * @param dOut Output stream for the current instance to be serialized to.","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If an error occurs during any write operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-23"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public void serialize(DataOutputStream dOut) throws IOException {","lastModifiedDate":"2022-01-23"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assert dOut !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        dOut.writeShort(this.type.getTypeId());","lastModifiedDate":"2022-01-23"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        dOut.writeUTF(this.description);","lastModifiedDate":"2022-01-23"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        dOut.writeBoolean(this.isDone);","lastModifiedDate":"2022-01-23"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"     * Populates the attributes of this instance with attribute data read from the","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"     * supplied {@link DataInputStream}.","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"     * @param dIn Input stream to read attribute data from.","lastModifiedDate":"2022-01-26"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"     * @return The current instance of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If an error occurs during any read operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"    protected Task readSerializedData(DataInputStream dIn) throws IOException {","lastModifiedDate":"2022-01-23"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        assert dIn !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        this.description \u003d dIn.readUTF();","lastModifiedDate":"2022-01-23"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"        this.isDone \u003d dIn.readBoolean();","lastModifiedDate":"2022-01-23"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-23"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"     * Creates subtypes of \u003ccode\u003eTask\u003c/code\u003e depending on the {@link TaskType} supplied.","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"     * Depends on the {@link #readSerializedData(DataInputStream)} method for actual population of object","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"     * attributes.","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"     * @param type Type of task to be created.","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"     * @param dIn Input stream to read attribute data from.","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"     * @return Task created, or null if an invalid {@link TaskType} is supplied.","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If an error occurs during any read operation.","lastModifiedDate":"2022-01-26"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"    public static Task inflate(TaskType type, DataInputStream dIn) throws IOException {","lastModifiedDate":"2022-01-23"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        Task task;","lastModifiedDate":"2022-01-23"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"        switch (type) {","lastModifiedDate":"2022-01-23"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"        case TODO:","lastModifiedDate":"2022-01-23"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"            task \u003d new Todo();","lastModifiedDate":"2022-01-23"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"            break;","lastModifiedDate":"2022-01-23"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        case EVENT:","lastModifiedDate":"2022-01-23"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"            task \u003d new Event();","lastModifiedDate":"2022-01-23"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"            break;","lastModifiedDate":"2022-01-23"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-23"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"            task \u003d new Deadline();","lastModifiedDate":"2022-01-23"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"            break;","lastModifiedDate":"2022-01-23"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"        default:","lastModifiedDate":"2022-01-23"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"            return null;","lastModifiedDate":"2022-01-23"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        return task.readSerializedData(dIn);","lastModifiedDate":"2022-01-23"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":144}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"public class TaskList {","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-24"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    /** list of handlers to be invoked when a change occurs. */","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    private final ArrayList\u003cConsumer\u003cTaskList\u003e\u003e changeListeners;","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        this.changeListeners \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * Adds the supplied {@link Task} object to the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e object to add to the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e object added to the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public Task addTask(Task task) {","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        this.notifyListeners();","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        return task;","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     * @return Number of tasks in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public int getTaskCount() {","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        return this.tasks.size();","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     * Iterates through each {@link Task} in the list and applies \u003ccode\u003econsumer\u003c/code\u003e to the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * @param consumer Function that takes the 0-based index of the task in the list and the task object.","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public void doForEach(BiConsumer\u003cInteger, ? super Task\u003e consumer) {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assert consumer !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            consumer.accept(i, this.tasks.get(i));","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     * Returns the {@link Task} at the given position in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     * @param index Index of the task to be selected.","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     * @return The \u003ccode\u003eTask\u003c/code\u003e at the given index, or null if index is invalid.","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    public Task getTaskByIndex(int index) {","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        if (index \u003e\u003d this.tasks.size() || index \u003c 0) {","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            return null;","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * Deletes the {@link Task} object at the given position in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     * @param index Index of the task to be deleted.","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * @return The \u003ccode\u003eTask\u003c/code\u003e deleted, or null if nothing was deleted.","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2022-01-18"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        if (index \u003e\u003d this.tasks.size() || index \u003c 0) {","lastModifiedDate":"2022-01-18"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"            return null;","lastModifiedDate":"2022-01-18"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        final Task deletedTask \u003d this.tasks.remove(index);","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        assert deletedTask !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        this.notifyListeners();","lastModifiedDate":"2022-01-23"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        return deletedTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"     * Changes the completion status of the supplied {@link Task} to a new state.","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e to changed.","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     * @param isDone New completion status of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * @return The \u003ccode\u003eTask\u003c/code\u003e supplied as the argument.","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    public Task markTask(Task task, boolean isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        assert task !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"        if (task.isDone() !\u003d isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"            task.setDone(isDone);","lastModifiedDate":"2022-01-24"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"            this.notifyListeners();","lastModifiedDate":"2022-01-24"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        return task;","lastModifiedDate":"2022-01-24"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"     * Registers a new on-change observer that will be invoked when a change is made to the task list or any","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"     * tasks in the list.","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"     * @param listener Change handler to add.","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    public void registerListener(Consumer\u003cTaskList\u003e listener) {","lastModifiedDate":"2022-01-24"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        assert listener !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"        this.changeListeners.add(listener);","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"     * Removes a previously registered on-change observer from the list of observers.","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"     * @param listener Change handler to remove.","lastModifiedDate":"2022-01-26"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    public void removeListener(Consumer\u003cTaskList\u003e listener) {","lastModifiedDate":"2022-01-24"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        assert listener !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        this.changeListeners.remove(listener);","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"     * Invokes all the on-change observers currently registered to the task list.","lastModifiedDate":"2022-01-26"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"    private void notifyListeners() {","lastModifiedDate":"2022-01-24"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        this.changeListeners.forEach(handler -\u003e {","lastModifiedDate":"2022-01-23"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"            handler.accept(this);","lastModifiedDate":"2022-01-23"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-23"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":130}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" * Represents a type of task that can be created in the task list.","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"public enum TaskType {","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    /** A todo type task. */","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    TODO(\"T\", 1),","lastModifiedDate":"2022-01-23"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    /** A deadline type task. */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    DEADLINE(\"D\", 2),","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    /** An event type task. */","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    EVENT(\"E\", 3);","lastModifiedDate":"2022-01-23"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    private final String shorthand;","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    private final int typeId;","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    TaskType(String shorthand, int typeId) {","lastModifiedDate":"2022-01-23"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        this.shorthand \u003d shorthand;","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        this.typeId \u003d typeId;","lastModifiedDate":"2022-01-23"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     * Returns a single alphabet that represents the type of task.","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * @return String containing a single alphabet representing the type of task.","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public String getShorthand() {","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        return this.shorthand;","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * Returns a numeric identifier for the type of task.","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     * @return Integer associated with the type of task.","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public int getTypeId() {","lastModifiedDate":"2022-01-23"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        return this.typeId;","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * Returns the {@link TaskType} with the supplied numeric identifier.","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @param typeId Numeric identifier of the type of task.","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * @return The matching {@link TaskType}, or null if the provided identifier is invalid.","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public static TaskType matchType(int typeId) {","lastModifiedDate":"2022-01-24"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        return Arrays.stream(TaskType.values())","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"                .filter(x -\u003e x.getTypeId() \u003d\u003d typeId)","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"                .findFirst()","lastModifiedDate":"2022-01-23"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"                .orElse(null);","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":54}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" * Represents a todo type task.","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Contains only the description associated with the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     * Creates a todo type task with the supplied description.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * @param task Description of the task.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    public Todo(String task) {","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        super(TaskType.TODO, task);","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Creates an empty instance of the class to be populated by the","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     * {@link #readSerializedData(DataInputStream)} method.","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * Usage should be avoided as there is potential for inconsistent states when the attributes are","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * not immediately populated after creation.","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    protected Todo() {","lastModifiedDate":"2022-01-23"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        this(\"\");","lastModifiedDate":"2022-01-23"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":28}},{"path":"src/main/java/duke/task/serializer/TaskListSerializer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task.serializer;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.OutputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":" * Serializes and Deserializes custom formatted database files into {@link TaskList} objects.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" * Does not provide File System read or write operations.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" * Uses a custom binary format for storage.","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class TaskListSerializer {","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@link TaskList} object from the data in the supplied input stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param dbStream Input stream to read data from for \u003ccode\u003eTaskList\u003c/code\u003e creation.","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * @return Inflated \u003ccode\u003eTaskList\u003c/code\u003e object.","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If any error occurs while reading the input stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public static TaskList inflate(InputStream dbStream) throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        final TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        if (dbStream \u003d\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            return taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        final DataInputStream dbDataStream \u003d new DataInputStream(dbStream);","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        try (dbDataStream) {","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            final int recordCount \u003d dbDataStream.readInt();","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            assert recordCount \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            inflateRecords(dbDataStream, recordCount, taskList);","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Failed to inflate database: IO Error\");","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        return taskList;","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * Inflates task records from a database {@link DataInputStream} object.","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     * @param dbDataStream The data stream to read from.","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"     * @param recordCount The number of records to read.","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList The list that inflated records should be added to.","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If any error occurs while reading the input stream.","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    private static void inflateRecords(DataInputStream dbDataStream, int recordCount, TaskList taskList)","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            throws IOException {","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 0; i \u003c recordCount; i++) {","lastModifiedDate":"2022-01-23"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            final int recordLength \u003d dbDataStream.readInt();","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            assert recordLength \u003e 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            final byte[] recordData \u003d dbDataStream.readNBytes(recordLength);","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            assert recordData.length \u003d\u003d recordLength;","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            try {","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"                taskList.addTask(TaskSerializer.inflate(recordData));","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            } catch (DukeIoException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"                System.out.println(\"Verbose: Failed to load Task record\");","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * Flattens and writes the {@link TaskList} object provided to the supplied output stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList \u003ccode\u003eTaskList\u003c/code\u003e object to flatten and write.","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     * @param dbStream Output stream to write the data to.","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If any error occurs while writing to the output stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    public static void deflate(TaskList taskList, OutputStream dbStream) throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        try (final DataOutputStream dbDataStream \u003d new DataOutputStream(dbStream)) {","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"            assert taskList.getTaskCount() \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"            dbDataStream.writeInt(taskList.getTaskCount());","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"            deflateRecords(dbDataStream, taskList);","lastModifiedDate":"2022-02-07"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Failed to deflate database: IO Error\");","lastModifiedDate":"2022-02-07"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"     * Deflates tasks from a task list into a {@link DataOutputStream} object.","lastModifiedDate":"2022-02-07"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * @param dbDataStream The data stream to write to.","lastModifiedDate":"2022-02-07"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     * @param taskList The task list containing the tasks to be deflated.","lastModifiedDate":"2022-02-07"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If an error occurs during task deflation.","lastModifiedDate":"2022-02-07"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If an error occurs while writing to the output stream.","lastModifiedDate":"2022-02-07"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    private static void deflateRecords(DataOutputStream dbDataStream, TaskList taskList)","lastModifiedDate":"2022-02-07"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"            throws DukeIoException, IOException {","lastModifiedDate":"2022-02-07"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 0; i \u003c taskList.getTaskCount(); i++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"            final byte[] flattenedData \u003d TaskSerializer.deflate(taskList.getTaskByIndex(i));","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            assert flattenedData.length \u003e 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"            dbDataStream.writeInt(flattenedData.length);","lastModifiedDate":"2022-01-23"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            dbDataStream.write(flattenedData);","lastModifiedDate":"2022-01-23"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"sharpstorm":105}},{"path":"src/main/java/duke/task/serializer/TaskSerializer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task.serializer;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-24"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-23"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":" * Serializes and Deserializes Task objects into byte arrays.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" * Depends on the {@link Task#serialize(DataOutputStream)} method for formatting of data for each","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" * task.","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-23"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class TaskSerializer {","lastModifiedDate":"2022-01-23"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"     * Creates a {@link Task} object from data in the provided byte array.","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"     * @param data Byte array containing serialized data for a Task object.","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e object inflated from the byte array.","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If any format errors are encountered in the provided data.","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    static Task inflate(byte[] data) throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        final ByteArrayInputStream memStream \u003d new ByteArrayInputStream(data);","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        final DataInputStream dataStream \u003d new DataInputStream(memStream);","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        try (dataStream) {","lastModifiedDate":"2022-01-23"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            final int typeId \u003d dataStream.readShort();","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            TaskType taskType \u003d TaskType.matchType(typeId);","lastModifiedDate":"2022-01-23"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            if (taskType \u003d\u003d null) {","lastModifiedDate":"2022-01-23"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"                throw new DukeIoException(\"Encountered unknown format in database\");","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-23"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"            return Task.inflate(taskType, dataStream);","lastModifiedDate":"2022-01-23"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-01-23"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Failed to inflate Task\");","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"     * Serializes the {@link Task} object into a custom format binary block.","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e object to be serialized.","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"     * @return Byte array containing the deflated data of the supplied \u003ccode\u003eTask\u003c/code\u003e object.","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If any write error occurs during serialization.","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    static byte[] deflate(Task task) throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        final ByteArrayOutputStream memStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        final DataOutputStream dataStream \u003d new DataOutputStream(memStream);","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        try (dataStream) {","lastModifiedDate":"2022-01-23"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            task.serialize(dataStream);","lastModifiedDate":"2022-01-23"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            dataStream.flush();","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            memStream.flush();","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            final byte[] flattenedData \u003d memStream.toByteArray();","lastModifiedDate":"2022-02-06"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            assert flattenedData.length \u003e 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            return flattenedData;","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-01-23"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Failed to serialize Task\");","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-23"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-23"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"sharpstorm":65}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.util.Collections;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":" * Represents a row in the chat window in the Ui.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private Label chat;","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"     * Creates a new instance of \u003ccode\u003eDialogBox\u003c/code\u003e. Sole constructor for \u003ccode\u003eDialogBox\u003c/code\u003e.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"     * @param text The text to be inserted into the chat row.","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"     * @param image The profile picture of the user chatting.","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private DialogBox(String text, Image image) {","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(DialogBox.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            ex.printStackTrace();","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        chat.setText(text);","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        displayPicture.setImage(image);","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"     * Inverts the horizontal ordering of elements, from a label-image configuration to image-label.","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    private void changeLeftToRight() {","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        ObservableList\u003cNode\u003e current \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        Collections.reverse(current);","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        getChildren().setAll(current);","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     * Creates a new instance of \u003ccode\u003eDialogBox\u003c/code\u003e to represent a row in the chat box for the user.","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     * Performs an inversion of the horizontal ordering of the chat row to make it opposite of that of a","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"     * bot chat row.","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     * @param text The text to be inserted into the chat row.","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @param image The profile picture of the user chatting.","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     * @return The created instance of \u003ccode\u003eDialogBox\u003c/code\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public static DialogBox getUserDialog(String text, Image image) {","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        DialogBox row \u003d new DialogBox(text, image);","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        row.changeLeftToRight();","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        return row;","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * Creates a new instance of \u003ccode\u003eDialogBox\u003c/code\u003e to represent a row in the chat box for the user.","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     * Performs an inversion of the horizontal ordering of the chat row to make it opposite of that of a","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     * bot chat row.","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     * @param text The text to be inserted into the chat row.","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * @param image The profile picture of the bot.","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     * @return The created instance of \u003ccode\u003eDialogBox\u003c/code\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"    public static DialogBox getBotDialog(String text, Image image) {","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        return new DialogBox(text, image);","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"sharpstorm":83}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    private TextField userInput;","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private Button sendButton;","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    /** The handler that to be fired for input events. */","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    private Consumer\u003cString\u003e inputHandler;","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    /** Image resource file for the user\u0027s picture */","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    private Image userImage;","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    /** Image resource file for the bot\u0027s picture */","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    private Image botImage;","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * Initializes the ScrollPane node and loads image assets required for the Ui.","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    public void initialize() {","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            userImage \u003d loadImageAsset(\"/images/user.png\");","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            botImage \u003d loadImageAsset(\"/images/bot.png\");","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIoException ex) {","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            System.out.println(\"[UI Load Error] Could not load application image\");","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"     * Sets the handler that should be fired on input events.","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"     * @param inputHandler The handler that should be fired on input events.","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public void setInputHandler(Consumer\u003cString\u003e inputHandler) {","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        this.inputHandler \u003d inputHandler;","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"     * Loads the image asset located at the supplied path as an \u003ccode\u003eImage\u003c/code\u003e object.","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"     * @param assetPath Path of the image asset to load within the resources folder.","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"     * @return The \u003ccode\u003eImage\u003c/code\u003e object loaded from the supplied path.","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If the image at the supplied path cannot be loaded.","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    private Image loadImageAsset(String assetPath) throws DukeIoException {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        InputStream resourceStream \u003d MainWindow.class.getResourceAsStream(assetPath);","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        if (resourceStream !\u003d null) {","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            return new Image(resourceStream);","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        throw new DukeIoException(\"Failed to load UI asset image\");","lastModifiedDate":"2022-01-31"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     * Prints a message as the bot in the Ui.","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    public void printBotMessage(String message) {","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        dialogContainer.getChildren().add(DialogBox.getBotDialog(message, botImage));","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"     * Creates a dialog box for the user input and clears the user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"     * Fires and hands over the input to \u003ccode\u003einputHandler\u003c/code\u003e, if it exists, to be processed.","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"    @FXML","lastModifiedDate":"2022-01-31"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-01-31"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        String input \u003d this.userInput.getText();","lastModifiedDate":"2022-01-31"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));","lastModifiedDate":"2022-01-31"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        userInput.clear();","lastModifiedDate":"2022-01-31"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        if (this.inputHandler !\u003d null) {","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"            this.inputHandler.accept(input);","lastModifiedDate":"2022-01-31"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"sharpstorm":97}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Function;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import duke.Duke;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-24"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeInvalidCommandException;","lastModifiedDate":"2022-01-24"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class Ui {","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    private static final String BOT_NAME \u003d \"Megumin\";","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"I do not understand you!\";","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    private static final String ERROR_INVALID_SYNTAX \u003d \"There was a problem understanding you:\";","lastModifiedDate":"2022-01-24"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    private static final String ERROR_IO \u003d \"I had a problem reading / writing my memory!\";","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    private static final String ERROR_GENERAL \u003d \"Something went wrong and my head exploded!\";","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    private static Ui instance;","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"    private MainWindow mainWindowController;","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    private Ui() {","lastModifiedDate":"2022-01-24"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     * Inflates the MainWindow user-interface onto the supplied stage and attaches the supplied input","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * handler.","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     * @param stage The JavaFX stage to create the user-interface on.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     * @param inputHandler The handler to be fired when the user enters some input.","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"     * @throws DukeIoException If the MainWindow layout FXML file cannot be found.","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    public void buildStage(Stage stage, Consumer\u003cString\u003e inputHandler) throws DukeIoException {","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"            this.mainWindowController \u003d fxmlLoader.getController();","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            this.mainWindowController.setInputHandler(inputHandler);","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            throw new DukeIoException(\"Unable to read MainWindow Layout file\");","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"     * Prints a greeting for the initial startup.","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"     * @return The global instance of the \u003ccode\u003eUi\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"    public Ui greet() {","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        printCommand((linePrinter) -\u003e {","lastModifiedDate":"2022-01-24"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(\"Hi! I\u0027m \" + BOT_NAME);","lastModifiedDate":"2022-01-24"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(\"What do you need?\");","lastModifiedDate":"2022-01-24"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-24"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"     * Provides a {@link Printable} object that can be printed to.","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"     * Handles formatting of printed contents, including indentation and surrounding separators.","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"     * @param action A \u003ccode\u003eFunction\u003c/code\u003e object that accepts the provided {@link Printable} object","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"     *               and returns a boolean to indicate if the application should continue running.","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"     * @return \u003ccode\u003eBoolean\u003c/code\u003e indicating if the application should continue running.","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    public boolean printCommand(Function\u003cPrintable, Boolean\u003e action) {","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        final boolean isRunning \u003d action.apply((line) -\u003e {","lastModifiedDate":"2022-01-26"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"            lines.add(line);","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-24"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        final String message \u003d lines.stream().reduce((x, y) -\u003e x + \"\\n\" + y).orElse(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        assert this.mainWindowController !\u003d null : \"[UI] Main Window Controller not initialized\";","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        this.mainWindowController.printBotMessage(message);","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        return isRunning;","lastModifiedDate":"2022-01-24"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"     * Prints an error message onto the {@link Printable} object provided.","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"     * Error message printer depends on the type of the provided {@link DukeException} object.","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"     * @param linePrinter {@link Printable} object that the error should be printed to.","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"     * @param ex Exception object that the error message should be printed for.","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public void printError(Printable linePrinter, DukeException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        if (ex instanceof DukeInvalidCommandException) {","lastModifiedDate":"2022-01-24"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(ERROR_INVALID_COMMAND);","lastModifiedDate":"2022-01-24"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        } else if (ex instanceof DukeIllegalArgumentException) {","lastModifiedDate":"2022-01-24"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(ERROR_INVALID_SYNTAX);","lastModifiedDate":"2022-01-24"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(ex.getMessage());","lastModifiedDate":"2022-01-24"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"        } else if (ex instanceof DukeIoException) {","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(ERROR_IO);","lastModifiedDate":"2022-01-24"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            assert false : \"[UI] Unknown printError Type\";","lastModifiedDate":"2022-02-06"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(ERROR_GENERAL);","lastModifiedDate":"2022-02-07"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"     * Returns the global instance of the {@link Ui} class.","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"     * @return Global instance of the \u003ccode\u003eUi\u003c/code\u003e class.","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    public static Ui getInstance() {","lastModifiedDate":"2022-01-24"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2022-01-24"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"            instance \u003d new Ui();","lastModifiedDate":"2022-01-24"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        return instance;","lastModifiedDate":"2022-01-24"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"sharpstorm":120}},{"path":"src/main/java/duke/util/Printable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.util;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Represents an object to which \u003ccode\u003eString\u003c/code\u003e objects can be written to.","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"public interface Printable {","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"     * Prints the provided \u003ccode\u003eString\u003c/code\u003e input.","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"     * @param input String to be printed.","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    public void print(String input);","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":13}},{"path":"src/main/java/duke/util/Serializable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.util;","lastModifiedDate":"2022-01-24"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-23"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-23"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * Represents an object that can be serialized and written to a {@link DataOutputStream}.","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"public interface Serializable {","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"     * Serializes the current instance of the class and writes it to the provided {@link DataOutputStream}.","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"     * @param dOut Output stream for the current instance to be serialized to.","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If an error occurs during any write operation to the output stream.","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    void serialize(DataOutputStream dOut) throws IOException;","lastModifiedDate":"2022-01-23"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-23"}],"authorContributionMap":{"sharpstorm":17}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"        \u003cLabel fx:id\u003d\"chat\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"250.0\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"sharpstorm":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"0.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"sharpstorm":18}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.mockito.ArgumentMatchers.any;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.mockito.Mockito.doNothing;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.mockito.Mockito.mock;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static org.mockito.Mockito.when;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.util.function.Function;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeInvalidCommandException;","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"public class UiTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    private Ui initMockUi() throws DukeIoException {","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        Ui ui \u003d mock(Ui.class);","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        Stage stage \u003d mock(Stage.class);","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        doNothing().when(stage).setScene(any(Scene.class));","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        ui.buildStage(stage, (input) -\u003e {});","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        return ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    public void testGreet() throws DukeIoException {","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        Ui ui \u003d initMockUi();","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        when(ui.printCommand(any())).thenAnswer((invocation) -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            invocation.\u003cFunction\u003cPrintable, Boolean\u003e\u003egetArgument(0)","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"                    .apply((message) -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                        lines.add(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"                    });","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        when(ui.greet()).thenCallRealMethod();","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        ui.greet();","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        String actual \u003d lines.stream().reduce((x, y) -\u003e x + \"\\n\" + y).orElse(\"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Hi! I\u0027m Megumin\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"                + \"What do you need?\", actual);","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    public void testPrintCommand() throws DukeIoException {","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        Ui ui \u003d initMockUi();","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        when(ui.printCommand(any())).thenAnswer((invocation) -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            invocation.\u003cFunction\u003cPrintable, Boolean\u003e\u003egetArgument(0)","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"                    .apply((message) -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"                        lines.add(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"                    });","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            return true;","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        ui.printCommand((linePrinter) -\u003e {","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            linePrinter.print(\"test line\");","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            return false;","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        String actual \u003d lines.stream().reduce((x, y) -\u003e x + \"\\n\" + y).orElse(\"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"test line\", actual);","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"    public void testPrintError() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub printer \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        Ui.getInstance().printError(printer, new DukeInvalidCommandException(\"error 1\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        Ui.getInstance().printError(printer, new DukeIllegalArgumentException(\"error 2\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        Ui.getInstance().printError(printer, new DukeIoException(\"error 3\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"I do not understand you!\", printer.getLines().get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"There was a problem understanding you:\", printer.getLines().get(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"error 2\", printer.getLines().get(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"I had a problem reading / writing my memory!\", printer.getLines().get(3));","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":84}},{"path":"src/test/java/duke/command/BetweenCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"public class BetweenCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-22T12:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T13:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T14:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-23T15:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-24T16:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        new BetweenCommand(\"22/12/2022 10:00 and 22/12/2022 13:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        new BetweenCommand(\"22/12/2022 10:00 and 22/12/2022 14:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        new BetweenCommand(\"22/12/2022 13:30 and 27/12/2022 14:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        new BetweenCommand(\"23/12/2022 13:30 and 23/12/2022 15:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(2, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        new BetweenCommand(\"12/12/2022 13:30 and 13/12/2022 15:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            new BetweenCommand(\"nothing\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cdate\u003e and \u003cdate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            new BetweenCommand(\"22/12/2022 10:00 22/12/2022 14:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cdate\u003e and \u003cdate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            new BetweenCommand(\"22/12/2022 10:00 and\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cdate\u003e and \u003cdate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"            new BetweenCommand(\"www and 22/12/2022 14:30\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"            new BetweenCommand(\"22/12/2022 14:30 and asd\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":90}},{"path":"src/test/java/duke/command/CreateCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class CreateCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        new CreateCommand(\"test fully 1\", TaskType.TODO).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(list.getTaskByIndex(0) instanceof Todo);","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"test fully 1\", list.getTaskByIndex(0).getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        new CreateCommand(\"test fully 2 /by 23/12/2022 18:00\", TaskType.DEADLINE)","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                .execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(2, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(list.getTaskByIndex(1) instanceof Deadline);","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"test fully 2\", list.getTaskByIndex(1).getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2022-12-23T18:00\", list.getTaskByIndex(1).getDate()","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"                .map(LocalDateTime::toString).orElse(null));","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        new CreateCommand(\"test fully 3 /at 24/12/2022 18:00\", TaskType.EVENT)","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"                .execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(list.getTaskByIndex(2) instanceof Event);","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"test fully 3\", list.getTaskByIndex(2).getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2022-12-24T18:00\", list.getTaskByIndex(2).getDate()","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"                .map(LocalDateTime::toString).orElse(null));","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_emptyTaskName_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"\", TaskType.TODO).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Task description cannot be empty\", ex.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\" /by 23/12/2022 18:00\", TaskType.DEADLINE).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Task description cannot be empty\", ex.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\" /at 23/12/2022 18:00\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Task description cannot be empty\", ex.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"    public void testParsingDeadline_invalidFormat_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"23/12/2022 18:00\", TaskType.DEADLINE).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /by \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"/by 23/12/2022 18:00\", TaskType.DEADLINE).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /by \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /by\", TaskType.DEADLINE).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /by \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /by test\", TaskType.DEADLINE).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /by 32/12/2022 18:00\", TaskType.DEADLINE)","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"                    .execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"    public void testParsingEvent_invalidFormat_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"23/12/2022 18:00\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /at \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"/at 23/12/2022 18:00\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /at \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /at\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Not in the format \u003cTask name\u003e /at \u003cDate\u003e\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /at test\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"            new CreateCommand(\"test /at 32/12/2022 18:00\", TaskType.EVENT).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":156,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":156}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        Task[] sourceTasks \u003d new Task[] {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-22T12:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T13:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T14:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-23T15:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-24T16:00\"))","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        Arrays.stream(sourceTasks).forEachOrdered(list::addTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        new DeleteCommand(\"1\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Deleted the task:\", linePrinter.getLines().get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[0].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        new DeleteCommand(\"2\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Deleted the task:\", linePrinter.getLines().get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[2].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        new DeleteCommand(\"4\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Deleted the task:\", linePrinter.getLines().get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[5].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            new DeleteCommand(\"test\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Task Number must be a number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            new DeleteCommand(\"0\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"No matching task with given number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"            new DeleteCommand(\"2\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"No matching task with given number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":77}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class ExitCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(new ExitCommand(\"\").execute(linePrinter, list));","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Goodbye! Have a Nice Day.\", linePrinter.getLines().get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":21}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class FindCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        Task[] taskSource \u003d new Task[] {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test 2\", LocalDateTime.parse(\"2022-12-22T12:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Another OTTER\", LocalDateTime.parse(\"2022-12-22T13:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Some other stuff\", LocalDateTime.parse(\"2022-12-22T14:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Watch the Otter\", LocalDateTime.parse(\"2022-12-23T15:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Read Some Book\", LocalDateTime.parse(\"2022-12-24T16:00\"))","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        for (Task task : taskSource) {","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            list.addTask(task);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        new FindCommand(\"test\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"1. \" + taskSource[0].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2. \" + taskSource[1].getReadableString(), linePrinter.getLines().get(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        new FindCommand(\"otter\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"3. \" + taskSource[2].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"5. \" + taskSource[4].getReadableString(), linePrinter.getLines().get(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        new FindCommand(\"OtTeR\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"3. \" + taskSource[2].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"5. \" + taskSource[4].getReadableString(), linePrinter.getLines().get(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        new FindCommand(\"t\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(6, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        new FindCommand(\"zzz\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"            new FindCommand(\"\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Search term cannot be empty\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":75}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"public class ListCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        Task[] sourceTasks \u003d new Task[] {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-22T12:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T13:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        Arrays.stream(sourceTasks).forEachOrdered(list::addTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        new ListCommand(\"\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"1. \" + sourceTasks[0].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2. \" + sourceTasks[1].getReadableString(), linePrinter.getLines().get(2));","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"3. \" + sourceTasks[2].getReadableString(), linePrinter.getLines().get(3));","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":37}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"public class MarkCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        Task[] sourceTasks \u003d new Task[] {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-22T12:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T13:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T14:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-23T15:00\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.parse(\"2022-12-24T16:00\"))","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        Arrays.stream(sourceTasks).forEachOrdered(list::addTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(sourceTasks[0].isDone());","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        new MarkCommand(\"1\", true).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(sourceTasks[0].isDone());","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[0].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        new MarkCommand(\"5\", true).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(sourceTasks[0].isDone());","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[4].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        new MarkCommand(\"1\", false).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(sourceTasks[0].isDone());","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"\\t \" + sourceTasks[0].getReadableString(), linePrinter.getLines().get(1));","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"            new MarkCommand(\"test\", true).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Task Number must be a number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            new MarkCommand(\"0\", true).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"No matching task with given number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"            new MarkCommand(\"2\", true).execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"No matching task with given number\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":80}},{"path":"src/test/java/duke/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeInvalidCommandException;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    public void testFactory_valid_success() throws DukeInvalidCommandException {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"list\") instanceof ListCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"mark a\") instanceof MarkCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"unmark a\") instanceof MarkCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"todo a\") instanceof CreateCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"deadline a\") instanceof CreateCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"event a\") instanceof CreateCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"delete a\") instanceof DeleteCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"upcoming a\") instanceof UpcomingCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"between a\") instanceof BetweenCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"schedule a\") instanceof ScheduleCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"find a\") instanceof FindCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"    public void testFactory_alphabetCases_success() throws DukeInvalidCommandException {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"Bye\") instanceof ExitCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"ByE\") instanceof ExitCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(Parser.parse(\"BYE\") instanceof ExitCommand);","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    public void testFactory_invalid_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            Parser.parse(\"notcommand\");","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeInvalidCommandException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"No such command: notcommand\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":45}},{"path":"src/test/java/duke/command/ScheduleCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"public class ScheduleCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-22T12:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T13:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Deadline(\"Test\", LocalDateTime.parse(\"2022-12-22T14:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-23T15:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Event(\"Test\", LocalDateTime.parse(\"2022-12-24T16:00\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        new ScheduleCommand(\"22/12/2022\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        new ScheduleCommand(\"23/12/2022\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(2, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        new ScheduleCommand(\"25/12/2022\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"            new ScheduleCommand(\"test\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            new ScheduleCommand(\"32/12/2022\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Date not in the format dd/MM/yyyy HH:mm\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":61}},{"path":"src/test/java/duke/command/UpcomingCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIllegalArgumentException;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.PrinterStub;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class UpcomingCommandTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_valid_success() throws DukeIllegalArgumentException {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        Task[] sourceTasks \u003d new Task[] {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.now().plusDays(2).minusSeconds(10)),","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.now().plusDays(3).minusSeconds(10)),","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test\", LocalDateTime.now().plusDays(4).minusSeconds(10)),","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.now().plusDays(7).minusSeconds(10)),","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test\", LocalDateTime.now().plusDays(8).minusSeconds(10))","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        Arrays.stream(sourceTasks).forEachOrdered(list::addTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        new UpcomingCommand(\"3\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        new UpcomingCommand(\"4\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        linePrinter.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        new UpcomingCommand(\"1\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, linePrinter.lineCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    public void testParsing_invalidArgs_exceptionRaised() {","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new Todo(\"Test\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        PrinterStub linePrinter \u003d new PrinterStub();","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            new UpcomingCommand(\"test\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Days must be a non-negative number\", ex.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            new UpcomingCommand(\"-1\").execute(linePrinter, list);","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIllegalArgumentException ex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Days must be a non-negative number\", ex.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":67}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public void testInitialState_testStrings_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        Deadline t1 \u003d new Deadline(\"Test 1\", LocalDateTime.parse(\"2022-12-22T12:34\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.getDate().isPresent());","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2022-12-22T12:34\", t1.getDate().get().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] Test 1 (by: 22 Dec 2022 - 12:34 PM)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"                        TaskType.DEADLINE.getShorthand()), t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public void testSerialize_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        byte[] actual \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            Task t1 \u003d new Deadline(\"Test 2\", LocalDateTime.parse(\"2023-10-21T23:45\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            t1.serialize(dOut);","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(TaskType.DEADLINE.getTypeId());","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2023-10-21T23:45\");","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertArrayEquals(reference, actual);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2020-11-13T12:34\");","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            Deadline d1 \u003d new Deadline();","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            d1.readSerializedData(dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(d1.getDate().isPresent());","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"2020-11-13T12:34\", d1.getDate().get().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":56}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class EventTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public void testInitialState_testStrings_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        Event t1 \u003d new Event(\"Test 1\", LocalDateTime.parse(\"2022-12-22T12:34\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.getDate().isPresent());","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"2022-12-22T12:34\", t1.getDate().get().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] Test 1 (at: 22 Dec 2022 - 12:34 PM)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"                        TaskType.EVENT.getShorthand()), t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"    public void testSerialize_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        byte[] actual \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            Task t1 \u003d new Event(\"Test 2\", LocalDateTime.parse(\"2023-10-21T23:45\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            t1.serialize(dOut);","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(TaskType.EVENT.getTypeId());","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2023-10-21T23:45\");","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertArrayEquals(reference, actual);","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2020-11-13T12:34\");","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            Event d1 \u003d new Event();","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            d1.readSerializedData(dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(d1.getDate().isPresent());","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"2020-11-13T12:34\", d1.getDate().get().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":56}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    private static class TaskStub extends Task {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"        private TaskStub(String description) {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"            super(TaskType.TODO, description);","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public void testAddRemoveGet_valid_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"        Task t1 \u003d new TaskStub(\"Task 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        Task t2 \u003d new TaskStub(\"Task 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(t1);","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(t2);","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(2, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(t1, list.getTaskByIndex(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(t2, list.getTaskByIndex(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(t1, list.deleteTask(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(1, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(t2, list.getTaskByIndex(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    public void testRemoveGet_outOfBounds_null() {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        assertNull(list.getTaskByIndex(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        list.addTask(new TaskStub(\"Task 1\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        assertNull(list.getTaskByIndex(-1));","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(list.getTaskByIndex(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertNull(list.getTaskByIndex(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"        assertNull(list.deleteTask(-1));","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"        assertNull(list.deleteTask(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        assertNotNull(list.deleteTask(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"    public void testMark_valid_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        Task t1 \u003d new TaskStub(\"Task 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        list.markTask(t1, true);","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"        list.markTask(t1, true);","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"        list.markTask(t1, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"        list.markTask(t1, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    public void testForEach() {","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        final HashMap\u003cInteger, Task\u003e tasks \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        Task[] sourceTasks \u003d new Task[] {","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"            new TaskStub(\"Task\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"            new TaskStub(\"Task\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"            new TaskStub(\"Task\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"            new TaskStub(\"Task\")","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        Arrays.stream(sourceTasks).forEachOrdered(list::addTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"        list.doForEach(tasks::put);","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, tasks.size());","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(tasks.containsKey(0) \u0026\u0026 tasks.containsKey(1) \u0026\u0026 tasks.containsKey(2)","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"                \u0026\u0026 tasks.containsKey(3));","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(sourceTasks[0], tasks.get(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(sourceTasks[1], tasks.get(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(sourceTasks[2], tasks.get(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(sourceTasks[3], tasks.get(3));","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":92}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import java.io.EOFException;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"public class TaskTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    private static class TaskStub extends Task {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        private TaskStub(String description) {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"            super(TaskType.TODO, description);","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        private static String getShorthand() {","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            return TaskType.TODO.getShorthand();","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        private static int getTypeId() {","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"            return TaskType.TODO.getTypeId();","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"    public void testInitialState_testStrings_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        Task t1 \u003d new TaskStub(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"Test Description 1\", t1.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\" \", t1.getStatusIcon());","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.getDate().isEmpty());","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] %s\", TaskStub.getShorthand(), \"Test Description 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"    public void testMarking_markUnmark_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        Task t1 \u003d new TaskStub(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\" \", t1.getStatusIcon());","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] %s\", TaskStub.getShorthand(), \"Test Description 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"                t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"        t1.setDone(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\"X\", t1.getStatusIcon());","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][X] %s\", TaskStub.getShorthand(), \"Test Description 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"                t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"        t1.setDone(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        assertFalse(t1.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(\" \", t1.getStatusIcon());","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] %s\", TaskStub.getShorthand(), \"Test Description 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"                t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"    public void testSerialize_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        byte[] actual \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"            Task t1 \u003d new TaskStub(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"            t1.serialize(dOut);","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(TaskStub.getTypeId());","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        assertArrayEquals(reference, actual);","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"        actual \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"            Task t1 \u003d new TaskStub(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"            t1.setDone(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"            t1.serialize(dOut);","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"        reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(TaskStub.getTypeId());","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"sharpstorm"},"content":"        assertArrayEquals(reference, actual);","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":95,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":97,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":98,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2022-12-12T13:00\");","lastModifiedDate":"2022-01-25"},{"lineNumber":100,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":101,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference2 \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":104,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":105,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":106,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"sharpstorm"},"content":"        // Test Factory","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"sharpstorm"},"content":"            Task task \u003d Task.inflate(TaskType.TODO, dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task instanceof Todo);","lastModifiedDate":"2022-01-25"},{"lineNumber":111,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":112,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Test Description 1\", task.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":113,"author":{"gitId":"sharpstorm"},"content":"        }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"sharpstorm"},"content":"            Task task \u003d Task.inflate(TaskType.DEADLINE, dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":116,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task instanceof Deadline);","lastModifiedDate":"2022-01-25"},{"lineNumber":117,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Test Description 1\", task.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":119,"author":{"gitId":"sharpstorm"},"content":"        }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"sharpstorm"},"content":"            Task task \u003d Task.inflate(TaskType.EVENT, dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task instanceof Event);","lastModifiedDate":"2022-01-25"},{"lineNumber":123,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(task.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":124,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Test Description 1\", task.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":125,"author":{"gitId":"sharpstorm"},"content":"        }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":126,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":127,"author":{"gitId":"sharpstorm"},"content":"        StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":128,"author":{"gitId":"sharpstorm"},"content":"            Task task \u003d Task.inflate(TaskType.TODO, dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":129,"author":{"gitId":"sharpstorm"},"content":"            assertNotNull(task);","lastModifiedDate":"2022-01-25"},{"lineNumber":130,"author":{"gitId":"sharpstorm"},"content":"            assertFalse(task.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":131,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Test 2\", task.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"sharpstorm"},"content":"        }, reference2);","lastModifiedDate":"2022-01-25"},{"lineNumber":133,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":134,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":135,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_invalid_exception() throws IOException {","lastModifiedDate":"2022-01-30"},{"lineNumber":137,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":138,"author":{"gitId":"sharpstorm"},"content":"            dOut.write(256);","lastModifiedDate":"2022-01-25"},{"lineNumber":139,"author":{"gitId":"sharpstorm"},"content":"            dOut.write(222);","lastModifiedDate":"2022-01-25"},{"lineNumber":140,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Garbage data\");","lastModifiedDate":"2022-01-25"},{"lineNumber":141,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":142,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":143,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":144,"author":{"gitId":"sharpstorm"},"content":"            StreamUtils.buildInputStream((dIn) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":145,"author":{"gitId":"sharpstorm"},"content":"                Task task \u003d Task.inflate(TaskType.TODO, dIn);","lastModifiedDate":"2022-01-25"},{"lineNumber":146,"author":{"gitId":"sharpstorm"},"content":"                assertTrue(task instanceof Todo);","lastModifiedDate":"2022-01-25"},{"lineNumber":147,"author":{"gitId":"sharpstorm"},"content":"                assertTrue(task.isDone());","lastModifiedDate":"2022-01-25"},{"lineNumber":148,"author":{"gitId":"sharpstorm"},"content":"                assertEquals(\"Test Description 1\", task.getDescription());","lastModifiedDate":"2022-01-25"},{"lineNumber":149,"author":{"gitId":"sharpstorm"},"content":"            }, reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":150,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":151,"author":{"gitId":"sharpstorm"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-02-07"},{"lineNumber":152,"author":{"gitId":"sharpstorm"},"content":"            assertTrue(ex instanceof EOFException);","lastModifiedDate":"2022-02-07"},{"lineNumber":153,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":154,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":155,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":155}},{"path":"src/test/java/duke/task/TaskTypeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"public class TaskTypeTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    public void testMatching_oneToThree_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(TaskType.TODO, TaskType.matchType(1));","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(TaskType.DEADLINE, TaskType.matchType(2));","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(TaskType.EVENT, TaskType.matchType(3));","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public void testMatching_four_null() {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertNull(TaskType.matchType(4));","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":21}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"public class TodoTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"    public void testInitialState_testStrings_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"        Todo t1 \u003d new Todo(\"Test 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"        assertTrue(t1.getDate().isEmpty());","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(String.format(\"[%s][ ] %s\", TaskType.TODO.getShorthand(), \"Test 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"                t1.getReadableString());","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    public void testSerialize_valid_success() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        byte[] actual \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"            Todo t1 \u003d new Todo(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"            t1.serialize(dOut);","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(TaskType.TODO.getTypeId());","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test 2\");","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(false);","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        assertArrayEquals(reference, actual);","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":38}},{"path":"src/test/java/duke/task/serializer/TaskListSerializerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task.serializer;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-01-30"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class TaskListSerializerTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_valid_success() throws IOException, DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        byte[] taskData \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(1);","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        byte[] data \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeInt(4);","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeInt(taskData.length);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"                dOut.write(taskData);","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d TaskListSerializer.inflate(new ByteArrayInputStream(data));","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(4, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_invalidData_recordSkipped() throws IOException, DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        byte[] taskData \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(1);","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"        byte[] invalidTaskData \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(4);","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"        byte[] data \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeInt(5);","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeInt(invalidTaskData.length);","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"            dOut.write(invalidTaskData);","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"            for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeInt(taskData.length);","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"                dOut.write(taskData);","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeInt(invalidTaskData.length);","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"sharpstorm"},"content":"            dOut.write(invalidTaskData);","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"sharpstorm"},"content":"        TaskList list \u003d TaskListSerializer.inflate(new ByteArrayInputStream(data));","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, list.getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"sharpstorm"},"content":"    public void testDeflate_valid_success() throws DukeIoException, IOException {","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"sharpstorm"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"sharpstorm"},"content":"        taskList.addTask(new Todo(\"Test 1\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"sharpstorm"},"content":"        taskList.addTask(new Deadline(\"Test 2\", LocalDateTime.parse(\"2022-12-12T12:34\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"sharpstorm"},"content":"        taskList.addTask(new Event(\"Test 3\", LocalDateTime.parse(\"2022-12-12T12:34\")));","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"sharpstorm"},"content":"        ByteArrayOutputStream memStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"sharpstorm"},"content":"        TaskListSerializer.deflate(taskList, memStream);","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"sharpstorm"},"content":"        byte[] deflated \u003d memStream.toByteArray();","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"sharpstorm"},"content":"        memStream.close();","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"sharpstorm"},"content":"        ByteArrayInputStream memInStream \u003d new ByteArrayInputStream(deflated);","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"sharpstorm"},"content":"        assertEquals(3, TaskListSerializer.inflate(memInStream).getTaskCount());","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":86}},{"path":"src/test/java/duke/task/serializer/TaskSerializerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.task.serializer;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"import duke.exception.DukeIoException;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"import duke.testutil.StreamUtils;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"public class TaskSerializerTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_valid_success() throws IOException, DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 1; i \u003c 4; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"            final int innerI \u003d i;","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"            byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeShort(innerI);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"                dOut.writeUTF(\"2022-12-12T13:00\");","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"            });","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"            assertNotNull(TaskSerializer.inflate(reference));","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    public void testInflate_invalidType_dukeExceptionRaised() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        byte[] reference \u003d StreamUtils.buildOutputStream((dOut) -\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeShort(4);","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"Test Description 1\");","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeBoolean(true);","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"            dOut.writeUTF(\"2022-12-12T13:00\");","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        });","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"            TaskSerializer.inflate(reference);","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"        } catch (DukeIoException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"            assertEquals(\"Encountered unknown format in database\", ex.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"sharpstorm"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"sharpstorm"},"content":"    public void testDeflate_valid_success() throws DukeIoException {","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"sharpstorm"},"content":"        Task[] tasks \u003d new Task[] {","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"sharpstorm"},"content":"            new Todo(\"Test 1\"),","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"sharpstorm"},"content":"            new Deadline(\"Test 2\", LocalDateTime.parse(\"2022-12-12T12:34\")),","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"sharpstorm"},"content":"            new Event(\"Test 3\", LocalDateTime.parse(\"2022-12-12T12:34\"))","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"sharpstorm"},"content":"        };","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"sharpstorm"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"sharpstorm"},"content":"            assertNotNull(TaskSerializer.deflate(tasks[i]));","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"sharpstorm"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":62}},{"path":"src/test/java/duke/testutil/PrinterStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.testutil;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import duke.util.Printable;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" * Provides a dummy printable object for test scripts to print into.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"public class PrinterStub implements Printable {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    private final ArrayList\u003cString\u003e lines;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    public PrinterStub() {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"        this.lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    public void print(String input) {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"        lines.add(input);","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"    public ArrayList\u003cString\u003e getLines() {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        return this.lines;","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"    public int lineCount() {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        return this.lines.size();","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"     * Clears all the lines that have been printed to this instance.","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     * @return This instance of PrinterStub.","lastModifiedDate":"2022-01-30"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-30"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"    public PrinterStub clear() {","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"        this.lines.clear();","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"        return this;","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":39}},{"path":"src/test/java/duke/testutil/StreamUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.testutil;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataInputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"import java.io.DataOutputStream;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":" * Provides helper functions for testing scripts.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"public class StreamUtils {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"     * Creates a writable stream and returns all the content written in by the supplied consumer.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"     * @param writer Consumer writing into the writable stream.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"     * @return All data written into the stream.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If any write errors occur.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"    public static byte[] buildOutputStream(ThrowableConsumer\u003cDataOutputStream, IOException\u003e writer)","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"            throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"        final ByteArrayOutputStream memStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"        final DataOutputStream dataStream \u003d new DataOutputStream(memStream);","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"        writer.accept(dataStream);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"        dataStream.flush();","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"        final byte[] ret \u003d memStream.toByteArray();","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"        dataStream.close();","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"        return ret;","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"sharpstorm"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"sharpstorm"},"content":"     * Creates a readable stream from the supplied input data, and passes it to the supplied consumer.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"sharpstorm"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"sharpstorm"},"content":"     * @param reader Consumer reading data from the stream.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"sharpstorm"},"content":"     * @param data Data contained in the readable stream.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"sharpstorm"},"content":"     * @throws IOException If any read errors occur.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"sharpstorm"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"sharpstorm"},"content":"    public static void buildInputStream(ThrowableConsumer\u003cDataInputStream, IOException\u003e reader,","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"sharpstorm"},"content":"                                                   byte[] data) throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"sharpstorm"},"content":"        final ByteArrayInputStream memStream \u003d new ByteArrayInputStream(data);","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"sharpstorm"},"content":"        final DataInputStream dataStream \u003d new DataInputStream(memStream);","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"sharpstorm"},"content":"        reader.accept(dataStream);","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"sharpstorm"},"content":"        dataStream.close();","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"sharpstorm"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":46}},{"path":"src/test/java/duke/testutil/ThrowableConsumer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"package duke.testutil;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":" * Extends the Consumer functional interface to allow exceptions to be passed through.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":" * @param \u003cT\u003e Type accepted by the consumer as an argument.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":" * @param \u003cE\u003e Exception that may be thrown by the consumer.","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"@FunctionalInterface","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"public interface ThrowableConsumer\u003cT, E extends Exception\u003e {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"    void accept(T t) throws E;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"sharpstorm":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sharpstorm"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"sharpstorm"},"content":"todo This is a todo task","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"sharpstorm"},"content":"deadline This is a deadline task /by 12/11/2022 12:22","lastModifiedDate":"2022-01-24"},{"lineNumber":4,"author":{"gitId":"sharpstorm"},"content":"event This is an event task /at 13/12/2022 15:00","lastModifiedDate":"2022-01-24"},{"lineNumber":5,"author":{"gitId":"sharpstorm"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"sharpstorm"},"content":"mark 1","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"sharpstorm"},"content":"mark 2","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"sharpstorm"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"sharpstorm"},"content":"unmark 2","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"sharpstorm"},"content":"delete 2","lastModifiedDate":"2022-01-18"},{"lineNumber":12,"author":{"gitId":"sharpstorm"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"sharpstorm"},"content":"todo","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"sharpstorm"},"content":"deadline","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"sharpstorm"},"content":"deadline /by","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"sharpstorm"},"content":"deadline text /by","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"deadline /by text","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"event","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"event /at","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":"event text /at","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"event /at text","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"sharpstorm"},"content":"mark 1","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"unmark 2","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"sharpstorm"},"content":"mark","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"sharpstorm"},"content":"mark notanumber","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"sharpstorm"},"content":"mark 4","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"mark 0","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"sharpstorm"},"content":"delete 0","lastModifiedDate":"2022-01-18"},{"lineNumber":29,"author":{"gitId":"sharpstorm"},"content":"delete 3","lastModifiedDate":"2022-01-18"},{"lineNumber":30,"author":{"gitId":"sharpstorm"},"content":"bye","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":30}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"sharpstorm"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2022-01-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"sharpstorm"},"content":"if exist .\\data (","lastModifiedDate":"2022-01-24"},{"lineNumber":18,"author":{"gitId":"sharpstorm"},"content":"    del /s /f /q .\\data\\*.*","lastModifiedDate":"2022-01-24"},{"lineNumber":19,"author":{"gitId":"sharpstorm"},"content":"    rmdir .\\data","lastModifiedDate":"2022-01-24"},{"lineNumber":20,"author":{"gitId":"sharpstorm"},"content":")","lastModifiedDate":"2022-01-24"},{"lineNumber":21,"author":{"gitId":"sharpstorm"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"sharpstorm"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"sharpstorm"},"content":"pause","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"sharpstorm":8,"-":19}}]
