[{"path":"src/main/java/Duke/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The abstract Command class contains basic","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Abstract method that models the execution","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     * of this Command","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - TaskList for tasks related methods","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - Ui for I/O related methods","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - Storage for data saving method","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage)","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"            throws DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * Method that returns false for all Command objects,","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * except of the CommandExit object.","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - false unless this is a","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     *                   CommandExit object","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":36}},{"path":"src/main/java/Duke/Commands/CommandClear.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandUnmark class contains the basic","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviour of a Clear Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandClear extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of an Clear Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList empties itself out, the Storage saves it","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * and the Ui lets the user know that the task was","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList empty out","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if error saving data","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"        tasks.clear();","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"        storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showClear();","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":33}},{"path":"src/main/java/Duke/Commands/CommandDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.TaskDeadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandDeadline class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Deadline Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandDeadline extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * Name of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    private final String name;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Date of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    private final String date;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * Time of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"    private final String time;","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of Deadline Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date of Deadline Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time of Deadline Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandDeadline(String name, String date, String time) {","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Deadline Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * A Deadline Task gets created, the TaskList adds the task,","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     * the Storage saves it and the Ui lets the user know","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * that the task was executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to add Deadline Task","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if error saving data or","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"     *                         invalid date and/or time","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"        ManagerDate md \u003d new ManagerDate(date);","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"        ManagerTime mt \u003d new ManagerTime(time);","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"        if (md.isDateValid() \u0026\u0026 mt.isTimeValid()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"            Task task \u003d new TaskDeadline(this.name, this.date, this.time);","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"            tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"            storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"            ui.showTaskAdded();","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid date and/or time!\");","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":74}},{"path":"src/main/java/Duke/Commands/CommandDelete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandDelete class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Delete Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandDelete extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Index of Task to be unmarked","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final int taskNum;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * Possible NumberFormatException during the parsing of","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * the input from String into int. Checks whether","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * the String input can be parsed into an int.","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     * @param str - raw task number input from the user","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - str cannot be parsed into an int","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandDelete(String str) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"            this.taskNum \u003d Integer.parseInt(str);","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid input!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Delete Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList deletes the task, the Storage saves it","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * and the Ui lets the user know that the task was","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     * executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to delete Task","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if TaskList does not contain tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     *                         or error saving data","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"        tasks.delete(this.taskNum);","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"        storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTaskDeleted();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":56}},{"path":"src/main/java/Duke/Commands/CommandEmpty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandUnmark class contains the","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * behaviour of an Empty Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandEmpty extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Does not do anything. Used to replace null checks.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {}","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":24}},{"path":"src/main/java/Duke/Commands/CommandEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.TaskEvent;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandEvent class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Event Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandEvent extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * Name of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    private final String name;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Date of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    private final String date;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * Time of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"    private final String time;","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of Event Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date of Event Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time of Event Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandEvent(String name, String date, String time) {","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Event Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * A Event Task gets created, the TaskList adds the task,","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     * the Storage saves it and the Ui lets the user know","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * that the task was executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to add Event Task","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if error saving data or","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"     *                         invalid date and/or time","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"        ManagerDate md \u003d new ManagerDate(date);","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"        ManagerTime mt \u003d new ManagerTime(time);","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"        if (md.isDateValid() \u0026\u0026 mt.isTimeValid()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"            Task task \u003d new TaskEvent(this.name, this.date, this.time);","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"            tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"            storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"            ui.showTaskAdded();","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid date and/or time!\");","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":74}},{"path":"src/main/java/Duke/Commands/CommandExit.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandExit class contains the basic","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Exit Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandExit extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of an Exit Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     * The Ui prints the Exit message.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to print all the tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * This method always returns true since it is","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * an Exit Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"        return true;","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":37}},{"path":"src/main/java/Duke/Commands/CommandFind.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandFind class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Find Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandFind extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Keyword used for the search","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final String keyword;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @param keyword - raw task number input from the user","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandFind(String keyword) {","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Find Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList searches for the tasks with the keyword in their name,","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     * and returns all the tasks in a single consolidated String.","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     * The Ui then prints the resulting String.","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - to search TaskList for tasks with names that","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     *                contain the keyword","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to print all the tasks that contains the keyword","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if TaskList does not contain tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showResult(tasks.find(this.keyword));","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":46}},{"path":"src/main/java/Duke/Commands/CommandHelp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandUnmark class contains the basic","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * behaviour of a Help Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandHelp extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Help Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     * The Ui prints the tutorial.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to print the tutorial","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTutorial();","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":27}},{"path":"src/main/java/Duke/Commands/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandUnmark class contains the basic","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviour of a List Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandList extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a List Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList returns a single String of all the consolidated","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * tasks and the Ui prints it.","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - to obtain a String of all the consolidated tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to print all the tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if TaskList does not contain tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showList(tasks.tasksAsString());","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"MelvinCZJ":30}},{"path":"src/main/java/Duke/Commands/CommandMark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandMark class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Mark Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandMark extends Command{","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Index of Task to be marked","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final int taskNum;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * Possible NumberFormatException during the parsing of","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * the input from String into int. Checks whether","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * the String input can be parsed into an int.","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     * @param str - raw task number input from the user","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - str cannot be parsed into an int","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandMark(String str) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"            this.taskNum \u003d Integer.parseInt(str);","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid input!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of a Mark Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList marks the task, the Storage saves it","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * and the Ui lets the user know that the task was","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     * executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to mark Task","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if tasklist does not contain tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     *                         or error saving data","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"        tasks.mark(this.taskNum);","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"        storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTaskMarked();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":56}},{"path":"src/main/java/Duke/Commands/CommandToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.TaskToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandToDo class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a ToDo Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandToDo extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"     * Name of Task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    private final String name;","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of ToDo Task to be created","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandToDo(String name) {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of an ToDo Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     * A ToDo Task gets created, the TaskList adds the task,","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     * the Storage saves it and the Ui lets the user know","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * that the task was executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to add ToDo Task","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if error saving data","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"        Task task \u003d new TaskToDo(this.name);","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"        tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"        storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTaskAdded();","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":50}},{"path":"src/main/java/Duke/Commands/CommandUnmark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The CommandUnmark class contains basic attributes and","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * behaviours of a Unmark Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class CommandUnmark extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Index of Task to be unmarked","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final int taskNum;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * Possible NumberFormatException during the parsing of","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * the input from String into int. Checks whether","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * the String input can be parsed into an int.","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     * @param str - raw task number input from the user","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - str cannot be parsed into an int","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    public CommandUnmark(String str) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"            this.taskNum \u003d Integer.parseInt(str);","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid input!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method in parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * This method models the execution of an Unmark Command.","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * The TaskList unmarks the task, the Storage saves it","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * and the Ui lets the user know that the task was","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     * executed successfully.","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - for TaskList to unmark Task","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * @param ui - to let user know that execution was successful","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * @param storage - to save updated TaskList","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - thrown if TaskList does not contain tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     *                         or error saving data","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"        tasks.unmark(this.taskNum);","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"        storage.save(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTaskUnmarked();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":56}},{"path":"src/main/java/Duke/DukeException/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The DukeException class will duke to handle","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * the various exceptions encountered while","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" * using duke.","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * Will definitely make this class an abstract class","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * and create more specific DukeException classes that","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * extends from this class.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"        super(msg);","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":18}},{"path":"src/main/java/Duke/Enums/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Enums;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The Commands enum contains a list of all","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * valid commands that Duke accepts","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"public enum Commands {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"    TODO, EVENT, DEADLINE, LIST, MARK, UNMARK, DELETE, EXIT, HELP, FIND, CLEAR;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":12}},{"path":"src/main/java/Duke/Main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Main;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandEmpty;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Parser;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.TaskList;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.System.Ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * The Duke program implements an application that","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" * manages three different types of tasks based on the","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":" * user\u0027s input","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    private final Storage storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    private final Ui ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @param filePath - the file path of the folder where","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     *                   the data of duke will be stored","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if folder or text file creation was","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     *                         unsuccessful","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * This method is used to run Duke.","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * It first displays a simple greeting,","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * followed by a simple tutorial of the commands","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * It will then prompt the user for their input,","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     * then execute the respective command.","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * This process of prompting for input and","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * execution will repeat until the user inputs","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     * the exit command.","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"    public void run() {","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showGreeting();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showTutorial();","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"        ui.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"        boolean isExitCommand \u003d false;","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"        do {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"            Command c \u003d new CommandEmpty();","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"            try {","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"                String fullCommand \u003d ui.promptCommand();","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"                c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"                ui.showException(e);","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"            } finally {","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"                ui.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"            isExitCommand \u003d c.isExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"        } while (!isExitCommand);","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"     * This is the main method of Duke.","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"     * It is used to start the Duke program.","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"     * @param args - not used","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"        new Duke(\"data\").run();","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"MelvinCZJ":81,"-":2}},{"path":"src/main/java/Duke/System/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.System;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.Command;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandClear;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandDeadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandDelete;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandEvent;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandExit;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandFind;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandHelp;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandList;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandMark;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandToDo;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Commands.CommandUnmark;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Enums.Commands;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":" * The Parser class will allow Duke to","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":" * understand and act upon the user\u0027s input.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"public class Parser {","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     * This method processes the user\u0027s input by splitting it at each","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * regex: \"/\" into a String array params.","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * If params is not empty, a valid input in assumed at this stage.","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * The first element of params will be the name of the command, which","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     * will be compared against an enum of commands.","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * If the enum contains the command, the select method will be called on","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     * params, and the ordinal of the command in the enum.","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     * Else a DukeException will be thrown.","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     * @param fullCommand the unprocessed command input by the user","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * @return Command - returns a Command object","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if input or command is invalid","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"        String[] params \u003d fullCommand.split(\"/\");","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        if (params.length \u003d\u003d 0) {","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid input!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"        String command \u003d params[0].toUpperCase();","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"        boolean containsCommand \u003d false;","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"        int commandNum \u003d -1;","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"        Commands[] commands \u003d Commands.values();","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"        for (Commands c : commands) {","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"            if (c.toString().equals(command)) {","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"                commandNum \u003d c.ordinal();","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"                containsCommand \u003d true;","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"        if (!containsCommand) {","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid command!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"        return select(commandNum, params);","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"     * This method processes the user\u0027s input by splitting it at each","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"     * regex: \"/\" into a String array params.","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"     * If params is not empty, a valid input in assumed at this stage.","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"     * The first element of params will be the name of the command, which","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"     * will be compared against an enum of commands.","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"     * If the enum contains the command, the select method will be called on","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"     * params, and the ordinal of the command in the enum.","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"     * Else a DukeException will be thrown.","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"     * @param num the int used for the switch case statement","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"     * @param params the String array containing all the","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"     *               parameters of the command","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     * @return Command the Command to be returned to the parse","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"     *                 method","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - If params size does not match the number","lastModifiedDate":"2022-02-03"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"     *                         of required parameters of the command","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"    public static Command select(int num, String[] params) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"        switch(num) {","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"        case 0: // todo","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandToDo(params[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"        case 1: // event","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 4) {","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandEvent(params[1], params[2], params[3]);","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"MelvinCZJ"},"content":"        case 2: // deadline","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 4) {","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandDeadline(params[1], params[2], params[3]);","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"MelvinCZJ"},"content":"        case 3: // list","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandList();","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"MelvinCZJ"},"content":"        case 4: // mark","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":114,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandMark(params[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"MelvinCZJ"},"content":"        case 5: // unmark","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":121,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":122,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandUnmark(params[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"MelvinCZJ"},"content":"        case 6: // delete","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandDelete(params[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":130,"author":{"gitId":"MelvinCZJ"},"content":"        case 7: // exit","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"MelvinCZJ"},"content":"        case 8: // help","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":138,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":139,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":140,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":141,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandHelp();","lastModifiedDate":"2022-02-02"},{"lineNumber":142,"author":{"gitId":"MelvinCZJ"},"content":"        case 9: // find","lastModifiedDate":"2022-02-02"},{"lineNumber":143,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":144,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":145,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":146,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":147,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandFind(params[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":148,"author":{"gitId":"MelvinCZJ"},"content":"        case 10: // find","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"MelvinCZJ"},"content":"            if (params.length !\u003d 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":150,"author":{"gitId":"MelvinCZJ"},"content":"                throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"MelvinCZJ"},"content":"                        + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":153,"author":{"gitId":"MelvinCZJ"},"content":"            return new CommandClear();","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"MelvinCZJ"},"content":"        default: // invalid","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"Input /chelp to see the full list of commands!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":159}},{"path":"src/main/java/Duke/System/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.System;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.TaskCreator;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":" * The Storage class loads data from previous sessions","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":" * of duke stores data from current session.","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"public class Storage {","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * The file path for the directory where the data will","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * be stored.","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    private final String filePath;","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * @param filePath - the file path of the directory where","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     *                   the data of duke will be stored","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * This method creates the directory which the data from","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * the current session of duke will be stored in.","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * If directory already exists, user will be notified.","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * The text file tasks.txt will be created in the directory.","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * @return ArrayList\u003cTask\u003e - returns an arraylist of tasks loaded","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     *                           from tasks.txt","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if unsuccessful creation of directory","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     *                         or file","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"        File dukeFile \u003d new File(this.filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"        if (!Files.exists(Path.of(this.filePath))) {","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"            if (dukeFile.mkdir()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"                System.out.println(\"File \\\"data\\\" has been created.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"                System.out.println(\"Failed to create file \\\"data\\\".\");","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"        File tasksPath \u003d new File(this.filePath + \"/tasks.txt\");","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"            if (tasksPath.createNewFile()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"                System.out.println(\"Duke set up successfully\");","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"                return read(tasksPath);","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (IOException e){","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Failed to create tasks file!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     * This method reads the tasks.txt and adds the exisiting tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"     * on the file into a arraylist and returns it.","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"     * @param filePath - the file path of the directory where","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"     *                   the data of duke will be stored","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"     * @return ArrayList\u003cTask\u003e - returns an arraylist of tasks loaded","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"     *                           from tasks.txt","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if FileNotFoundException or","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"     *                         IOException is caught","lastModifiedDate":"2022-02-03"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"    public ArrayList\u003cTask\u003e read(File filePath) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"            int numOfTasks \u003d Integer.parseInt(br.readLine());","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"MelvinCZJ"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"MelvinCZJ"},"content":"            while (numOfTasks !\u003d 0) {","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"MelvinCZJ"},"content":"                // convert taskAsText into its string array form,","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"MelvinCZJ"},"content":"                // with 4 elements, being the prefix, completedState, name and date","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"MelvinCZJ"},"content":"                numOfTasks--;","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"MelvinCZJ"},"content":"                String taskAsText \u003d br.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"MelvinCZJ"},"content":"                Task currentTask \u003d create(taskAsText);","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"MelvinCZJ"},"content":"                tasks.add(currentTask);","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"MelvinCZJ"},"content":"            return tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"File not found!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Error with tasks.txt! Clear tasks.txt and run Duke again!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":114,"author":{"gitId":"MelvinCZJ"},"content":"     * This method takes in the data form of a task","lastModifiedDate":"2022-02-03"},{"lineNumber":115,"author":{"gitId":"MelvinCZJ"},"content":"     * and returns the Task object.","lastModifiedDate":"2022-02-03"},{"lineNumber":116,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":117,"author":{"gitId":"MelvinCZJ"},"content":"     * @param taskAsData - data form of a task","lastModifiedDate":"2022-02-03"},{"lineNumber":118,"author":{"gitId":"MelvinCZJ"},"content":"     * @return Task - returns the Task object","lastModifiedDate":"2022-02-03"},{"lineNumber":119,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":120,"author":{"gitId":"MelvinCZJ"},"content":"    public Task create(String taskAsData) {","lastModifiedDate":"2022-02-03"},{"lineNumber":121,"author":{"gitId":"MelvinCZJ"},"content":"        String[] taskAsArray \u003d taskAsData.split(\"/\");","lastModifiedDate":"2022-02-03"},{"lineNumber":122,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"MelvinCZJ"},"content":"        char prefix \u003d taskAsArray[0].charAt(0);","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"MelvinCZJ"},"content":"        boolean isCompleted \u003d taskAsArray[1].equals(\"T\");","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"MelvinCZJ"},"content":"        String name \u003d taskAsArray[2];","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"MelvinCZJ"},"content":"        String date \u003d taskAsArray[3];","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"MelvinCZJ"},"content":"        String time \u003d taskAsArray[4];","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"MelvinCZJ"},"content":"        TaskCreator taskCreator \u003d new TaskCreator(prefix,","lastModifiedDate":"2022-02-02"},{"lineNumber":130,"author":{"gitId":"MelvinCZJ"},"content":"                isCompleted,","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"MelvinCZJ"},"content":"                name,","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"MelvinCZJ"},"content":"                date,","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"MelvinCZJ"},"content":"                time);","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"MelvinCZJ"},"content":"        return taskCreator.createTask();","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":138,"author":{"gitId":"MelvinCZJ"},"content":"     * This method overwrites the tasks.txt with the given","lastModifiedDate":"2022-02-03"},{"lineNumber":139,"author":{"gitId":"MelvinCZJ"},"content":"     * list of tasks in String form.","lastModifiedDate":"2022-02-03"},{"lineNumber":140,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":141,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - the list of tasks in String form","lastModifiedDate":"2022-02-03"},{"lineNumber":142,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if IOException is caught","lastModifiedDate":"2022-02-03"},{"lineNumber":143,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":144,"author":{"gitId":"MelvinCZJ"},"content":"    public void save(TaskList tasks) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":145,"author":{"gitId":"MelvinCZJ"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":146,"author":{"gitId":"MelvinCZJ"},"content":"            FileWriter fw \u003d new FileWriter(\"data/tasks.txt\", false);","lastModifiedDate":"2022-02-02"},{"lineNumber":147,"author":{"gitId":"MelvinCZJ"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2022-02-02"},{"lineNumber":148,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"MelvinCZJ"},"content":"            pw.write(tasks.getNumOfTasks() + \"\\n\");","lastModifiedDate":"2022-02-02"},{"lineNumber":150,"author":{"gitId":"MelvinCZJ"},"content":"            pw.write(tasks.taskAsData());","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"MelvinCZJ"},"content":"            pw.flush();","lastModifiedDate":"2022-02-02"},{"lineNumber":153,"author":{"gitId":"MelvinCZJ"},"content":"            pw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"MelvinCZJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Failed to save data!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":160}},{"path":"src/main/java/Duke/System/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.System;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskList class manages the operations of the","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * arraylist of tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskList {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * The arraylist of tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Overloaded constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - arraylist of tasks loaded","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     *                from storage","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * Overloaded constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * This method adds tasks into the tasklist.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * @param task - task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * This method deletes the task at given index","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     * from the tasklist.","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * @param i - the acutal index of task in","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     *            the arraylist is i - 1","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if tasklist is empty or","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     *                         index out of range","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    public void delete(int i) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"        if (!this.get(i).isEmptyTask()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"            this.tasks.remove(i - 1);","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"No such task found!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"     * This method gets the task at given index","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"     * from the tasklist.","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"     * @param i - the acutal index of task in","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"     *            the arraylist is i - 1","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"     * @return Task - task at index","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if tasklist is empty or","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"     *                         index out of range","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"    public Task get(int i) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"TaskList is empty!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"        } else if (i \u003c 1 || i \u003e tasks.size()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Requested task does not exist!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"            return tasks.get(i - 1);","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns the size of the arraylist","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"     * @return int - size of arraylist","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"    public int getNumOfTasks() {","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"        return tasks.size();","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"     * This method consolidates all tasks in the arraylist into","lastModifiedDate":"2022-02-03"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"     * a String in the format to be displayed to the user.","lastModifiedDate":"2022-02-03"},{"lineNumber":95,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":96,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - the String form of all the task","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"MelvinCZJ"},"content":"     *                  in the list","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if arraylist is empty or","lastModifiedDate":"2022-02-03"},{"lineNumber":99,"author":{"gitId":"MelvinCZJ"},"content":"     *                         i is out of range","lastModifiedDate":"2022-02-03"},{"lineNumber":100,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":101,"author":{"gitId":"MelvinCZJ"},"content":"    public String tasksAsString() throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"MelvinCZJ"},"content":"        String taskAsString \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"MelvinCZJ"},"content":"        int i \u003d 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"MelvinCZJ"},"content":"        while (i \u003c this.tasks.size()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"MelvinCZJ"},"content":"            String SPACE \u003d \"     \";","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"MelvinCZJ"},"content":"            Task curr \u003d this.get(i + 1);","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"MelvinCZJ"},"content":"            taskAsString +\u003d SPACE + (i + 1) + \". \" + curr + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"MelvinCZJ"},"content":"            i++;","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"MelvinCZJ"},"content":"        return taskAsString;","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":114,"author":{"gitId":"MelvinCZJ"},"content":"     * This method consolidates all tasks in the arraylist into","lastModifiedDate":"2022-02-03"},{"lineNumber":115,"author":{"gitId":"MelvinCZJ"},"content":"     * a String in the format to be stored as data.","lastModifiedDate":"2022-02-03"},{"lineNumber":116,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":117,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - the data form of all the task","lastModifiedDate":"2022-02-03"},{"lineNumber":118,"author":{"gitId":"MelvinCZJ"},"content":"     *                  in the list","lastModifiedDate":"2022-02-03"},{"lineNumber":119,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if arraylist is empty or","lastModifiedDate":"2022-02-03"},{"lineNumber":120,"author":{"gitId":"MelvinCZJ"},"content":"     *                         i is out of range","lastModifiedDate":"2022-02-03"},{"lineNumber":121,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":122,"author":{"gitId":"MelvinCZJ"},"content":"    public String taskAsData() throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"MelvinCZJ"},"content":"        String taskAsData \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"MelvinCZJ"},"content":"        int i \u003d 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"MelvinCZJ"},"content":"        while (i \u003c this.tasks.size()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"MelvinCZJ"},"content":"            Task curr \u003d this.get(i + 1);","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"MelvinCZJ"},"content":"            String isMarked \u003d curr.isMarked()","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"MelvinCZJ"},"content":"                    ? \"T\"","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"MelvinCZJ"},"content":"                    : \"F\";","lastModifiedDate":"2022-02-02"},{"lineNumber":130,"author":{"gitId":"MelvinCZJ"},"content":"            taskAsData +\u003d curr.getPrefix() + \"/\"","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"MelvinCZJ"},"content":"                    + isMarked + \"/\"","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"MelvinCZJ"},"content":"                    + curr.getName() + \"/\"","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"MelvinCZJ"},"content":"                    + curr.getDate() + \"/\"","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"MelvinCZJ"},"content":"                    + curr.getTime() + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"MelvinCZJ"},"content":"            i++;","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"MelvinCZJ"},"content":"        return taskAsData;","lastModifiedDate":"2022-02-02"},{"lineNumber":138,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":139,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":140,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":141,"author":{"gitId":"MelvinCZJ"},"content":"     * This method changes the completed state of a task from","lastModifiedDate":"2022-02-03"},{"lineNumber":142,"author":{"gitId":"MelvinCZJ"},"content":"     * incomplete to complete. Only works for tasks that are","lastModifiedDate":"2022-02-03"},{"lineNumber":143,"author":{"gitId":"MelvinCZJ"},"content":"     * incomplete.","lastModifiedDate":"2022-02-03"},{"lineNumber":144,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":145,"author":{"gitId":"MelvinCZJ"},"content":"     * @param i - the acutal index of task in","lastModifiedDate":"2022-02-03"},{"lineNumber":146,"author":{"gitId":"MelvinCZJ"},"content":"     *            the arraylist is i - 1","lastModifiedDate":"2022-02-03"},{"lineNumber":147,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if arraylist is empty,","lastModifiedDate":"2022-02-03"},{"lineNumber":148,"author":{"gitId":"MelvinCZJ"},"content":"     *                         i is out of range or","lastModifiedDate":"2022-02-03"},{"lineNumber":149,"author":{"gitId":"MelvinCZJ"},"content":"     *                         task is already marked","lastModifiedDate":"2022-02-03"},{"lineNumber":150,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":151,"author":{"gitId":"MelvinCZJ"},"content":"    public void mark(int i) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":153,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"No tasks in TaskList!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"MelvinCZJ"},"content":"        } else if (get(i).isMarked()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Task is already marked!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"MelvinCZJ"},"content":"            get(i).mark();","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":161,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":162,"author":{"gitId":"MelvinCZJ"},"content":"     * This method changes the completed state of a task from","lastModifiedDate":"2022-02-03"},{"lineNumber":163,"author":{"gitId":"MelvinCZJ"},"content":"     * complete to incomplete. Only works for tasks that are","lastModifiedDate":"2022-02-03"},{"lineNumber":164,"author":{"gitId":"MelvinCZJ"},"content":"     * complete.","lastModifiedDate":"2022-02-03"},{"lineNumber":165,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":166,"author":{"gitId":"MelvinCZJ"},"content":"     * @param i - the acutal index of task in","lastModifiedDate":"2022-02-03"},{"lineNumber":167,"author":{"gitId":"MelvinCZJ"},"content":"     *            the arraylist is i - 1","lastModifiedDate":"2022-02-03"},{"lineNumber":168,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if arraylist is empty,","lastModifiedDate":"2022-02-03"},{"lineNumber":169,"author":{"gitId":"MelvinCZJ"},"content":"     *                         i is out of range or","lastModifiedDate":"2022-02-03"},{"lineNumber":170,"author":{"gitId":"MelvinCZJ"},"content":"     *                         task is already unmarked","lastModifiedDate":"2022-02-03"},{"lineNumber":171,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":172,"author":{"gitId":"MelvinCZJ"},"content":"    public void unmark(int i) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":173,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":174,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"No tasks in TaskList!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":175,"author":{"gitId":"MelvinCZJ"},"content":"        } else if (get(i).isMarked()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":176,"author":{"gitId":"MelvinCZJ"},"content":"            throw new DukeException(\"Task is already unmarked!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":177,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":178,"author":{"gitId":"MelvinCZJ"},"content":"            get(i).unmark();","lastModifiedDate":"2022-02-02"},{"lineNumber":179,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":180,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":181,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":182,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":183,"author":{"gitId":"MelvinCZJ"},"content":"     * This method consolidates all tasks in the arraylist","lastModifiedDate":"2022-02-03"},{"lineNumber":184,"author":{"gitId":"MelvinCZJ"},"content":"     * that contains the given keyword into a String in the","lastModifiedDate":"2022-02-03"},{"lineNumber":185,"author":{"gitId":"MelvinCZJ"},"content":"     * format to be displayed to the user.","lastModifiedDate":"2022-02-03"},{"lineNumber":186,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":187,"author":{"gitId":"MelvinCZJ"},"content":"     * @param keyword - the tasks that contains the keyword","lastModifiedDate":"2022-02-03"},{"lineNumber":188,"author":{"gitId":"MelvinCZJ"},"content":"     *                  in their name should be returned","lastModifiedDate":"2022-02-03"},{"lineNumber":189,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - the String form of all the task","lastModifiedDate":"2022-02-03"},{"lineNumber":190,"author":{"gitId":"MelvinCZJ"},"content":"     *                  in the list that contains the","lastModifiedDate":"2022-02-03"},{"lineNumber":191,"author":{"gitId":"MelvinCZJ"},"content":"     *                  keyword","lastModifiedDate":"2022-02-03"},{"lineNumber":192,"author":{"gitId":"MelvinCZJ"},"content":"     * @throws DukeException - if arraylist is empty or","lastModifiedDate":"2022-02-03"},{"lineNumber":193,"author":{"gitId":"MelvinCZJ"},"content":"     *                         i is out of range","lastModifiedDate":"2022-02-03"},{"lineNumber":194,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":195,"author":{"gitId":"MelvinCZJ"},"content":"    public String find(String keyword) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":196,"author":{"gitId":"MelvinCZJ"},"content":"        String taskAsString \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":197,"author":{"gitId":"MelvinCZJ"},"content":"        int i \u003d 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":198,"author":{"gitId":"MelvinCZJ"},"content":"        while (i \u003c this.tasks.size()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":199,"author":{"gitId":"MelvinCZJ"},"content":"            String SPACE \u003d \"     \";","lastModifiedDate":"2022-02-02"},{"lineNumber":200,"author":{"gitId":"MelvinCZJ"},"content":"            Task curr \u003d this.get(i + 1);","lastModifiedDate":"2022-02-02"},{"lineNumber":201,"author":{"gitId":"MelvinCZJ"},"content":"            if (curr.getName().contains(keyword)) {","lastModifiedDate":"2022-02-02"},{"lineNumber":202,"author":{"gitId":"MelvinCZJ"},"content":"                taskAsString +\u003d SPACE + (i + 1) + \". \" + curr + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":203,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":204,"author":{"gitId":"MelvinCZJ"},"content":"            i++;","lastModifiedDate":"2022-02-02"},{"lineNumber":205,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":206,"author":{"gitId":"MelvinCZJ"},"content":"        return taskAsString;","lastModifiedDate":"2022-02-02"},{"lineNumber":207,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":208,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":209,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":210,"author":{"gitId":"MelvinCZJ"},"content":"     * This method removes all tasks in the arraylist.","lastModifiedDate":"2022-02-03"},{"lineNumber":211,"author":{"gitId":"MelvinCZJ"},"content":"     * Use with caution.","lastModifiedDate":"2022-02-03"},{"lineNumber":212,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":213,"author":{"gitId":"MelvinCZJ"},"content":"    public void clear() {","lastModifiedDate":"2022-02-02"},{"lineNumber":214,"author":{"gitId":"MelvinCZJ"},"content":"        this.tasks.clear();","lastModifiedDate":"2022-02-03"},{"lineNumber":215,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":216,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":217,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":218,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns a boolean value of","lastModifiedDate":"2022-02-03"},{"lineNumber":219,"author":{"gitId":"MelvinCZJ"},"content":"     * whether the arraylist is empty.","lastModifiedDate":"2022-02-03"},{"lineNumber":220,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":221,"author":{"gitId":"MelvinCZJ"},"content":"     * @return - true if list is empty","lastModifiedDate":"2022-02-03"},{"lineNumber":222,"author":{"gitId":"MelvinCZJ"},"content":"     *           and false otherwise","lastModifiedDate":"2022-02-03"},{"lineNumber":223,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":224,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-02-02"},{"lineNumber":225,"author":{"gitId":"MelvinCZJ"},"content":"        return this.tasks.isEmpty();","lastModifiedDate":"2022-02-02"},{"lineNumber":226,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":227,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":227}},{"path":"src/main/java/Duke/System/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.System;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * The Ui class will allow users to interface with Duke.","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"public class Ui {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"     * A String constant that is repeatedly used throughout the","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * whole Ui class.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    private final String SPACE \u003d \"     \";","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a divider between messages.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    public void showLine() {","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"        String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + line);","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints the greeting message.","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"    public void showGreeting() {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"        String greeting \u003d SPACE + \"Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"Nice to meet you!\";","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(greeting);","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a tutorial on the available commands.","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"    public void showTutorial() {","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"        String tutorial \u003d SPACE + \"Here are my features!\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To add a ToDo task, input: ToDo/\u003cname\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To add a Event task, input: Event/\u003cname\u003e/\u003cdate\u003e/\u003ctime\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To add a Deadline task, input: Deadline/\u003cname\u003e/\u003cdate\u003e/\u003ctime\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To list all tasks, input: list\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To mark a task as completed, \"","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"                + \"input: mark/\u003ctask number based on the most recent list call\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To unmark a task as completed, \"","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"                + \"input: mark/\u003ctask number based on the most recent list call\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To delete a task, \"","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"                + \"input: delete/\u003ctask number based on the most recent list call\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To search for a task by keyword, input: Find/\u003ckeyword\u003e\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To clear the tasklist, input: Clear\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To exit duke, input: exit\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"To view this manual again, input: help\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"The first word of each command is not case-sensitive!\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"The format of the date should be in the format DDMMYYYY!\\n\"","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"The format of the time should be in the format HHMM!\\n\"","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"                + SPACE + \"Please DO NOT use \\\"/\\\" in the task name as it will confuse Duke!\";","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(tutorial);","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prompts the user for their input command and returns","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"     * the command as a String.","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - raw input command from user","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"    public String promptCommand()  {","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Please input your command:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"        String command \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"        if (sc.hasNext()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"            command \u003d sc.nextLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"        return command;","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a confirmation that a task has been added.","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"    public void showTaskAdded() {","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Task has been added!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a confirmation that a task has been marked.","lastModifiedDate":"2022-02-03"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"    public void showTaskMarked() {","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Task has been marked!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":96,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a confirmation that a task has been unmarked.","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"MelvinCZJ"},"content":"    public void showTaskUnmarked() {","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Task has been unmarked!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":104,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a confirmation that a task has been deleted.","lastModifiedDate":"2022-02-03"},{"lineNumber":105,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":106,"author":{"gitId":"MelvinCZJ"},"content":"    public void showTaskDeleted() {","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Task has been deleted!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":112,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints all the tasks in the tasklist.","lastModifiedDate":"2022-02-03"},{"lineNumber":113,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":114,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - list of tasks in tasklist consolidated","lastModifiedDate":"2022-02-03"},{"lineNumber":115,"author":{"gitId":"MelvinCZJ"},"content":"     *                into a single String","lastModifiedDate":"2022-02-03"},{"lineNumber":116,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":117,"author":{"gitId":"MelvinCZJ"},"content":"    public void showList(String tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"MelvinCZJ"},"content":"        if(tasks.isBlank()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.println(SPACE + \"There is nothing in the TaskList!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":121,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":122,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.println(SPACE + \"Here is a List of your Tasks:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.print(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":128,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints all the tasks that contains the keyword from the user.","lastModifiedDate":"2022-02-03"},{"lineNumber":129,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":130,"author":{"gitId":"MelvinCZJ"},"content":"     * @param tasks - list of tasks in tasklist containing keyword","lastModifiedDate":"2022-02-03"},{"lineNumber":131,"author":{"gitId":"MelvinCZJ"},"content":"     *                from the user consolidated into a single String","lastModifiedDate":"2022-02-03"},{"lineNumber":132,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":133,"author":{"gitId":"MelvinCZJ"},"content":"    public void showResult(String tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"MelvinCZJ"},"content":"        if(tasks.isBlank()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.println(SPACE","lastModifiedDate":"2022-02-03"},{"lineNumber":137,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"There is nothing in the TaskList that matches your search!\");","lastModifiedDate":"2022-02-03"},{"lineNumber":138,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":139,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.println(SPACE","lastModifiedDate":"2022-02-03"},{"lineNumber":140,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"Here is a List of your Tasks that matches your search:\");","lastModifiedDate":"2022-02-03"},{"lineNumber":141,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.print(tasks);","lastModifiedDate":"2022-02-02"},{"lineNumber":142,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":143,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":144,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":145,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":146,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints a confirmation that the tasklist has been cleared.","lastModifiedDate":"2022-02-03"},{"lineNumber":147,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":148,"author":{"gitId":"MelvinCZJ"},"content":"    public void showClear() {","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"TaskList has been cleared!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":150,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":152,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":153,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints the message DukeException that has been thrown.","lastModifiedDate":"2022-02-03"},{"lineNumber":154,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":155,"author":{"gitId":"MelvinCZJ"},"content":"     * @param e - a DukeException that was thrown","lastModifiedDate":"2022-02-03"},{"lineNumber":156,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":157,"author":{"gitId":"MelvinCZJ"},"content":"    public void showException(DukeException e) {","lastModifiedDate":"2022-02-03"},{"lineNumber":158,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(e.toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":161,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":162,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":163,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints the message that there was an error loading old data.","lastModifiedDate":"2022-02-03"},{"lineNumber":164,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":165,"author":{"gitId":"MelvinCZJ"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-02-02"},{"lineNumber":166,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Error loading old data!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":167,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":168,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":169,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":170,"author":{"gitId":"MelvinCZJ"},"content":"     * This method prints the exit message.","lastModifiedDate":"2022-02-03"},{"lineNumber":171,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":172,"author":{"gitId":"MelvinCZJ"},"content":"    public void showExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":173,"author":{"gitId":"MelvinCZJ"},"content":"        this.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":174,"author":{"gitId":"MelvinCZJ"},"content":"        System.out.println(SPACE + \"Bye! Hope to see you again soon!\");","lastModifiedDate":"2022-02-02"},{"lineNumber":175,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":176,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"MelvinCZJ":176}},{"path":"src/main/java/Duke/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The abstract Task class contains basic attributes","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * and behaviours of a Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"     * Name of the Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"    private final String name;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Whether the task is complete. Set to false by default","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private boolean isCompleted;","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of task","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    Task(String name) {","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * Abstract method that returns prefix of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    public abstract String getPrefix();","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Abstract method that returns date of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - date of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"    public abstract String getDate();","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * Abstract method that returns time of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - time of the Task","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"    public abstract String getTime();","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * Updates the completion state of the Task to true.","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"    public void mark() {","lastModifiedDate":"2022-01-19"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"        this.isCompleted \u003d true;","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"     * Updates the completion state of the Task to false.","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"    public void unmark() {","lastModifiedDate":"2022-01-19"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the completion state of the Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - completion state of Task","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isMarked() {","lastModifiedDate":"2022-01-30"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"        return this.isCompleted;","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns true if task is an EmptyTask.","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"     * Otherwise, always return false.","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - false unless this is an EmptyTask,","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"     *                   then true","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isEmptyTask() {","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"        return false;","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the name of the Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - name of Task","lastModifiedDate":"2022-02-03"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"    public String getName() {","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"        return this.name;","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":95,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the default toString() method.","lastModifiedDate":"2022-02-03"},{"lineNumber":96,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - String of each Task","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":99,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":100,"author":{"gitId":"MelvinCZJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":101,"author":{"gitId":"MelvinCZJ"},"content":"        String box \u003d \"\";","lastModifiedDate":"2022-01-19"},{"lineNumber":102,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.isCompleted)","lastModifiedDate":"2022-02-03"},{"lineNumber":103,"author":{"gitId":"MelvinCZJ"},"content":"            box +\u003d \"[X] \";","lastModifiedDate":"2022-01-19"},{"lineNumber":104,"author":{"gitId":"MelvinCZJ"},"content":"        else","lastModifiedDate":"2022-01-19"},{"lineNumber":105,"author":{"gitId":"MelvinCZJ"},"content":"            box +\u003d \"[ ] \";","lastModifiedDate":"2022-01-19"},{"lineNumber":106,"author":{"gitId":"MelvinCZJ"},"content":"        return box + this.name;","lastModifiedDate":"2022-01-19"},{"lineNumber":107,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":108,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":109,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"MelvinCZJ":109}},{"path":"src/main/java/Duke/Tasks/TaskCreator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskCreator class creates Task objects","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * from parameters passed into it.","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskCreator {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"     * Prefix of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"    private final char prefix;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * Whether the task is complete. Set to false by default","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final boolean isCompleted;","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Name of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    private final String name;","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     * Date of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    private final String date;","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * Time of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    private final String time;","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * @param prefix - prefix of Task","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * @param isCompleted - task completion state","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of task","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date of task","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time of task","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskCreator(char prefix, boolean isCompleted,","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"                       String name, String date, String time) {","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     * This method creates a new Task with the class variables as","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"     * the parameters for the Task to be created. If isCompleted","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"     * is true, the newly created Task will be marked before being","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"     * returned.","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"     * @return Task - the type of Task returned depends on the","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"     *                prefix stored in this TaskCreator","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"    public Task createTask() {","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"        Task task;","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"        if (prefix \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"            task \u003d new TaskDeadline(this.name, this.date, this.time);","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"        } else if (prefix \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"            task \u003d new TaskEvent(this.name, this.date, this.time);","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"        } else if (prefix \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"            task \u003d new TaskToDo(this.name);","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"            System.out.println(\"Help!\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"Weird looking task found in Duke\u0027s memory!\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"Please go to Duke\u0027s memory to check!\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"(Found a task that is not a Deadline, Event or ToDo\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"                    + \"in data/duke.txt)\\n\");","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"            task \u003d new TaskEmpty();","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.isCompleted \u0026\u0026 !task.isEmptyTask()) {","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"            task.mark();","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"        return  task;","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"MelvinCZJ":84}},{"path":"src/main/java/Duke/Tasks/TaskDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskDeadline class contains basic attributes","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * and behaviours of a Deadline Task. It extends","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * from the Task class.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskDeadline extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * Date of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    private final String date;","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * Time of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    private final String time;","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of task","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date of task","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time of task","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskDeadline(String name, String date, String time) {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"        super(name);","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        this.time \u003d new ManagerTime(time).getFormat24();","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the prefix of TaskDeadline.","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskDeadline","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    public String getPrefix() {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"        return \"D\";","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the date of TaskDeadline.","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskDeadline","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    public String getDate() {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"        return this.date;","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the time of TaskDeadline.","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of this TaskDeadline","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"    public String getTime() {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"        return this.time;","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the toString() method of the parent.","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - String of this TaskDeadline","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"        String prefix \u003d \"[D]\";","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"        return prefix + super.toString() + \" on: \"","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"                + ManagerDate.formatDate(this.date) + \" \"","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"                + this.time;","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"MelvinCZJ":82}},{"path":"src/main/java/Duke/Tasks/TaskEmpty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskEmpty class contains basic attributes","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * and behaviours of an TaskEmpty. It extends","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" * from the Task class. This is returned in cases","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * where a Task is not created due to DukeException.","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskEmpty extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskEmpty() {","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"        super(\"EMPTY\");","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the prefix of TaskEmpty.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskEmpty","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    public String getPrefix() {","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"        return \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the date of TaskEmpty.","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - date of the TaskEmpty","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    public String getDate() {","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"        return \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the time of TaskEmpty.","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - time of this TaskEmpty","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"    public String getTime() {","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"        return \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     * Always returns true.","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - true","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isEmptyTask() {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"        return true;","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"MelvinCZJ":62}},{"path":"src/main/java/Duke/Tasks/TaskEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.Time.ManagerTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskEvent class contains basic attributes","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * and behaviours of a Event Task. It extends","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" * from the Task class.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskEvent extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     * Date of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"    private final String date;","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * Time of Task.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    private final String time;","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of task","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date of task","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time of task","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskEvent(String name, String date, String time) {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"        super(name);","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"        this.time \u003d new ManagerTime(time).getFormat24();","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the prefix of TaskEvent.","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskEvent","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"    public String getPrefix() {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"        return \"E\";","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the date of TaskEvent.","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskEvent","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"    public String getDate() {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"        return this.date;","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the time of TaskEvent.","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of this TaskEvent","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"    public String getTime() {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"        return this.time;","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the toString() method of the parent.","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - String of this TaskEvent","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"        String prefix \u003d \"[E]\";","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"        return prefix + super.toString() + \" on: \"","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"                + ManagerDate.formatDate(this.date) + \" \"","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"                + this.time;","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"MelvinCZJ":82}},{"path":"src/main/java/Duke/Tasks/TaskToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The TaskToDo class contains basic attributes","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * and behaviours of a ToDo Task. It extends","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" * from the Task class.","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"public class TaskToDo extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"     * @param name - name of task","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"    public TaskToDo(String name) {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"        super(name);","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"     * Returns the prefix of TaskToDo.","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - prefix of the TaskToDo","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"    public String getPrefix() {","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"        return \"T\";","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"     * Always returns \"00000000\".","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - \"00000000\"","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"    public String getDate() {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"        return \"00000000\";","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the abstract method of its parent class.","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"     * Always returns \"0000\".","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - \"0000\"","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"    public String getTime() {","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"        return \"0000\";","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"     * Overrides the toString() method of the parent.","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"     * @return String - String of this TaskToDo","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"        String prefix \u003d \"[T]\";","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"        return prefix + super.toString();","lastModifiedDate":"2022-01-19"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"MelvinCZJ":63}},{"path":"src/main/java/Duke/Time/ManagerDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Time;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"import Duke.DukeException.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" * The ManagerDate class handles validation check for","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" * dates and formatting dates into the String form","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * from the number form.","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"public class ManagerDate {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"     * int format of day","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"    private final int day;","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"     * int format of month","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"    private final int month;","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"     * int format of year","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"    private final int year;","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"     * flag to indicate whether date is valid","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"    private boolean isValid \u003d false;","lastModifiedDate":"2022-01-30"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date - date in DDMMYYYY format","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"    public ManagerDate(String date) {","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"        this.day \u003d Integer.parseInt(date.substring(0, 2));","lastModifiedDate":"2022-01-30"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"        this.month \u003d Integer.parseInt(date.substring(2, 4));","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"        this.year \u003d Integer.parseInt(date.substring(4, 8));","lastModifiedDate":"2022-01-30"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        // check valid month","lastModifiedDate":"2022-01-30"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.month \u003c 13 \u0026\u0026 this.month \u003e 0) {","lastModifiedDate":"2022-01-30"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"            // check for leap year","lastModifiedDate":"2022-01-30"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"            if (this.year % 4 !\u003d 0) { // no leap year","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"                // check for valid day","lastModifiedDate":"2022-01-30"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"                int[] daysPerMonth \u003d {31, 28, 31, 30,","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"                        31, 30, 31, 31,","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"                        30, 31, 30, 31};","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"                if (daysPerMonth[this.month - 1] \u003e\u003d this.day \u0026\u0026 this.day \u003e 0) {","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"                    this.isValid \u003d true;","lastModifiedDate":"2022-01-30"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"                }","lastModifiedDate":"2022-01-30"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"            } else { // leap year","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"                // check valid day","lastModifiedDate":"2022-01-30"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"                int[] daysPerMonthLeapYear \u003d {31, 29, 31, 30,","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"                        31, 30, 31, 31,","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"                        30, 31, 30, 31};","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"                if (daysPerMonthLeapYear[this.month - 1] \u003e\u003d this.day \u0026\u0026 this.day \u003e 0) {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"                    this.isValid \u003d true;","lastModifiedDate":"2022-01-30"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"                }","lastModifiedDate":"2022-01-30"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-01-30"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns the validity of the date","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - whether date is valid","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isDateValid() {","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"        return this.isValid;","lastModifiedDate":"2022-01-30"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns a more user-friendly format of","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"     * the input date. Date validity should be checked","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"     * before using this method.","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     * @param date date in DDMMYYYY format","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - whether date is valid","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"    public static String formatDate(String date) {","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"        String[] nameOfMonths","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"                \u003d {\"January\", \"February\", \"March\", \"April\",","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"                \"May\", \"June\", \"July\", \"August\",","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"MelvinCZJ"},"content":"                \"September\", \"October\", \"November\", \"December\"};","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"MelvinCZJ"},"content":"        int day \u003d Integer.parseInt(date.substring(0, 2));","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"MelvinCZJ"},"content":"        int month \u003d Integer.parseInt(date.substring(2, 4));","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"MelvinCZJ"},"content":"        int year \u003d Integer.parseInt(date.substring(4, 8));","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"MelvinCZJ"},"content":"        return nameOfMonths[month - 1] + \" \" + String.format(\"%02d\", day) + \" \" + year;","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":94,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"MelvinCZJ":94}},{"path":"src/main/java/Duke/Time/ManagerTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"package Duke.Time;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"MelvinCZJ"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"MelvinCZJ"},"content":" * The ManagerTime class handles validation check for","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"MelvinCZJ"},"content":" * time and formatting time into twelve-hour format or","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"MelvinCZJ"},"content":" * the twenty-four-hour format.","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"MelvinCZJ"},"content":" *","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"MelvinCZJ"},"content":" * @author  Melvin Chan Zijun","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"MelvinCZJ"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"public class ManagerTime {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"MelvinCZJ"},"content":"     * time in twenty-four-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"MelvinCZJ"},"content":"    private final String format24;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"MelvinCZJ"},"content":"     * time in twelve-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"MelvinCZJ"},"content":"    private final String format12;","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"MelvinCZJ"},"content":"     * flag to indicate whether time is valid","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"MelvinCZJ"},"content":"    boolean isValid \u003d false;","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"MelvinCZJ"},"content":"     * Sole constructor.","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"MelvinCZJ"},"content":"     * @param time - time in HHMM format","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"MelvinCZJ"},"content":"    public ManagerTime(String time) {","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"MelvinCZJ"},"content":"        int hour \u003d Integer.parseInt(time.substring(0, 2));","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"MelvinCZJ"},"content":"        int minute \u003d Integer.parseInt(time.substring(2, 4));","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"MelvinCZJ"},"content":"        if (hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23) {","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"MelvinCZJ"},"content":"            if (minute \u003e\u003d 0 \u0026\u0026 minute \u003c\u003d 59) {","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"MelvinCZJ"},"content":"                this.isValid \u003d true;","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"MelvinCZJ"},"content":"        this.format24 \u003d time;","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"MelvinCZJ"},"content":"        String postfix \u003d \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"MelvinCZJ"},"content":"        if (this.isValid) {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"MelvinCZJ"},"content":"            if (hour \u003e 11) {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"MelvinCZJ"},"content":"                postfix +\u003d \"pm\";","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"MelvinCZJ"},"content":"            } else {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"MelvinCZJ"},"content":"                postfix +\u003d \"am\";","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"MelvinCZJ"},"content":"            if (hour \u003e 12) {","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"MelvinCZJ"},"content":"                hour -\u003d 12;","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"MelvinCZJ"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"MelvinCZJ"},"content":"            this.format12 \u003d String.format(\"%d:%02d%s\", hour, minute, postfix);","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"MelvinCZJ"},"content":"        } else {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"MelvinCZJ"},"content":"            this.format12 \u003d \"\";","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"MelvinCZJ"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns the validity of the time","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"MelvinCZJ"},"content":"     * @return boolean - whether time is valid","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"MelvinCZJ"},"content":"    public boolean isTimeValid() {","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"MelvinCZJ"},"content":"        return this.isValid;","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns the time in twelve-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"MelvinCZJ"},"content":"     * @return time in twelve-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"MelvinCZJ"},"content":"    public String getFormat12() {","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"MelvinCZJ"},"content":"        return this.format12;","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"MelvinCZJ"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"MelvinCZJ"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"MelvinCZJ"},"content":"     * This method returns the time in twenty-four-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"MelvinCZJ"},"content":"     *","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"MelvinCZJ"},"content":"     * @return time in twenty-four-hour format","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"MelvinCZJ"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":83,"author":{"gitId":"MelvinCZJ"},"content":"    public String getFormat24() {","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"MelvinCZJ"},"content":"        return this.format24;","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"MelvinCZJ"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"MelvinCZJ"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"MelvinCZJ":86}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"MelvinCZJ"},"content":"todo read","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"MelvinCZJ"},"content":"bye","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"MelvinCZJ":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"MelvinCZJ"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*java","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"MelvinCZJ":1}}]
