[{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":" * Represents a task with a time to do it by. A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to the task represented by","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":" * a String name and a String by which specified the date to do it by.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"public class Deadline extends duke.task.Task {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    protected String by;","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of a \u003ccode\u003eDeadline\u003c/code\u003e object with the specified name and date to do it by.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the deadline task.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * @param by Date to do the deadline task by.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2022-01-18"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"        super(name);","lastModifiedDate":"2022-01-18"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"        System.out.println(by);","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"            LocalDate d1 \u003d LocalDate.parse(by);","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"            this.by \u003d d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"            this.by \u003d by;","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eDeadline\u003c/code\u003e object to be read by the users in \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"     * @return User-friendly string representation of the deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2022-01-18"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eDeadline\u003c/code\u003e object to be saved in the hard drive for future","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"     * uses. It is more concise and computer-friendly than the \u003ccode\u003etoString\u003c/code\u003e method.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"     * @return Computer-friendly string representation of the deadline for storing of data.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"    public String toText() {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"        return \"D | \" + (this.getDone() ? 1 : 0) + \" | \" + this.getName() + \" | \" + this.by + \"\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"xzzz3":48}},{"path":"src/main/java/duke/task/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-18"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":" * Represents the Duke Chatbot. A \u003ccode\u003eDuke\u003c/code\u003e object corresponds to a Duke chatbot.","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"    private Ui ui;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    private Parser parser;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * Creates and runs a new \u003ccode\u003eDuke\u003c/code\u003e object.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     * @param args an array of Strings.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"        new Duke().run();","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"     * Creates a new instance of \u003ccode\u003eDuke\u003c/code\u003e\u003e object and initializes its attributes.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"    public Duke() {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"        ui.greeting();","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"        storage.checkFile();","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"            taskList \u003d new TaskList(storage.readFile());","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"        } catch (LoadingException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"            taskList \u003d new TaskList(new ArrayList\u003cTask\u003e (100));","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"     * Runs the \u003ccode\u003eDuke\u003c/code\u003e object, and saves its data after the run finishes.","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"    public void run() {","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"        respond();","lastModifiedDate":"2022-01-18"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"xzzz3"},"content":"        storage.saveFile(taskList.getToDoList());","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":53,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":54,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"xzzz3"},"content":"     * Reads the user input and responds based on it.","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"xzzz3"},"content":"     * If the input matches none of the command, prompts the user to re-enter.","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"xzzz3"},"content":"    public void respond() {","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"xzzz3"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-18"},{"lineNumber":60,"author":{"gitId":"xzzz3"},"content":"        label:","lastModifiedDate":"2022-01-18"},{"lineNumber":61,"author":{"gitId":"xzzz3"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2022-01-18"},{"lineNumber":62,"author":{"gitId":"xzzz3"},"content":"            String command \u003d sc.next();","lastModifiedDate":"2022-01-18"},{"lineNumber":63,"author":{"gitId":"xzzz3"},"content":"            switch (command) {","lastModifiedDate":"2022-01-18"},{"lineNumber":64,"author":{"gitId":"xzzz3"},"content":"            case \"bye\":","lastModifiedDate":"2022-01-18"},{"lineNumber":65,"author":{"gitId":"xzzz3"},"content":"                ui.goodbye();","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"xzzz3"},"content":"                break label;","lastModifiedDate":"2022-01-18"},{"lineNumber":67,"author":{"gitId":"xzzz3"},"content":"            case \"list\":","lastModifiedDate":"2022-01-18"},{"lineNumber":68,"author":{"gitId":"xzzz3"},"content":"                ui.displayList(taskList.getToDoList());","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"xzzz3"},"content":"                sc.nextLine();","lastModifiedDate":"2022-01-18"},{"lineNumber":70,"author":{"gitId":"xzzz3"},"content":"                break;","lastModifiedDate":"2022-01-18"},{"lineNumber":71,"author":{"gitId":"xzzz3"},"content":"            case \"mark\":","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"xzzz3"},"content":"            case \"unmark\":","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"xzzz3"},"content":"                mark(sc.nextInt());","lastModifiedDate":"2022-01-18"},{"lineNumber":74,"author":{"gitId":"xzzz3"},"content":"                sc.nextLine();","lastModifiedDate":"2022-01-18"},{"lineNumber":75,"author":{"gitId":"xzzz3"},"content":"                break;","lastModifiedDate":"2022-01-18"},{"lineNumber":76,"author":{"gitId":"xzzz3"},"content":"            case \"todo\":","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"xzzz3"},"content":"            case \"deadline\":","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"xzzz3"},"content":"            case \"event\":","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"xzzz3"},"content":"                Task newTask;","lastModifiedDate":"2022-01-18"},{"lineNumber":80,"author":{"gitId":"xzzz3"},"content":"                if (command.equals(\"todo\")) {","lastModifiedDate":"2022-01-18"},{"lineNumber":81,"author":{"gitId":"xzzz3"},"content":"                    command \u003d sc.nextLine();","lastModifiedDate":"2022-01-18"},{"lineNumber":82,"author":{"gitId":"xzzz3"},"content":"                    try {","lastModifiedDate":"2022-01-19"},{"lineNumber":83,"author":{"gitId":"xzzz3"},"content":"                        newTask \u003d makeToDo(command);","lastModifiedDate":"2022-01-19"},{"lineNumber":84,"author":{"gitId":"xzzz3"},"content":"                    } catch (ToDoIllegalArgumentException ex) {","lastModifiedDate":"2022-01-19"},{"lineNumber":85,"author":{"gitId":"xzzz3"},"content":"                        ui.showIllegalArgumentError(ex);","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"xzzz3"},"content":"                        break;","lastModifiedDate":"2022-01-19"},{"lineNumber":87,"author":{"gitId":"xzzz3"},"content":"                    }","lastModifiedDate":"2022-01-19"},{"lineNumber":88,"author":{"gitId":"xzzz3"},"content":"                } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2022-01-18"},{"lineNumber":89,"author":{"gitId":"xzzz3"},"content":"                    try {","lastModifiedDate":"2022-01-19"},{"lineNumber":90,"author":{"gitId":"xzzz3"},"content":"                        String[] s \u003d parser.parseDeadline(sc.nextLine());","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"xzzz3"},"content":"                        newTask \u003d new Deadline(s[0], s[1]);","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"xzzz3"},"content":"                    } catch (IncompleteArgumentException ex) {","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"xzzz3"},"content":"                        ui.showIncompleteArgumentError();","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"xzzz3"},"content":"                        break;","lastModifiedDate":"2022-01-19"},{"lineNumber":95,"author":{"gitId":"xzzz3"},"content":"                    }","lastModifiedDate":"2022-01-19"},{"lineNumber":96,"author":{"gitId":"xzzz3"},"content":"                } else {","lastModifiedDate":"2022-01-18"},{"lineNumber":97,"author":{"gitId":"xzzz3"},"content":"                    try {","lastModifiedDate":"2022-01-19"},{"lineNumber":98,"author":{"gitId":"xzzz3"},"content":"                        String[] s \u003d parser.parseEvent(sc.nextLine());","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"xzzz3"},"content":"                        newTask \u003d new Event(s[0], s[1]);","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"xzzz3"},"content":"                    } catch (IncompleteArgumentException ex) {","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"xzzz3"},"content":"                        ui.showIncompleteArgumentError();","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"xzzz3"},"content":"                        break;","lastModifiedDate":"2022-01-19"},{"lineNumber":103,"author":{"gitId":"xzzz3"},"content":"                    }","lastModifiedDate":"2022-01-19"},{"lineNumber":104,"author":{"gitId":"xzzz3"},"content":"                }","lastModifiedDate":"2022-01-18"},{"lineNumber":105,"author":{"gitId":"xzzz3"},"content":"                taskList.add(newTask);","lastModifiedDate":"2022-01-26"},{"lineNumber":106,"author":{"gitId":"xzzz3"},"content":"                ui.confirmAddition(newTask, taskList.getToDoList());","lastModifiedDate":"2022-01-26"},{"lineNumber":107,"author":{"gitId":"xzzz3"},"content":"                break;","lastModifiedDate":"2022-01-18"},{"lineNumber":108,"author":{"gitId":"xzzz3"},"content":"            case \"delete\":","lastModifiedDate":"2022-01-19"},{"lineNumber":109,"author":{"gitId":"xzzz3"},"content":"                remove(sc.nextInt());","lastModifiedDate":"2022-01-19"},{"lineNumber":110,"author":{"gitId":"xzzz3"},"content":"                break;","lastModifiedDate":"2022-01-19"},{"lineNumber":111,"author":{"gitId":"xzzz3"},"content":"            case \"find\":","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"xzzz3"},"content":"                ArrayList\u003cTask\u003e relevantTasks \u003d taskList.find(sc.nextLine());","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"xzzz3"},"content":"                ui.showFindResult(relevantTasks);","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"xzzz3"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"xzzz3"},"content":"            default:","lastModifiedDate":"2022-01-19"},{"lineNumber":116,"author":{"gitId":"xzzz3"},"content":"                ui.doNotUnderstand();","lastModifiedDate":"2022-01-26"},{"lineNumber":117,"author":{"gitId":"xzzz3"},"content":"            }","lastModifiedDate":"2022-01-18"},{"lineNumber":118,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":119,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":120,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":121,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"xzzz3"},"content":"     * Reverses the boolean \u003ccode\u003edone\u003c/code\u003e attribute of the task at the given list index.","lastModifiedDate":"2022-01-27"},{"lineNumber":123,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the task in the \u003ccode\u003etaskList\u003c/code\u003e;","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"xzzz3"},"content":"    public void mark(int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"xzzz3"},"content":"        taskList.get(idx - 1).mark();","lastModifiedDate":"2022-01-26"},{"lineNumber":127,"author":{"gitId":"xzzz3"},"content":"        if (taskList.get(idx - 1).getDone()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":128,"author":{"gitId":"xzzz3"},"content":"            ui.markAsDone(taskList.getToDoList(), idx);","lastModifiedDate":"2022-01-26"},{"lineNumber":129,"author":{"gitId":"xzzz3"},"content":"        } else {","lastModifiedDate":"2022-01-18"},{"lineNumber":130,"author":{"gitId":"xzzz3"},"content":"            ui.unmarkAsDone(taskList.getToDoList(), idx);","lastModifiedDate":"2022-01-26"},{"lineNumber":131,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":132,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":133,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":134,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"xzzz3"},"content":"     * Returns a \u003ccode\u003eToDo\u003c/code\u003e with the specified name.","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"xzzz3"},"content":"     * @return new instance of \u003ccode\u003eToDo\u003c/code\u003e with the specified name.","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"xzzz3"},"content":"     * @throws ToDoIllegalArgumentException If the name is an empty string.","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"xzzz3"},"content":"    public Task makeToDo(String name) throws ToDoIllegalArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"xzzz3"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2022-01-19"},{"lineNumber":142,"author":{"gitId":"xzzz3"},"content":"            throw new ToDoIllegalArgumentException(\"Illegal Argument\");","lastModifiedDate":"2022-01-19"},{"lineNumber":143,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":144,"author":{"gitId":"xzzz3"},"content":"        return new ToDo(name);","lastModifiedDate":"2022-01-19"},{"lineNumber":145,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":146,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":147,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"xzzz3"},"content":"     * Removes the \u003ccode\u003etask\u003c/code\u003e at the specified index of the \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the \u003ccode\u003etask\u003c/code\u003e in the \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"xzzz3"},"content":"    public void remove(int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"xzzz3"},"content":"        Task removed \u003d taskList.remove(idx - 1);","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"xzzz3"},"content":"        ui.confirmRemoval(removed, taskList.getToDoList());","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":155,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":156,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"xzzz3":154,"-":3}},{"path":"src/main/java/duke/task/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e that can be thrown by the Duke chatbot class. A \u003ccode\u003eDukeException\u003c/code\u003e","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" * object is represented by its string message.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of the \u003ccode\u003eDukeException\u003c/code\u003e class with the specified message.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     * @param message The exception message.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"        super(message);","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the Exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"     * @return String representation of the Exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"    public abstract String toString();","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"xzzz3":23}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":" * Represents a task with a time to do it at. A \u003ccode\u003eEvent\u003c/code\u003e object corresponds to the task represented by","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":" *  a String name and a String at which specified the time to do it at.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"public class Event extends duke.task.Task {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    protected String at;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of a \u003ccode\u003eEvent\u003c/code\u003e object with the specified name and time to do it at.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the event task.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * @param at Time to do the Event task at.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    public Event(String name, String at) {","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"        super(name);","lastModifiedDate":"2022-01-18"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"            LocalDate d1 \u003d LocalDate.parse(at);","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"            this.at \u003d d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"            this.at \u003d at;","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eEvent\u003c/code\u003e object to be read by the users in \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"     * @return User-friendly string representation of the event.","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"        return \"[E]\" + super.toString() + \" (by:\" + at + \")\";","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eEvent\u003c/code\u003e object to be saved in the hard drive for future","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"     * uses. It is more concise and computer-friendly than the \u003ccode\u003etoString\u003c/code\u003e method.","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"     * @return Computer-friendly string representation of the event for storing of data.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"    public String toText() {","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"        return \"E | \" + (this.getDone() ? 1 : 0) + \" | \" + this.getName() + \" | \" + this.at + \"\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"xzzz3":47}},{"path":"src/main/java/duke/task/IncompleteArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents an exception caused by attempting to create a \u003ccode\u003eTask\u003c/code\u003e object with incomplete","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" * arguments. A \u003ccode\u003eIncompleteArgumentException\u003c/code\u003e is represented by an error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"public class IncompleteArgumentException extends IllegalArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of \u003ccode\u003eIncompleteArgumentException\u003c/code\u003e with the specified Exception message.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    public IncompleteArgumentException(String message) {","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"        super(message);","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"xzzz3":15}},{"path":"src/main/java/duke/task/LoadingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents an exception when reading the saved data file, caused by the data being in the wrong format.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" * A \u003ccode\u003eLoadingException\u003c/code\u003e is represented by a String message.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"public class LoadingException extends duke.task.DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of \u003ccode\u003eLoadingException\u003c/code\u003e with the specified Exception message.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    public LoadingException(String message) {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"        super(message);","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the Exception, which notifies the user of the cause and solution.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"        return \"UH-OH!! seems like the file is not in the right format... (⊙.⊙) \\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"                \"don\u0027t worry! I\u0027ll start a new file for you!\";","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"xzzz3":24}},{"path":"src/main/java/duke/task/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents a parser used to make sense of user input. A \u003ccode\u003eParser\u003c/code\u003e object corresponds to a parser.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"public class Parser {","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of \u003ccode\u003eParser\u003c/code\u003e object.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"    public Parser() {","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"     * Returns the parsed array of String for Deadline inputs.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"     * @param string User input for Deadline creation.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"     * @return parsed String array, with first element being the name and second element being date-by.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * @throws IncompleteArgumentException If the string is not in the right format, i.e. two parts separated by \"/by\".","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    public String[] parseDeadline(String string) throws IncompleteArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"        String[] result \u003d string.split(\"/by\");","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"        for (int i \u003d 0; i \u003c result.length; i++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"            result[i] \u003d result[i].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"        if (result.length \u003c 2) {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"            throw new IncompleteArgumentException(\"Incomplete Argument\");","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"        return result;","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"     * Returns the parsed array of String for Event inputs.","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"     * @param string User input for Event creation.","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"     * @return parsed String array, with first element being the name and second element being date-at.","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"     * @throws IncompleteArgumentException If the string is not in the right format, i.e. two parts separated by \"/at\".","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"    public String[] parseEvent(String string) throws IncompleteArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"        String[] result \u003d string.split(\"/at\");","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"        for (int i \u003d 0; i \u003c result.length; i++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"            result[i] \u003d result[i].trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"        if (result.length \u003c 2) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"            throw new IncompleteArgumentException(\"Incomplete Argument\");","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"        return result;","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"xzzz3":50}},{"path":"src/main/java/duke/task/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.io.File;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":" * Represents a storage to deal with loading tasks from the file and saving tasks in the file in the hard drive.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"public class Storage {","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of the \u003ccode\u003eStorage\u003c/code\u003e object.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    public Storage() {","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"     * Creates a file at Path \"data/duke.txt\" if it does not exist.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"     * If the file exists, do nothing.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"    public void checkFile() {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"            Files.createDirectory(Paths.get(\"data\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"        } catch (IOException ignored) {","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"            Files.createFile(Paths.get(\"data/duke.txt\"));","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"        } catch (IOException ignored) {","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"     * Saves the list data to the file at Path \"data/duke.txt\".","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList The List of items to be saved.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"    public void saveFile(ArrayList\u003cTask\u003e toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"            StringBuilder textToAdd \u003d new StringBuilder();","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"            for (Task task : toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"                textToAdd.append(task.toText());","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"xzzz3"},"content":"            FileWriter fw \u003d new FileWriter(\"data/duke.txt\");","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"xzzz3"},"content":"            fw.write(textToAdd.toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":53,"author":{"gitId":"xzzz3"},"content":"            fw.close();","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"xzzz3"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"xzzz3"},"content":"            checkFile();","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"xzzz3"},"content":"            saveFile(toDoList);","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"xzzz3"},"content":"     * Reads the file at Path \"data/duke.txt\" and returns the content as a list.","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"xzzz3"},"content":"     * @return ArrayList of \u003ccode\u003eTasks\u003c/code\u003e from the data file.","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"xzzz3"},"content":"     * @throws duke.task.LoadingException If the file is not in the correct format.","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"xzzz3"},"content":"    public ArrayList\u003cTask\u003e readFile() throws LoadingException {","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"xzzz3"},"content":"        File dataFile \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"xzzz3"},"content":"        ArrayList\u003cTask\u003e toDoList \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"xzzz3"},"content":"            Scanner s \u003d new Scanner(dataFile);","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"xzzz3"},"content":"            String[] taskLine;","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"xzzz3"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"xzzz3"},"content":"                taskLine \u003d s.nextLine().split(\" \\\\| \");","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"xzzz3"},"content":"                switch (taskLine[0]) {","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"xzzz3"},"content":"                case \"T\":","lastModifiedDate":"2022-01-26"},{"lineNumber":77,"author":{"gitId":"xzzz3"},"content":"                    taskLine[2].trim();","lastModifiedDate":"2022-01-26"},{"lineNumber":78,"author":{"gitId":"xzzz3"},"content":"                    toDoList.add(new ToDo(taskLine[2]));","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"xzzz3"},"content":"                    break;","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"xzzz3"},"content":"                case \"D\":","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"xzzz3"},"content":"                    toDoList.add(new Deadline(taskLine[2], taskLine[3]));","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"xzzz3"},"content":"                    break;","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"xzzz3"},"content":"                case \"E\":","lastModifiedDate":"2022-01-26"},{"lineNumber":84,"author":{"gitId":"xzzz3"},"content":"                    toDoList.add(new Event(taskLine[2], taskLine[3]));","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"xzzz3"},"content":"                    break;","lastModifiedDate":"2022-01-26"},{"lineNumber":86,"author":{"gitId":"xzzz3"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":87,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"xzzz3"},"content":"                if (taskLine[1].equals(\"1\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"xzzz3"},"content":"                    toDoList.get(toDoList.size() - 1).mark();","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"xzzz3"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"xzzz3"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"xzzz3"},"content":"            return toDoList;","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"xzzz3"},"content":"        } catch (FileNotFoundException ignored) {","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"xzzz3"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":96,"author":{"gitId":"xzzz3"},"content":"            throw new LoadingException(\"Index Out of Bounds\");","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"xzzz3"},"content":"        return new ArrayList\u003cTask\u003e (100);","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":100,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"xzzz3":100}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object is represented by its name and a boolean indicating whether it is done.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"    private final String name;","lastModifiedDate":"2022-01-18"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"    private boolean done;","lastModifiedDate":"2022-01-18"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     * Returns a new \u003ccode\u003eTask\u003c/code\u003e object with the specified name and done status.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"     * @param done Done status of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    public Task(String name, boolean done) {","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-18"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"        this.done \u003d done;","lastModifiedDate":"2022-01-18"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"     * Returns a new \u003ccode\u003eTask\u003c/code\u003e object with the specified name that is not yet done.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"    public Task(String name) {","lastModifiedDate":"2022-01-18"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"        this(name, false);","lastModifiedDate":"2022-01-18"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"     * Reverses the done status of the \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"    public void mark() {","lastModifiedDate":"2022-01-18"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"        this.done \u003d !this.done;","lastModifiedDate":"2022-01-18"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"     * @return String representation of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"        return \"[\" + (this.done? \"X\" : \" \") + \"] \" + this.name;","lastModifiedDate":"2022-01-18"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"     * Returns the done status of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"     * @return Done status of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"    public boolean getDone() {","lastModifiedDate":"2022-01-18"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"        return this.done;","lastModifiedDate":"2022-01-18"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":51,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"xzzz3"},"content":"     * Returns the name of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"xzzz3"},"content":"     * @return Name of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"xzzz3"},"content":"    public String getName() {","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"xzzz3"},"content":"        return this.name;","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"xzzz3"},"content":"    public abstract String toText();","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"xzzz3":61}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" * Represents a list of \u003ccode\u003eTasks\u003c/code\u003e. A \u003ccode\u003eTaskList\u003c/code\u003e object is represented by an ArrayList of Tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"public class TaskList {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"    private ArrayList\u003cTask\u003e toDoList;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"    ","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of the \u003ccode\u003eTaskList\u003c/code\u003e object with the specified ArrayList.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"     * @param arr ArrayList of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    public TaskList(ArrayList\u003cTask\u003e arr) {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"        this.toDoList \u003d arr;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"     * Returns the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"     * @return ArrayList of \u003ccode\u003eTasks\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"    public ArrayList\u003cTask\u003e getToDoList() {","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"        return toDoList;","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"     * Adds a \u003ccode\u003eTask\u003c/code\u003e to the list.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e to be added to the list.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"        this.toDoList.add(task);","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"     * Returns the \u003ccode\u003eTask\u003c/code\u003e at the specified index of the list.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e at the index.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"    public Task get(int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"        return this.toDoList.get(idx);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"     * Removes the \u003ccode\u003eTask\u003c/code\u003e at the index of the list and returns it.","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e removed at the index.","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"        return this.toDoList.remove(idx);","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"xzzz3"},"content":"     * Returns a list of \u003ccode\u003eTasks\u003c/code\u003e that contains the specified keyword.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"xzzz3"},"content":"     * @param keyword The keyword to be searched.","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"xzzz3"},"content":"     * @return List of relevant tasks that contains the keyword.","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"xzzz3"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"xzzz3"},"content":"        ArrayList\u003cTask\u003e relevantTasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"xzzz3"},"content":"        for (Task task : toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"xzzz3"},"content":"            if (task.getName().contains(keyword)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"xzzz3"},"content":"                relevantTasks.add(task);","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"xzzz3"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"xzzz3"},"content":"        return relevantTasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"xzzz3":67}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents a task. A \u003ccode\u003eToDo\u003c/code\u003e object corresponds to the task represented by","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" * a String name.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"public class ToDo extends duke.task.Task {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of a \u003ccode\u003eToDo\u003c/code\u003e object with the specified name.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     * @param name Name of the deadline task.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    public ToDo(String name) {","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"        super(name);","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eToDo\u003c/code\u003e object to be read by the users in \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"     * @return User-friendly string representation of the todo.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-18"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the \u003ccode\u003eToDo\u003c/code\u003e object to be saved in the hard drive for future","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"     * uses. It is more concise and computer-friendly than the \u003ccode\u003etoString\u003c/code\u003e method.","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"     * @return Computer-friendly string representation of the todo for storing of data.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"    public String toText() {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"        return \"T | \" + (this.getDone() ? 1 : 0) + \" | \" + this.getName() + \"\\n\";","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"xzzz3":35}},{"path":"src/main/java/duke/task/ToDoIllegalArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":" * Represents an exception caused by attempting to create a \u003ccode\u003eToDo\u003c/code\u003e object with invalid or incomplete","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":" * arguments. A \u003ccode\u003eToDoIllegalArgumentException\u003c/code\u003e is represented by an error message.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"public class ToDoIllegalArgumentException extends IllegalArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of \u003ccode\u003eToDoIllegalArgumentException\u003c/code\u003e with the specified Exception message.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    public ToDoIllegalArgumentException(String message) {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"        super(message);","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     * Returns a String representation of the exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"        return \"UH-OH!! you gotta fill in the description to create a valid todo (\u003e \u003cლ)\";","lastModifiedDate":"2022-01-19"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"xzzz3":24}},{"path":"src/main/java/duke/task/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":" * Represents a UI that deals with interactions with the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"public class Ui {","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"     * Returns a new instance of the \u003ccode\u003eUi\u003c/code\u003e class.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    public Ui() {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"     * Prints the greeting message.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"    public void greeting() {","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"        String logo \u003d \"__  __ ____________\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"                \"\\\\ \\\\/ /|_  /_  /_  /\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"                \" \u003e  \u003c  / / / / / / \\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"                \"/_/\\\\_\\\\/___/___/___|\";","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"        System.out.println(logo);","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"Hello uwu! I\u0027m xzzz,\");","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"You can check your schedwle here (ɔ◔‿◔)ɔ ♥!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"     * Prints the goodbye message.","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"    public void goodbye() {","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"Cya later~ ≧◉◡◉≦\");","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"xzzz3"},"content":"     * Prints the list for display.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList List to be displayed.","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"xzzz3"},"content":"    public void displayList(ArrayList\u003cTask\u003e toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"xzzz3"},"content":"        int number \u003d 1;","lastModifiedDate":"2022-01-26"},{"lineNumber":42,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"here are your tasks ☜(ˆ▿ˆc)\");","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"xzzz3"},"content":"        for (Task item : toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"xzzz3"},"content":"            System.out.println(number + \". \" + item.toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"xzzz3"},"content":"            number++;","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"xzzz3"},"content":"     * Print the error caused by illegal argument.","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"xzzz3"},"content":"     * @param ex IllegalArgument error.","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"xzzz3"},"content":"    public void showIllegalArgumentError(Exception ex) {","lastModifiedDate":"2022-01-26"},{"lineNumber":54,"author":{"gitId":"xzzz3"},"content":"        System.out.println(ex);","lastModifiedDate":"2022-01-26"},{"lineNumber":55,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":56,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"xzzz3"},"content":"     * Print the error caused by incomplete argument.","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"xzzz3"},"content":"    public void showIncompleteArgumentError() {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"UH-OH!! you gotta fill in the description and deadline date \" +","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"xzzz3"},"content":"                \"/ event date to create a valid task (\u003e \u003cლ)\");","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":65,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"xzzz3"},"content":"     * Prints the confirmation for addition of a \u003ccode\u003eTask\u003c/code\u003e to the \u003ccode\u003etoDoList\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"xzzz3"},"content":"     * @param newTask Task to be added.","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList List for the task to be added to.","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"xzzz3"},"content":"    public void confirmAddition(Task newTask, ArrayList\u003cTask\u003e toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"okie!! (✿◠‿◠)  i have added: \\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"xzzz3"},"content":"                newTask + \"\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"xzzz3"},"content":"                \"now there are \" + toDoList.size() + \" tasks in the list! get to work (ง︡\u0027-\u0027︠)ง\");","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":75,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":76,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"xzzz3"},"content":"     * Prints a message to indicate the bot does not understand the command.","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"xzzz3"},"content":"    public void doNotUnderstand() {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"sowwy i don\u0027t understand what that means ಠ_ಥ try something else pwease??\");","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"xzzz3"},"content":"     * Prints a confirmation that a \u003ccode\u003eTask\u003c/code\u003e at the index in the list has been marked as done.","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList List of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the task that has been marked.","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"xzzz3"},"content":"    public void markAsDone(ArrayList\u003cTask\u003e toDoList, int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"yay!!! this task is now marked as done ٩(˘◡˘)۶\");","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"xzzz3"},"content":"        System.out.println(toDoList.get(idx - 1).toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"xzzz3"},"content":"     * Prints a confirmation that a \u003ccode\u003eTask\u003c/code\u003e at the index in the list has been marked as undone.","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList List of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"xzzz3"},"content":"     * @param idx Index of the task that has been unmarked.","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"xzzz3"},"content":"    public void unmarkAsDone(ArrayList\u003cTask\u003e toDoList, int idx) {","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"this task is now marked as not done yet... do it soon! ᕙ(`▿´)ᕗ\");","lastModifiedDate":"2022-01-26"},{"lineNumber":101,"author":{"gitId":"xzzz3"},"content":"        System.out.println(toDoList.get(idx - 1).toString());","lastModifiedDate":"2022-01-26"},{"lineNumber":102,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":103,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":104,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"xzzz3"},"content":"     * Prints the confirmation for removal of a \u003ccode\u003eTask\u003c/code\u003e from the \u003ccode\u003etoDoList\u003c/code\u003e.","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"xzzz3"},"content":"     * @param removed Task to be removed.","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"xzzz3"},"content":"     * @param toDoList List for the task to be removed from.","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"xzzz3"},"content":"    public void confirmRemoval(Task removed, ArrayList\u003cTask\u003e toDoList) {","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"OKI!! i have removed this task: \\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":111,"author":{"gitId":"xzzz3"},"content":"                removed + \"\\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"xzzz3"},"content":"                \"now there are \" + toDoList.size() + \" tasks in the list! get to work (ง︡\u0027-\u0027︠)ง\");","lastModifiedDate":"2022-01-26"},{"lineNumber":113,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":114,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":115,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"xzzz3"},"content":"     * Print the error caused by invalid loading of the file.","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"xzzz3"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-01-26"},{"lineNumber":119,"author":{"gitId":"xzzz3"},"content":"        System.out.println(\"UH-OH!! seems like the file is not in the right format... (⊙.⊙) \\n\" +","lastModifiedDate":"2022-01-26"},{"lineNumber":120,"author":{"gitId":"xzzz3"},"content":"                \"don\u0027t worry! I\u0027ll start a new file for you!\");","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":123,"author":{"gitId":"xzzz3"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"xzzz3"},"content":"     * Prints the specified relevant tasks for the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"xzzz3"},"content":"     * @param relevantTasks List of relevant tasks containing a keyword.","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"xzzz3"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"xzzz3"},"content":"    public void showFindResult(ArrayList\u003cTask\u003e relevantTasks) {","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"xzzz3"},"content":"        if (relevantTasks.isEmpty()) {","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"xzzz3"},"content":"            System.out.println(\"There are no matching tasks （・⊝・）\");","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"xzzz3"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"xzzz3"},"content":"            System.out.println(\"Here are the matching tasks in the list (｡◕‿◕｡) :\");","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"xzzz3"},"content":"            int counter \u003d 1;","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"xzzz3"},"content":"            for (Task task : relevantTasks) {","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"xzzz3"},"content":"                System.out.println(counter + \". \" + task);","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"xzzz3"},"content":"                counter++;","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"xzzz3"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"xzzz3":139}},{"path":"test/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"class DukeTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"xzzz3":4}},{"path":"test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"import duke.task.IncompleteArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"import duke.task.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"    public void parsingDeadline_validArgument_success() throws Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"        String[] strArr \u003d {\"read book\", \"tmr\"};","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"        assertArrayEquals(strArr, new Parser().parseDeadline(\"read book /by tmr\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"    public void parsingEvent_validArgument_success() throws Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"        String[] strArr \u003d {\"read book\", \"night\"};","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"        assertArrayEquals(strArr, new Parser().parseEvent(\"read book /at night\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"    public void parsingDeadline_incompleteArgument_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"xzzz3"},"content":"            String[] strArr \u003d {\"read book\", \"tmr\"};","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"xzzz3"},"content":"            assertArrayEquals(strArr, new Parser().parseDeadline(\"read book\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"xzzz3"},"content":"        } catch (IncompleteArgumentException ex) {","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"xzzz3"},"content":"            assertEquals(\"Incomplete Argument\", ex.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"xzzz3"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"xzzz3":31}},{"path":"test/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xzzz3"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"xzzz3"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"xzzz3"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"xzzz3"},"content":"public class ToDoTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"xzzz3"},"content":"    public void toStringConversion_validToDo_success() throws Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"xzzz3"},"content":"        assertEquals(\"[T][ ] read book\", new ToDo(\"read book\").toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"xzzz3"},"content":"    public void toTextConversion_validToDo_success() throws Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"xzzz3"},"content":"        assertEquals(\"T | 0 | read book\" + \"\\n\", new ToDo(\"read book\").toText());","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"xzzz3"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"xzzz3"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"xzzz3"},"content":"    public void testMark() {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"xzzz3"},"content":"        ToDo testToDo \u003d new ToDo(\"read book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"xzzz3"},"content":"        testToDo.mark();","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"xzzz3"},"content":"        assertEquals(\"[T][X] read book\", testToDo.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"xzzz3"},"content":"        assertEquals(\"T | 1 | read book\" + \"\\n\", testToDo.toText());","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"xzzz3"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"xzzz3"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"xzzz3":24}}]
