[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"# duke.Duke project template","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"instructions on how to use it.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"   first)","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"   code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"   like the below as the output:","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"takufunkai":10,"-":19}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"takufunkai":16,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * Duke is a chat-bot program that is capable of logging tasks which are (optionally)","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * tagged with a deadline/occurrence date.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" * Duke automatically saves the tasks of each session upon successful termination","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":" * of the session, and restores these tasks on the next launch.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"public class Duke {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    private SaveHandler saveHandler \u003d null;","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     * Creates a new Duke chat-bot instance.","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    public Duke() {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"            this.saveHandler \u003d new SaveHandler();","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"        this.tasks \u003d new TaskList(100);","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"            this.saveHandler.restore(tasks);","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Failed to restore saved tasks: \" + e.getMessage());","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    public String getGreeting() {","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        return \"Hello, I am Red from Among Us.\\n\\nWe are currently facing a crisis onboard -- there seems to be an \"","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"                + \"imposter among us...\\n\\nMy job is to handle chat requests, so although I might get murdered any \"","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"                + \"moment now...\\n\\n... How can I help you?\";","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"    public String getResponse(String input) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"        Command cmd \u003d Command.parse(input);","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"        if (cmd.isExit()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"            return \"EXIT\";","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"        return cmd.execute(this.tasks, this.saveHandler);","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":55}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":" * DukeException encapsulates the checked exceptions that the chat-bot might face in its execution.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"     * Constructs a DukeException with the respective error message.","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"     * @param errorMessage The message error that was encountered.","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"takufunkai":15}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke;","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.gui.Main;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"public class Launcher {","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"takufunkai":10}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":" * ByeCommand handles the user command \"bye\". The object should alert \u003ccode\u003eDuke\u003c/code\u003e that","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * the program is being terminated by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"     * Does nothing, as it has no execution.","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) {","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        return \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     * Returns true to alert \u003ccode\u003eDuke\u003c/code\u003e to terminate itself.","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     * @return true","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"        return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import static duke.utils.Utils.DATE_FORMAT;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import static duke.utils.Utils.TIME_FORMAT;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"import duke.utils.Utils;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eCommand\u003c/code\u003e is the abstract base class for all possible commands that \u003ccode\u003eDuke\u003c/code\u003e recognizes.","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eCommand\u003c/code\u003e handles the parsing of user input by determining the command type given","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":" * and then validating the supplied arguments, if any.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eCommand\u003c/code\u003e will then return one of the executable subclass objects based on the","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":" * input given by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":" * All concrete implementations of Command should be able to \u003ccode\u003eexecute\u003c/code\u003e based on the","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":" * arguments supplied during the instantiation of the subclass object in \u003ccode\u003eCommand::parse\u003c/code\u003e.","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":" * They should be responsible for their entire expected behaviour within the \u003ccode\u003eexecute\u003c/code\u003e method.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     * Enums for all possible valid commands that are allowed to be supplied by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    private enum CommandNames {","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"        FIND, LIST, TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, BYE","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     * Runs the expected behaviour of the specific command. We can assume that command-specific","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"     * arguments have been supplied during the instantiation of the \u003ccode\u003eCommand\u003c/code\u003e subclass object.","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler from the Duke application.","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if some invalid command was given, or the supplied arguments are invalid.","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"    public abstract String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException;","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"     * Checks if the \u003ccode\u003eCommand\u003c/code\u003e is an \u003ccode\u003eByeCommand\u003c/code\u003e. Used by \u003ccode\u003eDuke\u003c/code\u003e to","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"     * determine if execution has been terminated by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"     * @return true if and only if command is \u003ccode\u003eByeCommand\u003c/code\u003e.","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"        return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"     * Static method that parses the input given by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"     * It checks if the supplied input is valid or not, before determining which \u003ccode\u003eCommand\u003c/code\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"     * subclass object should be instantiated and returned. It also determines and validates","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"     * the arguments supplied to the specific \u003ccode\u003eCommand\u003c/code\u003e by the user. If any of the arguments","lastModifiedDate":"2022-01-28"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"     * are invalid, or required but not supplied, the object is not created and instead a DukeException will be thrown.","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"     * @param input The entire string that was supplied by the user.","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"     * @return A \u003ccode\u003eCommand\u003c/code\u003e object.","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if arguments supplied are invalid.","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"takufunkai"},"content":"        assert !input.isBlank() : \"Input given should not be blank\";","lastModifiedDate":"2022-02-08"},{"lineNumber":69,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":70,"author":{"gitId":"takufunkai"},"content":"        String[] inputStrings \u003d input.split(\"\\\\s+\", 2);","lastModifiedDate":"2022-02-08"},{"lineNumber":71,"author":{"gitId":"takufunkai"},"content":"        boolean noArgumentsSupplied \u003d inputStrings.length \u003d\u003d 1;","lastModifiedDate":"2022-02-08"},{"lineNumber":72,"author":{"gitId":"takufunkai"},"content":"        String specifiedCommand \u003d inputStrings[0];","lastModifiedDate":"2022-02-08"},{"lineNumber":73,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":74,"author":{"gitId":"takufunkai"},"content":"        CommandNames command;","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"takufunkai"},"content":"            command \u003d CommandNames.valueOf(specifiedCommand.toUpperCase(Locale.ROOT));","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"takufunkai"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":78,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"I don\u0027t know what \" + specifiedCommand + \" means.\");","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":80,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":81,"author":{"gitId":"takufunkai"},"content":"        switch (command) {","lastModifiedDate":"2022-02-08"},{"lineNumber":82,"author":{"gitId":"takufunkai"},"content":"        case BYE:","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"takufunkai"},"content":"            return new ByeCommand();","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"takufunkai"},"content":"        case LIST:","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied || inputStrings[1].isBlank()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":86,"author":{"gitId":"takufunkai"},"content":"                return new ListCommand();","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":89,"author":{"gitId":"takufunkai"},"content":"            String[] listCommandArguments \u003d inputStrings[1].split(\" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":90,"author":{"gitId":"takufunkai"},"content":"            if (listCommandArguments.length \u003d\u003d 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":91,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Insufficient parameters supplied!\");","lastModifiedDate":"2022-02-08"},{"lineNumber":92,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":93,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":94,"author":{"gitId":"takufunkai"},"content":"            String delimiter \u003d listCommandArguments[0];","lastModifiedDate":"2022-02-08"},{"lineNumber":95,"author":{"gitId":"takufunkai"},"content":"            if (!delimiter.equalsIgnoreCase(\"/date\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":96,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Unknown parameter supplied to list command.\");","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":99,"author":{"gitId":"takufunkai"},"content":"            try {","lastModifiedDate":"2022-01-28"},{"lineNumber":100,"author":{"gitId":"takufunkai"},"content":"                LocalDateTime filterDate \u003d Utils.parseToLocalDateTime(listCommandArguments[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":101,"author":{"gitId":"takufunkai"},"content":"                return new ListCommand(filterDate);","lastModifiedDate":"2022-01-28"},{"lineNumber":102,"author":{"gitId":"takufunkai"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":103,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(String.format(\"Failed to parse date %s. \"","lastModifiedDate":"2022-01-31"},{"lineNumber":104,"author":{"gitId":"takufunkai"},"content":"                        + \"Please ensure it is of the following format: \"","lastModifiedDate":"2022-01-31"},{"lineNumber":105,"author":{"gitId":"takufunkai"},"content":"                        + DATE_FORMAT + \" \" + TIME_FORMAT, listCommandArguments[1]));","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"takufunkai"},"content":"        case FIND:","lastModifiedDate":"2022-01-28"},{"lineNumber":108,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied || inputStrings[1].isBlank()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":109,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Please indicate a valid word to match the task names.\");","lastModifiedDate":"2022-01-28"},{"lineNumber":110,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":111,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":112,"author":{"gitId":"takufunkai"},"content":"            return new FindCommand(inputStrings[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":113,"author":{"gitId":"takufunkai"},"content":"        case MARK:","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":115,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Please indicate a task item number to mark\");","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":118,"author":{"gitId":"takufunkai"},"content":"            int taskNumber;","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"takufunkai"},"content":"            try {","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"takufunkai"},"content":"                taskNumber \u003d Integer.parseInt(inputStrings[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":121,"author":{"gitId":"takufunkai"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Your tasks are identified by numbers! \"","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"takufunkai"},"content":"                        + \"Please input a valid number.\");","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":125,"author":{"gitId":"takufunkai"},"content":"            if (taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Are you trying to be funny?\");","lastModifiedDate":"2022-01-27"},{"lineNumber":127,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":129,"author":{"gitId":"takufunkai"},"content":"            return new MarkCommand(taskNumber);","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"takufunkai"},"content":"        case UNMARK:","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":132,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Please indicate a task item number to unmark\");","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":135,"author":{"gitId":"takufunkai"},"content":"            try {","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"takufunkai"},"content":"                taskNumber \u003d Integer.parseInt(inputStrings[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":137,"author":{"gitId":"takufunkai"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Your tasks are identified by numbers! \"","lastModifiedDate":"2022-01-31"},{"lineNumber":139,"author":{"gitId":"takufunkai"},"content":"                        + \"Please input a valid number.\");","lastModifiedDate":"2022-01-31"},{"lineNumber":140,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"takufunkai"},"content":"            if (taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Are you trying to be funny?\");","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":145,"author":{"gitId":"takufunkai"},"content":"            return new UnmarkCommand(taskNumber);","lastModifiedDate":"2022-01-27"},{"lineNumber":146,"author":{"gitId":"takufunkai"},"content":"        case DELETE:","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":148,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Please indicate a task item number to delete\");","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":151,"author":{"gitId":"takufunkai"},"content":"            try {","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"takufunkai"},"content":"                taskNumber \u003d Integer.parseInt(inputStrings[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":153,"author":{"gitId":"takufunkai"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":154,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Your tasks are identified by numbers! \"","lastModifiedDate":"2022-01-31"},{"lineNumber":155,"author":{"gitId":"takufunkai"},"content":"                        + \"Please input a valid number.\");","lastModifiedDate":"2022-01-31"},{"lineNumber":156,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"takufunkai"},"content":"            if (taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Are you trying to be funny?\");","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":160,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":161,"author":{"gitId":"takufunkai"},"content":"            return new DeleteCommand(taskNumber);","lastModifiedDate":"2022-01-27"},{"lineNumber":162,"author":{"gitId":"takufunkai"},"content":"        case TODO:","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":164,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"ToDo items must have a description.\");","lastModifiedDate":"2022-01-27"},{"lineNumber":165,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":167,"author":{"gitId":"takufunkai"},"content":"            String todoTaskName \u003d inputStrings[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":168,"author":{"gitId":"takufunkai"},"content":"            return new ToDoCommand(todoTaskName);","lastModifiedDate":"2022-02-08"},{"lineNumber":169,"author":{"gitId":"takufunkai"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-27"},{"lineNumber":170,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":171,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Deadline items must have a description and due date.\\n\");","lastModifiedDate":"2022-01-27"},{"lineNumber":172,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":173,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":174,"author":{"gitId":"takufunkai"},"content":"            String[] delimitedDeadlineArguments \u003d inputStrings[1].split(\" /by \");","lastModifiedDate":"2022-02-08"},{"lineNumber":175,"author":{"gitId":"takufunkai"},"content":"            if (delimitedDeadlineArguments.length !\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":176,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Deadline items must have a description and due date.\\n\");","lastModifiedDate":"2022-01-27"},{"lineNumber":177,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":178,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":179,"author":{"gitId":"takufunkai"},"content":"            String deadlineTaskName \u003d delimitedDeadlineArguments[0];","lastModifiedDate":"2022-02-08"},{"lineNumber":180,"author":{"gitId":"takufunkai"},"content":"            String deadlineDate \u003d delimitedDeadlineArguments[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":181,"author":{"gitId":"takufunkai"},"content":"            return new DeadlineCommand(deadlineTaskName, deadlineDate);","lastModifiedDate":"2022-02-08"},{"lineNumber":182,"author":{"gitId":"takufunkai"},"content":"        case EVENT:","lastModifiedDate":"2022-01-27"},{"lineNumber":183,"author":{"gitId":"takufunkai"},"content":"            if (noArgumentsSupplied) {","lastModifiedDate":"2022-02-08"},{"lineNumber":184,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Event items must have a description and date.\\n\");","lastModifiedDate":"2022-01-27"},{"lineNumber":185,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":186,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":187,"author":{"gitId":"takufunkai"},"content":"            String[] delimitedEventArguments \u003d inputStrings[1].split(\" /at \");","lastModifiedDate":"2022-02-08"},{"lineNumber":188,"author":{"gitId":"takufunkai"},"content":"            if (delimitedEventArguments.length !\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":189,"author":{"gitId":"takufunkai"},"content":"                throw new DukeException(\"Event items must have a description and date.\\n\");","lastModifiedDate":"2022-01-27"},{"lineNumber":190,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":191,"author":{"gitId":"takufunkai"},"content":"            String eventTaskName \u003d delimitedEventArguments[0];","lastModifiedDate":"2022-02-08"},{"lineNumber":192,"author":{"gitId":"takufunkai"},"content":"            String eventDate \u003d delimitedEventArguments[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":193,"author":{"gitId":"takufunkai"},"content":"            return new EventCommand(eventTaskName, eventDate);","lastModifiedDate":"2022-02-08"},{"lineNumber":194,"author":{"gitId":"takufunkai"},"content":"        default:","lastModifiedDate":"2022-01-27"},{"lineNumber":195,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"Unknown command.\");","lastModifiedDate":"2022-01-27"},{"lineNumber":196,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":197,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":198,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":198}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.Deadline;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTaskException;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * DeadlineCommand handles the necessary arguments for the successful creation of a \u003ccode\u003eDeadline\u003c/code\u003e task object","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * and appends it to the existing task list. It receives 2 mandatory arguments, \u003ccode\u003edescription\u003c/code\u003e and","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003edeadlineDateTime\u003c/code\u003e, which are required in the creation of a Deadline task object.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    private final String description;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    private final String deadlineDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     * Creates a new DeadlineCommand with the necessary, validated arguments.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     * @param description      The description of the Deadline task.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     * @param deadlineDateTime The due-date for the Deadline task.","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    public DeadlineCommand(String description, String deadlineDateTime) {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"        this.deadlineDateTime \u003d deadlineDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     * Creates a new Deadline task object, and adds it to the current task list being maintained by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     * Adds the task to the SaveHandler.","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if Deadline object was unsuccessfully created.","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"            UserTask task \u003d new Deadline(description, deadlineDateTime);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"            taskList.addTask(task);","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"            saveHandler.save(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"            return \"Added task #\" + (taskList.getTasksCount()) + \": \" + task + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"        } catch (UserTaskException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"Failed to create new deadline item: \" + e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":50}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * DeleteCommand handles the deletion of the given task at the specified index. It contains the argument","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eindex\u003c/code\u003e, which is the index of the task that the user wants to delete.","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * DeleteCommand will check if the target index exists before attempting to delete.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    private final int index;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"     * Stores the necessary argument for the delete operation.","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     * @param index The index of the item that the user wants to delete.","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * Deletes the task from the list of tasks given by \u003ccode\u003eDuke\u003c/code\u003e. If the index does not yet exist,","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     * \u003ccode\u003eexecute\u003c/code\u003e will return an error, stating that the index does not exist.","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * Removes the item from the list of saved items.","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the index does not exist, i.e. it exceeds the current size of the TaskList.","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        if (index \u003e taskList.getTasksCount()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"The task you are attempting to delete does not exist\");","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        UserTask delTask \u003d taskList.deleteTask(index);","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"        saveHandler.remove(delTask);","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"        return \"Alright! Getting rid of the following task: \\n\" + delTask + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":44}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.Event;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTaskException;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * EventCommand handles the necessary arguments for the successful creation of an \u003ccode\u003eEvent\u003c/code\u003e task object","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * and appends it to the existing task list. It receives 2 mandatory arguments, \u003ccode\u003edescription\u003c/code\u003e and","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eeventDateTime\u003c/code\u003e, which are required in the creation of an Event task object.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    private final String description;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    private final String eventDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     * Creates a new EventCommand with the necessary, validated arguments.","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     * @param description   The description of the Event.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     * @param eventDateTime The occurrence-date for the Event.","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    public EventCommand(String description, String eventDateTime) {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"        this.eventDateTime \u003d eventDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     * Creates a new Event task object, and adds it to the current task list being maintained by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     * Adds the task to the saveHandler.","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if Event object was unsuccessfully created.","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"            UserTask task \u003d new Event(description, eventDateTime);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"            taskList.addTask(task);","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"            saveHandler.save(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"            return \"Added task #\" + (taskList.getTasksCount()) + \": \" + task + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"        } catch (UserTaskException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"Failed to create new event item: \" + e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":49}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * FindCommand handles the necessary arguments for a filter operation on the TaskList, specifically a filter on the","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * names of the TaskList items. It receives 2 mandatory arguments, \u003ccode\u003edescription\u003c/code\u003e and","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * \u003ccode\u003eeventDateTime\u003c/code\u003e, which are required in the creation of an Event task object.","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    private final String search;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"     * Stores the necessary argument for the search operation.","lastModifiedDate":"2022-02-08"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     * @param search The search query that is to be matched against.","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    public FindCommand(String search) {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        this.search \u003d search;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * Searches for and returns items which name matches the {@code search} parameter supplied by the user.","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the filter did not succeed.","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        TaskList filteredTaskList \u003d taskList.filterByName(this.search);","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"        ListCommand lc \u003d new ListCommand();","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"        lc.changeListMessage(\"Alright, here are your matching tasks: \");","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        return lc.execute(filteredTaskList, saveHandler);","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"takufunkai":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import java.util.List;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * ListCommand handles outputting the entire list of tasks that a user has at the current point in time.","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" * It has an optional argument field \u003ccode\u003edateFilter\u003c/code\u003e, which will filter the list of tasks to output","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":" * based on whether they 1. have a \u003ccode\u003edateTime\u003c/code\u003e field, and 2. the date of the field is equal to the specified","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":" * dateFilter supplied by the user. \u003cb\u003eNote:\u003c/b\u003e time is irrelevant here, and filter works solely based on date.","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    private LocalDateTime dateFilter \u003d null;","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"    private String listMessage \u003d \"Alright, here are your tasks.\";","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     * Creates a ListCommand object that has no specified dateFilter.","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    public ListCommand() {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * Creates a ListCommand object that has some specified dateFilter.","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     * @param date The date that tasks should be filtered based on.","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public ListCommand(LocalDateTime date) {","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        this.dateFilter \u003d date;","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"        this.listMessage \u003d listMessage + \"for the date: \" + date.toString();","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    public void changeListMessage(String message) {","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        this.listMessage \u003d message;","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"     * Prints out all the tasks that the user has logged so far in a neat table format. Metadata (the total tasks)","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"     * are printed out at the top of the table. If this object has some \u003ccode\u003edateFilter\u003c/code\u003e, the tasks outputted","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"     * will be filtered based on the dateFilter supplied.","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the filter did not succeed.","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"        List\u003cString\u003e listItems;","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"        if (this.dateFilter \u003d\u003d null) {","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"            listItems \u003d Arrays.asList(taskList.toString().split(\"\\n\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"        } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"            TaskList filteredTaskList \u003d taskList.filterByDate(dateFilter);","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"            listItems \u003d Arrays.asList(filteredTaskList.toString().split(\"\\n\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"        sb.append(this.listMessage)","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"                .append(\"\\n----------\\nTOTAL: \")","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"                .append(taskList.getTasksCount() \u003d\u003d 0 ? \"0\" : listItems.size())","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"                .append(\" tasks\\n----------\\n\");","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"        listItems.forEach((item) -\u003e sb.append(item).append(\"\\n\"));","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"        return sb.toString();","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":68}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * MarkCommand handles the marking of some task as done. It receives a required argument, index, which is the","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * index of the task that the user wishes to mark as done.","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    private final int index;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"     * Creates a MarkCommand object with the specified index argument.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"     * @param index The index of the task that the user wishes to mark as done.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     * Marks the task from the list of tasks given by \u003ccode\u003eDuke\u003c/code\u003e as done. If the index does not yet exist,","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * \u003ccode\u003eexecute\u003c/code\u003e will return an error, stating that the index does not exist.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the index does not exist, i.e. it exceeds the current size of the TaskList.","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        if (index \u003e taskList.getTasksCount()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"The task you are attempting to mark does not exist\");","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        UserTask task \u003d taskList.markTask(index);","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"        saveHandler.update(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        return \"Good job! Let\u0027s keep it going, this spaceship needs you!\\n\" + task + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":41}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.ToDo;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * ToDoCommand handles the necessary arguments for the successful creation of a \u003ccode\u003eToDo\u003c/code\u003e task object","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * and appends it to the existing task list. It receives 1 mandatory argument, \u003ccode\u003edescription\u003c/code\u003e,","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * which is required in the creation of a ToDo task object.","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    private final String description;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"     * Creates a new ToDoCommand with the necessary, validated argument.","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    public ToDoCommand(String description) {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * Creates a new ToDo task object, and adds it to the current task list being maintained by \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     * Adds the item to the saveHandler.","lastModifiedDate":"2022-02-08"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) {","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        UserTask task \u003d new ToDo(description);","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"        taskList.addTask(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"        saveHandler.save(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        return \"Added task #\" + (taskList.getTasksCount()) + \": \" + task + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"takufunkai":39}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import duke.storage.SaveHandler;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * UnmarkCommand handles the marking of some task as not done. It receives a required argument, index, which is the","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * index of the task that the user wishes to mark as undone.","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    private final int index;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"     * Creates an UnmarkCommand object with the specified index argument.","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"     * @param index The index of the task that the user wishes to mark as not done.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     * Marks the task from the list of tasks given by \u003ccode\u003eDuke\u003c/code\u003e as undone. If the index does not yet exist,","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * \u003ccode\u003eexecute\u003c/code\u003e will return an error, stating that the index does not exist.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e of the current user.","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * @param saveHandler The SaveHandler used by Duke.","lastModifiedDate":"2022-02-08"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the index does not exist, i.e. it exceeds the current size of the TaskList.","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public String execute(TaskList taskList, SaveHandler saveHandler) throws DukeException {","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        if (index \u003e taskList.getTasksCount()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"The task you are attempting to unmark does not exist\");","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        UserTask task \u003d taskList.unmarkTask(index);","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"        saveHandler.update(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        return \"I thought you were done with it?\\n\" + task + \"\\n\";","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":41}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.gui;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        double imgCenter \u003d displayPicture.getFitHeight() / 2;","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"        displayPicture.setClip(new Circle(imgCenter, imgCenter, imgCenter));","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"    private void flip() {","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"        dialog.setAlignment(Pos.BASELINE_LEFT);","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"        db.flip();","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"        return db;","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"takufunkai":64}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.gui;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/red_default.png\"));","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        MainWindow mw \u003d new MainWindow(stage);","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"        Scene scene \u003d new Scene(mw);","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"        stage.setScene(scene);","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        mw.setDuke(duke);","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"        stage.show();","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"        stage.getIcons().add(dukeImage);","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"takufunkai":28}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.gui;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.util.Objects;","lastModifiedDate":"2022-02-08"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    private Stage stage;","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    private final Image dukeImage \u003d new Image(","lastModifiedDate":"2022-02-08"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/red_default.png\"))","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"    );","lastModifiedDate":"2022-02-08"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"    private final Image dukeImageError \u003d new Image(","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/red_shocked.png\"))","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"    );","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"    private final Image userImage \u003d new Image(","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/user.png\"))","lastModifiedDate":"2022-02-08"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"    );","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"    private final Image exitImage \u003d new Image(","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/exit_image.jpg\"))","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"    );","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"     * MainWindow is the window in which all Duke related GUI will exist and operate.","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"     * @param stage The stage in which all the Duke related GUI will be set from.","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"    public MainWindow(Stage stage) {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"            this.stage \u003d stage;","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"takufunkai"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"takufunkai"},"content":"        sendOutput(d.getGreeting());","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"takufunkai"},"content":"    private void sendOutput(String out) {","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"takufunkai"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(out, dukeImage));","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"takufunkai"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"takufunkai"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"takufunkai"},"content":"    @FXML","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"takufunkai"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"takufunkai"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"takufunkai"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":84,"author":{"gitId":"takufunkai"},"content":"            return;","lastModifiedDate":"2022-02-08"},{"lineNumber":85,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":86,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":87,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"takufunkai"},"content":"            String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"takufunkai"},"content":"            if (response.equals(\"EXIT\")) {","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"takufunkai"},"content":"                handleExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"takufunkai"},"content":"                userInput.clear();","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"takufunkai"},"content":"                return;","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"takufunkai"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"takufunkai"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"takufunkai"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"takufunkai"},"content":"            );","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"takufunkai"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"takufunkai"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"takufunkai"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"takufunkai"},"content":"                    DialogBox.getDukeDialog(\"Oops: \" + e.getMessage(), dukeImageError)","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"takufunkai"},"content":"            );","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"takufunkai"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"takufunkai"},"content":"    private void handleExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"takufunkai"},"content":"        ImageView iv \u003d new ImageView(exitImage);","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"takufunkai"},"content":"        iv.setFitHeight(200);","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"takufunkai"},"content":"        iv.setFitWidth(200);","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"takufunkai"},"content":"        dialogContainer.getChildren().add(iv);","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":114,"author":{"gitId":"takufunkai"},"content":"        userInput.setDisable(true);","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"takufunkai"},"content":"        sendButton.setText(\"Exit\");","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"takufunkai"},"content":"        sendButton.setOnAction(event -\u003e stage.close());","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"takufunkai":118}},{"path":"src/main/java/duke/storage/SaveHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.io.File;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2022-02-08"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-08"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-08"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-08"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"import java.util.List;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.Deadline;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.DukeSavable;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.Event;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.ToDo;","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"import duke.usertask.UserTaskException;","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":" * SaveHandler is the class that handles all storage-related information and methods of the Duke chat-bot.","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":" * A SaveHandler object encapsulates the necessary information for storing and restoring of the user\u0027s saved tasks.","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":" * This includes the directory which is being used as the storage, and some Enums being used to parse","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":" * the saved strings.","lastModifiedDate":"2022-01-28"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"public class SaveHandler {","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    private static final String DATA_DIRECTORY \u003d \"data\";","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    private static final String DATA_FILEPATH \u003d DATA_DIRECTORY + \"/duke.txt\";","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    enum TaskCode {","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"        T, D, E","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     * Creates a new SaveHandler object which is able to save and restore tasks to a pre-defined location.","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"     * SaveHandler attempts to create the necessary directories and files without explicitly checking if they","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"     * already exist. Since creating existing directories and files only fails silently, there is no explicit checks","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"     * done.","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"     * @throws IOException Thrown if the creation/opening of the files and directories failed.","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"    public SaveHandler() throws IOException {","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"        File dir \u003d new File(DATA_DIRECTORY);","lastModifiedDate":"2022-01-26"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"        if (dir.mkdirs()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Save file directory already exists.\");","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"        } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Creating a file directory for save file now.\");","lastModifiedDate":"2022-02-08"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"        File f \u003d new File(DATA_FILEPATH);","lastModifiedDate":"2022-01-26"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"        if (f.createNewFile()) {","lastModifiedDate":"2022-02-08"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Save file already exists.\");","lastModifiedDate":"2022-02-08"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"        } else {","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Creating a save file now.\");","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"        assert f.exists() : \"Data save file does not exist.\";","lastModifiedDate":"2022-02-08"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"     * Saves the list of tasks specified to the storage. The existing storage data is overwritten.","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"     * @param tasks List of tasks to save.","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"    public void saveAndOverwrite(TaskList tasks) {","lastModifiedDate":"2022-02-08"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":68,"author":{"gitId":"takufunkai"},"content":"            FileWriter fw \u003d new FileWriter(DATA_FILEPATH);","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"takufunkai"},"content":"            fw.write(tasks.toDukeSaveFormat());","lastModifiedDate":"2022-02-08"},{"lineNumber":70,"author":{"gitId":"takufunkai"},"content":"            fw.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Failed to save data: \" + e.getMessage());","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"takufunkai"},"content":"     * Saves the list of tasks specified to the storage. The existing storage data is overwritten.","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"takufunkai"},"content":"     * @param tasks List of tasks to save.","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"takufunkai"},"content":"    public void save(DukeSavable ...tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"takufunkai"},"content":"            FileWriter fw \u003d new FileWriter(DATA_FILEPATH);","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"takufunkai"},"content":"            for (DukeSavable t : tasks) {","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"takufunkai"},"content":"                fw.append(t.toDukeSaveFormat());","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"takufunkai"},"content":"            fw.close();","lastModifiedDate":"2022-01-26"},{"lineNumber":88,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-26"},{"lineNumber":89,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Failed to save data: \" + e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":92,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":94,"author":{"gitId":"takufunkai"},"content":"     * Removes the item with saveId from the list of saved items in the data file.","lastModifiedDate":"2022-02-08"},{"lineNumber":95,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":96,"author":{"gitId":"takufunkai"},"content":"     * @param task The task to be removed.","lastModifiedDate":"2022-02-08"},{"lineNumber":97,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":98,"author":{"gitId":"takufunkai"},"content":"    public void remove(UserTask task) {","lastModifiedDate":"2022-02-08"},{"lineNumber":99,"author":{"gitId":"takufunkai"},"content":"        String taskSaveFormat \u003d task.toDukeSaveFormat();","lastModifiedDate":"2022-02-08"},{"lineNumber":100,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":101,"author":{"gitId":"takufunkai"},"content":"            List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2022-02-08"},{"lineNumber":102,"author":{"gitId":"takufunkai"},"content":"                    Files.readAllLines(Path.of(DATA_FILEPATH), StandardCharsets.UTF_8)","lastModifiedDate":"2022-02-08"},{"lineNumber":103,"author":{"gitId":"takufunkai"},"content":"            );","lastModifiedDate":"2022-02-08"},{"lineNumber":104,"author":{"gitId":"takufunkai"},"content":"            for (int i \u003d 0; i \u003c fileContent.size(); i++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":105,"author":{"gitId":"takufunkai"},"content":"                if (fileContent.get(i).equals(taskSaveFormat)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"takufunkai"},"content":"                    fileContent.remove(i);","lastModifiedDate":"2022-02-08"},{"lineNumber":107,"author":{"gitId":"takufunkai"},"content":"                    break;","lastModifiedDate":"2022-02-08"},{"lineNumber":108,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-02-08"},{"lineNumber":109,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":110,"author":{"gitId":"takufunkai"},"content":"            Files.write(Path.of(DATA_FILEPATH), fileContent, StandardCharsets.UTF_8);","lastModifiedDate":"2022-02-08"},{"lineNumber":111,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":112,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Unable to remove task: \" + e.getMessage());","lastModifiedDate":"2022-02-08"},{"lineNumber":113,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":114,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":115,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":116,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":117,"author":{"gitId":"takufunkai"},"content":"     * Updates the item in the list of saved items in the data file.","lastModifiedDate":"2022-02-08"},{"lineNumber":118,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":119,"author":{"gitId":"takufunkai"},"content":"     * @param updatedSave The task after it was updated.","lastModifiedDate":"2022-02-08"},{"lineNumber":120,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":121,"author":{"gitId":"takufunkai"},"content":"    public void update(UserTask updatedSave) {","lastModifiedDate":"2022-02-08"},{"lineNumber":122,"author":{"gitId":"takufunkai"},"content":"        int saveId \u003d Integer.parseInt(updatedSave.toDukeSaveFormat().split(\"\\\\|\")[0]);","lastModifiedDate":"2022-02-08"},{"lineNumber":123,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-02-08"},{"lineNumber":124,"author":{"gitId":"takufunkai"},"content":"            List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(","lastModifiedDate":"2022-02-08"},{"lineNumber":125,"author":{"gitId":"takufunkai"},"content":"                    Files.readAllLines(Path.of(DATA_FILEPATH), StandardCharsets.UTF_8)","lastModifiedDate":"2022-02-08"},{"lineNumber":126,"author":{"gitId":"takufunkai"},"content":"            );","lastModifiedDate":"2022-02-08"},{"lineNumber":127,"author":{"gitId":"takufunkai"},"content":"            for (int i \u003d 0; i \u003c fileContent.size(); i++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":128,"author":{"gitId":"takufunkai"},"content":"                int currSaveId \u003d Integer.parseInt(fileContent.get(i).split(\"\\\\|\")[0]);","lastModifiedDate":"2022-02-08"},{"lineNumber":129,"author":{"gitId":"takufunkai"},"content":"                if (currSaveId \u003d\u003d saveId) {","lastModifiedDate":"2022-02-08"},{"lineNumber":130,"author":{"gitId":"takufunkai"},"content":"                    fileContent.set(i, updatedSave.toDukeSaveFormat());","lastModifiedDate":"2022-02-08"},{"lineNumber":131,"author":{"gitId":"takufunkai"},"content":"                    break;","lastModifiedDate":"2022-02-08"},{"lineNumber":132,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-02-08"},{"lineNumber":133,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-02-08"},{"lineNumber":134,"author":{"gitId":"takufunkai"},"content":"            Files.write(Path.of(DATA_FILEPATH), fileContent, StandardCharsets.UTF_8);","lastModifiedDate":"2022-02-08"},{"lineNumber":135,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":136,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Unable to update task: \" + e.getMessage());","lastModifiedDate":"2022-02-08"},{"lineNumber":137,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":138,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":139,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":140,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":141,"author":{"gitId":"takufunkai"},"content":"     * Restores the list of tasks saved on a previous execution of the Duke chat-bot into a \u003ccode\u003eTaskList\u003c/code\u003e","lastModifiedDate":"2022-01-28"},{"lineNumber":142,"author":{"gitId":"takufunkai"},"content":"     * object.","lastModifiedDate":"2022-01-28"},{"lineNumber":143,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":144,"author":{"gitId":"takufunkai"},"content":"     * @param emptyTasks The \u003ccode\u003eTaskList\u003c/code\u003e object being maintained by Duke.","lastModifiedDate":"2022-01-28"},{"lineNumber":145,"author":{"gitId":"takufunkai"},"content":"     * @throws DukeException Thrown if the restoration failed.","lastModifiedDate":"2022-01-28"},{"lineNumber":146,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":147,"author":{"gitId":"takufunkai"},"content":"    public void restore(TaskList emptyTasks) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"takufunkai"},"content":"        assert emptyTasks.getTasksCount() \u003d\u003d 0 : \"TaskList given to restore should be empty\";","lastModifiedDate":"2022-02-08"},{"lineNumber":149,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":150,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-26"},{"lineNumber":151,"author":{"gitId":"takufunkai"},"content":"            File saveFile \u003d new File(DATA_FILEPATH);","lastModifiedDate":"2022-01-26"},{"lineNumber":152,"author":{"gitId":"takufunkai"},"content":"            Scanner sc \u003d new Scanner(saveFile);","lastModifiedDate":"2022-01-26"},{"lineNumber":153,"author":{"gitId":"takufunkai"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-01-26"},{"lineNumber":154,"author":{"gitId":"takufunkai"},"content":"                String savedTask \u003d sc.nextLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":155,"author":{"gitId":"takufunkai"},"content":"                String[] savedTaskData \u003d savedTask.split(\"\\\\|\");","lastModifiedDate":"2022-02-08"},{"lineNumber":156,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":157,"author":{"gitId":"takufunkai"},"content":"                if (savedTaskData.length \u003c 4) {","lastModifiedDate":"2022-02-08"},{"lineNumber":158,"author":{"gitId":"takufunkai"},"content":"                    throw new DukeException(\"Saved item has incorrect format\");","lastModifiedDate":"2022-01-26"},{"lineNumber":159,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":160,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":161,"author":{"gitId":"takufunkai"},"content":"                TaskCode code \u003d TaskCode.valueOf(savedTaskData[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":162,"author":{"gitId":"takufunkai"},"content":"                boolean isDone \u003d savedTaskData[2].equals(\"1\");","lastModifiedDate":"2022-02-08"},{"lineNumber":163,"author":{"gitId":"takufunkai"},"content":"                String taskName \u003d savedTaskData[3];","lastModifiedDate":"2022-02-08"},{"lineNumber":164,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":165,"author":{"gitId":"takufunkai"},"content":"                UserTask newTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":166,"author":{"gitId":"takufunkai"},"content":"                try {","lastModifiedDate":"2022-01-27"},{"lineNumber":167,"author":{"gitId":"takufunkai"},"content":"                    switch (code) {","lastModifiedDate":"2022-01-26"},{"lineNumber":168,"author":{"gitId":"takufunkai"},"content":"                    case T:","lastModifiedDate":"2022-01-26"},{"lineNumber":169,"author":{"gitId":"takufunkai"},"content":"                        newTask \u003d new ToDo(taskName);","lastModifiedDate":"2022-01-31"},{"lineNumber":170,"author":{"gitId":"takufunkai"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":171,"author":{"gitId":"takufunkai"},"content":"                    case D:","lastModifiedDate":"2022-01-26"},{"lineNumber":172,"author":{"gitId":"takufunkai"},"content":"                        String date \u003d savedTaskData[4];","lastModifiedDate":"2022-02-08"},{"lineNumber":173,"author":{"gitId":"takufunkai"},"content":"                        newTask \u003d new Deadline(taskName, date);","lastModifiedDate":"2022-02-08"},{"lineNumber":174,"author":{"gitId":"takufunkai"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":175,"author":{"gitId":"takufunkai"},"content":"                    case E:","lastModifiedDate":"2022-01-26"},{"lineNumber":176,"author":{"gitId":"takufunkai"},"content":"                        date \u003d savedTaskData[4];","lastModifiedDate":"2022-02-08"},{"lineNumber":177,"author":{"gitId":"takufunkai"},"content":"                        newTask \u003d new Event(taskName, date);","lastModifiedDate":"2022-02-08"},{"lineNumber":178,"author":{"gitId":"takufunkai"},"content":"                        break;","lastModifiedDate":"2022-01-26"},{"lineNumber":179,"author":{"gitId":"takufunkai"},"content":"                    default:","lastModifiedDate":"2022-01-26"},{"lineNumber":180,"author":{"gitId":"takufunkai"},"content":"                        throw new DukeException(\"Unknown task type for saved item.\");","lastModifiedDate":"2022-01-26"},{"lineNumber":181,"author":{"gitId":"takufunkai"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":182,"author":{"gitId":"takufunkai"},"content":"                } catch (UserTaskException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":183,"author":{"gitId":"takufunkai"},"content":"                    throw new DukeException(\"Failed to restore save file: \" + e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":184,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-01-27"},{"lineNumber":185,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":186,"author":{"gitId":"takufunkai"},"content":"                if (isDone) {","lastModifiedDate":"2022-01-31"},{"lineNumber":187,"author":{"gitId":"takufunkai"},"content":"                    newTask.setDone();","lastModifiedDate":"2022-01-31"},{"lineNumber":188,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-01-31"},{"lineNumber":189,"author":{"gitId":"takufunkai"},"content":"                emptyTasks.addTask(newTask);","lastModifiedDate":"2022-01-31"},{"lineNumber":190,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":191,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":192,"author":{"gitId":"takufunkai"},"content":"            // Clear the existing data file and update it with updated saveId-tasks.","lastModifiedDate":"2022-02-08"},{"lineNumber":193,"author":{"gitId":"takufunkai"},"content":"            saveAndOverwrite(emptyTasks);","lastModifiedDate":"2022-02-08"},{"lineNumber":194,"author":{"gitId":"takufunkai"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":195,"author":{"gitId":"takufunkai"},"content":"            System.out.println(\"Failed to load save-file: \" + e.getMessage());","lastModifiedDate":"2022-01-26"},{"lineNumber":196,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":197,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":198,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"takufunkai":198}},{"path":"src/main/java/duke/usertask/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":" * The Deadline class encapsulates a task that has a deadline.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"public class Deadline extends UserTaskWithTime {","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"     * Constructs a new Deadline object.","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"     * @param name The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"     * @param dateTime The deadline of the task in the proper dateTime format.","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"     * @throws UserTaskException If the specified dateTime is not in the correct format that the chat-bot understands.","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    public Deadline(String name, String dateTime) throws UserTaskException {","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"        super(name, dateTime);","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     * Supplies \"D\" to the parent string\u0027s unformatted string, to complete the DukeSaveFormat string.","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"        return String.format(super.toDukeSaveFormat(), \"D\");","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * Supplies the correct Deadline-specific information to the display string.","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"        return String.format(super.toString(), \"[D]\", \"by\");","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"takufunkai":35}},{"path":"src/main/java/duke/usertask/DukeSavable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"public interface DukeSavable {","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"    String toDukeSaveFormat();","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"takufunkai":5}},{"path":"src/main/java/duke/usertask/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":" * The Deadline class encapsulates a task that has a deadline.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"public class Event extends UserTaskWithTime {","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"     * Constructs a new Event object.","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"     * @param name The name of the Event task.","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"     * @param dateTime The dateTime of the occurrence of the Event in string format.","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"     * @throws UserTaskException If the specified dateTime is not in the correct format that the chat-bot understands.","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    public Event(String name, String dateTime) throws UserTaskException {","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"        super(name, dateTime);","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"     * Supplies \"E\" to the parent string\u0027s unformatted string, to complete the DukeSaveFormat string.","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"        return String.format(super.toDukeSaveFormat(), \"E\");","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"     * Supplies the correct Event-specific information to the display string.","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"        return String.format(super.toString(), \"[E]\", \"at\");","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"takufunkai":35}},{"path":"src/main/java/duke/usertask/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import java.util.List;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"import duke.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * The TaskList class encapsulates the list of tasks that the chat-bot has to maintain, and which are saved from","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * the user. It includes the necessary information, which is a \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eUserTask\u003c/code\u003es, and also","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" * the methods that are required to perform CRUD actions on the tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":" * UserTasks stored in the List object are 1-indexed -- index 0 of \u003ccode\u003etasks\u003c/code\u003e is null.","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"public class TaskList implements DukeSavable {","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    private final List\u003cUserTask\u003e tasks;","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"     * Constructs the TaskList object, and initializes a List containing UserTasks of size","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     * \u003ccode\u003einitialCapacity\u003c/code\u003e.","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     * @param initialCapacity The initial capacity of the list of UserTasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    public TaskList(int initialCapacity) {","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(initialCapacity + 1);","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"        this.tasks.add(null); // Index 0 is empty","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     *  Removes task from the List, which index is equal to the specified number.","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     * @param number The index of the task to be removed.","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"     * @return The deleted UserTask.","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"    public UserTask deleteTask(int number) {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"        return this.tasks.remove(number);","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"     * Returns the total number of UserTasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"     * @return The total number of UserTasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"    public int getTasksCount() {","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"        return tasks.size() - 1; // Account for empty index 0","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"     * Marks the task at the specified index as done.","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"     * @param number The index of the task to be marked.","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"     * @return The UserTask that has been marked.","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"    public UserTask markTask(int number) {","lastModifiedDate":"2022-01-26"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"        UserTask targetTask \u003d this.tasks.get(number);","lastModifiedDate":"2022-01-26"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"        targetTask.setDone();","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"        return targetTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"     * Un-marks the task at the specified index as done.","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"     * @param number The index of the task to be un-marked.","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"     * @return The UserTask that has been un-marked.","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"takufunkai"},"content":"    public UserTask unmarkTask(int number) {","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"takufunkai"},"content":"        UserTask targetTask \u003d this.tasks.get(number);","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"takufunkai"},"content":"        targetTask.setUndone();","lastModifiedDate":"2022-01-26"},{"lineNumber":71,"author":{"gitId":"takufunkai"},"content":"        return targetTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":72,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":73,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":74,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"takufunkai"},"content":"     * Adds the UserTask to the list of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"takufunkai"},"content":"     * @param task The UserTask to be added to the list of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"takufunkai"},"content":"    public void addTask(UserTask task) {","lastModifiedDate":"2022-01-26"},{"lineNumber":80,"author":{"gitId":"takufunkai"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-01-26"},{"lineNumber":81,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":82,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":84,"author":{"gitId":"takufunkai"},"content":"     * Returns the TaskList with tasks whose name matches the given task-name search query.","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":86,"author":{"gitId":"takufunkai"},"content":"     * @param taskName The specified search query that will be matched against the Task\u0027s name.","lastModifiedDate":"2022-01-31"},{"lineNumber":87,"author":{"gitId":"takufunkai"},"content":"     * @return The filtered TaskList.","lastModifiedDate":"2022-01-31"},{"lineNumber":88,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":89,"author":{"gitId":"takufunkai"},"content":"    public TaskList filterByName(String taskName) {","lastModifiedDate":"2022-01-28"},{"lineNumber":90,"author":{"gitId":"takufunkai"},"content":"        TaskList filteredTaskList \u003d new TaskList(100);","lastModifiedDate":"2022-01-28"},{"lineNumber":91,"author":{"gitId":"takufunkai"},"content":"        filteredTaskList.tasks.addAll(","lastModifiedDate":"2022-01-28"},{"lineNumber":92,"author":{"gitId":"takufunkai"},"content":"                this.tasks.subList(1, tasks.size())","lastModifiedDate":"2022-01-28"},{"lineNumber":93,"author":{"gitId":"takufunkai"},"content":"                        .stream()","lastModifiedDate":"2022-01-28"},{"lineNumber":94,"author":{"gitId":"takufunkai"},"content":"                        .filter((task) -\u003e task.nameContains(taskName))","lastModifiedDate":"2022-01-28"},{"lineNumber":95,"author":{"gitId":"takufunkai"},"content":"                        .collect(Collectors.toList()));","lastModifiedDate":"2022-01-28"},{"lineNumber":96,"author":{"gitId":"takufunkai"},"content":"        return filteredTaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":97,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":98,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":99,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":100,"author":{"gitId":"takufunkai"},"content":"     * Returns the TaskList with tasks whose name matches the given task-date search query. Tasks with no","lastModifiedDate":"2022-01-31"},{"lineNumber":101,"author":{"gitId":"takufunkai"},"content":"     * time associated with it (i.e. does not inherit from class UserTaskWithTime) will not be included.","lastModifiedDate":"2022-01-31"},{"lineNumber":102,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":103,"author":{"gitId":"takufunkai"},"content":"     * @param date The specified search query that will be matched against the Task\u0027s date (if any).","lastModifiedDate":"2022-01-31"},{"lineNumber":104,"author":{"gitId":"takufunkai"},"content":"     * @return The filtered TaskList.","lastModifiedDate":"2022-01-31"},{"lineNumber":105,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":106,"author":{"gitId":"takufunkai"},"content":"    public TaskList filterByDate(LocalDateTime date) throws DukeException {","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"takufunkai"},"content":"        TaskList filteredTaskList \u003d new TaskList(100);","lastModifiedDate":"2022-01-28"},{"lineNumber":108,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"takufunkai"},"content":"            for (UserTask currTask : tasks) {","lastModifiedDate":"2022-01-28"},{"lineNumber":110,"author":{"gitId":"takufunkai"},"content":"                if (currTask instanceof UserTaskWithTime","lastModifiedDate":"2022-01-31"},{"lineNumber":111,"author":{"gitId":"takufunkai"},"content":"                        \u0026\u0026 ((UserTaskWithTime) currTask).isDated(date)) {","lastModifiedDate":"2022-01-31"},{"lineNumber":112,"author":{"gitId":"takufunkai"},"content":"                    filteredTaskList.addTask(currTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":113,"author":{"gitId":"takufunkai"},"content":"                }","lastModifiedDate":"2022-01-28"},{"lineNumber":114,"author":{"gitId":"takufunkai"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":115,"author":{"gitId":"takufunkai"},"content":"        } catch (UserTaskException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"takufunkai"},"content":"            throw new DukeException(\"Failed to get filtered tasks: \" + e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":117,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"takufunkai"},"content":"        return filteredTaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":122,"author":{"gitId":"takufunkai"},"content":"     * Returns each of the tasks in the TaskList in DukeSave format.","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"takufunkai"},"content":"     * @return A string of all the tasks in the TaskList in DukeSave format.","lastModifiedDate":"2022-01-31"},{"lineNumber":125,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":126,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":127,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-28"},{"lineNumber":128,"author":{"gitId":"takufunkai"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-01-28"},{"lineNumber":129,"author":{"gitId":"takufunkai"},"content":"        for (int i \u003d 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-28"},{"lineNumber":130,"author":{"gitId":"takufunkai"},"content":"            sb.append(tasks.get(i).toDukeSaveFormat()).append(\"\\n\");","lastModifiedDate":"2022-01-28"},{"lineNumber":131,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":132,"author":{"gitId":"takufunkai"},"content":"        return sb.toString();","lastModifiedDate":"2022-01-28"},{"lineNumber":133,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":134,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":135,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":136,"author":{"gitId":"takufunkai"},"content":"     * Returns a user-friendly indexed list of the tasks that are being stored in the TaskList.","lastModifiedDate":"2022-01-31"},{"lineNumber":137,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":138,"author":{"gitId":"takufunkai"},"content":"     * @return An indexed list of the stored tasks, and their information and states.","lastModifiedDate":"2022-01-31"},{"lineNumber":139,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":140,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":141,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-26"},{"lineNumber":142,"author":{"gitId":"takufunkai"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-01-26"},{"lineNumber":143,"author":{"gitId":"takufunkai"},"content":"        for (int i \u003d 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-26"},{"lineNumber":144,"author":{"gitId":"takufunkai"},"content":"            sb.append(i).append(\". \").append(tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2022-01-26"},{"lineNumber":145,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":146,"author":{"gitId":"takufunkai"},"content":"        return sb.toString();","lastModifiedDate":"2022-01-26"},{"lineNumber":147,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":148,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"takufunkai":148}},{"path":"src/main/java/duke/usertask/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"public class ToDo extends UserTask {","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"     * Constructs a ToDo object.","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"     * @param name The name of the ToDo task.","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"    public ToDo(String name) {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"        super(name);","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"     * Supplies \"T\" to the parent string\u0027s unformatted string, to complete the DukeSaveFormat string.","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        return String.format(super.toDukeSaveFormat(), \"T\");","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     * Supplies the correct ToDo-specific information to the display string.","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-19"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"takufunkai":30}},{"path":"src/main/java/duke/usertask/UserTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.util.Locale;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":" * The UserTask abstract class encapsulates the tasks that a user submits to the chat-bot. It maintains information","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":" * such as the name and isDone status of the task. It provides several methods to update the state of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"public abstract class UserTask implements DukeSavable {","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"    private static int saveIdSerial \u003d 0;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    private final String name;","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"    private final int saveId;","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    UserTask(String name) {","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-18"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-18"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        this.saveId \u003d saveIdSerial;","lastModifiedDate":"2022-02-08"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"        saveIdSerial++;","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     * Sets the task as done.","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"    public void setDone() {","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"     * Sets the task as undone.","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"    public void setUndone() {","lastModifiedDate":"2022-01-18"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-18"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"     * Checks if the task\u0027s name contains the given query.","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"     * @param query The specified query to be matched against.","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"     * @return True if the match is successful.","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"    public boolean nameContains(String query) {","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"        return name.toLowerCase(Locale.ROOT).contains(query.toLowerCase(Locale.ROOT));","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"     * Returns the string representation of the task in DukeSaveFormat.","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"     * @return The string representation of the task in DUkeSaveFormat.","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"        return this.saveId + \"|%s|\" + (isDone ? \"1\" : \"0\") + \"|\" + name;","lastModifiedDate":"2022-02-08"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"     * Returns the user-friendly string representation of this task.","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"     * @return Returns a string that represents this task which is user-friendly.","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + this.name;","lastModifiedDate":"2022-01-18"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"takufunkai":66}},{"path":"src/main/java/duke/usertask/UserTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":" * UserTaskException encapsulate the invalid arguments that is being supplied to UserTasks when instantiating","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":" * objects of that type.","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"public class UserTaskException extends Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"     * Constructs a UserTaskException with the respective error message.","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"     * @param errorMessage The message error that was encountered.","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    public UserTaskException(String errorMessage) {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":16}},{"path":"src/main/java/duke/usertask/UserTaskWithTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"import duke.utils.Utils;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * The UserTaskWithTime class encapsulates Tasks that have some dateTime associated with them.","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"public abstract class UserTaskWithTime extends UserTask {","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"    private static final DateTimeFormatter TO_DISPLAY_DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"            DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\");","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    UserTaskWithTime(String name, String dateTime) throws UserTaskException {","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"        super(name);","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        String[] dateTimeSplit \u003d dateTime.split(\" \");","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"            this.dateTime \u003d dateTimeSplit.length \u003e 1","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"                    ? Utils.parseToLocalDateTime(dateTimeSplit[0], dateTimeSplit[1])","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"                    : Utils.parseToLocalDateTime(dateTimeSplit[0]);","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"            throw new UserTaskException(\"Unable to parse date-time. \"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"                    + \"Please ensure it is of the following format: \"","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"                    + Utils.DATE_FORMAT + \" \" + Utils.TIME_FORMAT);","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"     * Checks if the UserTaskWithTime\u0027s associated dateTime is equal to the given date. Equality is determined by","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     * whether they fall on the same calendar date, regardless of time.","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"     * @param date The date to match this object against.","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"     * @return True if the date of this object is the same as the specified date, false if otherwise.","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     * @throws UserTaskException If the specified date is of the wrong format.","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"    public boolean isDated(LocalDateTime date) throws UserTaskException {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"            return this.dateTime.toLocalDate().isEqual(date.toLocalDate());","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"            throw new UserTaskException(\"Unable to parse date. \"","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"                    + \"Please ensure it is of the following format: \"","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"                    + Utils.DATE_FORMAT);","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"     * Adds its dateTime in string Duke savable format to the DukeSaveFormat string.","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"    public String toDukeSaveFormat() {","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"        return super.toDukeSaveFormat() + \"|\" + Utils.formatLocalDateTime(this.dateTime);","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"     * Add its current dateTime to the display string.","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"    public String toString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"        return \"%s\" + super.toString()","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"                + \" (%s: \" + Utils.formatLocalDateTime(this.dateTime, TO_DISPLAY_DATE_TIME_FORMATTER) + \")\";","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":67}},{"path":"src/main/java/duke/utils/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.utils;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"public final class Utils {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"     * The date string format of date-time objects that is understandable and savable by the chat-bot.","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    public static final String DATE_FORMAT \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"     * The time string format of date-time objects that is understandable and savable by the chat-bot.","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    public static final String TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"    private static final DateTimeFormatter COMMAND_DATE_FORMATTER \u003d","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"            DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    private static final DateTimeFormatter COMMAND_DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"            DateTimeFormatter.ofPattern(DATE_FORMAT + \" \" + TIME_FORMAT);","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"     * Returns the string representation of the specified LocalDateTime, formatted by the specified formatter.","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"     * @param ldt The LocalDateTime object to format to string.","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"     * @param formatter The formatter to apply onto ldt.","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"     * @return The string representation of the LocalDateTime that is formatted by the given formatter.","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"takufunkai"},"content":"    public static String formatLocalDateTime(LocalDateTime ldt, DateTimeFormatter formatter) {","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"takufunkai"},"content":"        return ldt.format(formatter);","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"takufunkai"},"content":"     * Returns the string representation of the specified LocalDateTime, formatted by the default formatter that","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"takufunkai"},"content":"     * the chat-bot understands and is able to save.","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"takufunkai"},"content":"     * @param ldt The LocalDateTime object to format to string.","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"takufunkai"},"content":"     * @return The string representation of the LocalDateTime that is formatted by the given formatter.","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"takufunkai"},"content":"    public static String formatLocalDateTime(LocalDateTime ldt) {","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"takufunkai"},"content":"        return ldt.format(COMMAND_DATE_TIME_FORMATTER);","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"takufunkai"},"content":"     * Parses the given date and time in string format into LocalDateTime. The specified date and time \u003cb\u003emust\u003c/b\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"takufunkai"},"content":"     * be the correct format that the chat-bot understands.","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"takufunkai"},"content":"     * @param date The date to be parsed.","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"takufunkai"},"content":"     * @param time The time to be parsed.","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"takufunkai"},"content":"     * @return The LocalDateTime that is parsed through the specified strings.","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"takufunkai"},"content":"    public static LocalDateTime parseToLocalDateTime(String date, String time) {","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"takufunkai"},"content":"        return LocalDateTime.parse(date + \" \" + time, COMMAND_DATE_TIME_FORMATTER);","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"takufunkai"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"takufunkai"},"content":"     * Parses the given date in string format into LocalDateTime. The specified date\u003cb\u003emust\u003c/b\u003e","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"takufunkai"},"content":"     * be the correct format that the chat-bot understands. The LocalDateTime returned is automatically set at","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"takufunkai"},"content":"     * time \u003d 00:00.","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"takufunkai"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"takufunkai"},"content":"     * @param date The date to be parsed.","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"takufunkai"},"content":"     * @return The LocalDateTime that is parsed through the specified strings.","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"takufunkai"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"takufunkai"},"content":"    public static LocalDateTime parseToLocalDateTime(String date) {","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"takufunkai"},"content":"        return LocalDate.parse(date, COMMAND_DATE_FORMATTER).atStartOfDay();","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"takufunkai":66}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.Cursor?\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" scaleShape\u003d\"false\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"100.0\" style\u003d\"-fx-label-padding: 5 20; -fx-background-color: #e0e0e0; -fx-background-insets: 5; -fx-background-radius: 20; -fx-border-width: 1; -fx-border-color: #aaa; -fx-border-radius: 20; -fx-border-insets: 5;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"            \u003cFont size\u003d\"16.0\" /\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"            \u003cInsets bottom\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"   \u003ccursor\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"takufunkai"},"content":"      \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"takufunkai"},"content":"   \u003c/cursor\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"takufunkai"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"takufunkai":27}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":"\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-padding: 10;\" /\u003e","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"takufunkai":19}},{"path":"src/test/java/duke/usertask/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * DeadlineTest tests Deadline objects.","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    @Test","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    void toDukeSaveFormat() throws UserTaskException {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"        SaveFormatParser parser \u003d new SaveFormatParser();","lastModifiedDate":"2022-02-09"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"        Deadline d1 \u003d new Deadline(\"Wash dishes\", \"27-09-1999\");","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"D|0|Wash dishes|27-09-1999 00:00\", parser.getSaveValue(d1));","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"        d1.setDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"D|1|Wash dishes|27-09-1999 00:00\", parser.getSaveValue(d1));","lastModifiedDate":"2022-02-09"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"        Deadline d2 \u003d new Deadline(\"Water plants\", \"31-01-2011 15:30\");","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"D|0|Water plants|31-01-2011 15:30\", parser.getSaveValue(d2));","lastModifiedDate":"2022-02-09"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"takufunkai":24}},{"path":"src/test/java/duke/usertask/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * EventTest tests Event objects.","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"public class EventTest {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    @Test","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    void toDukeSaveFormat() throws UserTaskException {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"        SaveFormatParser parser \u003d new SaveFormatParser();","lastModifiedDate":"2022-02-09"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"        Event e1 \u003d new Event(\"Conference talk\", \"19-09-2030\");","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"E|0|Conference talk|19-09-2030 00:00\", parser.getSaveValue(e1));","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"        e1.setDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"E|1|Conference talk|19-09-2030 00:00\", parser.getSaveValue(e1));","lastModifiedDate":"2022-02-09"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"        Event e2 \u003d new Event(\"Presentation day (testing)\", \"31-01-2011 15:30\");","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"E|0|Presentation day (testing)|31-01-2011 15:30\", parser.getSaveValue(e2));","lastModifiedDate":"2022-02-09"},{"lineNumber":23,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"takufunkai":24}},{"path":"src/test/java/duke/usertask/SaveFormatParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":" * The SaveFormatParser class is meant to extract the important client-facing information from the Duke toSaveFormat","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":" * method return String. Specifically, it removes the saveId value from the String. This is important as:","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":" * 1. A task\u0027s saveId is only important for identification during save-file updates that occur during the program","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * execution.","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" * 2. Ensuring that IDs are created in a consistent manner is unimportant.","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":" * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":" * This is to ensure that we can test the important aspects of the save-string without affecting the test quality.","lastModifiedDate":"2022-02-09"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":" * Also, the id field itself is important, and is implicitly tested through the parsing.","lastModifiedDate":"2022-02-09"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-09"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"public class SaveFormatParser {","lastModifiedDate":"2022-02-09"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"    String getSaveValue(UserTask saveTask) {","lastModifiedDate":"2022-02-09"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"        return saveTask.toDukeSaveFormat().split(\"\\\\|\", 2)[1];","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"takufunkai":18}},{"path":"src/test/java/duke/usertask/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"takufunkai"},"content":"package duke.usertask;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"takufunkai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"takufunkai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"takufunkai"},"content":"/**","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"takufunkai"},"content":" * ToDoTest tests ToDo objects.","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"takufunkai"},"content":" */","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"takufunkai"},"content":"public class ToDoTest {","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"takufunkai"},"content":"    @Test","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"takufunkai"},"content":"    void toDukeSaveFormat() {","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"takufunkai"},"content":"        SaveFormatParser parser \u003d new SaveFormatParser();","lastModifiedDate":"2022-02-09"},{"lineNumber":14,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":15,"author":{"gitId":"takufunkai"},"content":"        ToDo t1 \u003d new ToDo(\"Wash dishes\");","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"T|0|Wash dishes\", parser.getSaveValue(t1));","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"takufunkai"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"takufunkai"},"content":"        t1.setDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"takufunkai"},"content":"        assertEquals(\"T|1|Wash dishes\", parser.getSaveValue(t1));","lastModifiedDate":"2022-02-09"},{"lineNumber":20,"author":{"gitId":"takufunkai"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"takufunkai"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"takufunkai":21}}]
