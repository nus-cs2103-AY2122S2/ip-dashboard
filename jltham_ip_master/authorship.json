[{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License.","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2022-02-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo.","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation.","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":":execute","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@rem Setup the command line","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"@rem Execute Gradle","lastModifiedDate":"2020-05-25"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":":end","lastModifiedDate":"2020-05-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2020-05-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":":fail","lastModifiedDate":"2020-05-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2020-05-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2020-05-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":":mainEnd","lastModifiedDate":"2020-05-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2020-05-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":":omega","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jltham":4,"-":85}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.Command;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":" * Duke class is the main class of the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"    private Ui ui;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"     * Constructor of Duke that takes in a file path specifying the location of the","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"     * storage file.","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * @param filePath file path specifying the location of the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * Initiates the program and outlines the operation backbone of the program.","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"    public void run() {","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"        ui.welcome();","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"        while (!isExit) {","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"            try {","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"            } finally {","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"                ui.showLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"     * Runs the Duke program.","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"     * @param args","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"        new Duke(\"./src/main/java/duke/data/duke.txt\").run();","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jltham":54,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":" * DukeException is an Exception unique to Duke.","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"     * Constructs a DukeException instance with the inputted error message","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"     * @param errorMessage message describing the fault","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"        super(\"☹ OOPS!!! \" + errorMessage);","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jltham":16}},{"path":"src/main/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Deadline;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Event;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.ToDo;","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"public class DukeTest {","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    private static boolean isExit(String input) {","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"        return input.equals(\"bye\");","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    private static void exit() {","lastModifiedDate":"2022-01-21"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    private static void addTask(Task task) {","lastModifiedDate":"2022-01-21"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"        taskList.add(task);","lastModifiedDate":"2022-01-21"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + task.toString() +","lastModifiedDate":"2022-01-21"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"                \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"    private static void deleteTask(int idx) {","lastModifiedDate":"2022-01-21"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        Task temp \u003d taskList.get(idx - 1);","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"        taskList.remove(idx - 1);","lastModifiedDate":"2022-01-21"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + temp.toString() +","lastModifiedDate":"2022-01-21"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"                \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"    private static void list() {","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {","lastModifiedDate":"2022-01-21"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"            System.out.println(i + \".\" + taskList.get(i - 1).toString());","lastModifiedDate":"2022-01-21"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"    private static void addToSave(File save, String type, boolean mark, String description) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"            int marked \u003d mark ? 1 : 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"            FileWriter saveWriter \u003d new FileWriter(save, true);","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"            saveWriter.write(type + \" xxx \" + marked + \" xxx \" + description + \"\\n\");","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"            saveWriter.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Unable to new task [\" + type + \"] to hard disk due to an IO error.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"    private static void modifyFromSave(File save, int idx, boolean mark) {","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"            int lineCounter \u003d 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"            BufferedReader saveReader \u003d new BufferedReader(new FileReader(save));","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"            String content \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"            String line \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"                if (lineCounter \u003d\u003d idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"                    if (line.charAt(6) \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"                        if (!(mark)) {","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"                            line \u003d line.replaceFirst(\"xxx 1 xxx\", \"xxx 0 xxx\");","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"                        }","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"                        if (mark) {","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"                            line \u003d line.replaceFirst(\"xxx 0 xxx\", \"xxx 1 xxx\");","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"                        }","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"jltham"},"content":"                content \u003d content + line + System.lineSeparator();","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"jltham"},"content":"                line \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"jltham"},"content":"                lineCounter++;","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"jltham"},"content":"            FileWriter saveWriter \u003d new FileWriter(save);","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"jltham"},"content":"            saveWriter.write(content);","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"jltham"},"content":"            saveReader.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"jltham"},"content":"            saveWriter.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Unable to find the file to save changes to in the hard disk\");","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Unable to save changes to hard disk due to IO Error\");","lastModifiedDate":"2022-02-02"},{"lineNumber":97,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":98,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":99,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"jltham"},"content":"    private static void deleteFromSave(File save, int idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"jltham"},"content":"            int lineCounter \u003d 0;","lastModifiedDate":"2022-02-02"},{"lineNumber":104,"author":{"gitId":"jltham"},"content":"            BufferedReader saveReader \u003d new BufferedReader(new FileReader(save));","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"jltham"},"content":"            String content \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":106,"author":{"gitId":"jltham"},"content":"            String line \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":107,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":108,"author":{"gitId":"jltham"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2022-02-02"},{"lineNumber":109,"author":{"gitId":"jltham"},"content":"                if (lineCounter !\u003d idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"jltham"},"content":"                    content \u003d content + line + System.lineSeparator();","lastModifiedDate":"2022-02-02"},{"lineNumber":111,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":113,"author":{"gitId":"jltham"},"content":"                line \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":114,"author":{"gitId":"jltham"},"content":"                lineCounter++;","lastModifiedDate":"2022-02-02"},{"lineNumber":115,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":116,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"jltham"},"content":"            FileWriter saveWriter \u003d new FileWriter(save);","lastModifiedDate":"2022-02-02"},{"lineNumber":118,"author":{"gitId":"jltham"},"content":"            saveWriter.write(content);","lastModifiedDate":"2022-02-02"},{"lineNumber":119,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":120,"author":{"gitId":"jltham"},"content":"            saveReader.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":121,"author":{"gitId":"jltham"},"content":"            saveWriter.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":122,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":123,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Unable to find the file to save changes to in the hard disk\");","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Unable to save changes to hard disk due to IO Error\");","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":128,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":130,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":131,"author":{"gitId":"jltham"},"content":"    private static void load(String data) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"jltham"},"content":"        String[] dataArr \u003d data.split(\" xxx \");","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"jltham"},"content":"        boolean marked \u003d (Integer.valueOf(dataArr[1]) \u003e 0);","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"jltham"},"content":"        switch (dataArr[0]) {","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"jltham"},"content":"            case \"D\":","lastModifiedDate":"2022-02-02"},{"lineNumber":138,"author":{"gitId":"jltham"},"content":"                taskList.add(new Deadline(dataArr[2], marked));","lastModifiedDate":"2022-02-03"},{"lineNumber":139,"author":{"gitId":"jltham"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":140,"author":{"gitId":"jltham"},"content":"            case \"T\":","lastModifiedDate":"2022-02-02"},{"lineNumber":141,"author":{"gitId":"jltham"},"content":"                taskList.add(new ToDo(dataArr[2], marked));","lastModifiedDate":"2022-02-03"},{"lineNumber":142,"author":{"gitId":"jltham"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":143,"author":{"gitId":"jltham"},"content":"            case \"E\":","lastModifiedDate":"2022-02-02"},{"lineNumber":144,"author":{"gitId":"jltham"},"content":"                taskList.add(new Event(dataArr[2], marked));","lastModifiedDate":"2022-02-03"},{"lineNumber":145,"author":{"gitId":"jltham"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":146,"author":{"gitId":"jltham"},"content":"            default:","lastModifiedDate":"2022-02-02"},{"lineNumber":147,"author":{"gitId":"jltham"},"content":"                break;","lastModifiedDate":"2022-02-02"},{"lineNumber":148,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":150,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"jltham"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-21"},{"lineNumber":152,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-01-21"},{"lineNumber":153,"author":{"gitId":"jltham"},"content":"            File save \u003d new File(\"./duke.txt\");","lastModifiedDate":"2022-02-02"},{"lineNumber":154,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":155,"author":{"gitId":"jltham"},"content":"            BufferedReader saveReader \u003d new BufferedReader(new FileReader(save));","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"jltham"},"content":"            String dataLine \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":157,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":158,"author":{"gitId":"jltham"},"content":"            while (dataLine !\u003d null) {","lastModifiedDate":"2022-02-02"},{"lineNumber":159,"author":{"gitId":"jltham"},"content":"                load(dataLine);","lastModifiedDate":"2022-02-02"},{"lineNumber":160,"author":{"gitId":"jltham"},"content":"                dataLine \u003d saveReader.readLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":161,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":162,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":163,"author":{"gitId":"jltham"},"content":"            Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-21"},{"lineNumber":164,"author":{"gitId":"jltham"},"content":"            System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2022-01-21"},{"lineNumber":165,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":166,"author":{"gitId":"jltham"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2022-01-21"},{"lineNumber":167,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":168,"author":{"gitId":"jltham"},"content":"            String[] splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2022-01-28"},{"lineNumber":169,"author":{"gitId":"jltham"},"content":"            String command \u003d splitInput[0];","lastModifiedDate":"2022-01-28"},{"lineNumber":170,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":171,"author":{"gitId":"jltham"},"content":"            while (!(isExit(command))) {","lastModifiedDate":"2022-01-21"},{"lineNumber":172,"author":{"gitId":"jltham"},"content":"                switch (command) {","lastModifiedDate":"2022-01-21"},{"lineNumber":173,"author":{"gitId":"jltham"},"content":"                case \"list\":","lastModifiedDate":"2022-01-21"},{"lineNumber":174,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003e 1) {","lastModifiedDate":"2022-01-28"},{"lineNumber":175,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"There should not be anything else after list.\");","lastModifiedDate":"2022-01-28"},{"lineNumber":176,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":177,"author":{"gitId":"jltham"},"content":"                        list();","lastModifiedDate":"2022-01-21"},{"lineNumber":178,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":179,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-28"},{"lineNumber":180,"author":{"gitId":"jltham"},"content":"                case \"mark\":","lastModifiedDate":"2022-01-21"},{"lineNumber":181,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003c 2) {","lastModifiedDate":"2022-01-28"},{"lineNumber":182,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"Please indicate which task you want to mark!\");","lastModifiedDate":"2022-01-28"},{"lineNumber":183,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":184,"author":{"gitId":"jltham"},"content":"                        int idx \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-02"},{"lineNumber":185,"author":{"gitId":"jltham"},"content":"                        taskList.get(idx).mark();","lastModifiedDate":"2022-02-02"},{"lineNumber":186,"author":{"gitId":"jltham"},"content":"                        modifyFromSave(save, idx, true);","lastModifiedDate":"2022-02-02"},{"lineNumber":187,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":188,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-28"},{"lineNumber":189,"author":{"gitId":"jltham"},"content":"                case \"unmark\":","lastModifiedDate":"2022-01-21"},{"lineNumber":190,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003c 2) {","lastModifiedDate":"2022-01-28"},{"lineNumber":191,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"Please indicate which task you want to unmark!\");","lastModifiedDate":"2022-01-28"},{"lineNumber":192,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":193,"author":{"gitId":"jltham"},"content":"                        int idx \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2022-02-02"},{"lineNumber":194,"author":{"gitId":"jltham"},"content":"                        taskList.get(idx).unmark();","lastModifiedDate":"2022-02-02"},{"lineNumber":195,"author":{"gitId":"jltham"},"content":"                        modifyFromSave(save, idx, false);","lastModifiedDate":"2022-02-02"},{"lineNumber":196,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":197,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-28"},{"lineNumber":198,"author":{"gitId":"jltham"},"content":"                case \"todo\":","lastModifiedDate":"2022-01-21"},{"lineNumber":199,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003c 2) {","lastModifiedDate":"2022-01-21"},{"lineNumber":200,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":201,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":202,"author":{"gitId":"jltham"},"content":"                        addTask(new ToDo(splitInput[1]));","lastModifiedDate":"2022-02-03"},{"lineNumber":203,"author":{"gitId":"jltham"},"content":"                        addToSave(save, \"T\", false, splitInput[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":204,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":205,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-21"},{"lineNumber":206,"author":{"gitId":"jltham"},"content":"                case \"deadline\":","lastModifiedDate":"2022-01-21"},{"lineNumber":207,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003c 2) {","lastModifiedDate":"2022-01-21"},{"lineNumber":208,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":209,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":210,"author":{"gitId":"jltham"},"content":"                        addTask(new Deadline(splitInput[1]));","lastModifiedDate":"2022-02-03"},{"lineNumber":211,"author":{"gitId":"jltham"},"content":"                        addToSave(save, \"D\", false, splitInput[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":212,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":213,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-21"},{"lineNumber":214,"author":{"gitId":"jltham"},"content":"                case \"event\":","lastModifiedDate":"2022-01-21"},{"lineNumber":215,"author":{"gitId":"jltham"},"content":"                    if (splitInput.length \u003c 2) {","lastModifiedDate":"2022-01-21"},{"lineNumber":216,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2022-01-21"},{"lineNumber":217,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":218,"author":{"gitId":"jltham"},"content":"                        addTask(new Event(splitInput[1]));","lastModifiedDate":"2022-02-03"},{"lineNumber":219,"author":{"gitId":"jltham"},"content":"                        addToSave(save, \"E\", false, splitInput[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":220,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":221,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-01-21"},{"lineNumber":222,"author":{"gitId":"jltham"},"content":"                case \"delete\":","lastModifiedDate":"2022-01-21"},{"lineNumber":223,"author":{"gitId":"jltham"},"content":"                    int idx \u003d Integer.parseInt(splitInput[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":224,"author":{"gitId":"jltham"},"content":"                    if (taskList.size() \u003c\u003d idx) {","lastModifiedDate":"2022-02-02"},{"lineNumber":225,"author":{"gitId":"jltham"},"content":"                        throw new DukeException(\"Invalid index input\");","lastModifiedDate":"2022-02-02"},{"lineNumber":226,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":227,"author":{"gitId":"jltham"},"content":"                        deleteTask(idx);","lastModifiedDate":"2022-02-02"},{"lineNumber":228,"author":{"gitId":"jltham"},"content":"                        deleteFromSave(save, idx);","lastModifiedDate":"2022-02-02"},{"lineNumber":229,"author":{"gitId":"jltham"},"content":"                        break;","lastModifiedDate":"2022-01-21"},{"lineNumber":230,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":231,"author":{"gitId":"jltham"},"content":"                default:","lastModifiedDate":"2022-01-21"},{"lineNumber":232,"author":{"gitId":"jltham"},"content":"                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-01-21"},{"lineNumber":233,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-01-21"},{"lineNumber":234,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":235,"author":{"gitId":"jltham"},"content":"                input \u003d scanner.nextLine();","lastModifiedDate":"2022-01-21"},{"lineNumber":236,"author":{"gitId":"jltham"},"content":"                splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":237,"author":{"gitId":"jltham"},"content":"                command \u003d splitInput[0];","lastModifiedDate":"2022-01-21"},{"lineNumber":238,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":239,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":240,"author":{"gitId":"jltham"},"content":"            exit();","lastModifiedDate":"2022-01-21"},{"lineNumber":241,"author":{"gitId":"jltham"},"content":"            scanner.close();","lastModifiedDate":"2022-01-21"},{"lineNumber":242,"author":{"gitId":"jltham"},"content":"            saveReader.close();","lastModifiedDate":"2022-02-02"},{"lineNumber":243,"author":{"gitId":"jltham"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-21"},{"lineNumber":244,"author":{"gitId":"jltham"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-21"},{"lineNumber":245,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":246,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":247,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":248,"author":{"gitId":"jltham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-02"},{"lineNumber":249,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":250,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":251,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jltham":251}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.AddCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.Command;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.DeleteCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.ExitCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.FindCommand;","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.ListCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.MarkCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.command.UnmarkCommand;","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":" * Parser class parses the command passed in as a String and represents it as a","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":" * Command that the program can manage.","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"public class Parser {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    private static String description;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * Returns the relevent Command object to be executed from the string input.","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * @param fullCommand the command as a String","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @return Command object that triggers an action from the program based on the","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     *         command","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when command is invalid or improper","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"        String[] splitCommand \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"        String action \u003d splitCommand[0];","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"        if (splitCommand.length \u003e 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"            description \u003d splitCommand[1];","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"        switch (action) {","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        case \"list\":","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003e 1) {","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"There should not be anything else after list.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"                return new ListCommand();","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"I don\u0027t know what to mark!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"                int index \u003d Integer.parseInt(description) - 1;","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"                return new MarkCommand(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"I don\u0027t know what to unmark!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"                int index \u003d Integer.parseInt(description) - 1;","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"                return new UnmarkCommand(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"                return new AddCommand(\"T\", description);","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"                return new AddCommand(\"D\", description);","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"        case \"event\":","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"                return new AddCommand(\"E\", description);","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2022-02-02"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"I don\u0027t know what to delete!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"                int index \u003d Integer.parseInt(description) - 1;","lastModifiedDate":"2022-02-04"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"                return new DeleteCommand(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":80,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"jltham"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"jltham"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-02-02"},{"lineNumber":83,"author":{"gitId":"jltham"},"content":"        case \"find\":","lastModifiedDate":"2022-02-04"},{"lineNumber":84,"author":{"gitId":"jltham"},"content":"            return new FindCommand(description);","lastModifiedDate":"2022-02-04"},{"lineNumber":85,"author":{"gitId":"jltham"},"content":"        default:","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Invalid command :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":87,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":89}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import java.io.File;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":" * Storage class manages the storage file and the actions on the storage file.","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"public class Storage {","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    private File storageFile;","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    private static String buffer \u003d \" xxx \";","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * Constructor for Storage that takes in a file path that points to the storage","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * file","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @param filePath","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"        this.storageFile \u003d new File(filePath);","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * Reads the content of the storage file and passes the data to be processed by","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * the program.","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     * @return an array of Strings each representing the tasks stored in the storage","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"     *         file","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when file cannot be found or is","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"     *                       corrupted","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"    public String[] load() throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"            BufferedReader storageFileReader \u003d new BufferedReader(new FileReader(this.storageFile));","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"            String fileContent \u003d \"\";","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"            String dataLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"            while (dataLine !\u003d null) {","lastModifiedDate":"2022-02-04"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"                fileContent \u003d fileContent + dataLine + System.lineSeparator();","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"                dataLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"            String[] tasksArr \u003d fileContent.split(System.lineSeparator());","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"            storageFileReader.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"            return tasksArr;","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"File not found!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Issue reading file!! D:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"     * Reflects the addition of the task in the storage list.","lastModifiedDate":"2022-02-04"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"     * @param task the task that has just been added to the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"    public void updateAfterAdd(Task task) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"            int isMarked \u003d task.isDone() ? 1 : 0; // isMarked is the integer representation of task.isDone(); 1 \u003d true,","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"                                                  // 0 \u003d false","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"            FileWriter storageFileWriter \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2022-02-04"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"            storageFileWriter.write(task.getType() + buffer + isMarked + buffer + task.getDescription() + \"\\n\");","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"            storageFileWriter.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Cannot update addition in save file!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"jltham"},"content":"     * Reflects the marked indexed task in the storage list.","lastModifiedDate":"2022-02-04"},{"lineNumber":83,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that has just been marked as done","lastModifiedDate":"2022-02-04"},{"lineNumber":85,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"jltham"},"content":"    public void updateAfterMark(int index) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":89,"author":{"gitId":"jltham"},"content":"        this.modifyFile(index, true);","lastModifiedDate":"2022-02-04"},{"lineNumber":90,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":93,"author":{"gitId":"jltham"},"content":"     * Reflects the unmarked indexed task in the storage list.","lastModifiedDate":"2022-02-04"},{"lineNumber":94,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":95,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that has just been marked as not yet done","lastModifiedDate":"2022-02-04"},{"lineNumber":96,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":99,"author":{"gitId":"jltham"},"content":"    public void updateAfterUnmark(int index) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":100,"author":{"gitId":"jltham"},"content":"        this.modifyFile(index, false);","lastModifiedDate":"2022-02-04"},{"lineNumber":101,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":103,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":104,"author":{"gitId":"jltham"},"content":"     * Reflects the deleted task in the storage list.","lastModifiedDate":"2022-02-04"},{"lineNumber":105,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":106,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that has just been deleted","lastModifiedDate":"2022-02-04"},{"lineNumber":107,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":108,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":109,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":110,"author":{"gitId":"jltham"},"content":"    public void updateAfterDelete(int index) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":111,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":112,"author":{"gitId":"jltham"},"content":"            int dataLineCounter \u003d 0;","lastModifiedDate":"2022-02-04"},{"lineNumber":113,"author":{"gitId":"jltham"},"content":"            BufferedReader storageFileReader \u003d new BufferedReader(new FileReader(storageFile));","lastModifiedDate":"2022-02-04"},{"lineNumber":114,"author":{"gitId":"jltham"},"content":"            String contentToBeWritten \u003d \"\";","lastModifiedDate":"2022-02-04"},{"lineNumber":115,"author":{"gitId":"jltham"},"content":"            String dateLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":116,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":117,"author":{"gitId":"jltham"},"content":"            while (dateLine !\u003d null) {","lastModifiedDate":"2022-02-04"},{"lineNumber":118,"author":{"gitId":"jltham"},"content":"                if (dataLineCounter !\u003d index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":119,"author":{"gitId":"jltham"},"content":"                    contentToBeWritten \u003d contentToBeWritten + dateLine + System.lineSeparator();","lastModifiedDate":"2022-02-04"},{"lineNumber":120,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":121,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":122,"author":{"gitId":"jltham"},"content":"                dateLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":123,"author":{"gitId":"jltham"},"content":"                dataLineCounter++;","lastModifiedDate":"2022-02-04"},{"lineNumber":124,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"jltham"},"content":"            FileWriter storageFileWriter \u003d new FileWriter(storageFile);","lastModifiedDate":"2022-02-04"},{"lineNumber":127,"author":{"gitId":"jltham"},"content":"            storageFileWriter.write(contentToBeWritten);","lastModifiedDate":"2022-02-04"},{"lineNumber":128,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":129,"author":{"gitId":"jltham"},"content":"            storageFileReader.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":130,"author":{"gitId":"jltham"},"content":"            storageFileWriter.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":131,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":132,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Save file not found!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":133,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":134,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Cannot update deletion in save file!! D:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":135,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":136,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":137,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":138,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":139,"author":{"gitId":"jltham"},"content":"     * Updates the storage file when there has just been a change to whether a task","lastModifiedDate":"2022-02-04"},{"lineNumber":140,"author":{"gitId":"jltham"},"content":"     * has been marked as done or not yet done.","lastModifiedDate":"2022-02-04"},{"lineNumber":141,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":142,"author":{"gitId":"jltham"},"content":"     * @param index        index of the task which the action is performed on","lastModifiedDate":"2022-02-04"},{"lineNumber":143,"author":{"gitId":"jltham"},"content":"     * @param isToBeMarked true if the action marked the task as done, otherwise","lastModifiedDate":"2022-02-04"},{"lineNumber":144,"author":{"gitId":"jltham"},"content":"     *                     false","lastModifiedDate":"2022-02-04"},{"lineNumber":145,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":146,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":147,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":148,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":149,"author":{"gitId":"jltham"},"content":"    private void modifyFile(int index, boolean isToBeMarked) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":150,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":151,"author":{"gitId":"jltham"},"content":"            int dataLineCounter \u003d 0;","lastModifiedDate":"2022-02-04"},{"lineNumber":152,"author":{"gitId":"jltham"},"content":"            BufferedReader storageFileReader \u003d new BufferedReader(new FileReader(storageFile));","lastModifiedDate":"2022-02-04"},{"lineNumber":153,"author":{"gitId":"jltham"},"content":"            String contentToBeWritten \u003d \"\";","lastModifiedDate":"2022-02-04"},{"lineNumber":154,"author":{"gitId":"jltham"},"content":"            String dataLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":155,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":156,"author":{"gitId":"jltham"},"content":"            while (dataLine !\u003d null) {","lastModifiedDate":"2022-02-04"},{"lineNumber":157,"author":{"gitId":"jltham"},"content":"                if (dataLineCounter \u003d\u003d index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":158,"author":{"gitId":"jltham"},"content":"                    if (dataLine.charAt(6) \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2022-02-04"},{"lineNumber":159,"author":{"gitId":"jltham"},"content":"                        if (!(isToBeMarked)) {","lastModifiedDate":"2022-02-04"},{"lineNumber":160,"author":{"gitId":"jltham"},"content":"                            dataLine \u003d dataLine.replaceFirst(\"xxx 1 xxx\", \"xxx 0 xxx\");","lastModifiedDate":"2022-02-04"},{"lineNumber":161,"author":{"gitId":"jltham"},"content":"                        }","lastModifiedDate":"2022-02-02"},{"lineNumber":162,"author":{"gitId":"jltham"},"content":"                    } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":163,"author":{"gitId":"jltham"},"content":"                        if (isToBeMarked) {","lastModifiedDate":"2022-02-04"},{"lineNumber":164,"author":{"gitId":"jltham"},"content":"                            dataLine \u003d dataLine.replaceFirst(\"xxx 0 xxx\", \"xxx 1 xxx\");","lastModifiedDate":"2022-02-04"},{"lineNumber":165,"author":{"gitId":"jltham"},"content":"                        }","lastModifiedDate":"2022-02-02"},{"lineNumber":166,"author":{"gitId":"jltham"},"content":"                    }","lastModifiedDate":"2022-02-02"},{"lineNumber":167,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":168,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":169,"author":{"gitId":"jltham"},"content":"                contentToBeWritten \u003d contentToBeWritten + dataLine + System.lineSeparator();","lastModifiedDate":"2022-02-04"},{"lineNumber":170,"author":{"gitId":"jltham"},"content":"                dataLine \u003d storageFileReader.readLine();","lastModifiedDate":"2022-02-04"},{"lineNumber":171,"author":{"gitId":"jltham"},"content":"                dataLineCounter++;","lastModifiedDate":"2022-02-04"},{"lineNumber":172,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":173,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":174,"author":{"gitId":"jltham"},"content":"            FileWriter storageFileWriter \u003d new FileWriter(storageFile);","lastModifiedDate":"2022-02-04"},{"lineNumber":175,"author":{"gitId":"jltham"},"content":"            storageFileWriter.write(contentToBeWritten);","lastModifiedDate":"2022-02-04"},{"lineNumber":176,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":177,"author":{"gitId":"jltham"},"content":"            storageFileReader.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":178,"author":{"gitId":"jltham"},"content":"            storageFileWriter.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":179,"author":{"gitId":"jltham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":180,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Save file not found!! :-(\");","lastModifiedDate":"2022-02-02"},{"lineNumber":181,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":182,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Cannot update edits in save file!! D:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":183,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":184,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":185,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":186,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":187,"author":{"gitId":"jltham"},"content":"     * Wipes the storage file of all its data.","lastModifiedDate":"2022-02-04"},{"lineNumber":188,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":189,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when there is an error accessing or","lastModifiedDate":"2022-02-03"},{"lineNumber":190,"author":{"gitId":"jltham"},"content":"     *                       writing to the storage file","lastModifiedDate":"2022-02-03"},{"lineNumber":191,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":192,"author":{"gitId":"jltham"},"content":"    public void resetFile() throws DukeException {","lastModifiedDate":"2022-02-03"},{"lineNumber":193,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":194,"author":{"gitId":"jltham"},"content":"            FileWriter storageFileWriter \u003d new FileWriter(storageFile, false);","lastModifiedDate":"2022-02-04"},{"lineNumber":195,"author":{"gitId":"jltham"},"content":"            storageFileWriter.write(\"\");","lastModifiedDate":"2022-02-04"},{"lineNumber":196,"author":{"gitId":"jltham"},"content":"            storageFileWriter.close();","lastModifiedDate":"2022-02-04"},{"lineNumber":197,"author":{"gitId":"jltham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":198,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Cannot reset the save file!! D:\");","lastModifiedDate":"2022-02-02"},{"lineNumber":199,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":200,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":201,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":201}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Deadline;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Event;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.ToDo;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" * TaskList class manages the task list and the actions that can be performed on","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":" * the task list.","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"public class TaskList {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    private static String buffer \u003d \" xxx \";","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * Constructor for TaskList that takes in data from the storage file and","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * constructs a task list from there.","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * @param tasksArr data read from the storage file","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception when data is corrupted or task list cannot be","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     *                       created as intended","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"    public TaskList(String[] tasksArr) throws DukeException {","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"            tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"            for (String task : tasksArr) {","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"                String[] taskDetails \u003d task.split(buffer);","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"                String type \u003d taskDetails[0];","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"                Boolean isMarked \u003d (Integer.parseInt(taskDetails[1]) \u003e 0);","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"                String description \u003d taskDetails[2];","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"                switch (type) {","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"                case \"T\":","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"                    tasks.add(new ToDo(description, isMarked));","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"                case \"D\":","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"                    tasks.add(new Deadline(description, isMarked));","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"                case \"E\":","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"                    tasks.add(new Event(description, isMarked));","lastModifiedDate":"2022-02-04"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"                default:","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"\");","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"     * Constructor for TaskList when storage file data is unavailable.","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"     * Adds the task specified to the task list.","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"     * @param task the task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"        tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"     * Deletes the task indexed by the index specified.","lastModifiedDate":"2022-02-04"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that is to be deleted","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"     * @return the task after it is deleted from the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"    public Task delete(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"        Task deletedTask \u003d tasks.get(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":80,"author":{"gitId":"jltham"},"content":"        tasks.remove(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":81,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"jltham"},"content":"        return deletedTask;","lastModifiedDate":"2022-02-04"},{"lineNumber":83,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"jltham"},"content":"     * Prints out all the tasks in the task list and their index.","lastModifiedDate":"2022-02-04"},{"lineNumber":87,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"jltham"},"content":"    public void list() {","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"jltham"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"jltham"},"content":"            System.out.println(i + \".\" + tasks.get(i - 1).toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"jltham"},"content":"    ","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":95,"author":{"gitId":"jltham"},"content":"     * Prints out all the tasks in the task list that contains the keyword.","lastModifiedDate":"2022-02-04"},{"lineNumber":96,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-04"},{"lineNumber":97,"author":{"gitId":"jltham"},"content":"     * @param keyword keyword to be contained by the tasks","lastModifiedDate":"2022-02-04"},{"lineNumber":98,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":99,"author":{"gitId":"jltham"},"content":"    public void find(String keyword) {","lastModifiedDate":"2022-02-04"},{"lineNumber":100,"author":{"gitId":"jltham"},"content":"        ArrayList\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-04"},{"lineNumber":101,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":102,"author":{"gitId":"jltham"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-04"},{"lineNumber":103,"author":{"gitId":"jltham"},"content":"            if (tasks.get(i).toString().contains(keyword)) {","lastModifiedDate":"2022-02-04"},{"lineNumber":104,"author":{"gitId":"jltham"},"content":"                searchResults.add(tasks.get(i));","lastModifiedDate":"2022-02-04"},{"lineNumber":105,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-04"},{"lineNumber":106,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":107,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":108,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-02-04"},{"lineNumber":109,"author":{"gitId":"jltham"},"content":"        for (int j \u003d 1; j \u003c\u003d searchResults.size(); j++) {","lastModifiedDate":"2022-02-04"},{"lineNumber":110,"author":{"gitId":"jltham"},"content":"            System.out.println(j + \". \" + searchResults.get(j - 1).toString());","lastModifiedDate":"2022-02-04"},{"lineNumber":111,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":112,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":113,"author":{"gitId":"jltham"},"content":"    ","lastModifiedDate":"2022-02-04"},{"lineNumber":114,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":115,"author":{"gitId":"jltham"},"content":"     * Marks the task indexed by the index as done.","lastModifiedDate":"2022-02-04"},{"lineNumber":116,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":117,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that is to be marked as done","lastModifiedDate":"2022-02-04"},{"lineNumber":118,"author":{"gitId":"jltham"},"content":"     * @return the task after it is marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":119,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":120,"author":{"gitId":"jltham"},"content":"    public Task mark(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":121,"author":{"gitId":"jltham"},"content":"        Task indexedTask \u003d tasks.get(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":122,"author":{"gitId":"jltham"},"content":"        indexedTask.mark();","lastModifiedDate":"2022-02-04"},{"lineNumber":123,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":124,"author":{"gitId":"jltham"},"content":"        return indexedTask;","lastModifiedDate":"2022-02-04"},{"lineNumber":125,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":127,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":128,"author":{"gitId":"jltham"},"content":"     * Marks the task indexed by the index as not yet done.","lastModifiedDate":"2022-02-04"},{"lineNumber":129,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":130,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task that is to be marked as not yet done","lastModifiedDate":"2022-02-04"},{"lineNumber":131,"author":{"gitId":"jltham"},"content":"     * @return the task after it is marked as not yet done","lastModifiedDate":"2022-02-03"},{"lineNumber":132,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":133,"author":{"gitId":"jltham"},"content":"    public Task unmark(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":134,"author":{"gitId":"jltham"},"content":"        Task indexedTask \u003d tasks.get(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":135,"author":{"gitId":"jltham"},"content":"        indexedTask.unmark();","lastModifiedDate":"2022-02-04"},{"lineNumber":136,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":137,"author":{"gitId":"jltham"},"content":"        return indexedTask;","lastModifiedDate":"2022-02-04"},{"lineNumber":138,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":139,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":140,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":141,"author":{"gitId":"jltham"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2022-02-04"},{"lineNumber":142,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":143,"author":{"gitId":"jltham"},"content":"     * @return number of tasks in the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":144,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":145,"author":{"gitId":"jltham"},"content":"    public int getNumberOfTasks() {","lastModifiedDate":"2022-02-04"},{"lineNumber":146,"author":{"gitId":"jltham"},"content":"        return tasks.size();","lastModifiedDate":"2022-02-03"},{"lineNumber":147,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":148,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":148}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":" * Ui is a class that manages the bulk of the user interaction required by the","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":" * program.","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"public class Ui {","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"    Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * welcome method prints out a welcome message when the user boots the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"    public void welcome() {","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Welcome to Duke, your friendly task manager!\\n What do you want to do today?\");","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * goodBye method prints out a farewell message when the user leaves the","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     * program.","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"    public void goodBye() {","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Sayonara!! Hope to see you again soon hehe! :-)\");","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * addMessage method prints out a message to let the user know what task has","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * been added and how many tasks there are currently in the task list.","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"     * @param task the task that has just been added into the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"     * @param size the size of the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"    public void addMessage(Task task, int size) {","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + task.toString() +","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"                \"\\nNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"     * deleteMessage method prints out a message to let the user know what task has","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"     * been deleted and how many tasks there are remaining in the task list.","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"     * @param task the task that has just been deleted into the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"     * @param size the size of the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"    public void deleteMessage(Task task, int size) {","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + task.toString() +","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"                \"\\nNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"     * markMessage method prints out a message to let the user know which task has","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"     * just been marked as done.","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"     * @param task the task that has just been marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"    public void markMessage(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task.toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"     * unmarkMessage method prints out a message to let the user know which task has","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"     * just been marked as not yet done.","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"     * @param task the task that has just been marked as not yet done","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"    public void unmarkMessage(Task task) {","lastModifiedDate":"2022-02-02"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task.toString());","lastModifiedDate":"2022-02-02"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"     * showLine method prints out a line to separate different interaction instances","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"     * for better visibility for users.","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"    public void showLine() {","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"        System.out.println(\"---------------------------------------------------------------\");","lastModifiedDate":"2022-02-02"},{"lineNumber":80,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":81,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":82,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":83,"author":{"gitId":"jltham"},"content":"     * readCommand method reads for the user\u0027s input and reflects that input to the","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"jltham"},"content":"     * program to be processed.","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"jltham"},"content":"     * @return a command of type String that is the user\u0027s input","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":88,"author":{"gitId":"jltham"},"content":"    public String readCommand() {","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"jltham"},"content":"        String command \u003d scanner.nextLine();","lastModifiedDate":"2022-02-02"},{"lineNumber":90,"author":{"gitId":"jltham"},"content":"        return command;","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":93,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":94,"author":{"gitId":"jltham"},"content":"     * showError method prints out the error message to the user to let the user","lastModifiedDate":"2022-02-03"},{"lineNumber":95,"author":{"gitId":"jltham"},"content":"     * know why the program cannot run as intended","lastModifiedDate":"2022-02-03"},{"lineNumber":96,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"jltham"},"content":"     * @param errorMessage a message describing the fault","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":99,"author":{"gitId":"jltham"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2022-02-02"},{"lineNumber":100,"author":{"gitId":"jltham"},"content":"        System.out.println(\"Uh oh... We ran into an error: \" + errorMessage);","lastModifiedDate":"2022-02-02"},{"lineNumber":101,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":102,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":102}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.*;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * AddCommand is a Command that adds a task that is either a ToDo task, Deadline","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" * task or Event task to the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    private String description;","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    private String type;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    private Task task;","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * Constructor for AddCommand which takes in the type of task and description of","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * task that is to be added.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @param type        type of task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     * @param description description of task to be added","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"    public AddCommand(String type, String description) {","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * Adds the task to TaskList, updates the storage file and notifies the user","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     * when it\u0027s done","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"        switch (type) {","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"        case \"T\":","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"            task \u003d new ToDo(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"            break;","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"        case \"D\":","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"            task \u003d new Deadline(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"            break;","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"        case \"E\":","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"            task \u003d new Event(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"            break;","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"        default:","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"            break;","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"        tasks.add(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"        storage.updateAfterAdd(task);","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"        ui.addMessage(task, tasks.getNumberOfTasks());","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns true for an exit command.","lastModifiedDate":"2022-02-04"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":67}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":" * Command is an abstract class that specifies 2 methods that has to be","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * implemented by all the different commands, namely isExit and execute.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * DeleteCommand is a Command that deletes the task at the index specified from","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" * the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    private int index;","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * Constructor for DeleteCommand that takes in the index of the task to be","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     * deleted from the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * @param index index of task to be deleted","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     * Deletes the indexed task from task list and storage file and updates the user","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     * when the task is deleted.","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        Task deletedTask \u003d tasks.delete(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"        storage.updateAfterDelete(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"        ui.deleteMessage(deletedTask, tasks.getNumberOfTasks());","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns true for an exit command.","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":48}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":" * ExitCommand is a Command that terminates the program.","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns yes for an","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"     * exit command.","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"        return true;","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * Prints a farewell message to the user and exits the program.","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"        ui.goodBye();","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"    private String keyword;","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"        tasks.find(keyword);","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-04"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"jltham":23}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":" * ListCommand is a Command that triggers the program to print out the task list","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":" * with proper indexing according to chronological order of when the task was","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * added into the task list.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"     * Lists out the tasks stored in the tasks list.","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"        tasks.list();","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns true for an exit command.","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":33}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * MarkCommand is a Command that marks the indexed task as done.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"    private int index;","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * Constructor for MarkCommand takes in the index of the task to be marked as","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * done.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task to be marked as done","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     * Marks the indexed task as done, stores the changes in the storage list and","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     * updates the user when completed.","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"        Task markedTask \u003d tasks.mark(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        storage.updateAfterMark(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"        ui.markMessage(markedTask);","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns true for an exit command.","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":47}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.command;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.TaskList;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.Ui;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.task.Task;","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":" * UnmarkCommand is a Command that marks the indexed task as not yet done.","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"    private int index;","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * Constructor for UnmarkCommand takes in the index of the task to be marked as","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * not yet done.","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * @param index the index of the task to be marked as not yet done","lastModifiedDate":"2022-02-04"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2022-02-04"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-02-04"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     * Marks the indexed task as not yet done, stores the changes in the storage","lastModifiedDate":"2022-02-04"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     * list and updates the user when completed.","lastModifiedDate":"2022-02-04"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"     * @param tasks   task list local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * @param ui      ui instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * @param storage storage instance local to user","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"        Task unmarkedTask \u003d tasks.unmark(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        storage.updateAfterUnmark(index);","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"        ui.unmarkMessage(unmarkedTask);","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"     * Checks if this is an exit command, and only returns true for an exit command.","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"        return false;","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"jltham":47}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.task;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" * Deadline is a Task that should be done by a certain date and time.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    private static String type \u003d \"D\";","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    private String printedString;","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    private LocalDate deadlineDate;","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    private LocalTime deadlineTime;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * Constructor for Deadline that takes in a description of the Deadline task and","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * whether it is marked as done.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @param description the description of the deadline task, containing the date","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     *                    and time of deadline","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     * @param isDone      true if the deadline task has been marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when the deadline is invalid due to","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     *                       missing deadline or improper input format","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    public Deadline(String description, boolean isDone) throws DukeException {","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"        super(type, description, isDone);","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"            String[] splitDescription \u003d description.split(\"/by \");","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"            if (splitDescription.length \u003e 1) {","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"                String[] dateTimeArray \u003d splitDescription[1].split(\" \");","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"                if (dateTimeArray.length \u003e 1) {","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"                    this.deadlineDate \u003d LocalDate.parse(dateTimeArray[0]);","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"                    this.deadlineTime \u003d LocalTime.parse(dateTimeArray[1]);","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"                    this.printedString \u003d splitDescription[0] + \" (by: \"","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"                            + this.deadlineDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \"","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"                            + this.deadlineTime.format(DateTimeFormatter.ofPattern(\"hh:mma\")) + \")\";","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"                } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"                    throw new DukeException(","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"                            \"Please include the time in the deadline in the following manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"Please input a deadline in the following manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Please input the deadline in the proper manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"     * Constructor for Deadline that takes in a description of the Deadline task","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"     * @param description the description of the deadline task, containing the date","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"     *                    and time of deadline","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when the deadline is invalid due to","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"     *                       missing deadline or improper input format","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"    public Deadline(String description) throws DukeException {","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"        this(description, false);","lastModifiedDate":"2022-01-21"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"     * Returns the String representation of deadline task.","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"     * @return string representation of deadline task","lastModifiedDate":"2022-02-04"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-01-21"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"        return this.isDone ? \"[D][X] \" + this.printedString","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"                : \"[D][ ] \" + this.printedString;","lastModifiedDate":"2022-02-04"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jltham":78}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.task;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"import src.main.java.duke.DukeException;","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":" * Event is a Task that should be attended at a certain date and time.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"    private static String type \u003d \"E\";","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"    private String printedString;","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    private LocalDate eventDate;","lastModifiedDate":"2022-02-04"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"    private LocalTime eventTime;","lastModifiedDate":"2022-02-04"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     * Constructor for Event that takes in a description of the Event task and","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * whether it is marked as done.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @param description the description of the event task, containing the date and","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     *                    time of the event","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"     * @param isDone      true if the event task has been marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when the event datetime is invalid due","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"     *                       to missing input or improper input format","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    public Event(String description, boolean isDone) throws DukeException {","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"        super(type, description, isDone);","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"        try {","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"            String[] splitDescription \u003d description.split(\"/at \");","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"            if (splitDescription.length \u003e 1) {","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"                String[] dateTimeArray \u003d splitDescription[1].split(\" \");","lastModifiedDate":"2022-02-04"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"                if (dateTimeArray.length \u003e 1) {","lastModifiedDate":"2022-02-04"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"                    this.eventDate \u003d LocalDate.parse(dateTimeArray[0]);","lastModifiedDate":"2022-02-04"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"                    this.eventTime \u003d LocalTime.parse(dateTimeArray[1]);","lastModifiedDate":"2022-02-04"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"                    this.printedString \u003d dateTimeArray[0] + \" (by: \"","lastModifiedDate":"2022-02-04"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"                            + this.eventDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \"","lastModifiedDate":"2022-02-04"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"                            + this.eventTime.format(DateTimeFormatter.ofPattern(\"hh:mma\")) + \")\";","lastModifiedDate":"2022-02-04"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"                } else {","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"                    throw new DukeException(","lastModifiedDate":"2022-02-02"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"                            \"Please include the time in the deadline in the following manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"                }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"            } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"                throw new DukeException(\"Please input a deadline in the following manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"            }","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-02"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"            throw new DukeException(\"Please input the deadline in the proper manner: yyyy-mm-dd hh:mm\");","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"     * Constructor for Event that takes in a description of the Event task.","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"     * @param description the description of the event task, containing the date and","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"     *                    time of the event","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"     * @throws DukeException exception thrown when the event datetime is invalid due","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"     *                       to missing input or improper input format","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"    public Event(String description) throws DukeException {","lastModifiedDate":"2022-02-03"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"        this(description, false);","lastModifiedDate":"2022-01-21"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"     * Returns the String representation of event task.","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-04"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"     * @return string representation of event task","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-01-21"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"    public String toString() {","lastModifiedDate":"2022-01-21"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"        return this.isDone ? \"[E][X] \" + this.printedString","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"                : \"[E][ ] \" + this.printedString;","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jltham":78}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.task;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":" * Task is a class that manages the actions that a Task can do such as marking","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":" * itself as done etc.","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"public class Task {","lastModifiedDate":"2022-01-21"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"    protected String type;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"    protected String description;","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"     * Constructor for Task that takes in the type of task, description of task and","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"     * whether the task is marked as done as input to instantiate a new instance of","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"     * Task","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"     * @param type        the type of task","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"     * @param description the description of the task","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"     * @param isDone      whether the task is done","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"    public Task(String type, String description, boolean isDone) {","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"     * Constructor for Task that takes in the type of task and description of task.","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"     * Task is assumed to be not yet done.","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * @param type        the type of task","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * @param description the description of the task","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"    public Task(String type, String description) {","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"        this(type, description, false);","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"     * Marks the task as done.","lastModifiedDate":"2022-02-04"},{"lineNumber":40,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"jltham"},"content":"    public void mark() {","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"jltham"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":45,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"jltham"},"content":"     * Marks the task as not yet done.","lastModifiedDate":"2022-02-04"},{"lineNumber":47,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"jltham"},"content":"    public void unmark() {","lastModifiedDate":"2022-01-21"},{"lineNumber":49,"author":{"gitId":"jltham"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-21"},{"lineNumber":50,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":51,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":52,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"jltham"},"content":"     * Returns a boolean value depending on whether the task is done,","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"jltham"},"content":"     * if it is then the method returns true.","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"jltham"},"content":"     * @return true if the task has been marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"jltham"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"jltham"},"content":"        return isDone;","lastModifiedDate":"2022-02-03"},{"lineNumber":60,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":61,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":62,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":63,"author":{"gitId":"jltham"},"content":"     * Returns the type of the task.","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"jltham"},"content":"     * @return the type of task","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"jltham"},"content":"    public String getType() {","lastModifiedDate":"2022-02-04"},{"lineNumber":68,"author":{"gitId":"jltham"},"content":"        return type;","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"jltham"},"content":"     * Returns the description of the task.","lastModifiedDate":"2022-02-04"},{"lineNumber":73,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"jltham"},"content":"     * @return the description of the task","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"jltham"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-04"},{"lineNumber":77,"author":{"gitId":"jltham"},"content":"        return description;","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"jltham":79}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jltham"},"content":"package src.main.java.duke.task;","lastModifiedDate":"2022-02-03"},{"lineNumber":2,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":3,"author":{"gitId":"jltham"},"content":"/**","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"jltham"},"content":" * ToDo is a Task with no specific start or end date or time.","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"jltham"},"content":" */","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"jltham"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"jltham"},"content":"    private static String type \u003d \"T\";","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"     * Constructor for ToDo task takes in the description of the task and whether it","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"jltham"},"content":"     * has been marked as done.","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"jltham"},"content":"     * @param description the description of the ToDo task","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"jltham"},"content":"     * @param isDone      true if the task has been marked as done","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"jltham"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"jltham"},"content":"        super(type, description, isDone);","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":20,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"jltham"},"content":"     * Constructor for ToDo task takes in the description of the task.","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"jltham"},"content":"     * @param description the description of the ToDo task","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":25,"author":{"gitId":"jltham"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"jltham"},"content":"        super(type, description);","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"jltham"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"jltham"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"jltham"},"content":"     * Returns the String representation of todo task.","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"jltham"},"content":"     * ","lastModifiedDate":"2022-02-04"},{"lineNumber":32,"author":{"gitId":"jltham"},"content":"     * @return string representation of todo task","lastModifiedDate":"2022-02-04"},{"lineNumber":33,"author":{"gitId":"jltham"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"jltham"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"jltham"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"jltham"},"content":"        return this.isDone ? \"[T][X] \" + this.description","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"jltham"},"content":"                : \"[T][ ] \" + this.description;","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"jltham"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":39,"author":{"gitId":"jltham"},"content":"}","lastModifiedDate":"2022-02-03"}],"authorContributionMap":{"jltham":39}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jltham"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jltham":1,"-":20}}]
