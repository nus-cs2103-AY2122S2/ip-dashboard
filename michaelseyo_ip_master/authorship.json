[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"# Bernie project template","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Bernie_. Given below are instructions on how to use it.","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"3. After that, locate the `src/main/java/Bernie.java` file, right-click it, and choose `Run Bernie.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"michaelseyo":3,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    mainClassName \u003d \"bernie.Main\"","lastModifiedDate":"2022-02-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"    archiveBaseName \u003d \"bernie\"","lastModifiedDate":"2022-01-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"michaelseyo":16,"-":44}},{"path":"data/Bernie.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"1. [E][X] dancing time (at: 7pm)","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"2. [T][ ] eating dinner","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"3. [D][ ] wash the floor (by: Feb 21 2022)","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"4. [D][ ] buy the book (by: Feb 10 2022)","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"michaelseyo":4}},{"path":"src/main/java/bernie/Bernie.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie;","lastModifiedDate":"2022-01-30"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.commands.CommandHandler;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":" * Bernie, your personal tasks manager! :)","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"public class Bernie {","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"    private final CommandHandler commandHandler;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    public Bernie() {","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"        this.commandHandler \u003d new CommandHandler();","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    public CommandHandler getCommandHandler() {","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"        return commandHandler;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"     * Returns the appropriate response based on the user input given","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, the user input","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * @return String response","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"        String response \u003d commandHandler.handle(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"        return response;","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"michaelseyo":27}},{"path":"src/main/java/bernie/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"public class Main {","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":12}},{"path":"src/main/java/bernie/MainApp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.MainWindow;","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":" * A GUI for Bernie using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"public class MainApp extends Application {","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    private Bernie bernie \u003d new Bernie();","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    private InputResponder inputResponder \u003d new InputResponder();","lastModifiedDate":"2022-02-03"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    private Image bernieImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaBernie.jpg\"));","lastModifiedDate":"2022-02-03"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainApp.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"            stage.setTitle(\"Bernie\");","lastModifiedDate":"2022-02-03"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"            stage.getIcons().add(bernieImg);","lastModifiedDate":"2022-02-03"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setBernie(bernie);","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"            stage.show();","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":37}},{"path":"src/main/java/bernie/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.BernieException;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.Task;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" * AddCommand is responsible for getting the TaskList to add the respective Type of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private final String[] parsedArr;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    private final Type type;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"     * Constructs an AddCommand Class with the respective Type based on the user input. The parsedArr is","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * determined by the parser based on the Type, giving out the relevant arguments required to","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * create the Type of task.","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, contains all our Task we create","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @param inputResponder InputResponder, responsible for printing out messages to the user for any action done","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * @param storage Storage, responsible for saving and loading of tasks into a text file","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     * @param parser Parser, helps to parse user inputs to perform subsequent actions","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input into the program","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"     * @throws BernieException For invalid command by the user","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException For a correct command with invalid arguments given by the user","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    public AddCommand(TaskList tasks, InputResponder inputResponder, Storage storage, Parser parser, String input)","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"            throws BernieException, InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        super(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"        if (parser.isType(Type.TODO, input)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"            this.parsedArr \u003d parser.getParams(Type.TODO, input);","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"            this.type \u003d Type.TODO;","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"        } else if (parser.isType(Type.DEADLINE, input)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"            this.parsedArr \u003d parser.getParams(Type.DEADLINE, input);","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"            this.type \u003d Type.DEADLINE;","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        } else if (parser.isType(Type.EVENT, input)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"            this.parsedArr \u003d parser.getParams(Type.EVENT, input);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"            this.type \u003d Type.EVENT;","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"            throw new BernieException(\"Not a valid type of task!\");","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"     * Executes the AddCommand, calling the TaskList to add the respective task based on the Type","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"     * determined by the parser. After adding, storage will save the updated tasks and inputResponder shows","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"     * the message to the user. Type that goes through is only TODO, DEADLINE, EVENT","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"    public String execute() {","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d getTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"        Storage storage \u003d getStorage();","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"        InputResponder inputResponder \u003d getInputResponder();","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"        switch (type) {","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"        case TODO:","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d tasks.addTask(parsedArr, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d tasks.addTask(parsedArr, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        case EVENT:","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d tasks.addTask(parsedArr, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"        String msgOutputFromSave \u003d storage.saveTasks(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"        int numTasksLeft \u003d tasks.numTasksLeft();","lastModifiedDate":"2022-02-06"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"        String addOutputMsg \u003d inputResponder.showAddedMsg(newTask, numTasksLeft) + msgOutputFromSave;","lastModifiedDate":"2022-02-06"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"        return addOutputMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":77}},{"path":"src/main/java/bernie/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":" * Command is the abstract class. Any subclass of Command is created in the CommandHandler","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":" * for execution of the respective command. Command is executed to perform actions based on the","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":" * input of the user into the program.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    private final InputResponder inputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private final Storage storage;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    private final Parser parser;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    private final String input;","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a Command Class","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, contains all our Task we create","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * @param inputResponder InputResponder, responsible for printing out messages to the user for any action done","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @param storage Storage, responsible for saving and loading of tasks into a text file","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * @param parser Parser, helps to parse user inputs to perform subsequent actions","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input into the program","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    public Command(TaskList tasks, InputResponder inputResponder, Storage storage, Parser parser, String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        this.inputResponder \u003d inputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    /** Executes an action and returns the resulting message */","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    public abstract String execute();","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    TaskList getTasks() {","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        return tasks;","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"    InputResponder getInputResponder() {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        return inputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"    Storage getStorage() {","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        return storage;","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":50}},{"path":"src/main/java/bernie/commands/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.BernieException;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":" * CommandHandler determines which Command to execute given the user input. Parser helps to","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * parse the user input to help CommandHandler determine the respective Command.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"public class CommandHandler {","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private InputResponder inputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    private Parser parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * Constructs the commandHandler to handle user inputs","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    public CommandHandler() {","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"        this.inputResponder \u003d new InputResponder();","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"        this.parser \u003d new Parser(tasks);","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"    public InputResponder getInputResponder() {","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        return inputResponder;","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    public Storage getStorage() {","lastModifiedDate":"2022-02-03"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"        return storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"     * Commands are performed according to the input, done by creating the respective commands and","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"     * executing it. Parser helps to determine the Type given the user input. inputResponder displays to","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"     * the user the relevant message according to their input.","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"     * Exceptions are caught and printed out for the user.","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"    public String handle(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"        Type type \u003d parser.parseType(input);","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        String executeOutputMsg \u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"            switch (type) {","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"            case LIST:","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"                if (tasks.isEmpty()) {","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"                    executeOutputMsg \u003d inputResponder.showListTasksMsg();","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"                } else {","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"                    executeOutputMsg \u003d inputResponder.showListTasksMsg(tasks);","lastModifiedDate":"2022-02-06"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"                }","lastModifiedDate":"2022-02-03"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"            case BYE:","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d inputResponder.showLeaveMsg();","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"            case EMPTY:","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"                String emptyInputMsg \u003d \"Say something???\";","lastModifiedDate":"2022-02-06"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"                throw new BernieException(emptyInputMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"            case MARK:","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"                MarkCommand markCommand \u003d new MarkCommand(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d markCommand.execute();","lastModifiedDate":"2022-02-06"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"            case DELETE:","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"                DeleteCommand deleteCommand \u003d new DeleteCommand(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d deleteCommand.execute();","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"            case ADD:","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"                AddCommand addCommand \u003d new AddCommand(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d addCommand.execute();","lastModifiedDate":"2022-02-06"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"            case FIND:","lastModifiedDate":"2022-01-28"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"                FindCommand findCommand \u003d new FindCommand(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d findCommand.execute();","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"michaelseyo"},"content":"            case REMIND:","lastModifiedDate":"2022-02-07"},{"lineNumber":81,"author":{"gitId":"michaelseyo"},"content":"                executeOutputMsg \u003d inputResponder.showDeadlinesMsg(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":82,"author":{"gitId":"michaelseyo"},"content":"            default:","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"michaelseyo"},"content":"            return executeOutputMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":86,"author":{"gitId":"michaelseyo"},"content":"        } catch (BernieException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"michaelseyo"},"content":"            String bernieErrorMsg \u003d inputResponder.showErrorMsg(e.getMessage());","lastModifiedDate":"2022-02-06"},{"lineNumber":88,"author":{"gitId":"michaelseyo"},"content":"            return bernieErrorMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":89,"author":{"gitId":"michaelseyo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"michaelseyo"},"content":"            String generalErrorMsg \u003d inputResponder.showErrorMsg(e.getMessage());","lastModifiedDate":"2022-02-06"},{"lineNumber":91,"author":{"gitId":"michaelseyo"},"content":"            return generalErrorMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":92,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":94,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":96,"author":{"gitId":"michaelseyo"},"content":"     * This fn is called by Storage to trigger commandHandler to get","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"michaelseyo"},"content":"     * TaskList to initialise the task on load.","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"michaelseyo"},"content":"     * @param line String, the line read from the text file created previously if","lastModifiedDate":"2022-02-03"},{"lineNumber":99,"author":{"gitId":"michaelseyo"},"content":"     *             the user has used the app before.","lastModifiedDate":"2022-02-03"},{"lineNumber":100,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":101,"author":{"gitId":"michaelseyo"},"content":"    public void initTaskOnLoad(String line) {","lastModifiedDate":"2022-02-03"},{"lineNumber":102,"author":{"gitId":"michaelseyo"},"content":"        // gets the args required to create the task on load","lastModifiedDate":"2022-02-06"},{"lineNumber":103,"author":{"gitId":"michaelseyo"},"content":"        String[][] args \u003d parser.parseFileLine(line);","lastModifiedDate":"2022-02-03"},{"lineNumber":104,"author":{"gitId":"michaelseyo"},"content":"        String[] taskArgs \u003d getTaskArgsForInit(args);","lastModifiedDate":"2022-02-06"},{"lineNumber":105,"author":{"gitId":"michaelseyo"},"content":"        String type \u003d getTypeForInit(args);","lastModifiedDate":"2022-02-06"},{"lineNumber":106,"author":{"gitId":"michaelseyo"},"content":"        String isDone \u003d getIsDone(args);","lastModifiedDate":"2022-02-06"},{"lineNumber":107,"author":{"gitId":"michaelseyo"},"content":"        tasks.initTask(taskArgs, type, isDone);","lastModifiedDate":"2022-02-03"},{"lineNumber":108,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":110,"author":{"gitId":"michaelseyo"},"content":"    private String getIsDone(String[][] args) {","lastModifiedDate":"2022-02-06"},{"lineNumber":111,"author":{"gitId":"michaelseyo"},"content":"        final int DONE_STATUS_ARR_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":112,"author":{"gitId":"michaelseyo"},"content":"        final int DONE_STATUS_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":113,"author":{"gitId":"michaelseyo"},"content":"        String isDone \u003d args[DONE_STATUS_ARR_INDEX][DONE_STATUS_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":114,"author":{"gitId":"michaelseyo"},"content":"        return isDone;","lastModifiedDate":"2022-02-06"},{"lineNumber":115,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":116,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":117,"author":{"gitId":"michaelseyo"},"content":"    private String getTypeForInit(String[][] args) {","lastModifiedDate":"2022-02-06"},{"lineNumber":118,"author":{"gitId":"michaelseyo"},"content":"        final int TYPE_ARR_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":119,"author":{"gitId":"michaelseyo"},"content":"        final int TYPE_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":120,"author":{"gitId":"michaelseyo"},"content":"        String type \u003d args[TYPE_ARR_INDEX][TYPE_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":121,"author":{"gitId":"michaelseyo"},"content":"        return type;","lastModifiedDate":"2022-02-06"},{"lineNumber":122,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":123,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":124,"author":{"gitId":"michaelseyo"},"content":"    private String[] getTaskArgsForInit(String[][] args) {","lastModifiedDate":"2022-02-06"},{"lineNumber":125,"author":{"gitId":"michaelseyo"},"content":"        final int TASK_ARGS_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":126,"author":{"gitId":"michaelseyo"},"content":"        String[] taskArgs \u003d args[TASK_ARGS_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":127,"author":{"gitId":"michaelseyo"},"content":"        return taskArgs;","lastModifiedDate":"2022-02-06"},{"lineNumber":128,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":129,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":129}},{"path":"src/main/java/bernie/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.Task;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * DeleteCommand is responsible for getting TaskList to delete a specific task given the","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" * task number","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private final String[] parsedArr;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a DeleteCommand Class. The parsedArr is determined by the parser,","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"     * giving out the relevant arguments required to execute delete.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, contains all our Task we create","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * @param inputResponder InputResponder, responsible for printing out messages to the user for any action done","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * @param storage Storage, responsible for saving and loading of tasks into a text file","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * @param parser Parser, helps to parse user inputs to perform subsequent actions","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input into the program","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException For a correct command with invalid arguments given by the user","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    public DeleteCommand(TaskList tasks, InputResponder inputResponder, Storage storage, Parser parser, String input)","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"            throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        super(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        this.parsedArr \u003d parser.getParams(Type.DELETE, input);","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"     * Delete the task according to parsedArr which is the parsed user input. The new state of the","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"     * tasks is saved to the data directory by storage after deletion of task and inputResponder shows the","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"     * relevant message.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    public String execute() {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d getTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        Storage storage \u003d getStorage();","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        InputResponder inputResponder \u003d getInputResponder();","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        String taskNum \u003d getTaskNum();","lastModifiedDate":"2022-02-06"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        Task deletedTask \u003d tasks.deleteTask(taskNum);","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"        String msgOutputFromSave \u003d storage.saveTasks(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        String deleteOutputMsg \u003d inputResponder.showDeleteMsg(deletedTask, tasks.numTasksLeft()) + msgOutputFromSave;","lastModifiedDate":"2022-02-06"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"        return deleteOutputMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"    private String getTaskNum() {","lastModifiedDate":"2022-02-06"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"        final int TASK_NUM_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        String taskNum \u003d parsedArr[TASK_NUM_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"        return taskNum;","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":55}},{"path":"src/main/java/bernie/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":" * FindCommand is responsible for getting the TaskList to find the tasks that contain","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * the user input","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    private final String[] parsedArr;","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a FindCommand Class. The parsedArr is determined by the parser,","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"     * giving out the relevant arguments required to execute find.","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, contains all our Task we create","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * @param inputResponder InputResponder, responsible for printing out messages to the user for any action done","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * @param storage Storage, responsible for saving and loading of tasks into a text file","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * @param parser Parser, helps to parse user inputs to perform subsequent actions","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input into the program","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException For a correct command with invalid arguments given by the user","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    public FindCommand(TaskList tasks, InputResponder inputResponder, Storage storage, Parser parser, String input)","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"            throws InvalidArgumentException {","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        super(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        this.parsedArr \u003d parser.getParams(Type.FIND, input);","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"     * Through inputResponder, the tasksList is called to find tasks that match the user input parsed","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"     * by the parser.","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    public String execute() {","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d getTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"        InputResponder inputResponder \u003d getInputResponder();","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        String description \u003d getDescription();","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        String findOutputMsg \u003d inputResponder.showFoundTasksMsg(tasks, description);","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        return findOutputMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    private String getDescription() {","lastModifiedDate":"2022-02-06"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"        String description \u003d parsedArr[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        return description;","lastModifiedDate":"2022-02-06"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"michaelseyo":50}},{"path":"src/main/java/bernie/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.commands;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.parser.Parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.Task;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import bernie.ui.InputResponder;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * MarkCommand is responsible for getting TaskList to mark/unmark the respective task number provided","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" * by the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private final String[] parsedArr;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a MarkCommand Class. The parsedArr is determined by the parser,","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"     * giving out the relevant arguments required to execute mark/unmark.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, contains all our Task we create","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * @param inputResponder InputResponder, responsible for printing out messages to the user for any action done","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * @param storage Storage, responsible for saving and loading of tasks into a text file","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @param parser Parser, helps to parse user inputs to perform subsequent actions","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, user input into the program","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException For a correct command with invalid arguments given by the user","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    public MarkCommand(TaskList tasks, InputResponder inputResponder, Storage storage, Parser parser, String input)","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"            throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        super(tasks, inputResponder, storage, parser, input);","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        this.parsedArr \u003d parser.getParams(Type.MARK, input);","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"     * Calls the TaskList to mark or unmark a task number depending on the parsedArr","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"     * which is the parsed user input","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    public String execute() {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        String action \u003d getAction();","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        String taskNum \u003d getTaskNum();","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d getTasks();","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        InputResponder inputResponder \u003d getInputResponder();","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        String outputMsg \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"        switch (action) {","lastModifiedDate":"2022-02-03"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"            Task markedTask \u003d tasks.markTask(Type.MARK, taskNum);","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"            outputMsg \u003d inputResponder.showDoneMsg(markedTask);","lastModifiedDate":"2022-02-03"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"            Task unmarkedTask \u003d tasks.markTask(Type.UNMARK, taskNum);","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"            outputMsg \u003d inputResponder.showUndoneMsg(unmarkedTask);","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-03"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"        return outputMsg;","lastModifiedDate":"2022-02-03"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"    private String getTaskNum() {","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"        final int TASK_NUM_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        return parsedArr[TASK_NUM_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    private String getAction() {","lastModifiedDate":"2022-02-06"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        final int ACTION_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"        return parsedArr[ACTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":69}},{"path":"src/main/java/bernie/enums/Type.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.enums;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":" * Different Type of tasks: notable types are EMPTY, when the user inputs nothing: \"\".","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":" * LIST, BYE, EMPTY, REMIND are inputs that won\u0027t result in creation of tasks.","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":" * MARK, UNMARK, DELETE are action tasks that changes the state of the tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" * ADD: refers to when Type is to be added are: TODO, DEADLINE, EVENT.","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":" * They are the 3 different types of tasks that can be created.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"public enum Type {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    LIST,","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    BYE,","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    EMPTY,","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"    ADD,","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    TODO,","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    DEADLINE,","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    EVENT,","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    MARK,","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    UNMARK,","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    DELETE,","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    FIND,","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    REMIND","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":23}},{"path":"src/main/java/bernie/exceptions/BernieException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.exceptions;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":" * BernieException is thrown when an invalid command is given","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"public class BernieException extends Exception {","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"    public BernieException(String errorMessage) {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":10}},{"path":"src/main/java/bernie/exceptions/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.exceptions;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":" * InvalidArgumentException is thrown whenever the user enters invalid arguments into a valid command. Such examples","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":" * are marking a task when it is already marked, or marking a task that doesn\u0027t exist, etc.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"public class InvalidArgumentException extends BernieException {","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"    public InvalidArgumentException(String errorMessage) {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"        super(errorMessage);","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":11}},{"path":"src/main/java/bernie/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":" * Parser Class helps to parse the inputs given by the user.","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * It has parseType method: a preliminary Parser to determine what type of input","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" * has the user keyed in.","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":" * It also has getParams method which help to extract out relevant parts of the input","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":" * and return parameters needed accordingly to perform actions","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"public class Parser {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a Parser class","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"     * Serves as the preliminary Parser to determine what","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"     * type of input has the user keyed in. The possible inputs are:","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"     * list, bye, mark, empty (the \"\"), delete, remind, and a general add input","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"     * which is determined in the program by inputs: todo, deadline, event","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"     * @params input String","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"    public Type parseType(String input) {","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"        if (isType(Type.LIST, input)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"            return Type.LIST;","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.BYE, input)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"            return Type.BYE;","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.MARK, input)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"            return Type.MARK;","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.EMPTY, input)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"            return Type.EMPTY;","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.DELETE, input)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"            return Type.DELETE;","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.FIND, input)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"            return Type.FIND;","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        } else if (isType(Type.REMIND, input)) {","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"            return Type.REMIND;","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"            return Type.ADD;","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"     * Verifies the user input is of which task type","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType Type","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"     * @param input String","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"     * @return boolean to affirm if the input is of this task","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"    public boolean isType(Type taskType, String input) {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        if (taskType.equals(Type.MARK)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"            boolean inputStartsWithMark \u003d input.indexOf(\"mark\") \u003d\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"            boolean inputStartsWithUnmark \u003d input.indexOf(\"unmark\") \u003d\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"            return inputStartsWithMark || inputStartsWithUnmark;","lastModifiedDate":"2022-02-06"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        } else if (taskType.equals(Type.EMPTY)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"            boolean isEmptyInput \u003d input.equals(\"\");","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"            return isEmptyInput;","lastModifiedDate":"2022-02-06"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"        boolean inputStartsWithType \u003d input.indexOf(taskType.name().toLowerCase()) \u003d\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"        return inputStartsWithType;","lastModifiedDate":"2022-02-06"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"     * Splits a user input into an array containing parameters for handling actions accordingly,","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"     * depending on taskType.","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType Type","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"michaelseyo"},"content":"     * @param input String, a user input to be split into an array of parameters","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"michaelseyo"},"content":"     * @return String[] parsedArr.","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"michaelseyo"},"content":"     * For \"todo\": an array of 1, containing description.","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"michaelseyo"},"content":"     * For \"deadline\": an array of 2: [description, by]","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"michaelseyo"},"content":"     * For \"event\": an array of 2: [description, at]","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"michaelseyo"},"content":"     * For \"mark\": an array of 2: [action, taskNum], action is either mark/unmark","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"michaelseyo"},"content":"     * For \"delete\": an array of 1: [taskNum]","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"michaelseyo"},"content":"     * For \"find\": an array of 1: [description]","lastModifiedDate":"2022-01-28"},{"lineNumber":86,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"michaelseyo"},"content":"    public String[] getParams(Type taskType, String input) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"michaelseyo"},"content":"        String description;","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"michaelseyo"},"content":"        String[] parsedArr \u003d null;","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"michaelseyo"},"content":"        switch (taskType) {","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"michaelseyo"},"content":"        case TODO:","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\"todo \");","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"michaelseyo"},"content":"            description \u003d getDescription(parsedArr, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d new String[]{ description };","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"michaelseyo"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-25"},{"lineNumber":97,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\" /by \");","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"michaelseyo"},"content":"            description \u003d getDescription(parsedArr, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"michaelseyo"},"content":"            String by \u003d getTime(parsedArr, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d new String[]{ description, by };","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"michaelseyo"},"content":"        case EVENT:","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\" /at \");","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"michaelseyo"},"content":"            description \u003d getDescription(parsedArr, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"michaelseyo"},"content":"            String at \u003d getTime(parsedArr, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d new String[]{ description, at };","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"michaelseyo"},"content":"        case MARK:","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\" \");","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"michaelseyo"},"content":"            // check valid","lastModifiedDate":"2022-01-25"},{"lineNumber":111,"author":{"gitId":"michaelseyo"},"content":"            checkMarkOrDeleteInput(parsedArr, Type.MARK);","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"michaelseyo"},"content":"            checkValidMarkAction(parsedArr);","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"michaelseyo"},"content":"        case DELETE:","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\" \");","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"michaelseyo"},"content":"            checkMarkOrDeleteInput(parsedArr, Type.DELETE);","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"michaelseyo"},"content":"            final int TASK_NUM_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":118,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d new String[]{ parsedArr[TASK_NUM_INDEX] };","lastModifiedDate":"2022-02-06"},{"lineNumber":119,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"michaelseyo"},"content":"        case FIND:","lastModifiedDate":"2022-01-28"},{"lineNumber":121,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d input.split(\"find \");","lastModifiedDate":"2022-01-28"},{"lineNumber":122,"author":{"gitId":"michaelseyo"},"content":"            description \u003d getDescription(parsedArr, Type.FIND);","lastModifiedDate":"2022-01-28"},{"lineNumber":123,"author":{"gitId":"michaelseyo"},"content":"            parsedArr \u003d new String[]{ description };","lastModifiedDate":"2022-01-28"},{"lineNumber":124,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-28"},{"lineNumber":125,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-01-25"},{"lineNumber":126,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-25"},{"lineNumber":127,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":128,"author":{"gitId":"michaelseyo"},"content":"        return parsedArr;","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":130,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":131,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"michaelseyo"},"content":"     * Checks if user marks a task that is already marked, or unmarks a task that is already unmarked","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedArr","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if user attempts to marks a marked task or unmark an unmarked task","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"michaelseyo"},"content":"    void checkValidMarkAction(String[] parsedArr) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"michaelseyo"},"content":"        final int ACTION_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":138,"author":{"gitId":"michaelseyo"},"content":"        final int TASK_NUM_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":139,"author":{"gitId":"michaelseyo"},"content":"        String action \u003d parsedArr[ACTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":140,"author":{"gitId":"michaelseyo"},"content":"        int taskIndex \u003d Integer.parseInt(parsedArr[TASK_NUM_INDEX]) - 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":141,"author":{"gitId":"michaelseyo"},"content":"        if (action.equals(\"mark\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"michaelseyo"},"content":"            tasks.getTask(taskIndex).checkMark();","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"michaelseyo"},"content":"        } else if (action.equals(\"unmark\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":144,"author":{"gitId":"michaelseyo"},"content":"            tasks.getTask(taskIndex).checkUnmark();","lastModifiedDate":"2022-01-27"},{"lineNumber":145,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":146,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"michaelseyo"},"content":"     * Checks for valid \"mark\" or \"delete\" action inputs. Throws error if it is not valid: wrong input format or","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"michaelseyo"},"content":"     * a task number is not given","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedArr String[], the user input String split into an array of String for processing","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"michaelseyo"},"content":"     *                 parameters for the action","lastModifiedDate":"2022-01-25"},{"lineNumber":153,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException for invalid inputs","lastModifiedDate":"2022-01-27"},{"lineNumber":154,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":155,"author":{"gitId":"michaelseyo"},"content":"    void checkMarkOrDeleteInput(String[] parsedArr, Type action) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":156,"author":{"gitId":"michaelseyo"},"content":"        boolean isFullInput \u003d parsedArr.length \u003d\u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":157,"author":{"gitId":"michaelseyo"},"content":"        if (isFullInput) {","lastModifiedDate":"2022-02-06"},{"lineNumber":158,"author":{"gitId":"michaelseyo"},"content":"            try {","lastModifiedDate":"2022-01-25"},{"lineNumber":159,"author":{"gitId":"michaelseyo"},"content":"                final int TASK_NUM_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":160,"author":{"gitId":"michaelseyo"},"content":"                String taskNum \u003d parsedArr[TASK_NUM_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":161,"author":{"gitId":"michaelseyo"},"content":"                Integer.parseInt(taskNum);","lastModifiedDate":"2022-01-25"},{"lineNumber":162,"author":{"gitId":"michaelseyo"},"content":"                tasks.checkTaskExists(taskNum);","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"michaelseyo"},"content":"            } catch (NumberFormatException nfe) {","lastModifiedDate":"2022-01-25"},{"lineNumber":164,"author":{"gitId":"michaelseyo"},"content":"                String notNumberMsg \u003d \"That\u0027s not a task number! Put a number.\";","lastModifiedDate":"2022-02-06"},{"lineNumber":165,"author":{"gitId":"michaelseyo"},"content":"                throw new InvalidArgumentException(notNumberMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":166,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":167,"author":{"gitId":"michaelseyo"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":168,"author":{"gitId":"michaelseyo"},"content":"            if (action.equals(Type.MARK)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":169,"author":{"gitId":"michaelseyo"},"content":"                String wrongMarkFormatMsg \u003d \"Wrong input. Type this: mark/unmark taskNumber\";","lastModifiedDate":"2022-02-06"},{"lineNumber":170,"author":{"gitId":"michaelseyo"},"content":"                throw new InvalidArgumentException(wrongMarkFormatMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":171,"author":{"gitId":"michaelseyo"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":172,"author":{"gitId":"michaelseyo"},"content":"                String wrongDeleteFormatMsg \u003d \"Wrong input. Type this: delete taskNumber\";","lastModifiedDate":"2022-02-06"},{"lineNumber":173,"author":{"gitId":"michaelseyo"},"content":"                throw new InvalidArgumentException(wrongDeleteFormatMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":174,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":175,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":176,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":177,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":178,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":179,"author":{"gitId":"michaelseyo"},"content":"     * Gets the description from the parsedArr which contains parameters for creating Task","lastModifiedDate":"2022-01-27"},{"lineNumber":180,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedArr String[], parameters for creating Task, obtained from user input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":181,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType Type","lastModifiedDate":"2022-01-25"},{"lineNumber":182,"author":{"gitId":"michaelseyo"},"content":"     * @return String description, for creating of Task","lastModifiedDate":"2022-01-25"},{"lineNumber":183,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException for invalid descriptions such as empty or number description","lastModifiedDate":"2022-01-27"},{"lineNumber":184,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":185,"author":{"gitId":"michaelseyo"},"content":"    String getDescription(String[] parsedArr, Type taskType) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":186,"author":{"gitId":"michaelseyo"},"content":"        String description;","lastModifiedDate":"2022-01-25"},{"lineNumber":187,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":188,"author":{"gitId":"michaelseyo"},"content":"            if (taskType.equals(Type.TODO) || taskType.equals(Type.FIND)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":189,"author":{"gitId":"michaelseyo"},"content":"                final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":190,"author":{"gitId":"michaelseyo"},"content":"                description \u003d parsedArr[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":191,"author":{"gitId":"michaelseyo"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":192,"author":{"gitId":"michaelseyo"},"content":"                final int DESCRIPTION_PART_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":193,"author":{"gitId":"michaelseyo"},"content":"                description \u003d extractDescriptionFromType(taskType, parsedArr[DESCRIPTION_PART_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":194,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":195,"author":{"gitId":"michaelseyo"},"content":"            checkDescriptionNotNumber(description);","lastModifiedDate":"2022-01-25"},{"lineNumber":196,"author":{"gitId":"michaelseyo"},"content":"            return description;","lastModifiedDate":"2022-01-25"},{"lineNumber":197,"author":{"gitId":"michaelseyo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":198,"author":{"gitId":"michaelseyo"},"content":"            String emptyDescriptionMsg \u003d \"Where\u0027s the description?\";","lastModifiedDate":"2022-02-06"},{"lineNumber":199,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(emptyDescriptionMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":200,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":201,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":202,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":203,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":204,"author":{"gitId":"michaelseyo"},"content":"     * For extracting description from deadline and event type","lastModifiedDate":"2022-02-06"},{"lineNumber":205,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType Type, either deadline or event","lastModifiedDate":"2022-02-06"},{"lineNumber":206,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedPart String of the first half of the parsed part: e.g \"deadline do dishes\" from","lastModifiedDate":"2022-02-06"},{"lineNumber":207,"author":{"gitId":"michaelseyo"},"content":"     *                   \"deadline do dishes /by ...\"","lastModifiedDate":"2022-02-06"},{"lineNumber":208,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the description","lastModifiedDate":"2022-02-06"},{"lineNumber":209,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":210,"author":{"gitId":"michaelseyo"},"content":"    private String extractDescriptionFromType(Type taskType, String parsedPart) {","lastModifiedDate":"2022-02-06"},{"lineNumber":211,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":212,"author":{"gitId":"michaelseyo"},"content":"        final String typePart \u003d taskType.name().toLowerCase() + \" \";","lastModifiedDate":"2022-02-06"},{"lineNumber":213,"author":{"gitId":"michaelseyo"},"content":"        return parsedPart.split(typePart)[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":214,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":215,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":216,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":217,"author":{"gitId":"michaelseyo"},"content":"     * Checks if the description is a valid String: not a number.","lastModifiedDate":"2022-01-27"},{"lineNumber":218,"author":{"gitId":"michaelseyo"},"content":"     * @param description","lastModifiedDate":"2022-01-27"},{"lineNumber":219,"author":{"gitId":"michaelseyo"},"content":"     * @return boolean","lastModifiedDate":"2022-01-27"},{"lineNumber":220,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if the description is a number","lastModifiedDate":"2022-01-27"},{"lineNumber":221,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":222,"author":{"gitId":"michaelseyo"},"content":"    boolean checkDescriptionNotNumber(String description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":223,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":224,"author":{"gitId":"michaelseyo"},"content":"            Integer.parseInt(description);","lastModifiedDate":"2022-01-25"},{"lineNumber":225,"author":{"gitId":"michaelseyo"},"content":"            String nonStringDescriptionMsg \u003d \"Description can\u0027t be numbers? We need String!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":226,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(nonStringDescriptionMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":227,"author":{"gitId":"michaelseyo"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2022-01-25"},{"lineNumber":228,"author":{"gitId":"michaelseyo"},"content":"            return true;","lastModifiedDate":"2022-01-25"},{"lineNumber":229,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":230,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":231,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":232,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":233,"author":{"gitId":"michaelseyo"},"content":"     * Gets the time from the parsedArr which contains parameters for creating Task","lastModifiedDate":"2022-01-27"},{"lineNumber":234,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedArr String[], parameters for creating Task, obtained from user input String.","lastModifiedDate":"2022-01-27"},{"lineNumber":235,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType type, if it is DEADLINE we check if the input date format is correct.","lastModifiedDate":"2022-01-25"},{"lineNumber":236,"author":{"gitId":"michaelseyo"},"content":"     * @return String time, for creating of Task. It is of format: yyyy-mm-dd for converting","lastModifiedDate":"2022-01-25"},{"lineNumber":237,"author":{"gitId":"michaelseyo"},"content":"     * to LocalDate object by TaskList\u0027s addTask class","lastModifiedDate":"2022-01-25"},{"lineNumber":238,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if there is no time input given or wrong date format","lastModifiedDate":"2022-01-27"},{"lineNumber":239,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":240,"author":{"gitId":"michaelseyo"},"content":"    String getTime(String[] parsedArr, Type taskType) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":241,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":242,"author":{"gitId":"michaelseyo"},"content":"            if (taskType.equals(Type.DEADLINE)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":243,"author":{"gitId":"michaelseyo"},"content":"                final int TIME_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":244,"author":{"gitId":"michaelseyo"},"content":"                LocalDate checkValid \u003d LocalDate.parse(parsedArr[TIME_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":245,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":246,"author":{"gitId":"michaelseyo"},"content":"            return parsedArr[1];","lastModifiedDate":"2022-01-27"},{"lineNumber":247,"author":{"gitId":"michaelseyo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":248,"author":{"gitId":"michaelseyo"},"content":"            String missingTimeMsg \u003d \"Where\u0027s your time input?\";","lastModifiedDate":"2022-02-06"},{"lineNumber":249,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(missingTimeMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":250,"author":{"gitId":"michaelseyo"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":251,"author":{"gitId":"michaelseyo"},"content":"            String wrongDateFormatMsg \u003d \"Please enter deadline date in: yyyy-mm-dd\";","lastModifiedDate":"2022-02-06"},{"lineNumber":252,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(wrongDateFormatMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":253,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":254,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":255,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":256,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":257,"author":{"gitId":"michaelseyo"},"content":"     * Takes in the line that is read by the FileReader and parses the line to create the arguments required","lastModifiedDate":"2022-02-03"},{"lineNumber":258,"author":{"gitId":"michaelseyo"},"content":"     * to create the respective tasks upon loading the file on start up. This is assuming that the file does exist.","lastModifiedDate":"2022-02-03"},{"lineNumber":259,"author":{"gitId":"michaelseyo"},"content":"     * @param line String, the line of the text file that contains the text for a singular task.","lastModifiedDate":"2022-02-03"},{"lineNumber":260,"author":{"gitId":"michaelseyo"},"content":"     *             Format is:","lastModifiedDate":"2022-02-03"},{"lineNumber":261,"author":{"gitId":"michaelseyo"},"content":"     *             Todo objects: taskNumber. [T][ ] borrow book","lastModifiedDate":"2022-02-03"},{"lineNumber":262,"author":{"gitId":"michaelseyo"},"content":"     *             Deadline objects: taskNumber. [D][ ] buy equipment (by: Feb 1 2022)","lastModifiedDate":"2022-02-03"},{"lineNumber":263,"author":{"gitId":"michaelseyo"},"content":"     *             Event objects: taskNumber. [E][ ] project meeting (at: Mon 2-4pm)","lastModifiedDate":"2022-02-03"},{"lineNumber":264,"author":{"gitId":"michaelseyo"},"content":"     * @return String[][], an array of arguments required create the object:","lastModifiedDate":"2022-02-03"},{"lineNumber":265,"author":{"gitId":"michaelseyo"},"content":"     *          [ [taskArgs], [ type ], [ isDone ] ]","lastModifiedDate":"2022-02-03"},{"lineNumber":266,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":267,"author":{"gitId":"michaelseyo"},"content":"    public String[][] parseFileLine(String line) {","lastModifiedDate":"2022-02-03"},{"lineNumber":268,"author":{"gitId":"michaelseyo"},"content":"        String[] splitArr \u003d line.split(\"\\\\[\");","lastModifiedDate":"2022-02-03"},{"lineNumber":269,"author":{"gitId":"michaelseyo"},"content":"        // Task type","lastModifiedDate":"2022-02-03"},{"lineNumber":270,"author":{"gitId":"michaelseyo"},"content":"        String type \u003d parseTaskInLine(splitArr);","lastModifiedDate":"2022-02-03"},{"lineNumber":271,"author":{"gitId":"michaelseyo"},"content":"        // done or not","lastModifiedDate":"2022-02-03"},{"lineNumber":272,"author":{"gitId":"michaelseyo"},"content":"        String isDone \u003d isDoneStatusInLine(splitArr);","lastModifiedDate":"2022-02-03"},{"lineNumber":273,"author":{"gitId":"michaelseyo"},"content":"        // Task args","lastModifiedDate":"2022-02-03"},{"lineNumber":274,"author":{"gitId":"michaelseyo"},"content":"        String[] taskArgs \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":275,"author":{"gitId":"michaelseyo"},"content":"        switch (type) {","lastModifiedDate":"2022-02-03"},{"lineNumber":276,"author":{"gitId":"michaelseyo"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-03"},{"lineNumber":277,"author":{"gitId":"michaelseyo"},"content":"            taskArgs \u003d parseToDoInLine(splitArr);","lastModifiedDate":"2022-02-03"},{"lineNumber":278,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":279,"author":{"gitId":"michaelseyo"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-03"},{"lineNumber":280,"author":{"gitId":"michaelseyo"},"content":"            taskArgs \u003d parseDeadlineInLine(splitArr);","lastModifiedDate":"2022-02-03"},{"lineNumber":281,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":282,"author":{"gitId":"michaelseyo"},"content":"        case \"event\":","lastModifiedDate":"2022-02-03"},{"lineNumber":283,"author":{"gitId":"michaelseyo"},"content":"            taskArgs \u003d parseEventInLine(splitArr);","lastModifiedDate":"2022-02-03"},{"lineNumber":284,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":285,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-03"},{"lineNumber":286,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":287,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-03"},{"lineNumber":288,"author":{"gitId":"michaelseyo"},"content":"        String[][] initTaskArgs \u003d new String[][]{ taskArgs, new String[]{ type }, new String[]{ isDone } };","lastModifiedDate":"2022-02-06"},{"lineNumber":289,"author":{"gitId":"michaelseyo"},"content":"        return initTaskArgs;","lastModifiedDate":"2022-02-06"},{"lineNumber":290,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":291,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":292,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":293,"author":{"gitId":"michaelseyo"},"content":"     * Takes in the result of the split array by open brackets and","lastModifiedDate":"2022-02-03"},{"lineNumber":294,"author":{"gitId":"michaelseyo"},"content":"     * parses out the task type","lastModifiedDate":"2022-02-03"},{"lineNumber":295,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr","lastModifiedDate":"2022-02-03"},{"lineNumber":296,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the task type","lastModifiedDate":"2022-02-03"},{"lineNumber":297,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":298,"author":{"gitId":"michaelseyo"},"content":"    String parseTaskInLine(String[] splitArr) {","lastModifiedDate":"2022-02-03"},{"lineNumber":299,"author":{"gitId":"michaelseyo"},"content":"        final int LETTER_PART_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":300,"author":{"gitId":"michaelseyo"},"content":"        String letter \u003d extractLetter(splitArr[LETTER_PART_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":301,"author":{"gitId":"michaelseyo"},"content":"        String type \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":302,"author":{"gitId":"michaelseyo"},"content":"        switch (letter) {","lastModifiedDate":"2022-02-03"},{"lineNumber":303,"author":{"gitId":"michaelseyo"},"content":"        case \"T\":","lastModifiedDate":"2022-02-03"},{"lineNumber":304,"author":{"gitId":"michaelseyo"},"content":"            type \u003d \"todo\";","lastModifiedDate":"2022-02-03"},{"lineNumber":305,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":306,"author":{"gitId":"michaelseyo"},"content":"        case \"D\":","lastModifiedDate":"2022-02-03"},{"lineNumber":307,"author":{"gitId":"michaelseyo"},"content":"            type \u003d \"deadline\";","lastModifiedDate":"2022-02-03"},{"lineNumber":308,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":309,"author":{"gitId":"michaelseyo"},"content":"        case \"E\":","lastModifiedDate":"2022-02-03"},{"lineNumber":310,"author":{"gitId":"michaelseyo"},"content":"            type \u003d \"event\";","lastModifiedDate":"2022-02-03"},{"lineNumber":311,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":312,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-03"},{"lineNumber":313,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":314,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-03"},{"lineNumber":315,"author":{"gitId":"michaelseyo"},"content":"        return type;","lastModifiedDate":"2022-02-03"},{"lineNumber":316,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":317,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":318,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":319,"author":{"gitId":"michaelseyo"},"content":"     * Extracts the letter of the type of tasks from the rest of the splitArr String","lastModifiedDate":"2022-02-06"},{"lineNumber":320,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String, after splitting the letter part out","lastModifiedDate":"2022-02-06"},{"lineNumber":321,"author":{"gitId":"michaelseyo"},"content":"     * @return String, a letter representing the type either: \"T\", \"D\", \"E\"","lastModifiedDate":"2022-02-06"},{"lineNumber":322,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":323,"author":{"gitId":"michaelseyo"},"content":"    private String extractLetter(String splitArr) {","lastModifiedDate":"2022-02-06"},{"lineNumber":324,"author":{"gitId":"michaelseyo"},"content":"        return splitArr.substring(0, 1);","lastModifiedDate":"2022-02-06"},{"lineNumber":325,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":326,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":327,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":328,"author":{"gitId":"michaelseyo"},"content":"     * Parses the splitArr to get the done status of the task","lastModifiedDate":"2022-02-03"},{"lineNumber":329,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String[], array split by an open square bracket","lastModifiedDate":"2022-02-03"},{"lineNumber":330,"author":{"gitId":"michaelseyo"},"content":"     * @return String, indicating the done status by a whitespace (indicatingg not done)","lastModifiedDate":"2022-02-03"},{"lineNumber":331,"author":{"gitId":"michaelseyo"},"content":"     *          or X (indicates done)","lastModifiedDate":"2022-02-03"},{"lineNumber":332,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":333,"author":{"gitId":"michaelseyo"},"content":"    String isDoneStatusInLine(String[] splitArr) {","lastModifiedDate":"2022-02-03"},{"lineNumber":334,"author":{"gitId":"michaelseyo"},"content":"        final int DONE_STATUS_PART_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":335,"author":{"gitId":"michaelseyo"},"content":"        return extractDoneStatus(splitArr[DONE_STATUS_PART_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":336,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":337,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":338,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":339,"author":{"gitId":"michaelseyo"},"content":"     * Extracts the done status from the rest of the splitArr String","lastModifiedDate":"2022-02-06"},{"lineNumber":340,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String, after splitting the done status part out","lastModifiedDate":"2022-02-06"},{"lineNumber":341,"author":{"gitId":"michaelseyo"},"content":"     * @return String, either \"X\" indicating done or \" \" not done","lastModifiedDate":"2022-02-06"},{"lineNumber":342,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":343,"author":{"gitId":"michaelseyo"},"content":"    private String extractDoneStatus(String splitArr) {","lastModifiedDate":"2022-02-06"},{"lineNumber":344,"author":{"gitId":"michaelseyo"},"content":"        return splitArr.substring(0, 1);","lastModifiedDate":"2022-02-06"},{"lineNumber":345,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":346,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":347,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":348,"author":{"gitId":"michaelseyo"},"content":"     * Parses the event in the line inside the text file to return its","lastModifiedDate":"2022-02-03"},{"lineNumber":349,"author":{"gitId":"michaelseyo"},"content":"     * description and timing at, in a String[]","lastModifiedDate":"2022-02-03"},{"lineNumber":350,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String[], array split by [","lastModifiedDate":"2022-02-03"},{"lineNumber":351,"author":{"gitId":"michaelseyo"},"content":"     * @return String[], args for creating event","lastModifiedDate":"2022-02-03"},{"lineNumber":352,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":353,"author":{"gitId":"michaelseyo"},"content":"    String[] parseEventInLine(String[] splitArr) {","lastModifiedDate":"2022-02-03"},{"lineNumber":354,"author":{"gitId":"michaelseyo"},"content":"        final int PARSING_PART_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":355,"author":{"gitId":"michaelseyo"},"content":"        final String SPLIT_SEP_AT \u003d \" \\\\(at: \";","lastModifiedDate":"2022-02-06"},{"lineNumber":356,"author":{"gitId":"michaelseyo"},"content":"        final String SPLIT_SEP_DESCRIPTION \u003d \".] \";","lastModifiedDate":"2022-02-06"},{"lineNumber":357,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_PART_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":358,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":359,"author":{"gitId":"michaelseyo"},"content":"        final int TIMING_AT_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":360,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":361,"author":{"gitId":"michaelseyo"},"content":"        String parsingPart \u003d splitArr[PARSING_PART_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":362,"author":{"gitId":"michaelseyo"},"content":"        String[] parsedArr \u003d parsingPart.split(SPLIT_SEP_AT);","lastModifiedDate":"2022-02-06"},{"lineNumber":363,"author":{"gitId":"michaelseyo"},"content":"        String description \u003d parsedArr[DESCRIPTION_PART_INDEX].split(SPLIT_SEP_DESCRIPTION)[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":364,"author":{"gitId":"michaelseyo"},"content":"        String at \u003d removeEndBracket(parsedArr[TIMING_AT_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":365,"author":{"gitId":"michaelseyo"},"content":"        return new String[]{ description, at };","lastModifiedDate":"2022-02-03"},{"lineNumber":366,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":367,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":368,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":369,"author":{"gitId":"michaelseyo"},"content":"     * Parses the deadline in the line inside the text file to return its","lastModifiedDate":"2022-02-03"},{"lineNumber":370,"author":{"gitId":"michaelseyo"},"content":"     * description and timing by, in a String[]","lastModifiedDate":"2022-02-03"},{"lineNumber":371,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String[], array split by [","lastModifiedDate":"2022-02-03"},{"lineNumber":372,"author":{"gitId":"michaelseyo"},"content":"     * @return String[], args for creating deadline","lastModifiedDate":"2022-02-03"},{"lineNumber":373,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":374,"author":{"gitId":"michaelseyo"},"content":"    String[] parseDeadlineInLine(String[] splitArr) {","lastModifiedDate":"2022-02-03"},{"lineNumber":375,"author":{"gitId":"michaelseyo"},"content":"        final int PARSING_PART_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":376,"author":{"gitId":"michaelseyo"},"content":"        final String SPLIT_SEP_AT \u003d \" \\\\(by: \";","lastModifiedDate":"2022-02-06"},{"lineNumber":377,"author":{"gitId":"michaelseyo"},"content":"        final String SPLIT_SEP_DESCRIPTION \u003d \".] \";","lastModifiedDate":"2022-02-06"},{"lineNumber":378,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_PART_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":379,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":380,"author":{"gitId":"michaelseyo"},"content":"        final int DEADLINE_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":381,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":382,"author":{"gitId":"michaelseyo"},"content":"        String parsingPart \u003d splitArr[PARSING_PART_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":383,"author":{"gitId":"michaelseyo"},"content":"        String[] parsedArr \u003d parsingPart.split(SPLIT_SEP_AT);","lastModifiedDate":"2022-02-06"},{"lineNumber":384,"author":{"gitId":"michaelseyo"},"content":"        String description \u003d parsedArr[DESCRIPTION_PART_INDEX].split(SPLIT_SEP_DESCRIPTION)[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":385,"author":{"gitId":"michaelseyo"},"content":"        String by \u003d removeEndBracket(parsedArr[DEADLINE_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":386,"author":{"gitId":"michaelseyo"},"content":"        String byInLocalDateFormat \u003d changeDateFormat(by);","lastModifiedDate":"2022-02-03"},{"lineNumber":387,"author":{"gitId":"michaelseyo"},"content":"        return new String[]{ description, byInLocalDateFormat };","lastModifiedDate":"2022-02-03"},{"lineNumber":388,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":389,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":390,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":391,"author":{"gitId":"michaelseyo"},"content":"     * Parses the ToDo in the line inside the text file to return its","lastModifiedDate":"2022-02-03"},{"lineNumber":392,"author":{"gitId":"michaelseyo"},"content":"     * description, in a String[]","lastModifiedDate":"2022-02-03"},{"lineNumber":393,"author":{"gitId":"michaelseyo"},"content":"     * @param splitArr String[], array split by [","lastModifiedDate":"2022-02-03"},{"lineNumber":394,"author":{"gitId":"michaelseyo"},"content":"     * @return String[], args for creating todo","lastModifiedDate":"2022-02-03"},{"lineNumber":395,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":396,"author":{"gitId":"michaelseyo"},"content":"    String[] parseToDoInLine(String[] splitArr) {","lastModifiedDate":"2022-02-03"},{"lineNumber":397,"author":{"gitId":"michaelseyo"},"content":"        final int PARSING_PART_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":398,"author":{"gitId":"michaelseyo"},"content":"        final String SPLIT_SEP_DESCRIPTION \u003d \".] \";","lastModifiedDate":"2022-02-06"},{"lineNumber":399,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":400,"author":{"gitId":"michaelseyo"},"content":"        String parsingPart \u003d splitArr[PARSING_PART_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":401,"author":{"gitId":"michaelseyo"},"content":"        String description \u003d parsingPart.split(SPLIT_SEP_DESCRIPTION)[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":402,"author":{"gitId":"michaelseyo"},"content":"        return new String[]{ description };","lastModifiedDate":"2022-02-03"},{"lineNumber":403,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":404,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":405,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":406,"author":{"gitId":"michaelseyo"},"content":"     * Takes in a String that is partially parsed of form ....)","lastModifiedDate":"2022-02-03"},{"lineNumber":407,"author":{"gitId":"michaelseyo"},"content":"     * @param str String","lastModifiedDate":"2022-02-03"},{"lineNumber":408,"author":{"gitId":"michaelseyo"},"content":"     * @return String, without end bracket","lastModifiedDate":"2022-02-03"},{"lineNumber":409,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":410,"author":{"gitId":"michaelseyo"},"content":"    String removeEndBracket(String str) {","lastModifiedDate":"2022-02-03"},{"lineNumber":411,"author":{"gitId":"michaelseyo"},"content":"        return str.substring(0, str.length() - 1);","lastModifiedDate":"2022-02-03"},{"lineNumber":412,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":413,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":414,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":415,"author":{"gitId":"michaelseyo"},"content":"     * Takes in the date in the line of text file and converts it to","lastModifiedDate":"2022-02-03"},{"lineNumber":416,"author":{"gitId":"michaelseyo"},"content":"     * yyyy-mm-dd format so we can create it as LocalDate object","lastModifiedDate":"2022-02-03"},{"lineNumber":417,"author":{"gitId":"michaelseyo"},"content":"     * @param date String, in format mmm dd yyyy","lastModifiedDate":"2022-02-03"},{"lineNumber":418,"author":{"gitId":"michaelseyo"},"content":"     * @return date in yyyy-mm-dd format","lastModifiedDate":"2022-02-03"},{"lineNumber":419,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":420,"author":{"gitId":"michaelseyo"},"content":"    String changeDateFormat(String date) {","lastModifiedDate":"2022-02-03"},{"lineNumber":421,"author":{"gitId":"michaelseyo"},"content":"        final int MONTH_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":422,"author":{"gitId":"michaelseyo"},"content":"        final int DAY_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":423,"author":{"gitId":"michaelseyo"},"content":"        final int YEAR_INDEX \u003d 2;","lastModifiedDate":"2022-02-06"},{"lineNumber":424,"author":{"gitId":"michaelseyo"},"content":"        final String WHITESPACE \u003d \" \";","lastModifiedDate":"2022-02-06"},{"lineNumber":425,"author":{"gitId":"michaelseyo"},"content":"        String[] splitArr \u003d date.split(WHITESPACE);","lastModifiedDate":"2022-02-06"},{"lineNumber":426,"author":{"gitId":"michaelseyo"},"content":"        String year \u003d splitArr[YEAR_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":427,"author":{"gitId":"michaelseyo"},"content":"        String day \u003d splitArr[DAY_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":428,"author":{"gitId":"michaelseyo"},"content":"        String month \u003d splitArr[MONTH_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":429,"author":{"gitId":"michaelseyo"},"content":"        String numericMonth \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":430,"author":{"gitId":"michaelseyo"},"content":"        switch (month) {","lastModifiedDate":"2022-02-03"},{"lineNumber":431,"author":{"gitId":"michaelseyo"},"content":"        case \"Jan\":","lastModifiedDate":"2022-02-03"},{"lineNumber":432,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"01\";","lastModifiedDate":"2022-02-03"},{"lineNumber":433,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":434,"author":{"gitId":"michaelseyo"},"content":"        case \"Feb\":","lastModifiedDate":"2022-02-03"},{"lineNumber":435,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"02\";","lastModifiedDate":"2022-02-03"},{"lineNumber":436,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":437,"author":{"gitId":"michaelseyo"},"content":"        case \"Mar\":","lastModifiedDate":"2022-02-03"},{"lineNumber":438,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"03\";","lastModifiedDate":"2022-02-03"},{"lineNumber":439,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":440,"author":{"gitId":"michaelseyo"},"content":"        case \"Apr\":","lastModifiedDate":"2022-02-03"},{"lineNumber":441,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"04\";","lastModifiedDate":"2022-02-03"},{"lineNumber":442,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":443,"author":{"gitId":"michaelseyo"},"content":"        case \"May\":","lastModifiedDate":"2022-02-03"},{"lineNumber":444,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"05\";","lastModifiedDate":"2022-02-03"},{"lineNumber":445,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":446,"author":{"gitId":"michaelseyo"},"content":"        case \"Jun\":","lastModifiedDate":"2022-02-03"},{"lineNumber":447,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"06\";","lastModifiedDate":"2022-02-03"},{"lineNumber":448,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":449,"author":{"gitId":"michaelseyo"},"content":"        case \"Jul\":","lastModifiedDate":"2022-02-03"},{"lineNumber":450,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"07\";","lastModifiedDate":"2022-02-03"},{"lineNumber":451,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":452,"author":{"gitId":"michaelseyo"},"content":"        case \"Aug\":","lastModifiedDate":"2022-02-03"},{"lineNumber":453,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"08\";","lastModifiedDate":"2022-02-03"},{"lineNumber":454,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":455,"author":{"gitId":"michaelseyo"},"content":"        case \"Sep\":","lastModifiedDate":"2022-02-03"},{"lineNumber":456,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"09\";","lastModifiedDate":"2022-02-03"},{"lineNumber":457,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":458,"author":{"gitId":"michaelseyo"},"content":"        case \"Oct\":","lastModifiedDate":"2022-02-03"},{"lineNumber":459,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"10\";","lastModifiedDate":"2022-02-03"},{"lineNumber":460,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":461,"author":{"gitId":"michaelseyo"},"content":"        case \"Nov\":","lastModifiedDate":"2022-02-03"},{"lineNumber":462,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"11\";","lastModifiedDate":"2022-02-03"},{"lineNumber":463,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":464,"author":{"gitId":"michaelseyo"},"content":"        case \"Dec\":","lastModifiedDate":"2022-02-03"},{"lineNumber":465,"author":{"gitId":"michaelseyo"},"content":"            numericMonth \u003d \"12\";","lastModifiedDate":"2022-02-03"},{"lineNumber":466,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":467,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-03"},{"lineNumber":468,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":469,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-03"},{"lineNumber":470,"author":{"gitId":"michaelseyo"},"content":"        return String.format(\"%s-%s-%s\", year, numericMonth, day);","lastModifiedDate":"2022-02-03"},{"lineNumber":471,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":472,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"michaelseyo":472}},{"path":"src/main/java/bernie/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.storage;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import java.io.File;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"import bernie.commands.CommandHandler;","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":" * Storage class handles the loading and saving of tasks in the file","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"public class Storage {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    private String root \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    private File tasksFile;","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    private File dataDir;","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * Constructs the Storage class with the File tasksFile and dataDir.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * tasksFile is the path of where we want to store the text file containing the","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     * information of the tasks on our TaskList.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"     * dataDir is the directory where the tasksFile is suppose to be in","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    public Storage() {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        this.tasksFile \u003d new File(root + \"/data\", \"Bernie.txt\");","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        this.dataDir \u003d new File(root, \"data\");","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"     * Loads the data when Bernie starts up if it exists and reads. If doesn\u0027t","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"     * exist, creates the required files","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"     * @param commandHandler CommandHandler, to initialize the tasks on load","lastModifiedDate":"2022-02-03"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    public String loadTasks(CommandHandler commandHandler) {","lastModifiedDate":"2022-02-03"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"            if (tasksFile.length() \u003d\u003d 0) {","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"                String emptyListMsg \u003d \"Nothing on your previous list!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"                return emptyListMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"            if (tasksFile.exists() \u0026\u0026 dataDir.exists()) {","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"                StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-03"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"                s.append(\"Previously on the list:\\n\");","lastModifiedDate":"2022-02-03"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"                FileReader fileReader \u003d new FileReader(tasksFile);","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"                BufferedReader reader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"                String outputMsg \u003d loadLines(s, commandHandler, reader);","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"                reader.close();","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"                return outputMsg;","lastModifiedDate":"2022-02-03"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"                // create dir and file","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"                dataDir.mkdir();","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"                tasksFile.createNewFile();","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"                boolean fileExists \u003d tasksFile.exists();","lastModifiedDate":"2022-02-06"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"                assert fileExists;","lastModifiedDate":"2022-02-06"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"                String noFileMsg \u003d \"Didn\u0027t find any existing task files, created one for you!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"                return noFileMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"     * Gets the reader to read each line. Each line will be concatenated","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"     * via the StringBuilder to display the resulting output message for","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"     * the user while simultaneously getting commandHandler to initialise","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"     * these tasks by taking the line as input.","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"     * @param s StringBuilder, to build output message","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"     * @param commandHandler CommandHandler, to initialise tasks via the line","lastModifiedDate":"2022-02-03"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"     * @param reader BufferedReader, to read the lines of our text file","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resuling output message after reading lines","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"     * @throws IOException in the case of errors","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"michaelseyo"},"content":"    String loadLines(StringBuilder s, CommandHandler commandHandler,","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"michaelseyo"},"content":"                     BufferedReader reader) throws IOException {","lastModifiedDate":"2022-02-03"},{"lineNumber":80,"author":{"gitId":"michaelseyo"},"content":"        while (true) {","lastModifiedDate":"2022-02-03"},{"lineNumber":81,"author":{"gitId":"michaelseyo"},"content":"            String line \u003d reader.readLine();","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"michaelseyo"},"content":"            final String NO_TASKS \u003d \"NOTHING! :D\";","lastModifiedDate":"2022-02-06"},{"lineNumber":83,"author":{"gitId":"michaelseyo"},"content":"            if (line \u003d\u003d null) {","lastModifiedDate":"2022-02-03"},{"lineNumber":84,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"michaelseyo"},"content":"            // previously made text file, but text file has no tasks","lastModifiedDate":"2022-02-06"},{"lineNumber":87,"author":{"gitId":"michaelseyo"},"content":"            if (line.equals(NO_TASKS)) {","lastModifiedDate":"2022-02-06"},{"lineNumber":88,"author":{"gitId":"michaelseyo"},"content":"                s.append(NO_TASKS);","lastModifiedDate":"2022-02-06"},{"lineNumber":89,"author":{"gitId":"michaelseyo"},"content":"                break;","lastModifiedDate":"2022-02-06"},{"lineNumber":90,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":91,"author":{"gitId":"michaelseyo"},"content":"            commandHandler.initTaskOnLoad(line);","lastModifiedDate":"2022-02-03"},{"lineNumber":92,"author":{"gitId":"michaelseyo"},"content":"            s.append(line + \"\\n\");","lastModifiedDate":"2022-02-03"},{"lineNumber":93,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-03"},{"lineNumber":94,"author":{"gitId":"michaelseyo"},"content":"        String outputMsg \u003d s.toString();","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"michaelseyo"},"content":"        return outputMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":96,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":97,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":98,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"michaelseyo"},"content":"     * Handles the conditions for checking if the File exist before","lastModifiedDate":"2022-01-25"},{"lineNumber":100,"author":{"gitId":"michaelseyo"},"content":"     * saving the tasks with the save function. If File doesn\u0027t exist,","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"michaelseyo"},"content":"     * the required files will be created before save.","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, takes in the current tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":105,"author":{"gitId":"michaelseyo"},"content":"    public String saveTasks(TaskList tasks) {","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"michaelseyo"},"content":"            if (!dataDir.exists() || !tasksFile.exists()) {","lastModifiedDate":"2022-02-06"},{"lineNumber":108,"author":{"gitId":"michaelseyo"},"content":"                // create dir and file","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"michaelseyo"},"content":"                dataDir.mkdir();","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"michaelseyo"},"content":"                tasksFile.createNewFile();","lastModifiedDate":"2022-01-25"},{"lineNumber":111,"author":{"gitId":"michaelseyo"},"content":"                boolean fileExists \u003d tasksFile.exists();","lastModifiedDate":"2022-02-06"},{"lineNumber":112,"author":{"gitId":"michaelseyo"},"content":"                assert fileExists;","lastModifiedDate":"2022-02-06"},{"lineNumber":113,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"michaelseyo"},"content":"            save(tasks);","lastModifiedDate":"2022-02-06"},{"lineNumber":115,"author":{"gitId":"michaelseyo"},"content":"            String successMsg \u003d \"Successfully saved current tasks.\";","lastModifiedDate":"2022-02-06"},{"lineNumber":116,"author":{"gitId":"michaelseyo"},"content":"            return successMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":117,"author":{"gitId":"michaelseyo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"michaelseyo"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-01"},{"lineNumber":119,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":123,"author":{"gitId":"michaelseyo"},"content":"     * Saves the most updated tasks whenever the tasks changes upon","lastModifiedDate":"2022-01-27"},{"lineNumber":124,"author":{"gitId":"michaelseyo"},"content":"     * delete or add by writing the file. The file is saved to ./data/Bernie.txt","lastModifiedDate":"2022-01-25"},{"lineNumber":125,"author":{"gitId":"michaelseyo"},"content":"     * @params tasks TaskList, takes in the current tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":126,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":127,"author":{"gitId":"michaelseyo"},"content":"     * @throws IOException for any IO errors","lastModifiedDate":"2022-02-03"},{"lineNumber":128,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":129,"author":{"gitId":"michaelseyo"},"content":"    void save(TaskList tasks) throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":130,"author":{"gitId":"michaelseyo"},"content":"        FileWriter fileWriter \u003d new FileWriter(tasksFile);","lastModifiedDate":"2022-01-25"},{"lineNumber":131,"author":{"gitId":"michaelseyo"},"content":"        BufferedWriter writer \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"michaelseyo"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2022-01-25"},{"lineNumber":133,"author":{"gitId":"michaelseyo"},"content":"            String noTasksMsg \u003d \"NOTHING! :D\";","lastModifiedDate":"2022-02-06"},{"lineNumber":134,"author":{"gitId":"michaelseyo"},"content":"            writer.write(noTasksMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":135,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"michaelseyo"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":137,"author":{"gitId":"michaelseyo"},"content":"            Task currentTask \u003d tasks.getTask(i);","lastModifiedDate":"2022-01-25"},{"lineNumber":138,"author":{"gitId":"michaelseyo"},"content":"            writer.write(String.format(\"%d. %s\\n\", i + 1, currentTask));","lastModifiedDate":"2022-01-25"},{"lineNumber":139,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":140,"author":{"gitId":"michaelseyo"},"content":"        writer.close();","lastModifiedDate":"2022-01-25"},{"lineNumber":141,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":142,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"michaelseyo":142}},{"path":"src/main/java/bernie/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" * Deadline is one of the Task that can be created by the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    private LocalDate by;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a Deadline class for tasks that needs to be done before a timing","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"     * @param description String","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"     * @param by LocalDate, created with a String input of form \"yyyy-mm-dd\"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    Deadline(String description, LocalDate by) {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"     * Formats the LocalDate to be of the form: MMM d yyyy: eg Jan 28 2022","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the formatted date form","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    String formatDate() {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), formatDate());","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"michaelseyo":34}},{"path":"src/main/java/bernie/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":" * Event is one of the Task that can be created by the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"    private String at;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"     * Constructs an Event class for tasks that starts and ends at specific time","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"     * @param description String","lastModifiedDate":"2022-01-19"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"     * @param at String, the timeframe of the Event","lastModifiedDate":"2022-01-19"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    Event(String description, String at) {","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), at);","lastModifiedDate":"2022-01-19"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"michaelseyo":22}},{"path":"src/main/java/bernie/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":" * Task is contained in the TaskList","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"public class Task {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"    private String description;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a Task object with description and initialises as an undone task","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"     * @param description String","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"        return description;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"        return isDone;","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"    public void markDone() {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"    public void markNotDone() {","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     * Checks whether the task can be marked","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if the user attempts to mark a marked task","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"    public void checkMark() throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(\"Cannot mark a task already done!\");","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"     * Checks whether the task can be unmarked","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if the user attempts to unmark a unmarked task","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"    public void checkUnmark() throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        if (!isDone) {","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(\"Cannot unmark a task not done!\");","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"    public String toString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"        return isDone ? String.format(\"[X] %s\", description) : String.format(\"[ ] %s\", description);","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":61}},{"path":"src/main/java/bernie/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import java.util.List;","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-18"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":" * TaskList helps to store tasks that are created. TaskList is used for the adding,","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":" * deleting, listing and marking of tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"public class TaskList {","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-18"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a TaskList containing an arrayList to contain tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-18"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    public int getSize() {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"        assert tasks.size() \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"        return tasks.size();","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        assert tasks.size() \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        return tasks.size() \u003d\u003d 0;","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"     * Returns the Task that is indexed i","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"     * @param i int, the index of the Task","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"     * @return Task object","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    public Task getTask(int i) {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        Task retrievedTask \u003d tasks.get(i);","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        assert retrievedTask !\u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        return retrievedTask;","lastModifiedDate":"2022-02-06"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"     * Returns the number of tasks in the TaskList that are not yet done","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"     * @return int, number of tasks not done","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"    public int numTasksLeft() {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"        int num;","lastModifiedDate":"2022-02-06"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"        num \u003d (int) tasks.stream()","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"                .filter((task) -\u003e !task.getIsDone())","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"                .count();","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        assert (num \u003e\u003d 0);","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"        return num;","lastModifiedDate":"2022-02-06"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-19"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"     * Adds a type of Task given the parsedArr and taskType","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"     * @param parsedArr String[], determined by parser which parses the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"     *                  into an array of arguments","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"     * @param taskType Type, either TODO, DEADLINE or EVENT","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"     * @return Task created","lastModifiedDate":"2022-01-20"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-19"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    public Task addTask(String[] parsedArr, Type taskType) {","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"        String description;","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"        LocalDate by;","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"        String at;","lastModifiedDate":"2022-01-20"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"        final int DESCRIPTION_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"        final int TIME_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"        switch (taskType) {","lastModifiedDate":"2022-01-19"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"        case TODO:","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"            description \u003d parsedArr[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new ToDo(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-19"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"        case DEADLINE:","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"michaelseyo"},"content":"            description \u003d parsedArr[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"michaelseyo"},"content":"            by \u003d LocalDate.parse(parsedArr[TIME_INDEX]);","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new Deadline(description, by);","lastModifiedDate":"2022-01-20"},{"lineNumber":81,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-19"},{"lineNumber":82,"author":{"gitId":"michaelseyo"},"content":"        case EVENT:","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"michaelseyo"},"content":"            description \u003d parsedArr[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"michaelseyo"},"content":"            at \u003d parsedArr[TIME_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":85,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new Event(description, at);","lastModifiedDate":"2022-01-20"},{"lineNumber":86,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-19"},{"lineNumber":87,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-01-19"},{"lineNumber":88,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-01-19"},{"lineNumber":89,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":90,"author":{"gitId":"michaelseyo"},"content":"        tasks.add(newTask);","lastModifiedDate":"2022-01-20"},{"lineNumber":91,"author":{"gitId":"michaelseyo"},"content":"        return newTask;","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":93,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":94,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-18"},{"lineNumber":95,"author":{"gitId":"michaelseyo"},"content":"     * Returns a String of every item contained in the TaskList","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the list of tasks","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-18"},{"lineNumber":98,"author":{"gitId":"michaelseyo"},"content":"    public String listTasks() {","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"michaelseyo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-20"},{"lineNumber":101,"author":{"gitId":"michaelseyo"},"content":"            Task currentTask \u003d tasks.get(i);","lastModifiedDate":"2022-01-20"},{"lineNumber":102,"author":{"gitId":"michaelseyo"},"content":"            String taskOutputMsg \u003d String.format(\"%d. %s\\n\", i + 1, currentTask);","lastModifiedDate":"2022-02-06"},{"lineNumber":103,"author":{"gitId":"michaelseyo"},"content":"            s.append(taskOutputMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":104,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":105,"author":{"gitId":"michaelseyo"},"content":"        String listTasksMsg \u003d s.toString();","lastModifiedDate":"2022-02-06"},{"lineNumber":106,"author":{"gitId":"michaelseyo"},"content":"        return listTasksMsg;","lastModifiedDate":"2022-02-06"},{"lineNumber":107,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":108,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":109,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-20"},{"lineNumber":110,"author":{"gitId":"michaelseyo"},"content":"     * Marks or unmarks Task accordingly","lastModifiedDate":"2022-01-20"},{"lineNumber":111,"author":{"gitId":"michaelseyo"},"content":"     * @param action String, mark or unmark","lastModifiedDate":"2022-01-20"},{"lineNumber":112,"author":{"gitId":"michaelseyo"},"content":"     * @param taskNumber String, the taskNumber we want to mark or unmark","lastModifiedDate":"2022-01-20"},{"lineNumber":113,"author":{"gitId":"michaelseyo"},"content":"     * @return the resulting Task after mark or unmark","lastModifiedDate":"2022-01-20"},{"lineNumber":114,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-20"},{"lineNumber":115,"author":{"gitId":"michaelseyo"},"content":"    public Task markTask(Type action, String taskNumber) {","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"michaelseyo"},"content":"        int taskIndex \u003d Integer.parseInt(taskNumber) - 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":117,"author":{"gitId":"michaelseyo"},"content":"        Task targetTask \u003d tasks.get(taskIndex);","lastModifiedDate":"2022-02-06"},{"lineNumber":118,"author":{"gitId":"michaelseyo"},"content":"        switch (action) {","lastModifiedDate":"2022-02-06"},{"lineNumber":119,"author":{"gitId":"michaelseyo"},"content":"        case MARK:","lastModifiedDate":"2022-02-06"},{"lineNumber":120,"author":{"gitId":"michaelseyo"},"content":"            targetTask.markDone();","lastModifiedDate":"2022-02-06"},{"lineNumber":121,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":122,"author":{"gitId":"michaelseyo"},"content":"        case UNMARK:","lastModifiedDate":"2022-02-06"},{"lineNumber":123,"author":{"gitId":"michaelseyo"},"content":"            targetTask.markNotDone();","lastModifiedDate":"2022-02-06"},{"lineNumber":124,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":125,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-06"},{"lineNumber":126,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":127,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":128,"author":{"gitId":"michaelseyo"},"content":"        return targetTask;","lastModifiedDate":"2022-02-06"},{"lineNumber":129,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":130,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":131,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"michaelseyo"},"content":"     * Checks if a taskExists given the task number","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"michaelseyo"},"content":"     * @param taskNum String, the task number","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"michaelseyo"},"content":"     * @throws InvalidArgumentException if the task number given does not exist","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"michaelseyo"},"content":"    public void checkTaskExists(String taskNum) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"michaelseyo"},"content":"        int index \u003d Integer.parseInt(taskNum) - 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":138,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":139,"author":{"gitId":"michaelseyo"},"content":"            tasks.get(index);","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"michaelseyo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":141,"author":{"gitId":"michaelseyo"},"content":"            String numberDontExistMsg \u003d \"Task number does not exist!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":142,"author":{"gitId":"michaelseyo"},"content":"            throw new InvalidArgumentException(numberDontExistMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":143,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-19"},{"lineNumber":144,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":145,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":146,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-24"},{"lineNumber":147,"author":{"gitId":"michaelseyo"},"content":"     * Deletes tasks from the List","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"michaelseyo"},"content":"     * @param taskNum String, the task number we want to delete","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"michaelseyo"},"content":"     * @return Task, the task that is deleted","lastModifiedDate":"2022-01-24"},{"lineNumber":150,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-24"},{"lineNumber":151,"author":{"gitId":"michaelseyo"},"content":"    public Task deleteTask(String taskNum) {","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"michaelseyo"},"content":"        int taskIndex \u003d Integer.parseInt(taskNum) - 1;","lastModifiedDate":"2022-01-20"},{"lineNumber":153,"author":{"gitId":"michaelseyo"},"content":"        return tasks.remove(taskIndex);","lastModifiedDate":"2022-01-20"},{"lineNumber":154,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":155,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":157,"author":{"gitId":"michaelseyo"},"content":"     * Finds all tasks that have description containing the input given and returns the","lastModifiedDate":"2022-02-01"},{"lineNumber":158,"author":{"gitId":"michaelseyo"},"content":"     * resulting message","lastModifiedDate":"2022-02-01"},{"lineNumber":159,"author":{"gitId":"michaelseyo"},"content":"     * @param descriptionToFind String, user input","lastModifiedDate":"2022-01-28"},{"lineNumber":160,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":161,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":162,"author":{"gitId":"michaelseyo"},"content":"    public String findTasks(String descriptionToFind) {","lastModifiedDate":"2022-02-01"},{"lineNumber":163,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":164,"author":{"gitId":"michaelseyo"},"content":"        int count \u003d 0;","lastModifiedDate":"2022-01-28"},{"lineNumber":165,"author":{"gitId":"michaelseyo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-28"},{"lineNumber":166,"author":{"gitId":"michaelseyo"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2022-01-28"},{"lineNumber":167,"author":{"gitId":"michaelseyo"},"content":"            String taskDescription \u003d task.getDescription();","lastModifiedDate":"2022-01-28"},{"lineNumber":168,"author":{"gitId":"michaelseyo"},"content":"            if (taskDescription.contains(descriptionToFind)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":169,"author":{"gitId":"michaelseyo"},"content":"                count++;","lastModifiedDate":"2022-01-28"},{"lineNumber":170,"author":{"gitId":"michaelseyo"},"content":"                String taskOutputMsg \u003d String.format(\"%d. %s\\n\", i + 1, task);","lastModifiedDate":"2022-02-06"},{"lineNumber":171,"author":{"gitId":"michaelseyo"},"content":"                s.append(taskOutputMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":172,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":173,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":174,"author":{"gitId":"michaelseyo"},"content":"        assert count \u003e\u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":175,"author":{"gitId":"michaelseyo"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2022-01-28"},{"lineNumber":176,"author":{"gitId":"michaelseyo"},"content":"            String noTasksFoundMsg \u003d \"Nothing!\";","lastModifiedDate":"2022-02-06"},{"lineNumber":177,"author":{"gitId":"michaelseyo"},"content":"            s.append(noTasksFoundMsg);","lastModifiedDate":"2022-02-07"},{"lineNumber":178,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":179,"author":{"gitId":"michaelseyo"},"content":"        return s.toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":180,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":181,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":182,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-03"},{"lineNumber":183,"author":{"gitId":"michaelseyo"},"content":"     * Initialises the tasks that are loaded via the Storage on start up","lastModifiedDate":"2022-02-03"},{"lineNumber":184,"author":{"gitId":"michaelseyo"},"content":"     * @param taskArgs String[], parsed by the parser, for creation of tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":185,"author":{"gitId":"michaelseyo"},"content":"     * @param type Task type","lastModifiedDate":"2022-02-03"},{"lineNumber":186,"author":{"gitId":"michaelseyo"},"content":"     * @param isDone if the task is done or not: in symbol \"X\" for done, \" \" for not done","lastModifiedDate":"2022-02-03"},{"lineNumber":187,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-03"},{"lineNumber":188,"author":{"gitId":"michaelseyo"},"content":"    public void initTask(String[] taskArgs, String type, String isDone) {","lastModifiedDate":"2022-02-03"},{"lineNumber":189,"author":{"gitId":"michaelseyo"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-02-03"},{"lineNumber":190,"author":{"gitId":"michaelseyo"},"content":"        String description;","lastModifiedDate":"2022-02-03"},{"lineNumber":191,"author":{"gitId":"michaelseyo"},"content":"        String by;","lastModifiedDate":"2022-02-03"},{"lineNumber":192,"author":{"gitId":"michaelseyo"},"content":"        String at;","lastModifiedDate":"2022-02-03"},{"lineNumber":193,"author":{"gitId":"michaelseyo"},"content":"        int DESCRIPTION_INDEX \u003d 0;","lastModifiedDate":"2022-02-06"},{"lineNumber":194,"author":{"gitId":"michaelseyo"},"content":"        int TIME_INDEX \u003d 1;","lastModifiedDate":"2022-02-06"},{"lineNumber":195,"author":{"gitId":"michaelseyo"},"content":"        switch (type) {","lastModifiedDate":"2022-02-03"},{"lineNumber":196,"author":{"gitId":"michaelseyo"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-03"},{"lineNumber":197,"author":{"gitId":"michaelseyo"},"content":"            description \u003d taskArgs[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":198,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new ToDo(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":199,"author":{"gitId":"michaelseyo"},"content":"            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-03"},{"lineNumber":200,"author":{"gitId":"michaelseyo"},"content":"                newTask.markDone();","lastModifiedDate":"2022-02-03"},{"lineNumber":201,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-03"},{"lineNumber":202,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":203,"author":{"gitId":"michaelseyo"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-03"},{"lineNumber":204,"author":{"gitId":"michaelseyo"},"content":"            description \u003d taskArgs[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":205,"author":{"gitId":"michaelseyo"},"content":"            // need convert Jan 28 2022 to 2022-01-28 LocalDate","lastModifiedDate":"2022-02-03"},{"lineNumber":206,"author":{"gitId":"michaelseyo"},"content":"            by \u003d taskArgs[TIME_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":207,"author":{"gitId":"michaelseyo"},"content":"            LocalDate localDate \u003d LocalDate.parse(by);","lastModifiedDate":"2022-02-03"},{"lineNumber":208,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new Deadline(description, localDate);","lastModifiedDate":"2022-02-03"},{"lineNumber":209,"author":{"gitId":"michaelseyo"},"content":"            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-03"},{"lineNumber":210,"author":{"gitId":"michaelseyo"},"content":"                newTask.markDone();","lastModifiedDate":"2022-02-03"},{"lineNumber":211,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-03"},{"lineNumber":212,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":213,"author":{"gitId":"michaelseyo"},"content":"        case \"event\":","lastModifiedDate":"2022-02-03"},{"lineNumber":214,"author":{"gitId":"michaelseyo"},"content":"            description \u003d taskArgs[DESCRIPTION_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":215,"author":{"gitId":"michaelseyo"},"content":"            at \u003d taskArgs[TIME_INDEX];","lastModifiedDate":"2022-02-06"},{"lineNumber":216,"author":{"gitId":"michaelseyo"},"content":"            newTask \u003d new Event(description, at);","lastModifiedDate":"2022-02-03"},{"lineNumber":217,"author":{"gitId":"michaelseyo"},"content":"            if (isDone.equals(\"X\")) {","lastModifiedDate":"2022-02-03"},{"lineNumber":218,"author":{"gitId":"michaelseyo"},"content":"                newTask.markDone();","lastModifiedDate":"2022-02-03"},{"lineNumber":219,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-03"},{"lineNumber":220,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":221,"author":{"gitId":"michaelseyo"},"content":"        default:","lastModifiedDate":"2022-02-03"},{"lineNumber":222,"author":{"gitId":"michaelseyo"},"content":"            break;","lastModifiedDate":"2022-02-03"},{"lineNumber":223,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-03"},{"lineNumber":224,"author":{"gitId":"michaelseyo"},"content":"        assert (newTask !\u003d null);","lastModifiedDate":"2022-02-06"},{"lineNumber":225,"author":{"gitId":"michaelseyo"},"content":"        tasks.add(newTask);","lastModifiedDate":"2022-02-03"},{"lineNumber":226,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":227,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":228,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":229,"author":{"gitId":"michaelseyo"},"content":"     * Returns a String that contains the Deadline that are not done. This is done","lastModifiedDate":"2022-02-07"},{"lineNumber":230,"author":{"gitId":"michaelseyo"},"content":"     * by checking that the task is a Deadline and it is not done yet.","lastModifiedDate":"2022-02-07"},{"lineNumber":231,"author":{"gitId":"michaelseyo"},"content":"     * @return String, output message.","lastModifiedDate":"2022-02-07"},{"lineNumber":232,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":233,"author":{"gitId":"michaelseyo"},"content":"    public String listDeadlines() {","lastModifiedDate":"2022-02-07"},{"lineNumber":234,"author":{"gitId":"michaelseyo"},"content":"        int count \u003d 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":235,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-07"},{"lineNumber":236,"author":{"gitId":"michaelseyo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-07"},{"lineNumber":237,"author":{"gitId":"michaelseyo"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2022-02-07"},{"lineNumber":238,"author":{"gitId":"michaelseyo"},"content":"            boolean notDone \u003d !task.getIsDone();","lastModifiedDate":"2022-02-07"},{"lineNumber":239,"author":{"gitId":"michaelseyo"},"content":"            boolean isDeadline \u003d task instanceof Deadline;","lastModifiedDate":"2022-02-07"},{"lineNumber":240,"author":{"gitId":"michaelseyo"},"content":"            if (isDeadline \u0026\u0026 notDone) {","lastModifiedDate":"2022-02-07"},{"lineNumber":241,"author":{"gitId":"michaelseyo"},"content":"                String deadlineOutputMsg \u003d String.format(\"%d. %s\\n\", i + 1, task);","lastModifiedDate":"2022-02-07"},{"lineNumber":242,"author":{"gitId":"michaelseyo"},"content":"                s.append(deadlineOutputMsg);","lastModifiedDate":"2022-02-07"},{"lineNumber":243,"author":{"gitId":"michaelseyo"},"content":"                count++;","lastModifiedDate":"2022-02-07"},{"lineNumber":244,"author":{"gitId":"michaelseyo"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":245,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":246,"author":{"gitId":"michaelseyo"},"content":"        assert count \u003e\u003d 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":247,"author":{"gitId":"michaelseyo"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2022-02-07"},{"lineNumber":248,"author":{"gitId":"michaelseyo"},"content":"            String noDeadlinesMsg \u003d \"NOTHING! :D\";","lastModifiedDate":"2022-02-07"},{"lineNumber":249,"author":{"gitId":"michaelseyo"},"content":"            s.append(noDeadlinesMsg);","lastModifiedDate":"2022-02-07"},{"lineNumber":250,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":251,"author":{"gitId":"michaelseyo"},"content":"        return s.toString();","lastModifiedDate":"2022-02-07"},{"lineNumber":252,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":253,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"michaelseyo":253}},{"path":"src/main/java/bernie/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":" * ToDo is one of the Task that can be created by the user input","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"     * Constructs a ToDo class for a general Task","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"     * @param description String","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-01-19"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    ToDo(String description) {","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"        super(description);","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"    @Override","lastModifiedDate":"2022-01-19"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    public String toString() {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"michaelseyo":18}},{"path":"src/main/java/bernie/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        double radius \u003d displayPicture.getFitWidth() / 2;","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        Circle clip \u003d new Circle(radius, radius, radius);","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"        displayPicture.setClip(clip);","lastModifiedDate":"2022-02-03"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"    private void flip() {","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"    public static DialogBox getBernieDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"        db.flip();","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"        return db;","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":66}},{"path":"src/main/java/bernie/ui/InputResponder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.Task;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":" * Class to deal with any interactions with the user. It is responsible for printing out","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":" * relevant messages to the user.","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"public class InputResponder {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message when user starts the program","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    public String greet() {","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"        return \"Hello, I\u0027m Bernie your task manager!\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"                \"In case you forgot, here\u0027s how to create tasks:\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"                \"For tasks to do: todo \u003cdescription\u003e\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"                \"For deadlines: deadline \u003cdescription\u003e /by yyyy-mm-dd\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"                \"For events: event \u003cdescription\u003e /at \u003ctime\u003e\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"                \"To mark/unmark a task: mark/unmark \u003ctaskNumber\u003e\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"                \"To delete a task: delete \u003ctaskNumber\u003e\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"                \"To find a task: find \u003cdescription\u003e\\n\" +","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"                \"To get deadlines not done, type: remind\\n\" +","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"                \"To exit, type: bye\";","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message when user exits out of the program","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    public String showLeaveMsg() {","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        return \"See ya!\";","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"     * Returns the error message when faced with any errors","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"     * @param msg String, the error message","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the error message","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"    public String showErrorMsg(String msg) {","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        return msg;","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message whenever the user adds a new task: consists of the number","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"     * of tasks left and the tasks description","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"     * @param newTask Task, newTask added by the user","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"     * @param numTasksLeft int, the number of tasks left not done","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"    public String showAddedMsg(Task newTask, int numTasksLeft) {","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        return s.append(String.format(\"Got ya. Added:\\n%s\\nYou got %d tasks waiting to be done ya!\\n\",","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"                newTask, numTasksLeft))","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"                .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message whenever the user deletes a task","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"     * @param deletedTask Task, task deleted by the user","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"     * @param numTasksLeft int, the number of tasks left not done","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"     * @return String message","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    public String showDeleteMsg(Task deletedTask, int numTasksLeft) {","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"        return s.append(String.format(\"Got ya. Removed:\\n%s\\nYou got %d tasks waiting to be done ya!\\n\",","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"                deletedTask, numTasksLeft))","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"                .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"     * Returns the current taskList when the user inputs list into the program","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, empty if no tasks, length of 1 tasks if tasks contains tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":75,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message of the tasks containing in the task list currently","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"michaelseyo"},"content":"    public String showListTasksMsg(TaskList... tasks) {","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"michaelseyo"},"content":"        String startingMsg \u003d \"Here\u0027s your current list buddy:\\n\";","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"michaelseyo"},"content":"        s.append(startingMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":81,"author":{"gitId":"michaelseyo"},"content":"        if (tasks.length \u003d\u003d 0) {","lastModifiedDate":"2022-02-03"},{"lineNumber":82,"author":{"gitId":"michaelseyo"},"content":"            String noTasksMsg \u003d \"NOTHING! :D\";","lastModifiedDate":"2022-02-06"},{"lineNumber":83,"author":{"gitId":"michaelseyo"},"content":"            s.append(noTasksMsg);","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"michaelseyo"},"content":"            return s.toString();","lastModifiedDate":"2022-02-03"},{"lineNumber":85,"author":{"gitId":"michaelseyo"},"content":"        } else {","lastModifiedDate":"2022-02-03"},{"lineNumber":86,"author":{"gitId":"michaelseyo"},"content":"            return s.append(tasks[0].listTasks())","lastModifiedDate":"2022-02-03"},{"lineNumber":87,"author":{"gitId":"michaelseyo"},"content":"                    .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":90,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message when a user marks a task number","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"michaelseyo"},"content":"     * @param markedTask Task that is marked done","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"michaelseyo"},"content":"    public String showDoneMsg(Task markedTask) {","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"michaelseyo"},"content":"        return s.append(String.format(\"This is now done:\\n%s\\n\", markedTask))","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"michaelseyo"},"content":"                .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":101,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":103,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message when a user unmarks a task number","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"michaelseyo"},"content":"     * @param unmarkedTask Task that is marked not done","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"michaelseyo"},"content":"    public String showUndoneMsg(Task unmarkedTask) {","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"michaelseyo"},"content":"        return s.append(String.format(\"This is now undone:\\n%s\\n\", unmarkedTask))","lastModifiedDate":"2022-02-01"},{"lineNumber":110,"author":{"gitId":"michaelseyo"},"content":"                .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":112,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":113,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":114,"author":{"gitId":"michaelseyo"},"content":"     * Returns the message for matching tasks in the list","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList, the current tasklist","lastModifiedDate":"2022-02-03"},{"lineNumber":116,"author":{"gitId":"michaelseyo"},"content":"     * @param description String, the description which we want to find within the tasks","lastModifiedDate":"2022-02-03"},{"lineNumber":117,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the message","lastModifiedDate":"2022-02-01"},{"lineNumber":118,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":119,"author":{"gitId":"michaelseyo"},"content":"    public String showFoundTasksMsg(TaskList tasks, String description) {","lastModifiedDate":"2022-02-01"},{"lineNumber":120,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-01"},{"lineNumber":121,"author":{"gitId":"michaelseyo"},"content":"        return s.append(\"We found these tasks in your list:\\n\")","lastModifiedDate":"2022-02-01"},{"lineNumber":122,"author":{"gitId":"michaelseyo"},"content":"                .append(tasks.findTasks(description))","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"michaelseyo"},"content":"                .toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":125,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":127,"author":{"gitId":"michaelseyo"},"content":"     * Returns the output message for the list of deadlines that have yet to be done.","lastModifiedDate":"2022-02-07"},{"lineNumber":128,"author":{"gitId":"michaelseyo"},"content":"     * This is aided by TaskList to help to filter out tasks that are Deadline and","lastModifiedDate":"2022-02-07"},{"lineNumber":129,"author":{"gitId":"michaelseyo"},"content":"     * not done.","lastModifiedDate":"2022-02-07"},{"lineNumber":130,"author":{"gitId":"michaelseyo"},"content":"     * @param tasks TaskList","lastModifiedDate":"2022-02-07"},{"lineNumber":131,"author":{"gitId":"michaelseyo"},"content":"     * @return String, the output message","lastModifiedDate":"2022-02-07"},{"lineNumber":132,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":133,"author":{"gitId":"michaelseyo"},"content":"    public String showDeadlinesMsg(TaskList tasks) {","lastModifiedDate":"2022-02-07"},{"lineNumber":134,"author":{"gitId":"michaelseyo"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-02-07"},{"lineNumber":135,"author":{"gitId":"michaelseyo"},"content":"        String startingMsg \u003d \"Got your back! Your deadlines to meet:\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":136,"author":{"gitId":"michaelseyo"},"content":"        s.append(startingMsg);","lastModifiedDate":"2022-02-07"},{"lineNumber":137,"author":{"gitId":"michaelseyo"},"content":"        return s.append(tasks.listDeadlines()).toString();","lastModifiedDate":"2022-02-07"},{"lineNumber":138,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":139,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":139}},{"path":"src/main/java/bernie/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import bernie.Bernie;","lastModifiedDate":"2022-02-03"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"import bernie.commands.CommandHandler;","lastModifiedDate":"2022-02-03"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import bernie.storage.Storage;","lastModifiedDate":"2022-02-03"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"    private Bernie bernie;","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    private Image bernieImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaBernie.jpg\"));","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"    public void setBernie(Bernie b) {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"        bernie \u003d b;","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        CommandHandler commandHandler \u003d b.getCommandHandler();","lastModifiedDate":"2022-02-03"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        InputResponder inputResponder \u003d commandHandler.getInputResponder();","lastModifiedDate":"2022-02-03"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"        Storage storage \u003d commandHandler.getStorage();","lastModifiedDate":"2022-02-03"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        handleStartUp(inputResponder.greet(), storage.loadTasks(commandHandler));","lastModifiedDate":"2022-02-03"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Bernie\u0027s reply and then appends them to","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"        String response \u003d bernie.getResponse(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"                DialogBox.getBernieDialog(response, bernieImage)","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"        );","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"        // Exit app if user inputs bye","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"        if (response \u003d\u003d \"See ya!\") {","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"            Platform.exit();","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":65,"author":{"gitId":"michaelseyo"},"content":"    private void handleStartUp(String greetMsg, String loadMsg) {","lastModifiedDate":"2022-02-03"},{"lineNumber":66,"author":{"gitId":"michaelseyo"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-03"},{"lineNumber":67,"author":{"gitId":"michaelseyo"},"content":"                DialogBox.getBernieDialog(greetMsg, bernieImage)","lastModifiedDate":"2022-02-03"},{"lineNumber":68,"author":{"gitId":"michaelseyo"},"content":"        );","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"michaelseyo"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-03"},{"lineNumber":70,"author":{"gitId":"michaelseyo"},"content":"                DialogBox.getBernieDialog(loadMsg, bernieImage)","lastModifiedDate":"2022-02-03"},{"lineNumber":71,"author":{"gitId":"michaelseyo"},"content":"        );","lastModifiedDate":"2022-02-03"},{"lineNumber":72,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":73,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":73}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-label-padding: 10 20; -fx-background-color: #ADD8E6; -fx-background-insets: 5; -fx-background-radius: 20;\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"            \u003cInsets right\u003d\"10.0\" left\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"bernie.ui.MainWindow\"\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" style\u003d\"-fx-focus-color: transparent;\"/\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #ADD8E6; -fx-font-size: 16; -fx-focus-color: transparent;\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" style\u003d\"-fx-focus-color: transparent;\"\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #F9F9F9; -fx-focus-color: transparent;\" /\u003e","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"michaelseyo":19}},{"path":"src/test/java/bernie/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.parser;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.tasks.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    public void parseListTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.LIST, new Parser(new TaskList()).parseType(\"list\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"    public void parseByeTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.BYE, new Parser(new TaskList()).parseType(\"bye\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    public void parseMarkTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.MARK, new Parser(new TaskList()).parseType(\"mark\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    public void parseEmptyTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.EMPTY, new Parser(new TaskList()).parseType(\"\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    public void parseDeleteTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.DELETE, new Parser(new TaskList()).parseType(\"delete\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    public void parseAddTypeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(Type.ADD, new Parser(new TaskList()).parseType(\"deadline\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":40}},{"path":"src/test/java/bernie/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    public void printDateTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"Jan 28 2022\", new Deadline(\"return book\", date).formatDate());","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    public void createDeadlineTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[D][ ] return book (by: Jan 28 2022)\", new Deadline(\"return book\", date).toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"    public void markMarkedDeadlineTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"        Deadline deadline \u003d new Deadline(\"return book\", date);","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"        deadline.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"            deadline.checkMark();","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot mark a task already done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkUnmarkedDeadlineTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"        Deadline deadline \u003d new Deadline(\"return book\", date);","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        deadline.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"            deadline.checkUnmark();","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot unmark a task not done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"    public void markDeadlineTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"        Deadline deadline \u003d new Deadline(\"return book\", date);","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"        deadline.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[D][X] return book (by: Jan 28 2022)\", deadline.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkDeadlineTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"        LocalDate date \u003d LocalDate.parse(\"2022-01-28\");","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"        Deadline deadline \u003d new Deadline(\"return book\", date);","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"        deadline.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"        deadline.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[D][ ] return book (by: Jan 28 2022)\", deadline.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":64}},{"path":"src/test/java/bernie/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"public class EventTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    public void createEventTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[E][ ] project meeting (at: Mon 2-4pm)\", new Event(\"project meeting\", \"Mon 2-4pm\").toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    public void markMarkedEventTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"        Task event \u003d new Event(\"project meeting\", \"Mon 2-4pm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        event.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"            event.checkMark();","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot mark a task already done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkUnmarkedEventTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"        Task event \u003d new Event(\"project meeting\", \"Mon 2-4pm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        event.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"            event.checkUnmark();","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot unmark a task not done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"    public void markEventTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"        Task event \u003d new Event(\"Dinner date\", \"Mon 7pm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        event.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[E][X] Dinner date (at: Mon 7pm)\", event.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkEventTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        Task event \u003d new Event(\"Dinner date\", \"Mon 7pm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"        event.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        event.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[E][ ] Dinner date (at: Mon 7pm)\", event.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":51}},{"path":"src/test/java/bernie/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.enums.Type;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    public void getSizeTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"borrow book\"}, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"return book\", \"2022-01-28\"}, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"project meeting\", \"Mon 2-4pm\"}, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(3, tasks.getSize());","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"    public void numTasksLeftTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"borrow book\"}, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"return book\", \"2022-01-28\"}, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"project meeting\", \"Mon 2-4pm\"}, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"        tasks.markTask(Type.MARK, \"3\");","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(2, tasks.numTasksLeft());","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"    public void deleteTaskTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"borrow book\"}, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"return book\", \"2022-01-28\"}, Type.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"project meeting\", \"Mon 2-4pm\"}, Type.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"        Task deletedTask \u003d new Event(\"project meeting\", \"Mon 2-4pm\");","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(deletedTask.toString(), tasks.deleteTask(\"3\").toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"    public void isEmptyTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(true, new TaskList().isEmpty());","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"    public void getTaskTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"        tasks.addTask(new String[]{\"borrow book\"}, Type.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"        Task createdTask \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(createdTask.toString(), tasks.getTask(0).toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"michaelseyo"},"content":"    public void taskExistsTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"michaelseyo"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"michaelseyo"},"content":"            tasks.checkTaskExists(\"1\");","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Task number does not exist!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":63}},{"path":"src/test/java/bernie/tasks/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"michaelseyo"},"content":"package bernie.tasks;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"michaelseyo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"michaelseyo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"michaelseyo"},"content":"import bernie.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"michaelseyo"},"content":"public class ToDoTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"michaelseyo"},"content":"    public void createToDoTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[T][ ] borrow book\", new ToDo(\"borrow book\").toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"michaelseyo"},"content":"    public void markMarkedToDoTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"michaelseyo"},"content":"        ToDo todo \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"michaelseyo"},"content":"        todo.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"michaelseyo"},"content":"            todo.checkMark();","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot mark a task already done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkUnmarkedToDoTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"michaelseyo"},"content":"        ToDo todo \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"michaelseyo"},"content":"        todo.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"michaelseyo"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"michaelseyo"},"content":"            todo.checkUnmark();","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"michaelseyo"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"michaelseyo"},"content":"            assertEquals(\"Cannot unmark a task not done!\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"michaelseyo"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"michaelseyo"},"content":"    public void markToDoTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"michaelseyo"},"content":"        ToDo todo \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"michaelseyo"},"content":"        todo.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[T][X] borrow book\", todo.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"michaelseyo"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"michaelseyo"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"michaelseyo"},"content":"    public void unmarkToDoTest() {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"michaelseyo"},"content":"        ToDo todo \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"michaelseyo"},"content":"        todo.markDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"michaelseyo"},"content":"        todo.markNotDone();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"michaelseyo"},"content":"        assertEquals(\"[T][ ] borrow book\", todo.toString());","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"michaelseyo"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"michaelseyo"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"michaelseyo":51}}]
