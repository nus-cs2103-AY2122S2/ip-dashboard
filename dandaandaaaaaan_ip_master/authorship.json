[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-02-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    archiveBaseName \u003d \"dusk\"","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"dandaandaaaaaan":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"# Dusk User Guide","lastModifiedDate":"2022-02-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"### Manage personal events, deadlines and tasks","lastModifiedDate":"2022-02-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"Dusk is a chatbot-style task management app that allows users to track upcoming deadlines, tasks, and events in an organised manner.","lastModifiedDate":"2022-02-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"## Usage","lastModifiedDate":"2022-02-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"### `list` - Lists all tasks","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"Shows the title, type and state (marked/unmarked) of all tasks","lastModifiedDate":"2022-02-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `list`","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply with a list of tasks currently in the user\u0027s list","lastModifiedDate":"2022-02-14"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"First box displays the type of task, `T` for todo, `D` for deadline, `E` for event","lastModifiedDate":"2022-02-14"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/list.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"### `todo` - Add a todo task","lastModifiedDate":"2022-02-14"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"Adds a todo task into the task list. Todo tasks contain a title and a marked/unmarked state","lastModifiedDate":"2022-02-14"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `todo {title of task}`","lastModifiedDate":"2022-02-14"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot adds task to current task list","lastModifiedDate":"2022-02-14"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/todo.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"### `deadline` - Add a deadlined task","lastModifiedDate":"2022-02-14"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"Adds a deadlined task into the task list. Deadline tasks contain a title and date. Time is optional","lastModifiedDate":"2022-02-14"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `deadline {title of task} /by {date} {time}`","lastModifiedDate":"2022-02-14"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"Dates are to be entered in the format: `yyyy-mm-dd`","lastModifiedDate":"2022-02-14"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"Time is to be entered in the format: `hh:mm`","lastModifiedDate":"2022-02-14"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the task has been successfully added","lastModifiedDate":"2022-02-14"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/deadline.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"### `event` - Add an event","lastModifiedDate":"2022-02-14"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"Adds an event into the task list. Events contain a title and date. Time is optional","lastModifiedDate":"2022-02-14"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `event {title of task} /at {date} {time}`","lastModifiedDate":"2022-02-14"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"Dates are to be entered in the format: `yyyy-mm-dd`","lastModifiedDate":"2022-02-14"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"Time is to be entered in the format: `hh:mm`","lastModifiedDate":"2022-02-14"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the event has been successfully added","lastModifiedDate":"2022-02-14"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/deadline.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2022-02-14"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"Deletes a task from the task list based on the number on the list","lastModifiedDate":"2022-02-14"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `delete {task number}`","lastModifiedDate":"2022-02-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the event has been successfully deleted","lastModifiedDate":"2022-02-14"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/delete.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"### `mark` - Mark a task as completed/finished","lastModifiedDate":"2022-02-14"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"Marks a task based on the number on the list","lastModifiedDate":"2022-02-14"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `mark {task number}`","lastModifiedDate":"2022-02-14"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the event has been successfully marked","lastModifiedDate":"2022-02-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/mark.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"### `unmark` - Mark a task as completed/finished","lastModifiedDate":"2022-02-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"Unmarks a task based on the number on the list","lastModifiedDate":"2022-02-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `unmark {task number}`","lastModifiedDate":"2022-02-14"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the event has been successfully unmarked","lastModifiedDate":"2022-02-14"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/unmark.png)","lastModifiedDate":"2022-02-14"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"### `update` - Modifies current attributes of a task","lastModifiedDate":"2022-02-14"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"Updates a task based on the number on the list","lastModifiedDate":"2022-02-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"Example of usage: `update {task number} {attribute to modify} {edited value}`","lastModifiedDate":"2022-02-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"Attributes to modify are indicated by the following: `/title`, `/date` or `/time`","lastModifiedDate":"2022-02-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"Dates are to be entered in the format: `yyyy-mm-dd`","lastModifiedDate":"2022-02-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"Time is to be entered in the format: `hh:mm`","lastModifiedDate":"2022-02-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"Expected outcome: Bot will reply if the event has been successfully updated","lastModifiedDate":"2022-02-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"Example:","lastModifiedDate":"2022-02-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"![](./assets/update.png)","lastModifiedDate":"2022-02-14"}],"authorContributionMap":{"dandaandaaaaaan":107,"-":14}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.command.Parser;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":" * Main Duke class that runs the task management program, Duke.","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"public class Duke extends Application {","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String FILE_PATH \u003d \"./data/test.txt\";","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final Ui UI \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private List\u003cTask\u003e taskList \u003d Storage.loadFromFile(FILE_PATH);","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public Ui getUi() {","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        return UI;","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void start (Stage stage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"            UI.buildStage(stage);","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"            Platform.exit();","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        stage.show();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"            Command c \u003d Parser.parse(userInput);","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (c instanceof ByeCommand) {","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"                Platform.exit();","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"            return c.execute(taskList, UI);","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"            return e.getMessage();","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"dandaandaaaaaan":49,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"public class Launcher {","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"dandaandaaaaaan":10}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.File;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":" * Handles saving to file and loading the file to the task list.","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"public class Storage {","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String FILE_PATH \u003d \"./data/test.txt\";","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Saves the current list state to the statically set file.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskList Current task list","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return 1 if operation if successful","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static int saveToFile(List\u003cTask\u003e taskList) {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Check if folder/file is present, otherwise create file","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] splitFilePath \u003d FILE_PATH.split(\"/\");","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"            String directoryPath \u003d FILE_PATH.substring(0, FILE_PATH.length()","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"                    - splitFilePath[splitFilePath.length - 1].length());","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"            File directory \u003d new File(directoryPath);","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"                directory.mkdirs();","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (!file.exists()) {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"                file.createNewFile();","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            FileWriter output \u003d new FileWriter(file);","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"                Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"                String outputLine \u003d currentTask.toOutputLine() + \"\\n\";","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"                output.write(outputLine);","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"            output.close();","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"            return -1;","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        return 1;","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Checks the current file and loads entries into a list.","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param path File path string","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return List of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static List\u003cTask\u003e loadFromFile(String path) {","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            FileReader input \u003d new FileReader(path);","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"            BufferedReader reader \u003d new BufferedReader(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"            String line;","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"                String[] splitReadLine \u003d line.split(\" \\\\| \");","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"                assert(splitReadLine.length \u003e 0);","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"                Task newTask \u003d createNewTask(splitReadLine);","lastModifiedDate":"2022-02-14"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"                taskList.add(newTask);","lastModifiedDate":"2022-02-14"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-02-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"            input.close();","lastModifiedDate":"2022-02-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"            reader.close();","lastModifiedDate":"2022-02-14"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-14"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"            return taskList;","lastModifiedDate":"2022-02-14"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-14"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"            return taskList;","lastModifiedDate":"2022-02-14"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            //in case somehow the .txt file format is broken","lastModifiedDate":"2022-02-14"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"            return taskList;","lastModifiedDate":"2022-02-14"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        return taskList;","lastModifiedDate":"2022-02-14"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static Task createNewTask(String[] splitReadLine) {","lastModifiedDate":"2022-02-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"        boolean marked \u003d splitReadLine[1].equals(\"1\");","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (splitReadLine[0].equals(\"T\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new TodoTask(splitReadLine[2], marked);","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (splitReadLine[0].equals(\"D\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"            assert(splitReadLine.length \u003d\u003d 4 || splitReadLine.length \u003d\u003d 5);","lastModifiedDate":"2022-02-07"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (splitReadLine.length \u003d\u003d 4) {","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d new DeadlineTask(splitReadLine[2], marked, splitReadLine[3]);","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else if (splitReadLine.length \u003d\u003d 5) {","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d new DeadlineTask(splitReadLine[2], marked, splitReadLine[3], splitReadLine[4]);","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (splitReadLine[0].equals(\"E\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"            assert(splitReadLine.length \u003d\u003d 4 || splitReadLine.length \u003d\u003d 5);","lastModifiedDate":"2022-02-07"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (splitReadLine.length \u003d\u003d 4) {","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d new EventTask(splitReadLine[2], marked, splitReadLine[3]);","lastModifiedDate":"2022-02-01"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else if (splitReadLine.length \u003d\u003d 5) {","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d new EventTask(splitReadLine[2], marked, splitReadLine[3], splitReadLine[4]);","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"        return newTask;","lastModifiedDate":"2022-02-14"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":109}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":" * Class for printing UI elements.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"public class Ui {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_INTRO \u003d \"Hello! I\u0027m Dusk\\n     What can I do for you?\";","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Handles building of stage for GUI","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param stage Stage from Duke","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException if there are any errors from reading the file","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void buildStage(Stage stage) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Prints the set welcome message with the borders.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void showWelcome() {","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        printContent(MESSAGE_INTRO);","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getWelcomeMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        return MESSAGE_INTRO;","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Prints the set exit message with the borders.","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void showExitMessage() {","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        printContent(MESSAGE_BYE);","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getExitMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        return MESSAGE_BYE;","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Prints the top and bottom borders.","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void printLine() {","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Prints any text together with the top and bottom borders.","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param text Text to print","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void printContent(String text) {","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        String spacing \u003d \"     \";","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"        printLine();","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        System.out.println(spacing + text);","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        printLine();","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        System.out.println();","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Prints the format when adding and deleting tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks List of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param task Task that just been added/deleted","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param message Template text for addition or deletion","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void printAddDeleteTaskSuccess(List\u003cTask\u003e tasks, Task task, String message) {","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        String content \u003d getTaskLine(task, message) + \"\\n\";","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        content +\u003d listSizeLine(tasks);","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        printContent(content);","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getAddDeleteTaskSuccess(List\u003cTask\u003e tasks, Task task, String message) {","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        String content \u003d getTaskLine(task, message) + \"\\n\";","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        content +\u003d listSizeLine(tasks);","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        return content;","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenates a line of a task.","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param task Task to print","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param message Template text for the printed task","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Combined string mainly used for printing","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getTaskLine(Task task, String message) {","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"        return message + \"\\n       [\" + task.getType() + \"][\" + task.getStatusIcon() + \"] \" + task.toString();","lastModifiedDate":"2022-01-25"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenates final line for how many tasks in the list.","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks List of tasks","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String for how many tasks in the list","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String listSizeLine(List\u003cTask\u003e tasks) {","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"        return \"     Now you have \" + tasks.size() + \" task\"","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"                + (tasks.size() !\u003d 1 ? \"s\" : \"\") + \" in the list.\";","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":118}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":" * Command invoked to exit the program.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Execute method that should do nothing as the command exits.","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) {","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ui.getExitMessage();","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Returns if the function should exit when called","lastModifiedDate":"2022-02-14"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Always true as command should exit","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        return true;","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":" * Abstract class to define Command superclass methods.","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Sends an execution step for every issued command","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException Depending on implementation of the different tasks, throw for errors","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    public abstract String execute(List\u003cTask\u003e tasks, Ui ui) throws DukeException;","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Default method to check if command should exit.","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Should always return false for most commands except the exit command.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Always false unless overridden by specific command implementation.","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        return false;","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":32}},{"path":"src/main/java/duke/command/CreateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Storage;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":" * Command to create new tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"public class CreateCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_TASKADD \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_TITLE \u003d \"OOPS!!! The title of a task cannot be empty :(\";","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_DEADLINETASK_DEADLINE \u003d \"OOPS!!! The deadline cannot be \"","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"empty :( Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\";","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_EVENT_TIME \u003d \"OOPS!!! The time of an event cannot be \"","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"empty :( Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\";","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_TIME \u003d \"OOPS!!! The time is in the wrong format :( \"","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\";","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String args;","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    private TaskType taskType;","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor to the create command.","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param args Arguments needed in the line of the task to create","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskType Type of task to create","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the arguments is an empty string","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"    public CreateCommand(String args, TaskType taskType) throws DukeException {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (args.equals(\"\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_TITLE);","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.args \u003d args;","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Execution of the create command to create corresponding tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If there are incompatibilities or errors in the format for creating task","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskType \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new TodoTask(this.args);","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"            tasks.add(newTask);","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (taskType \u003d\u003d TaskType.DEADLINE) {","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] subSplit \u003d deadlineErrorChecks();","lastModifiedDate":"2022-02-14"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] dateTimeSplit \u003d subSplit[1].substring(1).split(\" \");","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"            try {","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d createNewDeadlineTask(subSplit[0].trim(), dateTimeSplit);","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_TIME);","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"            tasks.add(newTask);","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (taskType \u003d\u003d TaskType.EVENT) {","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] subSplit \u003d eventErrorChecks();","lastModifiedDate":"2022-02-14"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] dateTimeSplit \u003d subSplit[1].substring(1).split(\" \");","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"            assert (dateTimeSplit.length \u003d\u003d 1 || dateTimeSplit.length \u003d\u003d 2);","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"            try {","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                newTask \u003d createNewEvent(subSplit[0].trim(), dateTimeSplit);","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_TIME);","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            tasks.add(newTask);","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        Storage.saveToFile(tasks);","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ui.getAddDeleteTaskSuccess(tasks, newTask, MESSAGE_TASKADD);","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String[] deadlineErrorChecks() throws DukeException {","lastModifiedDate":"2022-02-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (!args.contains(\"/by\")) {","lastModifiedDate":"2022-02-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_DEADLINETASK_DEADLINE);","lastModifiedDate":"2022-02-14"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"        String[] subSplit \u003d args.split(\"/by\");","lastModifiedDate":"2022-02-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (subSplit.length \u003d\u003d 1) {","lastModifiedDate":"2022-02-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_DEADLINETASK_DEADLINE);","lastModifiedDate":"2022-02-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"        return subSplit;","lastModifiedDate":"2022-02-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String[] eventErrorChecks() throws DukeException {","lastModifiedDate":"2022-02-14"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (!args.contains(\"/at\")) {","lastModifiedDate":"2022-02-14"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_EVENT_TIME);","lastModifiedDate":"2022-02-14"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"        String[] subSplit \u003d args.split(\"/at\");","lastModifiedDate":"2022-02-14"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (subSplit.length \u003d\u003d 1) {","lastModifiedDate":"2022-02-14"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_EVENT_TIME);","lastModifiedDate":"2022-02-14"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        return subSplit;","lastModifiedDate":"2022-02-14"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"    private DeadlineTask createNewDeadlineTask(String title, String[] dateTime) throws DukeException {","lastModifiedDate":"2022-02-07"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"        DeadlineTask newTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (dateTime.length \u003d\u003d 1) {","lastModifiedDate":"2022-02-07"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new DeadlineTask(title, dateTime[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (dateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new DeadlineTask(title, dateTime[0], dateTime[1]);","lastModifiedDate":"2022-02-07"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-02-07"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_TIME);","lastModifiedDate":"2022-02-07"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"        return newTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"    private EventTask createNewEvent(String title, String[] dateTime) throws DukeException {","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"        EventTask newTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (dateTime.length \u003d\u003d 1) {","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new EventTask(title, dateTime[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (dateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"            newTask \u003d new EventTask(title, dateTime[0], dateTime[1]);","lastModifiedDate":"2022-02-07"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-02-07"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_TIME);","lastModifiedDate":"2022-02-07"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"        return newTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":132,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":132}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":" * Command to delete tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_TASKDELETE \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_DELETE \u003d \"OOPS!!! Task to delete cannot be empty:(\";","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_DELETE \u003d \"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"please select a valid task to delete using the task\u0027s number\";","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int taskNumber;","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor to the delete command.","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskNumber Number of the task to be deleted","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the task number is empty or is not an integer","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    public DeleteCommand(String taskNumber) throws DukeException {","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskNumber.equals(\"\")) {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_DELETE);","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskNumber \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_DELETE);","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Executes the delete command to delete the task.","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the number given is out of the range of the task list","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (this.taskNumber \u003e tasks.size() || this.taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_DELETE);","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert index \u003e\u003d 0;","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"        Task thisTask \u003d tasks.get(index);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        tasks.remove(index);","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        Storage.saveToFile(tasks);","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ui.getAddDeleteTaskSuccess(tasks, thisTask, MESSAGE_TASKDELETE);","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":59}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_FIND \u003d \"OOPS!!! Search term cannot be empty :(\";","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_FOUND_NOTHING \u003d \"OOPS!!! No tasks found with the term :\";","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String searchTerm;","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor to the find command.","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param searchTerm Text to be searched for","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the text is left empty","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public FindCommand(String searchTerm) throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (searchTerm.equals(\"\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_FIND);","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.searchTerm \u003d searchTerm;","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Execution of the find command to search for tasks that match.","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cInteger\u003e foundIndexes \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (tasks.get(i).getTitle().contains(this.searchTerm)) {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"                foundIndexes.add(i);","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (foundIndexes.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"            return ERROR_FOUND_NOTHING;","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        String foundList \u003d MESSAGE_FIND + \"\\n     \";","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        for (int i \u003d 0; i \u003c foundIndexes.size(); i++) {","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"            Task thisTask \u003d tasks.get(foundIndexes.get(i));","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"            foundList +\u003d (i + 1) + \". \" + \"[\" + thisTask.getType() + \"]\"","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"[\" + thisTask.getStatusIcon() + \"] \" + thisTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (i !\u003d foundIndexes.size() - 1) {","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"                foundList +\u003d \"\\n     \";","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        return foundList;","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":59}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Execution of the list command to list all tasks in the list.","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) {","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"        String list \u003d MESSAGE_LIST + \"\\n     \";","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"            list +\u003d \"~~List is currently empty~~\";","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"            Task thisTask \u003d tasks.get(i);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"            list +\u003d (i + 1) + \". \" + \"[\" + thisTask.getType() + \"]\"","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"[\" + thisTask.getStatusIcon() + \"] \" + thisTask;","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"                list +\u003d \"\\n     \";","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        Storage.saveToFile(tasks);","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        return list;","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":35}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Storage;","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_MARK \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_UNMARK \u003d \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_MARK \u003d \"OOPS!!! Task to mark cannot be empty:(\";","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_UNMARK \u003d \"OOPS!!! Task to unmark cannot be empty:(\";","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_MARK \u003d \"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"please select a valid task to mark using the task\u0027s number\";","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_UNMARK \u003d \"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"please select a valid task to unmark using the task\u0027s number\";","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int taskNumber;","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private boolean isMarked;","lastModifiedDate":"2022-02-14"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor to the mark or unmark command.","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskNumber Task number to mark or unmark","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param isMarked Boolean to indicate to mark or unmark the task","lastModifiedDate":"2022-02-14"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the task number given is empty or not an integer","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    public MarkCommand(String taskNumber, boolean isMarked) throws DukeException {","lastModifiedDate":"2022-02-14"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskNumber.equals(\"\")) {","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (isMarked) {","lastModifiedDate":"2022-02-14"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_EMPTY_MARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_EMPTY_UNMARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskNumber \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.isMarked \u003d isMarked;","lastModifiedDate":"2022-02-14"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (isMarked) {","lastModifiedDate":"2022-02-14"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_MARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_UNMARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Execution of the mark command to mark/unmark the corresponding task.","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param tasks Task list","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param ui UI object","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the task number is out of range of the task list","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) throws DukeException {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (this.taskNumber \u003e tasks.size() || this.taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (this.isMarked) {","lastModifiedDate":"2022-02-14"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_MARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_UNMARK);","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        String message;","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        Task thisTask \u003d tasks.get(this.taskNumber - 1);","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (isMarked) {","lastModifiedDate":"2022-02-14"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"            thisTask.markAsDone();","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"            message \u003d MESSAGE_MARK;","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"            thisTask.markAsUndone();","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"            message \u003d MESSAGE_UNMARK;","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        Storage.saveToFile(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ui.getTaskLine(thisTask, message);","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":80}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-26"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-26"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"public class Parser {","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String COMMAND_UPDATE \u003d \"update\";","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"OOPS!!! You have entered an invalid command :(\";","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Parses entered comments.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param fullCommand Entire line entered by user","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Command object of what the user entered","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If the command is invalid","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2022-01-26"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        String[] splitCommand \u003d fullCommand.split(\"\\\\s+\");","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        String command \u003d splitCommand[0];","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        String args \u003d fullCommand.substring(splitCommand[0].length()).trim();","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert (!command.equals(\"\"));","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        switch (command) {","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new ByeCommand();","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new ListCommand();","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_MARK:","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new MarkCommand(args, true);","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_UNMARK:","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new MarkCommand(args, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CreateCommand(args, TaskType.TODO);","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CreateCommand(args, TaskType.DEADLINE);","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new CreateCommand(args, TaskType.EVENT);","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new DeleteCommand(args);","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new FindCommand(args);","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        case COMMAND_UPDATE:","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"            return new UpdateCommand(args);","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        default:","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_COMMAND);","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"dandaandaaaaaan":63}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String MESSAGE_UPDATE \u003d \"Nice! I have updated your task as follows:\";","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_EMPTY_TASK_NUMBER \u003d \"OOPS!!! Empty task number, \"","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"please select a valid task to update using the task\u0027s number\";","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_TASK_NUMBER \u003d \"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"please select a valid task to update using the task\u0027s number\";","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_INVALID_FORMAT \u003d \"OOPS!!! Invalid format, enter your edits\"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \" in the following format: /{field to edit} {content}, for eg. /title New Title\"","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"or /date 2022-02-02, or /time 11:11\";","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private static final String ERROR_TODO_NODATETIME \u003d \"OOPS!!! Invalid format, todo tasks\"","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"            + \"do not have a date or time attached\";","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    private int taskNumber;","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String[] editParams;","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for the update command","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Ensures that a valid number is passed through","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param editParams String with taskNumber and command params","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @throws DukeException If params are empty or is not a valid number","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    public UpdateCommand(String editParams) throws DukeException {","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        String[] command \u003d editParams.split(\" \");","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        String taskNumber \u003d command[0];","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskNumber.equals(\"\")) {","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_EMPTY_TASK_NUMBER);","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskNumber \u003d Integer.parseInt(taskNumber);","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"            String[] filter \u003d new String[command.length - 1];","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"            for (int i \u003d 1; i \u003c command.length; i++) {","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"                filter[i - 1] \u003d command[i];","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.editParams \u003d filter;","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_TASK_NUMBER);","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String execute(List\u003cTask\u003e tasks, Ui ui) throws DukeException {","lastModifiedDate":"2022-02-07"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (this.taskNumber \u003e tasks.size() || this.taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_TASK_NUMBER);","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"        Task thisTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (editParams.length \u003c 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_INVALID_FORMAT);","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (editParams[0].equals(\"/title\")) {","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"            editTitle(thisTask);","lastModifiedDate":"2022-02-14"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        } else if (editParams[0].equals(\"/date\") || editParams[0].equals(\"/time\")) {","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"            checkDateTimeUpdatability(thisTask);","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (editParams.length !\u003d 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"                throw new DukeException(ERROR_INVALID_FORMAT);","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"            if (editParams[0].equals(\"/date\")) {","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"                try {","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"                    setDeadlineOrEventDate(thisTask);","lastModifiedDate":"2022-02-14"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"                    throw new DukeException(ERROR_INVALID_FORMAT);","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"            } else if (editParams[0].equals(\"/time\")) {","lastModifiedDate":"2022-02-07"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"                try {","lastModifiedDate":"2022-02-07"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"                    setDeadlineOrEventTime(thisTask);","lastModifiedDate":"2022-02-14"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"                    throw new DukeException(ERROR_INVALID_FORMAT);","lastModifiedDate":"2022-02-07"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"                }","lastModifiedDate":"2022-02-07"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"        Storage.saveToFile(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        return ui.getTaskLine(thisTask, MESSAGE_UPDATE);","lastModifiedDate":"2022-02-14"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void setDeadlineOrEventDate(Task task) {","lastModifiedDate":"2022-02-14"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (task instanceof EventTask) {","lastModifiedDate":"2022-02-14"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"            EventTask event \u003d (EventTask) task;","lastModifiedDate":"2022-02-14"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"            event.setEventDate(editParams[1]);","lastModifiedDate":"2022-02-14"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (task instanceof DeadlineTask) {","lastModifiedDate":"2022-02-14"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"            DeadlineTask deadlineTask \u003d (DeadlineTask) task;","lastModifiedDate":"2022-02-14"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"            deadlineTask.setDeadlineDate(editParams[1]);","lastModifiedDate":"2022-02-14"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void setDeadlineOrEventTime(Task task) {","lastModifiedDate":"2022-02-14"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (task instanceof EventTask) {","lastModifiedDate":"2022-02-14"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"            EventTask event \u003d (EventTask) task;","lastModifiedDate":"2022-02-14"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"            event.setEventTime(editParams[1]);","lastModifiedDate":"2022-02-14"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (task instanceof DeadlineTask) {","lastModifiedDate":"2022-02-14"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"            DeadlineTask deadlineTask \u003d (DeadlineTask) task;","lastModifiedDate":"2022-02-14"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"            deadlineTask.setDeadlineTime(editParams[1]);","lastModifiedDate":"2022-02-14"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-14"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-14"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void editTitle(Task task) {","lastModifiedDate":"2022-02-14"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"        String editedTitle \u003d editParams[1];","lastModifiedDate":"2022-02-14"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"        for (int i \u003d 2; i \u003c editParams.length; i++) {","lastModifiedDate":"2022-02-14"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"            editedTitle +\u003d \" \" + editParams[i];","lastModifiedDate":"2022-02-14"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-14"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"        task.setTitle(editedTitle);","lastModifiedDate":"2022-02-14"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void checkDateTimeUpdatability(Task task) throws DukeException {","lastModifiedDate":"2022-02-07"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (task instanceof TodoTask) {","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"            throw new DukeException(ERROR_TODO_NODATETIME);","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"dandaandaaaaaan":125}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.exception;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":" * Custom exception class for printing set error texts.","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-18"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Exception constructor.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param str Error message","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public DukeException(String str) {","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(str);","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":16}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void flip() {","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"    public static DialogBox getBotDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        db.flip();","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        return db;","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"dandaandaaaaaan":61}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.gui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    private Image botImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bot.png\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Initialises the main window GUI","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Displays the welcome message","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        dialogContainer.getChildren().add(DialogBox.getBotDialog(duke.getUi().getWelcomeMessage(), botImage));","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        String output \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                DialogBox.getBotDialog(output, botImage)","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        );","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"dandaandaaaaaan":44}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":" * Tasks that are set with a deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2022-01-18"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected LocalDate taskDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected LocalTime taskTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for deadline task with date and time using varargs.","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Depending on the length of the taskDateTime, determine whether to accommodate","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskDateTime Date of task deadline","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    public DeadlineTask(String title, String... taskDateTime) {","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title);","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.DEADLINE;","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert(taskDateTime.length \u003e 0 \u0026\u0026 taskDateTime.length \u003c\u003d 2);","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskDateTime.length \u003e\u003d 1) {","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskDate \u003d LocalDate.parse(taskDateTime[0]);","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskTime \u003d LocalTime.parse(taskDateTime[1]);","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for deadline task and specified done state with date and time using varargs.","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Depending on the length of the taskDateTime, determine whether to accommodate","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param isDone Done state deadline","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param taskDateTime Date of Task deadline","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    public DeadlineTask(String title, Boolean isDone, String... taskDateTime) {","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title, isDone);","lastModifiedDate":"2022-01-18"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.DEADLINE;","lastModifiedDate":"2022-01-19"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert(taskDateTime.length \u003e 0 \u0026\u0026 taskDateTime.length \u003c\u003d 2);","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskDateTime.length \u003e\u003d 1) {","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskDate \u003d LocalDate.parse(taskDateTime[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (taskDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.taskTime \u003d LocalTime.parse(taskDateTime[1]);","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenate deadline printing string.","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String for printing the deadline","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getByTime() {","lastModifiedDate":"2022-01-18"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        return \"(by: \" + taskDate + (taskTime !\u003d null ? \" \" + taskTime.toString() : \"\") + \")\";","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void setDeadlineDate(String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.taskDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void setDeadlineTime(String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.taskTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenate task into format to save to file.","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String for file saving","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toOutputLine() {","lastModifiedDate":"2022-01-24"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.getType() + \" | \" + (isDone ? \"1 \" : \"0 \") + \"| \" + this.title + \" | \"","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"                + taskDate.toString() + (taskTime !\u003d null ? \" | \" + taskTime.toString() : \"\");","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Combines the title with the deadline.","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Used when printing the task with the List command.","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String with title and deadline of the task","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.title + \" \" + getByTime();","lastModifiedDate":"2022-01-18"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":90}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":" * Tasks that are classified as events.","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"public class EventTask extends Task {","lastModifiedDate":"2022-01-18"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected LocalDate eventDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected LocalTime eventTime;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for event with date and/or time","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of event","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param eventDateTime Date of event","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    public EventTask(String title, String... eventDateTime) {","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title);","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.EVENT;","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert(eventDateTime.length \u003e 0 \u0026\u0026 eventDateTime.length \u003c\u003d 2);","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (eventDateTime.length \u003e\u003d 1) {","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.eventDate \u003d LocalDate.parse(eventDateTime[0]);","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (eventDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.eventTime \u003d LocalTime.parse(eventDateTime[1]);","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for event with specified done state, date and/or time.","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of event","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param isDone Done state","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param eventDateTime Date of event","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public EventTask(String title, Boolean isDone, String... eventDateTime) {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title, isDone);","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.EVENT;","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        assert(eventDateTime.length \u003e 0 \u0026\u0026 eventDateTime.length \u003c\u003d 2);","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (eventDateTime.length \u003e\u003d 1) {","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.eventDate \u003d LocalDate.parse(eventDateTime[0]);","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"        if (eventDateTime.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"            this.eventTime \u003d LocalTime.parse(eventDateTime[1]);","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-18"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenate event date and time printing string.","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String for printing the event date and time","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getEventTime() {","lastModifiedDate":"2022-01-18"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        return \"(at: \" + eventDate + (eventTime !\u003d null ? \" \" + eventTime.toString() : \"\") + \")\";","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void setEventDate(String date) throws DateTimeParseException {","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.eventDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void setEventTime(String time) throws DateTimeParseException {","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.eventTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenate event into format to save to file.","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String for file saving","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toOutputLine() {","lastModifiedDate":"2022-01-24"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.getType() + \" | \" + (isDone ? \"1 \" : \"0 \") + \"| \" + this.title","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \" | \" + eventDate.toString() + (eventTime !\u003d null ? \" | \" + eventTime.toString() : \"\");","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Combines the title with the event time.","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Used when printing the event with the List command.","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String with the title and event date and time","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.title + \" \" + getEventTime();","lastModifiedDate":"2022-01-18"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":89}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-18"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected String title;","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected Boolean isDone;","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"    protected TaskType type;","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Superclass constructor for tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public Task(String title) {","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Superclass constructor for tasks with specified done state.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param isDone Done state","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public Task(String title, Boolean isDone) {","lastModifiedDate":"2022-01-18"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-01-18"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Getter for task title.","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getTitle() {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.title;","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Mark tasks as done.","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-01-18"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-18"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Unmark tasks.","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markAsUndone() {","lastModifiedDate":"2022-01-18"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-18"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Obtain the initial for the type of task.","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return String with the initial of the task type","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getType() {","lastModifiedDate":"2022-01-18"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.type.getInitial();","lastModifiedDate":"2022-01-19"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Obtain the indication for done state in a string for printing.","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Done indicator, X if the task is done and nothing if the task is undone","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-18"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-18"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Setter for title","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param newTitle New title to replace with","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void setTitle(String newTitle) {","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.title \u003d newTitle;","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Concatenate task to general format for saving to file.","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Stirng for file saving","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toOutputLine() {","lastModifiedDate":"2022-01-24"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.getType() + \" | \" + (isDone ? \"1 \" : \"0 \") + \"| \" + this.title;","lastModifiedDate":"2022-01-24"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Use title as the String representation of the task.","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Override","lastModifiedDate":"2022-01-18"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String toString() {","lastModifiedDate":"2022-01-18"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.title;","lastModifiedDate":"2022-01-18"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":94}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"public enum TaskType {","lastModifiedDate":"2022-01-19"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"    TODO(\"T\"),","lastModifiedDate":"2022-01-19"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"    DEADLINE(\"D\"),","lastModifiedDate":"2022-01-19"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"    EVENT(\"E\");","lastModifiedDate":"2022-01-19"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    private String initial;","lastModifiedDate":"2022-01-19"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor of a task type to associate with each type.","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param initial Initial of task type","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    TaskType(String initial) {","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.initial \u003d initial;","lastModifiedDate":"2022-01-19"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-19"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Getter of task type initial.","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @return Task type initial in a string","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public String getInitial() {","lastModifiedDate":"2022-01-19"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        return this.initial;","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-19"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-19"}],"authorContributionMap":{"dandaandaaaaaan":27}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-26"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"/**","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":" * Tasks set as todo.","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":" */","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2022-01-18"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for todo task.","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"     *","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public TodoTask(String title) {","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title);","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.TODO;","lastModifiedDate":"2022-01-19"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    /**","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"     * Constructor for todo task with specified done state.","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param title Title of task","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"     * @param isDone Done state","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"     */","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    public TodoTask(String title, Boolean isDone) {","lastModifiedDate":"2022-01-18"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        super(title, isDone);","lastModifiedDate":"2022-01-18"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        this.type \u003d TaskType.TODO;","lastModifiedDate":"2022-01-19"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":27}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"283.0\" style\u003d\"-fx-background-color: #22303C;-fx-background-radius:10px; -fx-padding:10px; -fx-text-fill: #FFFFFF; -fx-border-radius: 10px; -fx-border-width: 2px; -fx-border-color:black\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"dandaandaaaaaan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: #404040;-fx-text-fill: #FFFFFF;-fx-border-color:#15202B\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #282828; -fx-text-fill: #FFFFFF;-fx-border-color:#15202B\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"/\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #15202B;\" /\u003e","lastModifiedDate":"2022-02-14"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"dandaandaaaaaan":19}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"public class UiTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void uiTestWelcome_valid_success() {","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        String lines \u003d ui.getWelcomeMessage();","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Hello! I\u0027m Dusk\\n     What can I do for you?\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":14}},{"path":"src/test/java/duke/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ByeCommandTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void testByeCommand() {","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new ByeCommand() instanceof ByeCommand);","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":12}},{"path":"src/test/java/duke/command/CreateCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TaskType;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"public class CreateCommandTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createCommand_emptyTitle_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"\", TaskType.TODO);","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The title of a task cannot be empty :(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"\", TaskType.DEADLINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The title of a task cannot be empty :(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"\", TaskType.EVENT);","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The title of a task cannot be empty :(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createCommand_todoTask_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new CreateCommand(\"Test Title\", TaskType.TODO).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [T][ ] Test Title\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 1 task in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createCommand_deadlineTask_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        //With Date + Time","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new CreateCommand(\"Test Title /by 2022-01-01 11:11\",","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"                    TaskType.DEADLINE).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [D][ ] Test Title (by: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 1 task in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        //With Date only","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new CreateCommand(\"Test Title 2 /by 2022-01-02\", TaskType.DEADLINE).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [D][ ] Test Title 2 (by: 2022-01-02)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 2 tasks in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createDeadlineTask_emptyDeadline_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"        //No /by in the line","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title 1\", TaskType.DEADLINE).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The deadline cannot be empty :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Have /by but don\u0027t have anything after that","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title 2 /by\", TaskType.DEADLINE).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The deadline cannot be empty :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createDeadlineTask_invalidDateTimeFormat_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title /by 1234567\", TaskType.DEADLINE).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The time is in the wrong format :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createCommand_eventTask_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"        //With Date + Time","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new CreateCommand(\"Test Title /at 2022-01-01 11:11\", TaskType.EVENT).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [E][ ] Test Title (at: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 1 task in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"        //With Date only","lastModifiedDate":"2022-01-27"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new CreateCommand(\"Test Title 2 /at 2022-01-02\", TaskType.EVENT).execute(taskList, ui);;","lastModifiedDate":"2022-02-07"},{"lineNumber":133,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":134,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [E][ ] Test Title 2 (at: 2022-01-02)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":135,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 2 tasks in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":136,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":137,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createEventTask_emptyEventTime_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":144,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":145,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":146,"author":{"gitId":"dandaandaaaaaan"},"content":"        //No /at in the line","lastModifiedDate":"2022-01-27"},{"lineNumber":147,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":148,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title 1\", TaskType.EVENT).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":149,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":150,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The time of an event cannot be empty :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":151,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":152,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":153,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":154,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Have /at but don\u0027t have anything after that","lastModifiedDate":"2022-01-27"},{"lineNumber":155,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":156,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title 2 /at\", TaskType.EVENT).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":157,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":158,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The time of an event cannot be empty :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":160,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":161,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":162,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":164,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void createEventTask_invalidDateTimeFormat_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":165,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":167,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":168,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":169,"author":{"gitId":"dandaandaaaaaan"},"content":"            new CreateCommand(\"Test title /at 1234567\", TaskType.EVENT).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":170,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":171,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! The time is in the wrong format :( \"","lastModifiedDate":"2022-01-27"},{"lineNumber":172,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"Enter date in the format of yyyy-mm-dd hh:mm or yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":173,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":174,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":175,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":175}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void testDelete_valid_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test Title 1\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test Title 2\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Test Title 3\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Test Title 4\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        //Test deleting one of each type of task","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"            String lines \u003d new DeleteCommand(\"1\").execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [T][ ] Test Title 1\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 3 tasks in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            lines \u003d new DeleteCommand(\"2\").execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [D][ ] Test Title 3 (by: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 2 tasks in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"            lines \u003d new DeleteCommand(\"2\").execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"       [E][ ] Test Title 4 (at: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"     Now you have 1 task in the list.\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void testDelete_invalidInput_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test Title 1\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test Title 2\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Test Title 3\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Test Title 4\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"        //if user tries to delete nothing","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"            new DeleteCommand(\"\");","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Task to delete cannot be empty:(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"        //if user tries to enter something that is not a number","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"            new DeleteCommand(\"invalid\");","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to delete using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"        //if user tries to delete a number out of the range of the list","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"            new DeleteCommand(\"8\").execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to delete using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"        //if user tries to delete a number below 1","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"            new DeleteCommand(\"-2\").execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to delete using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":85}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ListCommandTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void listCommand_emptyList_success() {","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        String lines \u003d new ListCommand().execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Here are the tasks in your list:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     ~~List is currently empty~~\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void listCommand_fullList_success() {","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Task 1: Todo\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Task 2: Todo, Marked\", true));","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 3: Deadline w/ Date and Time\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 4: Deadline w/ Date and Time, Marked\",","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"                true, \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 5: Deadline w/ Date only\", \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 6: Deadline w/ Date only, Marked\", true, \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 7: Event w/ Date and Time\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 8: Event w/ Date and Time, marked\", true, \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 9. Event w/ Date\", \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 10. Event w/ Date, marked\", true, \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        String lines \u003d new ListCommand().execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Here are the tasks in your list:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     1. [T][ ] Task 1: Todo\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     2. [T][X] Task 2: Todo, Marked\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     3. [D][ ] Task 3: Deadline w/ Date and Time (by: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     4. [D][X] Task 4: Deadline w/ Date and Time, Marked (by: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     5. [D][ ] Task 5: Deadline w/ Date only (by: 2022-01-01)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     6. [D][X] Task 6: Deadline w/ Date only, Marked (by: 2022-01-01)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     7. [E][ ] Task 7: Event w/ Date and Time (at: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     8. [E][X] Task 8: Event w/ Date and Time, marked (at: 2022-01-01 11:11)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     9. [E][ ] Task 9. Event w/ Date (at: 2022-01-01)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"     10. [E][X] Task 10. Event w/ Date, marked (at: 2022-01-01)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":54}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.Ui;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.EventTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"public class MarkCommandTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markCommand_emptyTask_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"\", true);","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Task to mark cannot be empty:(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void unmarkCommand_emptyTask_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"\", false);","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Task to unmark cannot be empty:(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markCommand_invalidNumber_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"invalid\", true);","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"dandaandaaaaaan"},"content":"                            + \"please select a valid task to mark using the task\u0027s number\",","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"dandaandaaaaaan"},"content":"                    e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":52,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void unmarkCommand_invalidNumber_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"invalid\", false);","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"dandaandaaaaaan"},"content":"                            + \"please select a valid task to unmark using the task\u0027s number\",","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"dandaandaaaaaan"},"content":"                    e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markCommand_numberOutOfRange_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test task\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":69,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":70,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"8\", true).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"dandaandaaaaaan"},"content":"                            + \"please select a valid task to mark using the task\u0027s number\",","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"dandaandaaaaaan"},"content":"                    e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"-1\", true).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to mark using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void unmarkCommand_numberOutOfRange_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Test task\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":91,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":92,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"8\", false).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":93,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":94,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":95,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to unmark using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-31"},{"lineNumber":96,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":97,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":98,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":99,"author":{"gitId":"dandaandaaaaaan"},"content":"            new MarkCommand(\"-1\", false).execute(taskList, ui);","lastModifiedDate":"2022-01-27"},{"lineNumber":100,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":101,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! Invalid task number, \"","lastModifiedDate":"2022-01-31"},{"lineNumber":102,"author":{"gitId":"dandaandaaaaaan"},"content":"                    + \"please select a valid task to unmark using the task\u0027s number\", e.getMessage());","lastModifiedDate":"2022-01-31"},{"lineNumber":103,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":105,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":106,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":107,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void markCommand_valid_success() throws DukeException, IOException {","lastModifiedDate":"2022-01-27"},{"lineNumber":108,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":109,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":110,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Task 1: Todo\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 2: Deadline w/ Date and Time\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 3: Deadline w/ Date only\", \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 4: Event w/ Date and Time\", \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 5. Event w/ Date\", \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":115,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":116,"author":{"gitId":"dandaandaaaaaan"},"content":"        String lines \u003d new MarkCommand(\"1\", true).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":117,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":118,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [T][X] Task 1: Todo\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":119,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"2\", true).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":120,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":121,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [D][X] Task 2: Deadline w/ Date and Time (by: 2022-01-01 11:11)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"3\", true).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [D][X] Task 3: Deadline w/ Date only (by: 2022-01-01)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":125,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"4\", true).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":127,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [E][X] Task 4: Event w/ Date and Time (at: 2022-01-01 11:11)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":128,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"5\", true).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":129,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":130,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [E][X] Task 5. Event w/ Date (at: 2022-01-01)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":131,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":133,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":134,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void unmarkCommand_valid_success() throws DukeException, IOException {","lastModifiedDate":"2022-01-27"},{"lineNumber":135,"author":{"gitId":"dandaandaaaaaan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":136,"author":{"gitId":"dandaandaaaaaan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-27"},{"lineNumber":137,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new TodoTask(\"Task 1: Todo\", true));","lastModifiedDate":"2022-01-27"},{"lineNumber":138,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 2: Deadline w/ Date and Time\", true, \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":139,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new DeadlineTask(\"Task 3: Deadline w/ Date only\", true, \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":140,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 4: Event w/ Date and Time\", true, \"2022-01-01\", \"11:11\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":141,"author":{"gitId":"dandaandaaaaaan"},"content":"        taskList.add(new EventTask(\"Task 5. Event w/ Date\", true, \"2022-01-01\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":142,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"dandaandaaaaaan"},"content":"        String lines \u003d new MarkCommand(\"1\", false).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":144,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":145,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [T][ ] Task 1: Todo\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":146,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"2\", false).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":147,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":148,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [D][ ] Task 2: Deadline w/ Date and Time (by: 2022-01-01 11:11)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":149,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"3\", false).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":150,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":151,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [D][ ] Task 3: Deadline w/ Date only (by: 2022-01-01)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":152,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"4\", false).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":153,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":154,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [E][ ] Task 4: Event w/ Date and Time (at: 2022-01-01 11:11)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":155,"author":{"gitId":"dandaandaaaaaan"},"content":"        lines \u003d new MarkCommand(\"5\", false).execute(taskList, ui);","lastModifiedDate":"2022-02-07"},{"lineNumber":156,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":157,"author":{"gitId":"dandaandaaaaaan"},"content":"                + \"       [E][ ] Task 5. Event w/ Date (at: 2022-01-01)\", lines);","lastModifiedDate":"2022-02-07"},{"lineNumber":158,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":159,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":159}},{"path":"src/test/java/duke/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.command;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void testParser_valid_success() throws DukeException {","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"list\") instanceof ListCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"mark 1\") instanceof MarkCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"unmark 1\") instanceof MarkCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"todo TodoTitleGoesHere\") instanceof CreateCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"deadline DeadlineTitleGoesHere\") instanceof CreateCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"event EventTitleGoesHere\") instanceof CreateCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void testParser_invalid_exceptionThrown() {","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"            Parser.parse(\"invalid\");","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"            fail();","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"            assertEquals(\"OOPS!!! You have entered an invalid command :(\", e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":33}},{"path":"src/test/java/duke/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void deadlineTask_valid_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new DeadlineTask(\"Title 1\", \"2022-01-01\") instanceof DeadlineTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new DeadlineTask(\"Title 2\", \"2022-01-01\", \"11:11\") instanceof DeadlineTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new DeadlineTask(\"Title 3\", true, \"2022-01-01\") instanceof DeadlineTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new DeadlineTask(\"Title 4\", true, \"2022-01-01\", \"11:11\") instanceof DeadlineTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void deadlineTask_getByTime_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 1\", \"2022-01-01\").getByTime(),","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"(by: 2022-01-01)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 2\", \"2022-01-01\", \"11:11\").getByTime(),","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"(by: 2022-01-01 11:11)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void deadlineTask_toOutputLine_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 1\", \"2022-01-01\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"D | 0 | Title 1 | 2022-01-01\");","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 2\", \"2022-01-01\", \"11:11\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"D | 0 | Title 2 | 2022-01-01 | 11:11\");","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 3\", true, \"2022-01-01\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"D | 1 | Title 3 | 2022-01-01\");","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 4\", true, \"2022-01-01\", \"11:11\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"D | 1 | Title 4 | 2022-01-01 | 11:11\");","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void deadlineTask_toString_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 1\", \"2022-01-01\").toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 1 (by: 2022-01-01)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new DeadlineTask(\"Title 2\", \"2022-01-01\", \"11:11\").toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 2 (by: 2022-01-01 11:11)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":44}},{"path":"src/test/java/duke/task/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"public class EventTaskTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void eventTask_valid_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new EventTask(\"Title 1\", \"2022-01-01\") instanceof EventTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new EventTask(\"Title 2\", \"2022-01-01\", \"11:11\") instanceof EventTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new EventTask(\"Title 3\", true, \"2022-01-01\") instanceof EventTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new EventTask(\"Title 4\", true, \"2022-01-01\", \"11:11\") instanceof EventTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void eventTask_getEventTime_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 1\", \"2022-01-01\").getEventTime(),","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"(at: 2022-01-01)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 2\", \"2022-01-01\", \"11:11\").getEventTime(),","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"(at: 2022-01-01 11:11)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void eventTask_toOutputLine_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 1\", \"2022-01-01\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"E | 0 | Title 1 | 2022-01-01\");","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 2\", \"2022-01-01\", \"11:11\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"E | 0 | Title 2 | 2022-01-01 | 11:11\");","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 3\", true, \"2022-01-01\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"E | 1 | Title 3 | 2022-01-01\");","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 4\", true, \"2022-01-01\", \"11:11\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"E | 1 | Title 4 | 2022-01-01 | 11:11\");","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void eventTask_toString_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 1\", \"2022-01-01\").toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 1 (at: 2022-01-01)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new EventTask(\"Title 2\", \"2022-01-01\", \"11:11\").toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 2 (at: 2022-01-01 11:11)\");","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":45}},{"path":"src/test/java/duke/task/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"package duke.task;","lastModifiedDate":"2022-01-27"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"public class TodoTaskTest {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void todoTask_valid_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new TodoTask(\"Title 1\") instanceof TodoTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertTrue(new TodoTask(\"Title 2\", true) instanceof TodoTask);","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void todoTask_toOutputLine_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new TodoTask(\"Title 1\").toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"T | 0 | Title 1\");","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new TodoTask(\"Title 2\", true).toOutputLine(),","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"T | 1 | Title 2\");","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"    @Test","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"    public void todoTask_toString_success() {","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new TodoTask(\"Title 1\").toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 1\");","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"        assertEquals(new TodoTask(\"Title 2\", true).toString(),","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"                \"Title 2\");","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"dandaandaaaaaan":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dandaandaaaaaan"},"content":"todo Todo Task 1","lastModifiedDate":"2022-01-18"},{"lineNumber":2,"author":{"gitId":"dandaandaaaaaan"},"content":"deadline Deadline Task 2 /by Deadline","lastModifiedDate":"2022-01-18"},{"lineNumber":3,"author":{"gitId":"dandaandaaaaaan"},"content":"event Event Task 3 /at Event Time","lastModifiedDate":"2022-01-18"},{"lineNumber":4,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"dandaandaaaaaan"},"content":"mark 1","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":7,"author":{"gitId":"dandaandaaaaaan"},"content":"mark 2","lastModifiedDate":"2022-01-18"},{"lineNumber":8,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":9,"author":{"gitId":"dandaandaaaaaan"},"content":"mark 3","lastModifiedDate":"2022-01-18"},{"lineNumber":10,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":11,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark 1","lastModifiedDate":"2022-01-18"},{"lineNumber":12,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark 2","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":15,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark 3","lastModifiedDate":"2022-01-18"},{"lineNumber":16,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":17,"author":{"gitId":"dandaandaaaaaan"},"content":"invalid","lastModifiedDate":"2022-01-18"},{"lineNumber":18,"author":{"gitId":"dandaandaaaaaan"},"content":"todo","lastModifiedDate":"2022-01-18"},{"lineNumber":19,"author":{"gitId":"dandaandaaaaaan"},"content":"deadline","lastModifiedDate":"2022-01-18"},{"lineNumber":20,"author":{"gitId":"dandaandaaaaaan"},"content":"event","lastModifiedDate":"2022-01-18"},{"lineNumber":21,"author":{"gitId":"dandaandaaaaaan"},"content":"deadline Deadline Title With No Deadline","lastModifiedDate":"2022-01-18"},{"lineNumber":22,"author":{"gitId":"dandaandaaaaaan"},"content":"event Event Title With No Event","lastModifiedDate":"2022-01-18"},{"lineNumber":23,"author":{"gitId":"dandaandaaaaaan"},"content":"mark invalid","lastModifiedDate":"2022-01-18"},{"lineNumber":24,"author":{"gitId":"dandaandaaaaaan"},"content":"mark 7","lastModifiedDate":"2022-01-18"},{"lineNumber":25,"author":{"gitId":"dandaandaaaaaan"},"content":"mark","lastModifiedDate":"2022-01-18"},{"lineNumber":26,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark invalid","lastModifiedDate":"2022-01-18"},{"lineNumber":27,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark 7","lastModifiedDate":"2022-01-18"},{"lineNumber":28,"author":{"gitId":"dandaandaaaaaan"},"content":"unmark","lastModifiedDate":"2022-01-18"},{"lineNumber":29,"author":{"gitId":"dandaandaaaaaan"},"content":"delete","lastModifiedDate":"2022-01-18"},{"lineNumber":30,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 0","lastModifiedDate":"2022-01-18"},{"lineNumber":31,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 99","lastModifiedDate":"2022-01-18"},{"lineNumber":32,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 3","lastModifiedDate":"2022-01-18"},{"lineNumber":33,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 3","lastModifiedDate":"2022-01-18"},{"lineNumber":34,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 2","lastModifiedDate":"2022-01-18"},{"lineNumber":35,"author":{"gitId":"dandaandaaaaaan"},"content":"delete 1","lastModifiedDate":"2022-01-18"},{"lineNumber":36,"author":{"gitId":"dandaandaaaaaan"},"content":"list","lastModifiedDate":"2022-01-18"},{"lineNumber":37,"author":{"gitId":"dandaandaaaaaan"},"content":"bye","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"dandaandaaaaaan":37}}]
