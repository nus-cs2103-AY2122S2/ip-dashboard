{"authorDailyContributionsMap":{"ryantanlien":[{"date":"2022-01-18","commitResults":[{"hash":"409a3ecbe6c7c9becf2db455e9f7e4e8e328f5d6","messageTitle":"Butler Level 1","messageBody":"Level 1. Greet, Echo, Exit\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":33,"deletions":10},"bat":{"insertions":1,"deletions":1},"md":{"insertions":2,"deletions":2}}},{"hash":"0feb40484ff6b760772e160d6dcb8bd6f821c95b","messageTitle":"Butler Level 2","messageBody":"Level 2. Add, List\nAdded the ability to store whatever text entered by the user and display them back to the user when requested.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":3}}},{"hash":"96848e3ece40ef3cb38975c007b0942ebcd98ca1","messageTitle":"Butler Level 3","messageBody":"Add the ability to mark tasks as done. Add the ability to change the status back to not done.\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":62,"deletions":9}}},{"hash":"a28f34629be39d512ddd229fef037b7804b2f68d","messageTitle":"Butler Level 3.1","messageBody":"Incomplete Butler Level 4\nAdded 3 Task subtypes:\n- Deadline class\n- Event class\n- ToDo class\n\nAdded toString method to Task class\n","fileTypesAndContributionMap":{"java":{"insertions":58,"deletions":3}}}]},{"date":"2022-01-19","commitResults":[{"hash":"4a2b117b082f084f08cf5284ddafc1a156c69d47","messageTitle":"Butler Level 4","messageBody":"Complete Butler Level 4\n- Restructured Input Handling Blocks\n- Completed toString() overridden methods for Deadline, Event and ToDo classes\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":76,"deletions":6}}},{"hash":"2459f548cb6980730f6acd26dabe456bdcccb5b9","messageTitle":"Text UI Testing","messageBody":"Added Test Cases for Behavior for Deadlines , ToDos, and Events\n- Creation (adding to list)\n- Marking\n- Unmarking\n- Listing\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":16,"deletions":0},"bat":{"insertions":1,"deletions":1}}}]},{"date":"2022-01-20","commitResults":[{"hash":"ede0e841c14e932e2c907bc1cb4ffd326c9649f3","messageTitle":"Butler Level 5","messageBody":"Handled Errors\n-Invalid Inputs for Deadline, ToDo, Events, such as empty description or empty date/time\n-Invalid commands such as blah that have are not tied to Butler actions\n-Invalid inputs for mark and unmark commands such as marking or unmarking an item in the list that does not exist, or following mark and unmark with multiple integers or non-integers\n","tags":["Level-5"],"fileTypesAndContributionMap":{"txt":{"insertions":10,"deletions":0},"java":{"insertions":137,"deletions":79}}},{"hash":"56c4fce94856df4e3b2ef395cd8e6509a1b7e9b8","messageTitle":"Butler Level 6","messageBody":"-Added try and catch block for NumberFormatExceptions in mark, delete and unmark sections of handleCommands\n\n- Added testing and methods for deleting Tasks off the task ArrayList, catching the same exceptions as marking and unmarking Tasks in the list.\n","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":7,"deletions":3},"java":{"insertions":42,"deletions":19}}},{"hash":"6d96598764ce016646e26ac54abaa2bd6c7890ae","messageTitle":"Butler Enums","messageBody":"Added the use of enums and switch statements in the handleCommand method for better refactorability in later iterations.\n","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":148,"deletions":106}}}]},{"date":"2022-01-26","commitResults":[{"hash":"89f94ba4d8f6a8624b5bd7022fa2e65c781d1abf","messageTitle":"Add FileManager and resources folder","messageBody":"Lack of resources folder and I/O capability\n\nButler class functions as a Input and Output handler, need to separate File I/O responsibility from this terminal input and output class.\n\nFileManager class is an incomplete File I/O handler whose main capability is to able to read and write to files.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":48,"deletions":0}}}]},{"date":"2022-01-27","commitResults":[{"hash":"20b7630ec3591e91b9bcd50c07698c49b57bff69","messageTitle":"Butler Level 7","messageBody":"Complete FileManager\n\n- FileManager now outputs the list format in a file.\n- If resources folder (or any parent folder) does not exist in main, then make the parent folders in the hierachy\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":19,"deletions":9}}},{"hash":"9e5af692d5f488ea96bef9cd874c40b701b8e679","messageTitle":"Butler Level 7","messageBody":"Removed redundant test function call\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":2}}},{"hash":"8ede35c67c3693fbec04b674f81923a5aff18c53","messageTitle":"Butler Level 8","messageBody":"Add LocalDateTimeManager\nEdit Deadline and Event to be able to contain formatted LocalDateTimes as strings.\n\nLocalDateTimeManager was created to separate area of responsibilities (processing strings to LocalDateTime formats) from the Event and Deadline classes\n","fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":0}}},{"hash":"fb0ee8ca726b4f4a21a8f385d1890fe8d2b3b727","messageTitle":"Refactor code structure","messageBody":"Remove Command Enum\nAdd Command Object Types\nCreate Parser, Ui and Storage classes\n\n- The command enum was removed to bring in more OOP, as per the stretch goal.\n\n- handleCommand method was split into multiple classes, Parser to parse inputs to commands, Ui to handle input and output, Storage to handle File I/O.\n\nNote: Storage is a renaming of the previous FileManager\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":1},"java":{"insertions":385,"deletions":264}}},{"hash":"9a1f5cb29994cc9e8ed46277f646e49de9ab75bc","messageTitle":"Organise classes into packages","messageBody":"- Move command related classes into command package\n- Move task related classes into task package\n- Move Parser, LocalDateTimeManager, Storage, Ui into util package\n\nThe classes are divided into packages for better access\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":148,"deletions":34},"bat":{"insertions":2,"deletions":2},"md":{"insertions":2,"deletions":2}}}]},{"date":"2022-01-28","commitResults":[{"hash":"ba6d73c72efd8437ef69eb5dc056e84d671bdab6","messageTitle":"Add JUnit 5 Tests","messageBody":"Add JUnit 5.6.0 dependency\nSet up test module and rebuilt main module\nAdd simple ButlerTest\nAdd simple DeadlineTest\n\nMisc:\nChange access modifier on parser and Tasklist Methods to public to allow access to other classes in butler packages\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":3}}},{"hash":"0b41c9140160c829270e3468fab1971d7901d40f","messageTitle":"Wrote Javadocs for butler sub-packages","messageBody":"Wrote header comments for public methods in butler sub-packages.\n\nNo header comments yet exist for Butler, ButlerInputException and TaskList classes\n","fileTypesAndContributionMap":{"java":{"insertions":275,"deletions":5}}},{"hash":"0b96ef65eafb793bc396e4054529263f558d22c2","messageTitle":"Update all code in Source root to match given style guide","messageBody":"Update code to match source guide.\nRe-order import statements in alphabetical order.\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":16}}},{"hash":"4f913710842eda1b221d4a6bf004ba4c695dbc58","messageTitle":"Add find command functionality","messageBody":"Users can now find tasks in their list in the chatbot that contains the provided substring in their description.\n\nNew findCommand command object added to adhere to OOP principles.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":1},"java":{"insertions":53,"deletions":14}}},{"hash":"5b32190b41c44fa65ff976d156c76a5368640d4a","messageTitle":"Update Parser.java","messageBody":"Fixed merge bug where imports were changed from command.* to single imports, and FindCommand was left out of the imports.\n","tags":["Level-9"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2022-02-03","commitResults":[{"hash":"6fd17027386975410b3f46312245e7c446062a8f","messageTitle":"Add Gradle support to project","messageBody":"Support Gradle in project\n\nJUnit Dependencies were difficult to handle and module structure had to be defined manually. Test suite also had to be run manually to ensure no regressions occurred.\n\nGradle now takes care of:\n-Compilation\n-Running tests\n-Installing and handling dependencies\n\nThis reduces the menial work to be done in the iP\n\nUpdate .gitignore to ignore build.gradle file\n","fileTypesAndContributionMap":{"bat":{"insertions":89,"deletions":0}}}]},{"date":"2022-02-04","commitResults":[{"hash":"63383d9e45ea7c62a856487dd267c9f076c16348","messageTitle":"Design GUI with JavaFX","messageBody":"Text-base design was desired due to change in requirements, update to GUI\n\nRefactor Ui class to become a handler class\nRemove text-based I/O redirection testing\nAdd UiApp class as the driver for GUI window\nUpdate command classes to store strings in Ui class instead of printing to output\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":34},"java":{"insertions":235,"deletions":115},"bat":{"insertions":0,"deletions":21},"sh":{"insertions":0,"deletions":38}}},{"hash":"ef30e199f01f1503fc4b7694c36d9489ee2ed118","messageTitle":"Update JavaDocs","messageBody":"Change JavaDocs to be compliant with the changes due to adding a GUI.\n\n- Changed Command JavaDocs\n- Added JavaDocs to FindCommand, and classes in Ui packages\n","fileTypesAndContributionMap":{"java":{"insertions":136,"deletions":28}}},{"hash":"684b74519df9f70adc189d1e35cd1b92600ebe56","messageTitle":"Refactor Ui and UiApp","messageBody":"Split Responsibility of UiApp with Ui.\n\nUiApp is responsible for launching and styling the GUI as well as for handling user inputs and changing the GUI dynamically according to input.\n\nUi now not only serves as a message holder but also to help the GUI handle inputs, and getting a response from Butler.\n\n-Shifted handleInputs and static resources from UiApp to Ui\n\n-Fixed a bug where inputting an unformatted date and time would cause the date and time to be added to the String representation of a task object\n","fileTypesAndContributionMap":{"txt":{"insertions":6,"deletions":2},"java":{"insertions":61,"deletions":26}}},{"hash":"fe02f94d406f155e5eed5899e71c3b0c4b960734","messageTitle":"Add padding to chat text","messageBody":"Added padding to chat text and credited relevant sources for code reuse in GUI\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}}]},{"date":"2022-02-10","commitResults":[{"hash":"c0d4f1600c7800bea9ecd947f53d6995f974e0ab","messageTitle":"Change code style to fit checkstyle","messageBody":"Change sections of code in miscellaneous ways to fit code style.\n\nChanging code style improves improves readability and code quality\n","fileTypesAndContributionMap":{"java":{"insertions":42,"deletions":45}}},{"hash":"0fccd1291f27263a33139f050f900caff489f92e","messageTitle":"Add Java Assertions to code in util package","messageBody":"Add assertions to util classes that handle program.\n\nThere are no explicit checks in the program to ensure that objects created by manager classes are properly instantiated.\n\nThere is no guarantee that during runtime unchecked exceptions such as NullPointerExceptions will not be thrown.\n\nJava assertions were added in util package classes to make sure that objects and object parameters are not null and are properly created by their relevant classes.\n\nThis helps to ensure that in the future, bugs and unexpected exceptions during runtime is minimised.\n","fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":0}}},{"hash":"c17be88706b6ea48bd44cfc77edb96f98e7a55d9","messageTitle":"Unified style to adhere to checkStyle","messageBody":"Fixed all styling errors with checkStyle\n","fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":32}}},{"hash":"3afbc5554d79271fc36a6ba7ceb6a85e9f869a69","messageTitle":"Refactor parse method","messageBody":"Shorten parse method\n\nParse method is getting very long as there are many keywords for commands to detect.\n\nThe long method results in poor code quality as reading the method is difficult, making maintenance difficult as well.\n\nExtracting the different commands that we need to detect allows for better readability for readers as well as better maintainability, as it is easier to debug due to modularity.\nThis generally improves the quality of the code.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":7},"java":{"insertions":81,"deletions":10}}},{"hash":"d729d269fa21c65e35ccb0dfdcc56e999ee7fbe8","messageTitle":"Revert \"Merge branch-A-CodeQuality\"","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":7,"deletions":0},"java":{"insertions":42,"deletions":129}}}]}]},"authorFileTypeContributionMap":{"ryantanlien":{"java":1258,"md":2,"fxml":0,"sh":0,"bat":89,"gradle":0,"txt":7}},"authorContributionVariance":{"ryantanlien":59622.94},"authorDisplayNameMap":{"ryantanlien":"CS2103T-T09-2 TAN ..RYAN"}}
