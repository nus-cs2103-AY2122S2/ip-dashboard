[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"    archiveVersion \u003d \"v2.1\"","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Denniszedead":3,"-":45}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"#!/bin/sh","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"# Checks that all text files end with a newline.","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"ret\u003d0","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"# Preserve filename with spaces by only splitting on newlines.","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"IFS\u003d\u0027","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"\u0027","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\"","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\"","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"        ret\u003d1","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"    fi","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"done","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"exit $ret","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"Denniszedead":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"#!/bin/sh","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"# Checks for prohibited line endings.","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"# Prohibited line endings: \\r\\n","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"awk \u0027","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    BEGIN {","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        FS \u003d \":\"","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"        OFS \u003d \":\"","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"        ret \u003d 0","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"    {","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"        ret \u003d 1","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\"","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"    END {","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"        exit ret","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"\u0027","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"Denniszedead":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"#!/bin/sh","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"# Checks for trailing whitespace","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"awk \u0027","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"    BEGIN {","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"        FS \u003d \":\"","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        OFS \u003d \":\"","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"        ret \u003d 0","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    {","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"        # which do not properly handle trailing whitespace.","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"        # (e.g. GitHub web editor)","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"        if ($1 ~ /\\.md$/) {","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"            severity \u003d \"WARN\"","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"        } else {","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"            severity \u003d \"ERROR\"","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"            ret \u003d 1","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        print severity, $1, $2, \" trailing whitespace.\"","lastModifiedDate":"2022-02-06"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    END {","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        exit ret","lastModifiedDate":"2022-02-06"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"\u0027","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"Denniszedead":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"#!/bin/sh","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail.","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"ret\u003d0 \u0026\u0026","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"for checkscript in \"$dir\"/check-*; do","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    if ! \"$checkscript\"; then","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        ret\u003d1","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    fi","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"done","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"exit $ret","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"Denniszedead":11}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"DEADLINE","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"deadline 1","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"1","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"2","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"3","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"4","lastModifiedDate":"2022-02-19"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"4","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-19"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"5","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"Denniszedead":29}},{"path":"data/test/dukeDuplicatedDateTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"DEADLINE","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"deadline 1","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"Denniszedead":5}},{"path":"data/test/dukeEmptyTxt.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":4}},{"path":"data/test/dukeFindCmdTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"CS2106 Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"CS2105 Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"CS2104 Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"CS2103 Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"DEADLINE","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"CS2103 Deadline 1","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"10/2/2022 2359","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"EVENT","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"CS2103 Exam 1","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"EVENT","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"CS2106 Exam 1","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":31}},{"path":"data/test/dukeListCmdTest2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"DEADLINE","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"Deadline 1","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"1/1/1900 0000","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"EVENT","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"Event 1","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"1/1/1900 1200","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"Task 2","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"DEADLINE","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"Deadline 2","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"EVENT","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"Event 2","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"1/1/2022 2359","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":28}},{"path":"data/test/dukeMarkCmdTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"true","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":4}},{"path":"data/test/dukeUnmarkCmdTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"TODO","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"false","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"Task 1","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"*** Next Task ***","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":4}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.File;","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.DukeExceptions;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import duke.praser.Parser;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":" * Duke is a task list CLI application that stores three types of tasks, Todos, Deadlines and Events.","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":" * The tasks can be marked and unmarked to represent completeness.","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    /** The Storage that acts as an interface between Duke and duke.txt */","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    /** The Task List that stores all the tasks */","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"     * Constructs a new Duke application.","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"     * @param filename The file which contains the list of tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    public Duke(String filename) {","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"        assert filename.equals(\"data/duke.txt\") : \"File data/duke.txt not found!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"        // Gets the data from filename and creates a new task list based on the data in filename.","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"            storage \u003d new Storage(filename);","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"            taskList \u003d storage.getData();","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"            // If file could not be found, create new file name and get fata from there.","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"            File newFile \u003d new File(\"data/\");","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"            if (!newFile.exists()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"                newFile.mkdir();","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"            newFile \u003d new File(filename);","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"            try {","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"                newFile.createNewFile();","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"                storage \u003d new Storage(filename);","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"            } catch (IOException ex) {","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"                ex.printStackTrace();","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"     * Causes duke to run the command.","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"     * @return The string based on the command result.","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"    public String runCommand(String input) {","lastModifiedDate":"2022-02-07"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Parser.parse(input);","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"            return cmd.run(taskList, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"            return \"Found an error:\\n\" + e.getMessage();","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Denniszedead":60,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke;","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"public class Launcher {","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke;","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.net.URL;","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import duke.components.MainWindow;","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    // File path name.","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    private static final String DUKE_FILE \u003d \"data/duke.txt\";","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    private static final String MAIN_WINDOW_XML_FILE \u003d \"/view/MainWindow.fxml\";","lastModifiedDate":"2022-02-19"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    private static final String TITLE \u003d \"PC Principal\";","lastModifiedDate":"2022-02-19"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    // Error messages.","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    private static final String WINDOW_NOT_FOUND_ERROR_MESSAGE \u003d \"Main Window File not found\";","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"    private Duke duke \u003d new Duke(DUKE_FILE);","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"            stage.setTitle(TITLE);","lastModifiedDate":"2022-02-19"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"            // Checks if /view/MainWindow.fxml file exists","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"            URL mainWindowFile \u003d Main.class.getResource(MAIN_WINDOW_XML_FILE);","lastModifiedDate":"2022-02-19"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"            assert mainWindowFile !\u003d null : WINDOW_NOT_FOUND_ERROR_MESSAGE;","lastModifiedDate":"2022-02-19"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"            // Loads the Main Window.","lastModifiedDate":"2022-02-10"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(mainWindowFile);","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-07"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"            stage.show();","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":44}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.command;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.DateClashException;","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.DukeExceptions;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.EmptyDateException;","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.EmptyKeywordException;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.EmptyNumberException;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.EmptyTaskException;","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidDateException;","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidNumberException;","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.ListIndexOutOfBoundException;","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":" * The Command object that represents the different commands of Duke.","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"public abstract class Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"    /** The formatter to format the user entered date. */","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"    protected static final boolean IS_MARKED \u003d false;","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"    protected String parameter;","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    protected String commandName;","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new Command.","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"     * @param parameter The parameter entered by the user.","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"    protected Command(String commandName, String parameter) {","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"        this.commandName \u003d commandName;","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"        this.parameter \u003d parameter;","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"     * Runs the various commands based on the type of command.","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"     * @return The string that will be shown on the Dialogue Box.","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions The exception from Duke if there are errors encountered.","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"    public abstract String run(TaskList taskList, Storage storage) throws DukeExceptions;","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"     * Creates the command based on the user\u0027s input in the command line.","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"     * @param command The type of command.","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"     * @param parameter The parameter which varies based on the type of command.","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"     * @return The command with its type based on command.","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidCommandException If the user enters either an invalid command or empty command.","lastModifiedDate":"2022-02-05"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"    public static Command getCommand(String command, String parameter) throws InvalidCommandException {","lastModifiedDate":"2022-02-05"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"        if (command.equals(\"BYE\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"            return new ByeCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"LIST\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"            return new ListCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"MARK\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"            return new MarkCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"UNMARK\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"            return new UnmarkCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"TODO\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"            return new TodoCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"DEADLINE\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"            return new DeadlineCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"EVENT\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"            return new EventCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":75,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"DELETE\")) {","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"Denniszedead"},"content":"            return new DeleteCommand(parameter);","lastModifiedDate":"2022-01-29"},{"lineNumber":77,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"FIND\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"Denniszedead"},"content":"            return new FindCommand(parameter);","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"Denniszedead"},"content":"        } else if (command.equals(\"HELP\")) {","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"Denniszedead"},"content":"            return new HelpCommand(parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":81,"author":{"gitId":"Denniszedead"},"content":"        } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":82,"author":{"gitId":"Denniszedead"},"content":"            // Throws invalid command as the user gives a invalid command.","lastModifiedDate":"2022-02-07"},{"lineNumber":83,"author":{"gitId":"Denniszedead"},"content":"            throw InvalidCommandException.createInvalidCommand(command);","lastModifiedDate":"2022-02-05"},{"lineNumber":84,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":85,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":86,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":87,"author":{"gitId":"Denniszedead"},"content":"    protected static String[] getTaskNameAndDate(int index, String parameter, String commandName)","lastModifiedDate":"2022-02-10"},{"lineNumber":88,"author":{"gitId":"Denniszedead"},"content":"            throws DukeExceptions {","lastModifiedDate":"2022-02-10"},{"lineNumber":89,"author":{"gitId":"Denniszedead"},"content":"        // Gets the task name form the parameter.","lastModifiedDate":"2022-02-10"},{"lineNumber":90,"author":{"gitId":"Denniszedead"},"content":"        String task \u003d parameter.substring(0, index);","lastModifiedDate":"2022-02-10"},{"lineNumber":91,"author":{"gitId":"Denniszedead"},"content":"        // If the user did not enter a task name, then throw empty task exception.","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"Denniszedead"},"content":"        if (task.isBlank()) {","lastModifiedDate":"2022-02-10"},{"lineNumber":93,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyTaskException.createEmptyTask(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":94,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"Denniszedead"},"content":"        // Get the date from the parameter.","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"Denniszedead"},"content":"        String date \u003d parameter.substring(index + 5, parameter.length());","lastModifiedDate":"2022-02-10"},{"lineNumber":98,"author":{"gitId":"Denniszedead"},"content":"        // If the user did not enter a date after \"/at\".","lastModifiedDate":"2022-02-10"},{"lineNumber":99,"author":{"gitId":"Denniszedead"},"content":"        if (date.isBlank()) {","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyDateException.createEmptyDate(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":101,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":102,"author":{"gitId":"Denniszedead"},"content":"        String[] result \u003d {task, date};","lastModifiedDate":"2022-02-10"},{"lineNumber":103,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":104,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":105,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":106,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":107,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":108,"author":{"gitId":"Denniszedead"},"content":" * The Bye command exits the Duke application.","lastModifiedDate":"2022-01-31"},{"lineNumber":109,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":110,"author":{"gitId":"Denniszedead"},"content":"class ByeCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":111,"author":{"gitId":"Denniszedead"},"content":"    /** Constructs a bye command without expecting a parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":112,"author":{"gitId":"Denniszedead"},"content":"    protected ByeCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":113,"author":{"gitId":"Denniszedead"},"content":"        super(\"Bye\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":116,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":117,"author":{"gitId":"Denniszedead"},"content":"     * Causes the Duke application to exit.","lastModifiedDate":"2022-01-31"},{"lineNumber":118,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":119,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":120,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":121,"author":{"gitId":"Denniszedead"},"content":"     * @return Empty string, there is no significance.","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions Should not have an exception unless it is an unexpected error.","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":125,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"Denniszedead"},"content":"        System.exit(0);","lastModifiedDate":"2022-01-20"},{"lineNumber":127,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":128,"author":{"gitId":"Denniszedead"},"content":"        // The code is not supposed to return any text to the dialogue box.","lastModifiedDate":"2022-02-10"},{"lineNumber":129,"author":{"gitId":"Denniszedead"},"content":"        return null;","lastModifiedDate":"2022-02-10"},{"lineNumber":130,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":131,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":132,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":133,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":134,"author":{"gitId":"Denniszedead"},"content":" * The list command shows the task list to the user.","lastModifiedDate":"2022-01-31"},{"lineNumber":135,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":136,"author":{"gitId":"Denniszedead"},"content":"class ListCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":137,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Here you go:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":138,"author":{"gitId":"Denniszedead"},"content":"    /** Constructs the list command without expecting a parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":139,"author":{"gitId":"Denniszedead"},"content":"    protected ListCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":140,"author":{"gitId":"Denniszedead"},"content":"        super(\"List\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":141,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":142,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":143,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":144,"author":{"gitId":"Denniszedead"},"content":"     * Shows all the tasks in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":145,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":146,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":147,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":148,"author":{"gitId":"Denniszedead"},"content":"     * @return All the tasks in the task list which will then be shown in the Dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":149,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions Should not have an exception unless it is an unexpected error.","lastModifiedDate":"2022-01-31"},{"lineNumber":150,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":151,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":152,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":153,"author":{"gitId":"Denniszedead"},"content":"        String listOfTasks \u003d taskList.printTasks();","lastModifiedDate":"2022-02-10"},{"lineNumber":154,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d OPENING_SENTENCE.concat(listOfTasks);","lastModifiedDate":"2022-02-10"},{"lineNumber":155,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":156,"author":{"gitId":"Denniszedead"},"content":"        // The string with all the task in task list which will be displayed on the dialogue box.","lastModifiedDate":"2022-02-10"},{"lineNumber":157,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":158,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":159,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":160,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":161,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":162,"author":{"gitId":"Denniszedead"},"content":" * The mark command marks the tasks, representing the tasks as complete.","lastModifiedDate":"2022-01-31"},{"lineNumber":163,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":164,"author":{"gitId":"Denniszedead"},"content":"class MarkCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":165,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Marked the following task to the list:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":166,"author":{"gitId":"Denniszedead"},"content":"    private static final String CLOSING_SENTENCE \u003d \"\\nGood job by the way\";","lastModifiedDate":"2022-02-10"},{"lineNumber":167,"author":{"gitId":"Denniszedead"},"content":"    /** Constructs the mark command with index number of the item in the task list as the parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":168,"author":{"gitId":"Denniszedead"},"content":"    protected MarkCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":169,"author":{"gitId":"Denniszedead"},"content":"        super(\"Mark\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":170,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":171,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":172,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":173,"author":{"gitId":"Denniszedead"},"content":"     * Marks the task indicated by the index in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":174,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":175,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":176,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":177,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently marked task that will be shown on the Dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":178,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions Occurs if the user did not enter a number or the number is out of range from the index.","lastModifiedDate":"2022-01-31"},{"lineNumber":179,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":180,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":181,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":182,"author":{"gitId":"Denniszedead"},"content":"        /* The String to be shown to the dialogue box */","lastModifiedDate":"2022-02-10"},{"lineNumber":183,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d null;","lastModifiedDate":"2022-02-10"},{"lineNumber":184,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":185,"author":{"gitId":"Denniszedead"},"content":"        // Checks if the user enters no number.","lastModifiedDate":"2022-02-10"},{"lineNumber":186,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":187,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyNumberException.createEmptyNumber(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":188,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":189,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":190,"author":{"gitId":"Denniszedead"},"content":"        // Tries to mark the task.","lastModifiedDate":"2022-02-10"},{"lineNumber":191,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":192,"author":{"gitId":"Denniszedead"},"content":"            String task \u003d taskList.markTask(Integer.parseInt(parameter));","lastModifiedDate":"2022-01-31"},{"lineNumber":193,"author":{"gitId":"Denniszedead"},"content":"            result \u003d OPENING_SENTENCE.concat(task).concat(CLOSING_SENTENCE);","lastModifiedDate":"2022-02-10"},{"lineNumber":194,"author":{"gitId":"Denniszedead"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":195,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a number that is out of bound of the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":196,"author":{"gitId":"Denniszedead"},"content":"            throw new ListIndexOutOfBoundException();","lastModifiedDate":"2022-02-05"},{"lineNumber":197,"author":{"gitId":"Denniszedead"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":198,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a parameter that is not a number.","lastModifiedDate":"2022-01-31"},{"lineNumber":199,"author":{"gitId":"Denniszedead"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2022-02-05"},{"lineNumber":200,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":201,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":202,"author":{"gitId":"Denniszedead"},"content":"        // Updates the database.","lastModifiedDate":"2022-02-10"},{"lineNumber":203,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-10"},{"lineNumber":204,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-02-10"},{"lineNumber":205,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-10"},{"lineNumber":206,"author":{"gitId":"Denniszedead"},"content":"            // Other than IndexOutOfBound and NumberFormatException, no other exception should happen.","lastModifiedDate":"2022-02-10"},{"lineNumber":207,"author":{"gitId":"Denniszedead"},"content":"            assert true : e.getMessage();","lastModifiedDate":"2022-02-10"},{"lineNumber":208,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":209,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-07"},{"lineNumber":210,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":211,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":212,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":213,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":214,"author":{"gitId":"Denniszedead"},"content":" * The unmarks command unmarks the task, indicating it as incomplete.","lastModifiedDate":"2022-01-31"},{"lineNumber":215,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":216,"author":{"gitId":"Denniszedead"},"content":"class UnmarkCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":217,"author":{"gitId":"Denniszedead"},"content":"    protected static final String OPENING_SENTENCE \u003d \"Unmarked the following task to the list:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":218,"author":{"gitId":"Denniszedead"},"content":"    protected static final String CLOSING_SENTENCE \u003d \"\\nHope you get it done soon!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":219,"author":{"gitId":"Denniszedead"},"content":"    /** Constructs the unmark command with index number of the item in the task list as the parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":220,"author":{"gitId":"Denniszedead"},"content":"    protected UnmarkCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":221,"author":{"gitId":"Denniszedead"},"content":"        super(\"Unmark\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":222,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":223,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":224,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":225,"author":{"gitId":"Denniszedead"},"content":"     * Unmarks the task indicated by the index in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":226,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":227,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":228,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":229,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently unmarked task that will be shown in the dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":230,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions Occurs if the user did not enter a number or the number is out of range from the index.","lastModifiedDate":"2022-01-31"},{"lineNumber":231,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":232,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":233,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":234,"author":{"gitId":"Denniszedead"},"content":"        /* The String to be shown to the dialogue box */","lastModifiedDate":"2022-02-10"},{"lineNumber":235,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d null;","lastModifiedDate":"2022-02-10"},{"lineNumber":236,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":237,"author":{"gitId":"Denniszedead"},"content":"        // Checks if the user enters no number.","lastModifiedDate":"2022-02-10"},{"lineNumber":238,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":239,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyNumberException.createEmptyNumber(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":240,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":241,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":242,"author":{"gitId":"Denniszedead"},"content":"        // Tries to unmark the task.","lastModifiedDate":"2022-02-10"},{"lineNumber":243,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":244,"author":{"gitId":"Denniszedead"},"content":"            String task \u003d taskList.unmarkTask(Integer.parseInt(parameter));","lastModifiedDate":"2022-01-31"},{"lineNumber":245,"author":{"gitId":"Denniszedead"},"content":"            result \u003d OPENING_SENTENCE.concat(task).concat(CLOSING_SENTENCE);","lastModifiedDate":"2022-02-10"},{"lineNumber":246,"author":{"gitId":"Denniszedead"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-20"},{"lineNumber":247,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a number that is out of bound of the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":248,"author":{"gitId":"Denniszedead"},"content":"            throw new ListIndexOutOfBoundException();","lastModifiedDate":"2022-02-05"},{"lineNumber":249,"author":{"gitId":"Denniszedead"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":250,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a parameter that is not a number.","lastModifiedDate":"2022-01-31"},{"lineNumber":251,"author":{"gitId":"Denniszedead"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2022-02-05"},{"lineNumber":252,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":253,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":254,"author":{"gitId":"Denniszedead"},"content":"        // Updates the database.","lastModifiedDate":"2022-02-10"},{"lineNumber":255,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-10"},{"lineNumber":256,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-02-10"},{"lineNumber":257,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-10"},{"lineNumber":258,"author":{"gitId":"Denniszedead"},"content":"            // Other than IndexOutOfBound and NumberFormatException, no other exception should happen.","lastModifiedDate":"2022-02-10"},{"lineNumber":259,"author":{"gitId":"Denniszedead"},"content":"            assert true : e.getMessage();","lastModifiedDate":"2022-02-10"},{"lineNumber":260,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":261,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-07"},{"lineNumber":262,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":263,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":264,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":265,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":266,"author":{"gitId":"Denniszedead"},"content":" * The Todo Command adds a todo tasks in the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":267,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":268,"author":{"gitId":"Denniszedead"},"content":"class TodoCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":269,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Added the following todo into the list:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":270,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":271,"author":{"gitId":"Denniszedead"},"content":"    /** Constructs the TODO command that takes in the name of the TODO task as the parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":272,"author":{"gitId":"Denniszedead"},"content":"    protected TodoCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":273,"author":{"gitId":"Denniszedead"},"content":"        super(\"Todo\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":274,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":275,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":276,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":277,"author":{"gitId":"Denniszedead"},"content":"     * Adds a todo task in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":278,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":279,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":280,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":281,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently created todo which will then be shown on the dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":282,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions If the user did not indicate a name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":283,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":284,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":285,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":286,"author":{"gitId":"Denniszedead"},"content":"        // Checks if the user enters an empty parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":287,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":288,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyTaskException.createEmptyTask(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":289,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":290,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":291,"author":{"gitId":"Denniszedead"},"content":"        boolean isMarked \u003d false;","lastModifiedDate":"2022-02-10"},{"lineNumber":292,"author":{"gitId":"Denniszedead"},"content":"        LocalDateTime date \u003d null;","lastModifiedDate":"2022-02-11"},{"lineNumber":293,"author":{"gitId":"Denniszedead"},"content":"        Task todo \u003d Task.createTask(commandName, isMarked, parameter, date);","lastModifiedDate":"2022-02-10"},{"lineNumber":294,"author":{"gitId":"Denniszedead"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2022-01-27"},{"lineNumber":295,"author":{"gitId":"Denniszedead"},"content":"        String todoString \u003d todo.toString();","lastModifiedDate":"2022-02-10"},{"lineNumber":296,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":297,"author":{"gitId":"Denniszedead"},"content":"        // Updates the task list in the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":298,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":299,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-01-29"},{"lineNumber":300,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-10"},{"lineNumber":301,"author":{"gitId":"Denniszedead"},"content":"            // No exception should happen.","lastModifiedDate":"2022-02-10"},{"lineNumber":302,"author":{"gitId":"Denniszedead"},"content":"            assert true : e.getMessage();","lastModifiedDate":"2022-02-10"},{"lineNumber":303,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":304,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":305,"author":{"gitId":"Denniszedead"},"content":"        // Creates the string to be shown on the dialogue box.","lastModifiedDate":"2022-02-10"},{"lineNumber":306,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d OPENING_SENTENCE.concat(todoString);","lastModifiedDate":"2022-02-10"},{"lineNumber":307,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":308,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":309,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":310,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":311,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":312,"author":{"gitId":"Denniszedead"},"content":" * The deadline command adds a deadline tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":313,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":314,"author":{"gitId":"Denniszedead"},"content":"class DeadlineCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":315,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Added the following deadline into the list:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":316,"author":{"gitId":"Denniszedead"},"content":"    private static final String BY \u003d \" /by \";","lastModifiedDate":"2022-02-10"},{"lineNumber":317,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":318,"author":{"gitId":"Denniszedead"},"content":"    /** Creates the deadline command with task name /by dd/mm/yyyy HHmm as parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":319,"author":{"gitId":"Denniszedead"},"content":"    protected DeadlineCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":320,"author":{"gitId":"Denniszedead"},"content":"        super(\"Deadline\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":321,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":322,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":323,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":324,"author":{"gitId":"Denniszedead"},"content":"     * Adds a deadline command into the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":325,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":326,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":327,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":328,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently created deadline that will be then shown in the dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":329,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions If the users enters no parameter, no date or invalid date.","lastModifiedDate":"2022-01-31"},{"lineNumber":330,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":331,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":332,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":333,"author":{"gitId":"Denniszedead"},"content":"        // Check if the user did not enter a task name and date, then throw Empty Task parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":334,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":335,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyTaskException.createEmptyTask(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":336,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":337,"author":{"gitId":"Denniszedead"},"content":"        int index \u003d parameter.indexOf(BY);","lastModifiedDate":"2022-02-10"},{"lineNumber":338,"author":{"gitId":"Denniszedead"},"content":"        // If the user did not enter \" /by \", then throw the EmptyDateException exception as no date is entered.","lastModifiedDate":"2022-02-10"},{"lineNumber":339,"author":{"gitId":"Denniszedead"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2022-01-29"},{"lineNumber":340,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyDateException.createEmptyDate(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":341,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":342,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":343,"author":{"gitId":"Denniszedead"},"content":"        // Get the date from the parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":344,"author":{"gitId":"Denniszedead"},"content":"        String[] tasksAndDates \u003d getTaskNameAndDate(index, parameter, commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":345,"author":{"gitId":"Denniszedead"},"content":"        String task \u003d tasksAndDates[0];","lastModifiedDate":"2022-02-10"},{"lineNumber":346,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d tasksAndDates[1];","lastModifiedDate":"2022-02-11"},{"lineNumber":347,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":348,"author":{"gitId":"Denniszedead"},"content":"        // Parse the date of the deadline as DD MMM YYYY HH:mm.","lastModifiedDate":"2022-02-11"},{"lineNumber":349,"author":{"gitId":"Denniszedead"},"content":"        LocalDateTime date;","lastModifiedDate":"2022-02-11"},{"lineNumber":350,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":351,"author":{"gitId":"Denniszedead"},"content":"            date \u003d LocalDateTime.parse(dateString, FORMATTER);","lastModifiedDate":"2022-02-11"},{"lineNumber":352,"author":{"gitId":"Denniszedead"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":353,"author":{"gitId":"Denniszedead"},"content":"            // If the user did not enter a valid date format.","lastModifiedDate":"2022-02-11"},{"lineNumber":354,"author":{"gitId":"Denniszedead"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2022-02-11"},{"lineNumber":355,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":356,"author":{"gitId":"Denniszedead"},"content":"        boolean haveDateClash \u003d taskList.checkDateInTaskList(date);","lastModifiedDate":"2022-02-11"},{"lineNumber":357,"author":{"gitId":"Denniszedead"},"content":"        if (haveDateClash) {","lastModifiedDate":"2022-02-11"},{"lineNumber":358,"author":{"gitId":"Denniszedead"},"content":"            throw DateClashException.createDateClashException(date.format(FORMATTER));","lastModifiedDate":"2022-02-11"},{"lineNumber":359,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":360,"author":{"gitId":"Denniszedead"},"content":"        boolean isMarked \u003d false;","lastModifiedDate":"2022-02-10"},{"lineNumber":361,"author":{"gitId":"Denniszedead"},"content":"        Task deadline \u003d Task.createTask(commandName, isMarked, task, date);","lastModifiedDate":"2022-02-10"},{"lineNumber":362,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":363,"author":{"gitId":"Denniszedead"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2022-01-27"},{"lineNumber":364,"author":{"gitId":"Denniszedead"},"content":"        String deadlineString \u003d deadline.toString();","lastModifiedDate":"2022-02-10"},{"lineNumber":365,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":366,"author":{"gitId":"Denniszedead"},"content":"        // Updates the task list in the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":367,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":368,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-01-29"},{"lineNumber":369,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":370,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-29"},{"lineNumber":371,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":372,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":373,"author":{"gitId":"Denniszedead"},"content":"        // Creates the string that is to be shown on the dialogue box.","lastModifiedDate":"2022-02-10"},{"lineNumber":374,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d OPENING_SENTENCE.concat(deadlineString);","lastModifiedDate":"2022-02-10"},{"lineNumber":375,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":376,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":377,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":378,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":379,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":380,"author":{"gitId":"Denniszedead"},"content":" * The event command adds an event task in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":381,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":382,"author":{"gitId":"Denniszedead"},"content":"class EventCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":383,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Added the following event into the list:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":384,"author":{"gitId":"Denniszedead"},"content":"    private static final String AT \u003d \" /at \";","lastModifiedDate":"2022-02-10"},{"lineNumber":385,"author":{"gitId":"Denniszedead"},"content":"    /** Creates the event command with task name /at dd/mm/yyyy HHmm as parameter. */","lastModifiedDate":"2022-01-31"},{"lineNumber":386,"author":{"gitId":"Denniszedead"},"content":"    protected EventCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":387,"author":{"gitId":"Denniszedead"},"content":"        super(\"Event\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":388,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":389,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":390,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":391,"author":{"gitId":"Denniszedead"},"content":"     * Adds an event task in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":392,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":393,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":394,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":395,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently created event which will be then sent to the dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":396,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions If the users enters no parameter, no date or invalid date.","lastModifiedDate":"2022-01-31"},{"lineNumber":397,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":398,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":399,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":400,"author":{"gitId":"Denniszedead"},"content":"        // Check if the user did not enter a task name and date, then throw Empty Task parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":401,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":402,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyTaskException.createEmptyTask(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":403,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":404,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":405,"author":{"gitId":"Denniszedead"},"content":"        // Get the index \"/at\" from the parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":406,"author":{"gitId":"Denniszedead"},"content":"        int index \u003d parameter.indexOf(AT);","lastModifiedDate":"2022-02-10"},{"lineNumber":407,"author":{"gitId":"Denniszedead"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2022-01-29"},{"lineNumber":408,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyDateException.createEmptyDate(commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":409,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":410,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":411,"author":{"gitId":"Denniszedead"},"content":"        String[] tasksAndDates \u003d getTaskNameAndDate(index, parameter, commandName);","lastModifiedDate":"2022-02-10"},{"lineNumber":412,"author":{"gitId":"Denniszedead"},"content":"        String task \u003d tasksAndDates[0];","lastModifiedDate":"2022-02-10"},{"lineNumber":413,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d tasksAndDates[1];","lastModifiedDate":"2022-02-11"},{"lineNumber":414,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":415,"author":{"gitId":"Denniszedead"},"content":"        // Parse the date of the deadline as DD MMM YYYY HH:mm.","lastModifiedDate":"2022-02-11"},{"lineNumber":416,"author":{"gitId":"Denniszedead"},"content":"        LocalDateTime date;","lastModifiedDate":"2022-02-11"},{"lineNumber":417,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":418,"author":{"gitId":"Denniszedead"},"content":"            // If the user did not enter a valid date format.","lastModifiedDate":"2022-02-11"},{"lineNumber":419,"author":{"gitId":"Denniszedead"},"content":"            date \u003d LocalDateTime.parse(dateString, FORMATTER);","lastModifiedDate":"2022-02-11"},{"lineNumber":420,"author":{"gitId":"Denniszedead"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":421,"author":{"gitId":"Denniszedead"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2022-02-11"},{"lineNumber":422,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":423,"author":{"gitId":"Denniszedead"},"content":"        boolean haveDateClash \u003d taskList.checkDateInTaskList(date);","lastModifiedDate":"2022-02-11"},{"lineNumber":424,"author":{"gitId":"Denniszedead"},"content":"        if (haveDateClash) {","lastModifiedDate":"2022-02-11"},{"lineNumber":425,"author":{"gitId":"Denniszedead"},"content":"            throw DateClashException.createDateClashException(date.format(FORMATTER));","lastModifiedDate":"2022-02-11"},{"lineNumber":426,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":427,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":428,"author":{"gitId":"Denniszedead"},"content":"        boolean isMarked \u003d false;","lastModifiedDate":"2022-02-10"},{"lineNumber":429,"author":{"gitId":"Denniszedead"},"content":"        Task event \u003d Task.createTask(commandName, isMarked, task, date);","lastModifiedDate":"2022-02-10"},{"lineNumber":430,"author":{"gitId":"Denniszedead"},"content":"        taskList.addTask(event);","lastModifiedDate":"2022-01-27"},{"lineNumber":431,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":432,"author":{"gitId":"Denniszedead"},"content":"        // Updates the task list in the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":433,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":434,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-01-29"},{"lineNumber":435,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":436,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-01-29"},{"lineNumber":437,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":438,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":439,"author":{"gitId":"Denniszedead"},"content":"        // Creates the string that is to be shown on the dialogue box.","lastModifiedDate":"2022-02-10"},{"lineNumber":440,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d OPENING_SENTENCE.concat(event.toString());","lastModifiedDate":"2022-02-10"},{"lineNumber":441,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":442,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":443,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":444,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":445,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":446,"author":{"gitId":"Denniszedead"},"content":" * The delete command deletes a task in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":447,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":448,"author":{"gitId":"Denniszedead"},"content":"class DeleteCommand extends Command {","lastModifiedDate":"2022-01-29"},{"lineNumber":449,"author":{"gitId":"Denniszedead"},"content":"    private static final String OPENING_SENTENCE \u003d \"Deleted the following task:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":450,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":451,"author":{"gitId":"Denniszedead"},"content":"     * Constructs the delete command with index number of the item in the task list as the parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":452,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":453,"author":{"gitId":"Denniszedead"},"content":"    DeleteCommand(String parameter) {","lastModifiedDate":"2022-01-29"},{"lineNumber":454,"author":{"gitId":"Denniszedead"},"content":"        super(\"Delete\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":455,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":456,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":457,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":458,"author":{"gitId":"Denniszedead"},"content":"     * Deletes the task indicated by the index number in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":459,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":460,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":461,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-01-31"},{"lineNumber":462,"author":{"gitId":"Denniszedead"},"content":"     * @return The recently deleted task that will be sent to the dialogue box.","lastModifiedDate":"2022-02-07"},{"lineNumber":463,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions If the user did not enter a number.","lastModifiedDate":"2022-01-31"},{"lineNumber":464,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":465,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":466,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":467,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d null;","lastModifiedDate":"2022-02-10"},{"lineNumber":468,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":469,"author":{"gitId":"Denniszedead"},"content":"        // If the user did not enter a number, returns an empty number parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":470,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":471,"author":{"gitId":"Denniszedead"},"content":"            throw EmptyNumberException.createEmptyNumber(\"Delete\");","lastModifiedDate":"2022-02-05"},{"lineNumber":472,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":473,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":474,"author":{"gitId":"Denniszedead"},"content":"        // Deletes the task from the task list based on the index. Then update the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":475,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-20"},{"lineNumber":476,"author":{"gitId":"Denniszedead"},"content":"            String deletedTask \u003d taskList.deleteFromIndex(Integer.parseInt(parameter));","lastModifiedDate":"2022-01-29"},{"lineNumber":477,"author":{"gitId":"Denniszedead"},"content":"            result \u003d OPENING_SENTENCE.concat(deletedTask);","lastModifiedDate":"2022-02-10"},{"lineNumber":478,"author":{"gitId":"Denniszedead"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":479,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a number that is out of bound of the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":480,"author":{"gitId":"Denniszedead"},"content":"            throw new ListIndexOutOfBoundException();","lastModifiedDate":"2022-02-05"},{"lineNumber":481,"author":{"gitId":"Denniszedead"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":482,"author":{"gitId":"Denniszedead"},"content":"            // If the user enters a parameter that is not a number.","lastModifiedDate":"2022-01-31"},{"lineNumber":483,"author":{"gitId":"Denniszedead"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2022-02-05"},{"lineNumber":484,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":485,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":486,"author":{"gitId":"Denniszedead"},"content":"        // Updates the file.","lastModifiedDate":"2022-02-10"},{"lineNumber":487,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-10"},{"lineNumber":488,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(taskList);","lastModifiedDate":"2022-02-10"},{"lineNumber":489,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-10"},{"lineNumber":490,"author":{"gitId":"Denniszedead"},"content":"            // Other than IndexOutOfBound and NumberFormatException, no other exception should happen.","lastModifiedDate":"2022-02-10"},{"lineNumber":491,"author":{"gitId":"Denniszedead"},"content":"            assert true : e.getMessage();","lastModifiedDate":"2022-02-10"},{"lineNumber":492,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":493,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-07"},{"lineNumber":494,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":495,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":496,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":497,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":498,"author":{"gitId":"Denniszedead"},"content":" * Finds all the tasks in the task list that contain the keyword entered by the user.","lastModifiedDate":"2022-01-31"},{"lineNumber":499,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":500,"author":{"gitId":"Denniszedead"},"content":"class FindCommand extends Command {","lastModifiedDate":"2022-01-31"},{"lineNumber":501,"author":{"gitId":"Denniszedead"},"content":"    private static final String INITIAL_SENTENCE \u003d \"These are the tasks that have the keyword \\\"\";","lastModifiedDate":"2022-02-10"},{"lineNumber":502,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":503,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new FindCommand object.","lastModifiedDate":"2022-01-31"},{"lineNumber":504,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":505,"author":{"gitId":"Denniszedead"},"content":"     * @param parameter The parameter of the command entered by the user.","lastModifiedDate":"2022-01-31"},{"lineNumber":506,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":507,"author":{"gitId":"Denniszedead"},"content":"    protected FindCommand(String parameter) {","lastModifiedDate":"2022-01-31"},{"lineNumber":508,"author":{"gitId":"Denniszedead"},"content":"        super(\"Find\", parameter);","lastModifiedDate":"2022-02-10"},{"lineNumber":509,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":510,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":511,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":512,"author":{"gitId":"Denniszedead"},"content":"     * Gets all the tasks that contains the keyword and shows it to the user.","lastModifiedDate":"2022-02-10"},{"lineNumber":513,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":514,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-02-07"},{"lineNumber":515,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-02-07"},{"lineNumber":516,"author":{"gitId":"Denniszedead"},"content":"     * @return The tasks that contain the keyword.","lastModifiedDate":"2022-02-07"},{"lineNumber":517,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2022-02-07"},{"lineNumber":518,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":519,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":520,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-07"},{"lineNumber":521,"author":{"gitId":"Denniszedead"},"content":"        // Check if the user did not enter a keyword, then throw the EmptyKeywordException exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":522,"author":{"gitId":"Denniszedead"},"content":"        if (parameter.isBlank()) {","lastModifiedDate":"2022-01-31"},{"lineNumber":523,"author":{"gitId":"Denniszedead"},"content":"            throw new EmptyKeywordException();","lastModifiedDate":"2022-02-05"},{"lineNumber":524,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":525,"author":{"gitId":"Denniszedead"},"content":"        String openingSentence \u003d INITIAL_SENTENCE.concat(parameter).concat(\"\\\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":526,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":527,"author":{"gitId":"Denniszedead"},"content":"        // Gets a new task list which the tasks that contains the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":528,"author":{"gitId":"Denniszedead"},"content":"        TaskList filteredTaskList \u003d taskList.findTasksFromKeyword(parameter);","lastModifiedDate":"2022-01-31"},{"lineNumber":529,"author":{"gitId":"Denniszedead"},"content":"        String filteredTaskListString \u003d filteredTaskList.printTasks();","lastModifiedDate":"2022-02-10"},{"lineNumber":530,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d openingSentence.concat(filteredTaskListString);","lastModifiedDate":"2022-02-10"},{"lineNumber":531,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":532,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":533,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-31"},{"lineNumber":534,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":535,"author":{"gitId":"Denniszedead"},"content":"class HelpCommand extends Command {","lastModifiedDate":"2022-02-10"},{"lineNumber":536,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":537,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new Help Command.","lastModifiedDate":"2022-02-10"},{"lineNumber":538,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":539,"author":{"gitId":"Denniszedead"},"content":"     * @param parameter The parameter entered by the user.","lastModifiedDate":"2022-02-10"},{"lineNumber":540,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":541,"author":{"gitId":"Denniszedead"},"content":"    protected HelpCommand(String parameter) {","lastModifiedDate":"2022-02-10"},{"lineNumber":542,"author":{"gitId":"Denniszedead"},"content":"        super(\"Help\", parameter);","lastModifiedDate":"2022-02-11"},{"lineNumber":543,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":544,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":545,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":546,"author":{"gitId":"Denniszedead"},"content":"     * Shows all the manual for all commands in duke.","lastModifiedDate":"2022-02-10"},{"lineNumber":547,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":548,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The TaskList which the command will act on.","lastModifiedDate":"2022-02-10"},{"lineNumber":549,"author":{"gitId":"Denniszedead"},"content":"     * @param storage The Storage on which the command will act on.","lastModifiedDate":"2022-02-10"},{"lineNumber":550,"author":{"gitId":"Denniszedead"},"content":"     * @return The string that shows the manual for all commands.","lastModifiedDate":"2022-02-10"},{"lineNumber":551,"author":{"gitId":"Denniszedead"},"content":"     * @throws DukeExceptions There is no Duke exception expected.","lastModifiedDate":"2022-02-10"},{"lineNumber":552,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":553,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-02-10"},{"lineNumber":554,"author":{"gitId":"Denniszedead"},"content":"    public String run(TaskList taskList, Storage storage) throws DukeExceptions {","lastModifiedDate":"2022-02-10"},{"lineNumber":555,"author":{"gitId":"Denniszedead"},"content":"        String openingSentence \u003d \"Here are the tasks avaliable for duke:\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":556,"author":{"gitId":"Denniszedead"},"content":"        String listHelp \u003d \"List: Shows all the tasks in duke\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":557,"author":{"gitId":"Denniszedead"},"content":"        String markHelp \u003d \"Mark \u003cnumber\u003e: Marks the task in the index \u003cnumber\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":558,"author":{"gitId":"Denniszedead"},"content":"        String unmarkHelp \u003d \"Unmark \u003cnumber\u003e: Unmarks the task in the index \u003cnumber\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":559,"author":{"gitId":"Denniszedead"},"content":"        String findHelp \u003d \"Find \u003ckeyword\u003e: finds all the task that contains \u003ckeyword\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":560,"author":{"gitId":"Denniszedead"},"content":"        String deleteHelp \u003d \"Delete \u003cnumber\u003e: Deletes the task in index \u003cnumber\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":561,"author":{"gitId":"Denniszedead"},"content":"        String todoHelp \u003d \"Todo \u003cname of todo\u003e: Creates a new todo \u003cname of todo\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":562,"author":{"gitId":"Denniszedead"},"content":"        String deadlineHelp \u003d \"Deadline \u003cname of deadline\u003e \u003cdate of deadline in dd/mm/yyyy HHmm\u003e: \"","lastModifiedDate":"2022-02-10"},{"lineNumber":563,"author":{"gitId":"Denniszedead"},"content":"                + \"Creates a new deadline \u003cname of deadline\u003e at \u003cdate of deadline in dd/mm/yyyy HHmm\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":564,"author":{"gitId":"Denniszedead"},"content":"        String eventHelp \u003d \"Event \u003cname of deadline\u003e \u003cdate of deadline in dd/mm/yyyy HHmm\u003e: \"","lastModifiedDate":"2022-02-10"},{"lineNumber":565,"author":{"gitId":"Denniszedead"},"content":"                + \"Creates a new event \u003cname of deadline\u003e at \u003cdate of deadline in dd/mm/yyyy HHmm\u003e\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":566,"author":{"gitId":"Denniszedead"},"content":"        String byeHelp \u003d \"Bye: Exits duke.\";","lastModifiedDate":"2022-02-10"},{"lineNumber":567,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d openingSentence","lastModifiedDate":"2022-02-10"},{"lineNumber":568,"author":{"gitId":"Denniszedead"},"content":"                .concat(listHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":569,"author":{"gitId":"Denniszedead"},"content":"                .concat(markHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":570,"author":{"gitId":"Denniszedead"},"content":"                .concat(unmarkHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":571,"author":{"gitId":"Denniszedead"},"content":"                .concat(findHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":572,"author":{"gitId":"Denniszedead"},"content":"                .concat(deleteHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":573,"author":{"gitId":"Denniszedead"},"content":"                .concat(todoHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":574,"author":{"gitId":"Denniszedead"},"content":"                .concat(deadlineHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":575,"author":{"gitId":"Denniszedead"},"content":"                .concat(eventHelp)","lastModifiedDate":"2022-02-10"},{"lineNumber":576,"author":{"gitId":"Denniszedead"},"content":"                .concat(byeHelp);","lastModifiedDate":"2022-02-10"},{"lineNumber":577,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":578,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":579,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-10"}],"authorContributionMap":{"Denniszedead":579}},{"path":"src/main/java/duke/components/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.components;","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-02-10"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    // Images path.","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    private static final String PC_PRINCIPAL_IMAGE_FILE \u003d \"/image/pcPrincipal.png\";","lastModifiedDate":"2022-02-10"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    private static final String CARTMAN_IMAGE_FILE \u003d \"/image/cartman.png\";","lastModifiedDate":"2022-02-10"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello bruh! I\u0027m PC Principal! How can i be of service!\";","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    // Error messages.","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    private static final String DUKE_NOT_FOUND \u003d \"Duke image file not found!\";","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"    private static final String DUKE_NULL \u003d \"Duke is null\";","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"    private Image pcPrincipalImage;","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"     * Initialize the main window fxml.","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"        InputStream pcPrincipalInputStream \u003d this.getClass().getResourceAsStream(PC_PRINCIPAL_IMAGE_FILE);","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"        InputStream cartmanInputStream \u003d this.getClass().getResourceAsStream(CARTMAN_IMAGE_FILE);","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"        assert pcPrincipalInputStream !\u003d null : DUKE_NOT_FOUND;","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"        pcPrincipalImage \u003d new Image(pcPrincipalInputStream);","lastModifiedDate":"2022-02-10"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"        // Create a welcome dialogue when duke starts.","lastModifiedDate":"2022-02-19"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2022-02-19"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"                ResponseDialogBox.getDukeDialog(WELCOME_MESSAGE, pcPrincipalImage)","lastModifiedDate":"2022-02-19"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"        );","lastModifiedDate":"2022-02-19"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-07"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"        assert d !\u003d null : DUKE_NULL;","lastModifiedDate":"2022-02-19"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"        String response \u003d duke.runCommand(input);","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"                UserDialogBox.getUserDialog(input),","lastModifiedDate":"2022-02-19"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"                ResponseDialogBox.getDukeDialog(response, pcPrincipalImage)","lastModifiedDate":"2022-02-19"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"        );","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":74}},{"path":"src/main/java/duke/components/ResponseDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.components;","lastModifiedDate":"2022-02-19"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.net.URL;","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-19"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":" * This control represents a response dialog box consisting of an ImageView to represent the responder\u0027s face and","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":" * a label containing text based on the response from the command.","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"public class ResponseDialogBox extends HBox {","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    // File path.","lastModifiedDate":"2022-02-19"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    private static final String DIALOGUE_BOX_FMXL_PATH \u003d \"/view/ResponseDialogBox.fxml\";","lastModifiedDate":"2022-02-19"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    // Error Messages","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    private static final String DIALOGUE_BOX_FMXL_PATH_NOT_FOUND \u003d \"Dialogue Box Fxml file not found\";","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    private static final String IMAGE_NOT_FOUND \u003d \"Image not found\";","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-19"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-19"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    private ResponseDialogBox(String text, Image img) {","lastModifiedDate":"2022-02-19"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-19"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"            // Checks if DialogueBox.fxml file exists.","lastModifiedDate":"2022-02-19"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"            URL dialogueBoxFile \u003d MainWindow.class.getResource(DIALOGUE_BOX_FMXL_PATH);","lastModifiedDate":"2022-02-19"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"            assert dialogueBoxFile !\u003d null : DIALOGUE_BOX_FMXL_PATH_NOT_FOUND;","lastModifiedDate":"2022-02-19"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"            assert img !\u003d null : IMAGE_NOT_FOUND;","lastModifiedDate":"2022-02-19"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"            // If it exists, continue running.","lastModifiedDate":"2022-02-19"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(dialogueBoxFile);","lastModifiedDate":"2022-02-19"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-19"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-19"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-19"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-19"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-19"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-19"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new response dialogue box from duke.","lastModifiedDate":"2022-02-19"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"     * @param text","lastModifiedDate":"2022-02-19"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"     * @param img","lastModifiedDate":"2022-02-19"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"     * @return","lastModifiedDate":"2022-02-19"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-19"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"    public static ResponseDialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-19"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"        var db \u003d new ResponseDialogBox(text, img);","lastModifiedDate":"2022-02-19"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"        return db;","lastModifiedDate":"2022-02-19"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"Denniszedead":58}},{"path":"src/main/java/duke/components/UserDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.components;","lastModifiedDate":"2022-02-19"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.net.URL;","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":" * This control represents a user dialog box containing text from the speaker.","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-19"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"public class UserDialogBox extends HBox {","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"    // File path.","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    private static final String DIALOGUE_BOX_FMXL_PATH \u003d \"/view/UserDialogBox.fxml\";","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    private static final String DIALOGUE_BOX_FXML_FILE_NOT_FOUND \u003d \"Dialogue Box Fxml file not found\";","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    @FXML","lastModifiedDate":"2022-02-19"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    private UserDialogBox(String text) {","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"            // Checks if DialogueBox.fxml file exists.","lastModifiedDate":"2022-02-19"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"            URL dialogueBoxFile \u003d MainWindow.class.getResource(DIALOGUE_BOX_FMXL_PATH);","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"            assert dialogueBoxFile !\u003d null : DIALOGUE_BOX_FXML_FILE_NOT_FOUND;","lastModifiedDate":"2022-02-19"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"            // If it exists, continue running.","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(dialogueBoxFile);","lastModifiedDate":"2022-02-19"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-19"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-19"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-19"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-19"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-19"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-19"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-19"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new dialogue box from the user based on the text.","lastModifiedDate":"2022-02-19"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"     * @param text","lastModifiedDate":"2022-02-19"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"     * @return","lastModifiedDate":"2022-02-19"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-19"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"    public static UserDialogBox getUserDialog(String text) {","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"        return new UserDialogBox(text);","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"Denniszedead":47}},{"path":"src/main/java/duke/dukeexceptions/DateClashException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * An exception happens when there is another task with the same date in the task list.","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public class DateClashException extends DukeExceptions {","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private DateClashException(String s) {","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new date clash exception.","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @param date The date of which there is a clash.","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @return An new Date Clash Exception.","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     * @throws DateClashException When there is a clash of date during task creation.","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    public static DateClashException createDateClashException(String date) throws DateClashException {","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"        String openingSentence \u003d \"There is already a deadline/event scheduled on \";","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d openingSentence.concat(date);","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        throw new DateClashException(result);","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"Denniszedead":23}},{"path":"src/main/java/duke/dukeexceptions/DukeExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The custom exception for duke.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public abstract class DukeExceptions extends Exception {","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    protected DukeExceptions(String s) {","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"Denniszedead":11}},{"path":"src/main/java/duke/dukeexceptions/EmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The exception for when no date is entered for commands that requires dates.","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public final class EmptyDateException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private EmptyDateException(String s) {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     * Creates the Empty Date exception when no date is entered for commands that requires dates.","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @param cmd Type of command entered.","lastModifiedDate":"2022-02-10"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @return The empty date exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     * @throws EmptyDateException The empty date exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    public static EmptyDateException createEmptyDate(String cmd) throws EmptyDateException {","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"        String closingSentence \u003d \" needs a date\";","lastModifiedDate":"2022-02-10"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"        String taskTypeFirstLetter \u003d cmd.substring(0, 1).toUpperCase();","lastModifiedDate":"2022-02-10"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        String taskTypeRemainingLetters \u003d cmd.substring(1);","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"        String taskType \u003d taskTypeFirstLetter.concat(taskTypeRemainingLetters);","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"        String errorMessage \u003d taskType.concat(closingSentence);","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        throw new EmptyDateException(errorMessage);","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"Denniszedead":26}},{"path":"src/main/java/duke/dukeexceptions/EmptyKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * Thrown when the user did not enter the keyword when the command requires one.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public class EmptyKeywordException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please enter a keyword for find command!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new EmptyKeywordException exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"    public EmptyKeywordException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"Denniszedead":15}},{"path":"src/main/java/duke/dukeexceptions/EmptyNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The exception when no index number is entered when the command needs one.","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public final class EmptyNumberException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private EmptyNumberException(String s) {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     * Creates an Empty Number exception when there is no index number for commands that requires one.","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @param cmd The type of command.","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @return The Empty Number exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     * @throws EmptyNumberException The Exception when the user did not enter the index number when the","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"     *                              command requires it.","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    public static EmptyNumberException createEmptyNumber(String cmd) throws EmptyNumberException {","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"        String closingStatement \u003d \" needs a number\";","lastModifiedDate":"2022-02-10"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        String cmdFirstLetter \u003d cmd.substring(0, 1).toUpperCase();","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"        String cmdRestOfTheLetters \u003d cmd.substring(1);","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"        String commandString \u003d cmdFirstLetter.concat(cmdRestOfTheLetters);","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        String errorMessage \u003d commandString.concat(closingStatement);","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"        throw new EmptyNumberException(errorMessage);","lastModifiedDate":"2022-02-10"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"Denniszedead":27}},{"path":"src/main/java/duke/dukeexceptions/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The exception when no task name is entered when the command needs it.","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public final class EmptyTaskException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private EmptyTaskException(String s) {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     * Creates an empty task exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @param cmd The type of command that did not receive the task name.","lastModifiedDate":"2022-02-10"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @return The EmptyTaskException Exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     * @throws EmptyTaskException The exception when there is no task name when the command needs it.","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    public static EmptyTaskException createEmptyTask(String cmd) throws EmptyTaskException {","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"        String openingStatement \u003d \"Are you trying to add something to \";","lastModifiedDate":"2022-02-10"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"        String taskTypeFirstLetter \u003d cmd.substring(0, 1).toUpperCase();","lastModifiedDate":"2022-02-10"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        String taskTypeRemainingLetters \u003d cmd.substring(1);","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"        String taskType \u003d taskTypeFirstLetter.concat(taskTypeRemainingLetters);","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"        String errorMessage \u003d openingStatement.concat(taskType);","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        throw new EmptyTaskException(errorMessage);","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"Denniszedead":26}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The exception when the command entered by the user is not valid.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public abstract class InvalidCommandException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    protected InvalidCommandException(String s) {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"        super(s);","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     * Creates an invalid command when the user enters one.","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @param cmd The user input. Can be Empty.","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @return An Invalid command.","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidCommandException Either MissingCommandException Exception representing no command is entered or","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"     *                                 IncorrectCommand representing commands other than specified in the Command class","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"     *                                 is entered.","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    public static InvalidCommandException createInvalidCommand(String cmd) throws InvalidCommandException {","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        throw cmd.isBlank() ? new MissingCommandException() : new IncorrectCommandException();","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":" * The missing command exception that represents the user enters an empty command.","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"final class MissingCommandException extends InvalidCommandException {","lastModifiedDate":"2022-02-05"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"Sorry, I don\u0027t see any commands!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    MissingCommandException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":" * The incorrect command exception that represents the users enters a command that is not specified by Duke.","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"final class IncorrectCommandException extends InvalidCommandException {","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"Sorry! I don\u0027t understand what are you saying!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"    IncorrectCommandException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"Denniszedead":43}},{"path":"src/main/java/duke/dukeexceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-02-05"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The InvalidDateException exception occurs when the users enters a date format other than dd/mm/yyyy HHmm.","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-02-05"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public final class InvalidDateException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please enter the date for the following format: dd/mm/yyyy HHmm.\";","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"    public InvalidDateException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"Denniszedead":11}},{"path":"src/main/java/duke/dukeexceptions/InvalidNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * An exception when the user enters an invalid number when the command requires one.","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"public final class InvalidNumberException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"You have entered an invalid number!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new InvalidNumberException exception.","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    public InvalidNumberException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"Denniszedead":14}},{"path":"src/main/java/duke/dukeexceptions/ListIndexOutOfBoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":" * The List Index Out Of Bound exception is thrown when the user tries to access the index that is more than the","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":" * number of tasks in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"public final class ListIndexOutOfBoundException extends DukeExceptions {","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"    private static final String ERROR_MESSAGE \u003d \"Index is out of bond!\";","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    public ListIndexOutOfBoundException() {","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"        super(ERROR_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"Denniszedead":12}},{"path":"src/main/java/duke/praser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.praser;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import duke.command.Command;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":" * The parser object make sures that the command entered by the user is correct.","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"public class Parser {","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"     * Prase the user input and returns the corresponding command.","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"     * @param userInput The input entered by the user.","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"     * @return The Command as typed by the user.","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidCommandException If the user inputs an invalid command.","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    public static Command parse(String userInput) throws InvalidCommandException {","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"        String command;","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"        String parameter \u003d \"\";","lastModifiedDate":"2022-01-31"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        // Split the parameter into command and parameter based on white space.","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"        String whitespaceWord \u003d \"\\\\s+\";","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"        String[] strings \u003d userInput.split(whitespaceWord);","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        if (strings.length \u003c 2) {","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"            // If there are no words after space.","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"            command \u003d userInput;","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"        } else {","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"            command \u003d strings[0];","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"            parameter \u003d userInput.substring(command.length() + 1);","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"        // Returns the command based on the command and parameter.","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"        return Command.getCommand(command.toUpperCase(), parameter);","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"Denniszedead":35}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.storage;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.File;","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-29"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-29"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.DukeExceptions;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":" * The Storage object acts as an interface between Duke and the filename for database management.","lastModifiedDate":"2022-01-31"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"public class Storage {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    /** The formatter to format the user entered date. */","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    private static final String NEXT_ITEM_LINE \u003d \"*** Next Task ***\";","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    /** The file which stores the tasks in the task list. */","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    private File file;","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new Storage object with the filename to store and retrieves the data in the tasks list.","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"     * @param filename THe file where the tasks in the tasks list is retrieved and stored.","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    public Storage(String filename) {","lastModifiedDate":"2022-01-29"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"        assert filename !\u003d null : \"Filename is empty\";","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"        this.file \u003d new File(filename);","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"     * Gets all the tasks in file and creates a new task list based on the data retrieved.","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"     * @return Task List with all the tasks retrieved from the file filename.","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"     * @throws FileNotFoundException If the file filename could not be found in duke.","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"    public TaskList getData() throws FileNotFoundException {","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"        Scanner fileInput \u003d new Scanner(file);","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"        // Gets the data from the file and creates new task into the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"        while (fileInput.hasNextLine()) {","lastModifiedDate":"2022-01-29"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"            // Gets the properties for a task.","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"            String type \u003d fileInput.nextLine();","lastModifiedDate":"2022-01-29"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"            Boolean isDone \u003d Boolean.parseBoolean(fileInput.nextLine());","lastModifiedDate":"2022-02-05"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"            String name \u003d fileInput.nextLine();","lastModifiedDate":"2022-01-29"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"            String dateString \u003d fileInput.nextLine();","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"            LocalDateTime date \u003d null;","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"            // If the program finishes processing a task.","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"            if (dateString.equals(NEXT_ITEM_LINE)) {","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"                date \u003d null;","lastModifiedDate":"2022-01-29"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"            } else {","lastModifiedDate":"2022-01-29"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"                // Changes the date to the LocalDateFormat","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"                date \u003d LocalDateTime.parse(dateString, FORMATTER);","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"                fileInput.nextLine();","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"            // Adds the task to the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"            try {","lastModifiedDate":"2022-01-29"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"                taskList.addTask(Task.createTask(type, isDone, name, date));","lastModifiedDate":"2022-02-05"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"            } catch (DukeExceptions e) {","lastModifiedDate":"2022-01-29"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-01-29"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"        return taskList;","lastModifiedDate":"2022-01-29"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"     * Updates the file filename with the latest data from the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"Denniszedead"},"content":"     * @param taskList The task list which has the latest data.","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"Denniszedead"},"content":"     * @throws IOException If an IO error happens.","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"Denniszedead"},"content":"    public void updateData(TaskList taskList) throws IOException {","lastModifiedDate":"2022-01-29"},{"lineNumber":79,"author":{"gitId":"Denniszedead"},"content":"        // Creates a new filewriter.","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"Denniszedead"},"content":"        FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2022-01-29"},{"lineNumber":81,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":82,"author":{"gitId":"Denniszedead"},"content":"        // Writes all the tasks in the task list into the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":83,"author":{"gitId":"Denniszedead"},"content":"        fw.write(taskList.updateDatabase());","lastModifiedDate":"2022-01-29"},{"lineNumber":84,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":85,"author":{"gitId":"Denniszedead"},"content":"        // Closes the filewriter.","lastModifiedDate":"2022-01-31"},{"lineNumber":86,"author":{"gitId":"Denniszedead"},"content":"        fw.close();","lastModifiedDate":"2022-01-29"},{"lineNumber":87,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":88,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"Denniszedead":88}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.task;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-01-27"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidDateException;","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":" * The task object represents the tasks stored by duke.","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"    /** The date formatter on which indicates that the user will enter the date in dd/mm/yyyy HHmm. */","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"    protected static final DateTimeFormatter INIT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"    /** The date formatter on which the date will be displayed when toString() is called. */","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"    protected static final String NEXT_LINE \u003d \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    private static final String TODO \u003d \"TODO\";","lastModifiedDate":"2022-02-10"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    private static final String DEADLINE \u003d \"DEADLINE\";","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    private static final String EVENT \u003d \"EVENT\";","lastModifiedDate":"2022-02-10"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    protected String taskName;","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"    protected boolean isMarked;","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"    protected LocalDateTime date \u003d null;","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new Task.","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"     * @param done Whether the task is done or not.","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    protected Task(String taskName, boolean done) {","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"        this.isMarked \u003d done;","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"     * Sets the task to be complete.","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"    public void setDone() {","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"        isMarked \u003d true;","lastModifiedDate":"2022-01-31"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"     * Sets the task to be incomplete.","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"    public void setUndone() {","lastModifiedDate":"2022-01-29"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"        isMarked \u003d false;","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"     * Returns a string in the format that is stored in the file filename.","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"     * @return The properties of the task that follows the format stored in the file filename.","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"    public abstract String updateIntoDatabase();","lastModifiedDate":"2022-01-29"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"     * Get the task name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"     * @return The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"    public String getTaskName() {","lastModifiedDate":"2022-01-31"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"        return taskName;","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new task.","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"     * @param type The type of task.","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"     * @param done The completeness of the tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"     * @param name The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"     * @param date The date of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"     * @return A new Task object.","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidDateException If the task that requires a date encounters a date in an invalid format.","lastModifiedDate":"2022-02-05"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":75,"author":{"gitId":"Denniszedead"},"content":"    public static Task createTask(String type, Boolean done, String name, LocalDateTime date)","lastModifiedDate":"2022-02-11"},{"lineNumber":76,"author":{"gitId":"Denniszedead"},"content":"            throws InvalidDateException {","lastModifiedDate":"2022-02-11"},{"lineNumber":77,"author":{"gitId":"Denniszedead"},"content":"        // Convert the task type to uppercase.","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"Denniszedead"},"content":"        type \u003d type.toUpperCase();","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":80,"author":{"gitId":"Denniszedead"},"content":"        // Creates a new task based on the task type.","lastModifiedDate":"2022-01-31"},{"lineNumber":81,"author":{"gitId":"Denniszedead"},"content":"        if (type.equals(TODO)) {","lastModifiedDate":"2022-02-10"},{"lineNumber":82,"author":{"gitId":"Denniszedead"},"content":"            return new ToDo(name, done);","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"Denniszedead"},"content":"        } else if (type.equals(DEADLINE)) {","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"Denniszedead"},"content":"            return new Deadline(name, done, date);","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"Denniszedead"},"content":"        } else if (type.equals(EVENT)) {","lastModifiedDate":"2022-02-10"},{"lineNumber":86,"author":{"gitId":"Denniszedead"},"content":"            return new Event(name, done, date);","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"Denniszedead"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"Denniszedead"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2022-01-27"},{"lineNumber":89,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":90,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":91,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":92,"author":{"gitId":"Denniszedead"},"content":"     * Gets the date of either the deadline or event.","lastModifiedDate":"2022-02-11"},{"lineNumber":93,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":94,"author":{"gitId":"Denniszedead"},"content":"     * @return The date of the event.","lastModifiedDate":"2022-02-11"},{"lineNumber":95,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":96,"author":{"gitId":"Denniszedead"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2022-02-11"},{"lineNumber":97,"author":{"gitId":"Denniszedead"},"content":"        return date;","lastModifiedDate":"2022-02-11"},{"lineNumber":98,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":99,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":100,"author":{"gitId":"Denniszedead"},"content":"    protected String getMarkedTag(boolean isMarked) {","lastModifiedDate":"2022-02-10"},{"lineNumber":101,"author":{"gitId":"Denniszedead"},"content":"        return isMarked ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2022-02-10"},{"lineNumber":102,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":103,"author":{"gitId":"Denniszedead"},"content":"    protected String getDateInFormat(String adj, String date) {","lastModifiedDate":"2022-02-10"},{"lineNumber":104,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d \"(\" + adj + \": \" + date + \")\";","lastModifiedDate":"2022-02-10"},{"lineNumber":105,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":106,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":107,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":108,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":109,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":110,"author":{"gitId":"Denniszedead"},"content":" * The task representing TODO.","lastModifiedDate":"2022-01-31"},{"lineNumber":111,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":112,"author":{"gitId":"Denniszedead"},"content":"final class ToDo extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":113,"author":{"gitId":"Denniszedead"},"content":"    private static final String TAG \u003d \"[T]\";","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"Denniszedead"},"content":"    private static final String TODO \u003d \"TODO\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":115,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":116,"author":{"gitId":"Denniszedead"},"content":"    protected ToDo(String taskName, boolean done) {","lastModifiedDate":"2022-01-27"},{"lineNumber":117,"author":{"gitId":"Denniszedead"},"content":"        super(taskName, done);","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":119,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":120,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":121,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":122,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"Denniszedead"},"content":"     * @return The tasks with its properties.","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":125,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":126,"author":{"gitId":"Denniszedead"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":127,"author":{"gitId":"Denniszedead"},"content":"        String doneIndicator \u003d getMarkedTag(isMarked);","lastModifiedDate":"2022-02-10"},{"lineNumber":128,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d TAG.concat(doneIndicator).concat(\" \").concat(taskName);","lastModifiedDate":"2022-02-10"},{"lineNumber":129,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":130,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":131,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":132,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":133,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":134,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":135,"author":{"gitId":"Denniszedead"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":136,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":137,"author":{"gitId":"Denniszedead"},"content":"    public String updateIntoDatabase() {","lastModifiedDate":"2022-01-29"},{"lineNumber":138,"author":{"gitId":"Denniszedead"},"content":"        String isMarkedString \u003d String.valueOf(isMarked).concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":139,"author":{"gitId":"Denniszedead"},"content":"        String taskNameString \u003d taskName.concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":140,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d TODO.concat(isMarkedString).concat(taskNameString).concat(NEXT_LINE);","lastModifiedDate":"2022-02-10"},{"lineNumber":141,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":142,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":143,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":144,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":145,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":146,"author":{"gitId":"Denniszedead"},"content":" * The tasks that contains the deadline.","lastModifiedDate":"2022-01-31"},{"lineNumber":147,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":148,"author":{"gitId":"Denniszedead"},"content":"final class Deadline extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":149,"author":{"gitId":"Denniszedead"},"content":"    private static final String TAG \u003d \"[D]\";","lastModifiedDate":"2022-02-10"},{"lineNumber":150,"author":{"gitId":"Denniszedead"},"content":"    private static final String DEADLINE \u003d \"DEADLINE\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":151,"author":{"gitId":"Denniszedead"},"content":"    /** The date of the dateline */","lastModifiedDate":"2022-01-31"},{"lineNumber":152,"author":{"gitId":"Denniszedead"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2022-01-31"},{"lineNumber":153,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":154,"author":{"gitId":"Denniszedead"},"content":"     * A task with a deadline.","lastModifiedDate":"2022-01-31"},{"lineNumber":155,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":156,"author":{"gitId":"Denniszedead"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":157,"author":{"gitId":"Denniszedead"},"content":"     * @param done The completeness of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":158,"author":{"gitId":"Denniszedead"},"content":"     * @param deadline The date representing the deadline of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":159,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidDateException If the user did not enter the date in the format dd/mm/yyyy HHmm.","lastModifiedDate":"2022-02-05"},{"lineNumber":160,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":161,"author":{"gitId":"Denniszedead"},"content":"    protected Deadline(String taskName, boolean done, LocalDateTime deadline) throws InvalidDateException {","lastModifiedDate":"2022-02-11"},{"lineNumber":162,"author":{"gitId":"Denniszedead"},"content":"        super(taskName, done);","lastModifiedDate":"2022-01-27"},{"lineNumber":163,"author":{"gitId":"Denniszedead"},"content":"        date \u003d deadline;","lastModifiedDate":"2022-02-11"},{"lineNumber":164,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":165,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":166,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":167,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":168,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":169,"author":{"gitId":"Denniszedead"},"content":"     * @return The tasks with its properties.","lastModifiedDate":"2022-01-31"},{"lineNumber":170,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":171,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":172,"author":{"gitId":"Denniszedead"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":173,"author":{"gitId":"Denniszedead"},"content":"        String doneIndicator \u003d getMarkedTag(isMarked);","lastModifiedDate":"2022-02-10"},{"lineNumber":174,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d date.format(FORMATTER);","lastModifiedDate":"2022-02-11"},{"lineNumber":175,"author":{"gitId":"Denniszedead"},"content":"        String deadlineString \u003d getDateInFormat(\"by\", dateString);","lastModifiedDate":"2022-02-11"},{"lineNumber":176,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d TAG.concat(doneIndicator).concat(\" \").concat(taskName).concat(\" \").concat(deadlineString);","lastModifiedDate":"2022-02-10"},{"lineNumber":177,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":178,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":179,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":180,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":181,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":182,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":183,"author":{"gitId":"Denniszedead"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":184,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":185,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":186,"author":{"gitId":"Denniszedead"},"content":"    public String updateIntoDatabase() {","lastModifiedDate":"2022-01-29"},{"lineNumber":187,"author":{"gitId":"Denniszedead"},"content":"        String isMarkedString \u003d String.valueOf(isMarked).concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":188,"author":{"gitId":"Denniszedead"},"content":"        String taskNameString \u003d taskName.concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":189,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d date.format(INIT_FORMATTER).concat(\"\\n\");","lastModifiedDate":"2022-02-11"},{"lineNumber":190,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d DEADLINE.concat(isMarkedString).concat(taskNameString).concat(dateString).concat(NEXT_LINE);","lastModifiedDate":"2022-02-11"},{"lineNumber":191,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":192,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":193,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"},{"lineNumber":194,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":195,"author":{"gitId":"Denniszedead"},"content":"final class Event extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":196,"author":{"gitId":"Denniszedead"},"content":"    private static final String TAG \u003d \"[E]\";","lastModifiedDate":"2022-02-10"},{"lineNumber":197,"author":{"gitId":"Denniszedead"},"content":"    private static final String EVENT \u003d \"EVENT\\n\";","lastModifiedDate":"2022-02-10"},{"lineNumber":198,"author":{"gitId":"Denniszedead"},"content":"    /** The date of the event */","lastModifiedDate":"2022-01-31"},{"lineNumber":199,"author":{"gitId":"Denniszedead"},"content":"    private LocalDateTime eventDate;","lastModifiedDate":"2022-01-31"},{"lineNumber":200,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":201,"author":{"gitId":"Denniszedead"},"content":"     * Creates the event task.","lastModifiedDate":"2022-01-31"},{"lineNumber":202,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":203,"author":{"gitId":"Denniszedead"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":204,"author":{"gitId":"Denniszedead"},"content":"     * @param done The completeness of the task.","lastModifiedDate":"2022-01-31"},{"lineNumber":205,"author":{"gitId":"Denniszedead"},"content":"     * @param eventDate","lastModifiedDate":"2022-01-31"},{"lineNumber":206,"author":{"gitId":"Denniszedead"},"content":"     * @throws InvalidDateException","lastModifiedDate":"2022-02-05"},{"lineNumber":207,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":208,"author":{"gitId":"Denniszedead"},"content":"    protected Event(String taskName, boolean done, LocalDateTime eventDate) throws InvalidDateException {","lastModifiedDate":"2022-02-11"},{"lineNumber":209,"author":{"gitId":"Denniszedead"},"content":"        super(taskName, done);","lastModifiedDate":"2022-01-27"},{"lineNumber":210,"author":{"gitId":"Denniszedead"},"content":"        date \u003d eventDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":211,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":212,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":213,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":214,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":215,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":216,"author":{"gitId":"Denniszedead"},"content":"     * @return The tasks with its properties.","lastModifiedDate":"2022-01-31"},{"lineNumber":217,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":218,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":219,"author":{"gitId":"Denniszedead"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":220,"author":{"gitId":"Denniszedead"},"content":"        String doneIndicator \u003d getMarkedTag(isMarked);","lastModifiedDate":"2022-02-10"},{"lineNumber":221,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d date.format(FORMATTER);","lastModifiedDate":"2022-02-11"},{"lineNumber":222,"author":{"gitId":"Denniszedead"},"content":"        String eventDateString \u003d getDateInFormat(\"at\", dateString);","lastModifiedDate":"2022-02-11"},{"lineNumber":223,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d TAG.concat(doneIndicator).concat(\" \").concat(taskName).concat(\" \").concat(eventDateString);","lastModifiedDate":"2022-02-10"},{"lineNumber":224,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":225,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":226,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":227,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":228,"author":{"gitId":"Denniszedead"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":229,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":230,"author":{"gitId":"Denniszedead"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2022-01-31"},{"lineNumber":231,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":232,"author":{"gitId":"Denniszedead"},"content":"    @Override","lastModifiedDate":"2022-01-31"},{"lineNumber":233,"author":{"gitId":"Denniszedead"},"content":"    public String updateIntoDatabase() {","lastModifiedDate":"2022-01-29"},{"lineNumber":234,"author":{"gitId":"Denniszedead"},"content":"        String isMarkedString \u003d String.valueOf(isMarked).concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":235,"author":{"gitId":"Denniszedead"},"content":"        String taskNameString \u003d taskName.concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":236,"author":{"gitId":"Denniszedead"},"content":"        String dateString \u003d date.format(INIT_FORMATTER).concat(\"\\n\");","lastModifiedDate":"2022-02-11"},{"lineNumber":237,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d EVENT.concat(isMarkedString).concat(taskNameString).concat(dateString).concat(NEXT_LINE);","lastModifiedDate":"2022-02-11"},{"lineNumber":238,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-10"},{"lineNumber":239,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":240,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"Denniszedead":240}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.tasklist;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"import java.util.List;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"/**","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":" * The task list which contains all the tasks.","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":" */","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"public class TaskList {","lastModifiedDate":"2022-01-29"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    /** The ArrayList which stores all the tasks. */","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-10"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"     * Creates a new Task List.","lastModifiedDate":"2022-01-31"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"     * Marks the task located in the oneIndex provided.","lastModifiedDate":"2022-02-10"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"     * @param oneIndex The oneIndex of the task to be marked.","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"     * @return The string representation of the task that was recently marked.","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"     * @throws IndexOutOfBoundsException When the user enters the oneIndex that is outside the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"    public String markTask(int oneIndex) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"        // Minus one as the oneIndex from the parameter is 1-based.","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"        int zeroIndex \u003d oneIndex - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"            Task task \u003d tasks.get(zeroIndex);","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"            task.setDone();","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"            return task.toString();","lastModifiedDate":"2022-01-29"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"            // If the oneIndex is out of bound of the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"     * Unmarks the task indicated by the oneIndex in the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"     * @param oneIndex The oneIndex of the task to be unmarked.","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"     * @return The string representation of the task that was recently unmarked.","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"     * @throws IndexOutOfBoundsException When the user enters the oneIndex that is outside the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"    public String unmarkTask(int oneIndex) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"        // Minus one as the oneIndex from the parameter is 1-based.","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"        int zeroIndex \u003d oneIndex - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"            Task task \u003d tasks.get(zeroIndex);","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"            task.setUndone();","lastModifiedDate":"2022-01-29"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"            return task.toString();","lastModifiedDate":"2022-01-29"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"            // If the oneIndex is out of bound of the task list.","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"     * Adds a new task in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"     * @param task The new task to be added into the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"        tasks.add(task);","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":75,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":76,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":77,"author":{"gitId":"Denniszedead"},"content":"     * Shows all the tasks in the task list.","lastModifiedDate":"2022-01-31"},{"lineNumber":78,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":79,"author":{"gitId":"Denniszedead"},"content":"    public String printTasks() {","lastModifiedDate":"2022-02-07"},{"lineNumber":80,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":81,"author":{"gitId":"Denniszedead"},"content":"        for (int index \u003d 0; index \u003c this.tasks.size(); index++) {","lastModifiedDate":"2022-02-10"},{"lineNumber":82,"author":{"gitId":"Denniszedead"},"content":"            String oneIndex \u003d String.valueOf(index + 1).concat(\". \");","lastModifiedDate":"2022-02-10"},{"lineNumber":83,"author":{"gitId":"Denniszedead"},"content":"            String curTask \u003d tasks.get(index).toString();","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"Denniszedead"},"content":"            String newLine \u003d oneIndex.concat(curTask).concat(\"\\n\");","lastModifiedDate":"2022-02-10"},{"lineNumber":85,"author":{"gitId":"Denniszedead"},"content":"            result +\u003d newLine;","lastModifiedDate":"2022-02-10"},{"lineNumber":86,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":87,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-02-07"},{"lineNumber":88,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":89,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":90,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":91,"author":{"gitId":"Denniszedead"},"content":"     * Deletes the task indicated by the oneIndex.","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":93,"author":{"gitId":"Denniszedead"},"content":"     * @param oneIndex The oneIndex of the task to be deleted.","lastModifiedDate":"2022-02-10"},{"lineNumber":94,"author":{"gitId":"Denniszedead"},"content":"     * @return The string representation of the task that was recently deleted.","lastModifiedDate":"2022-01-31"},{"lineNumber":95,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":96,"author":{"gitId":"Denniszedead"},"content":"    public String deleteFromIndex(int oneIndex) {","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"Denniszedead"},"content":"        // Minus one as the oneIndex from the parameter is 1-based.","lastModifiedDate":"2022-02-10"},{"lineNumber":98,"author":{"gitId":"Denniszedead"},"content":"        int zeroIndex \u003d oneIndex - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":99,"author":{"gitId":"Denniszedead"},"content":"        String deletedTask \u003d tasks.get(zeroIndex).toString();","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"Denniszedead"},"content":"        tasks.remove(zeroIndex);","lastModifiedDate":"2022-02-10"},{"lineNumber":101,"author":{"gitId":"Denniszedead"},"content":"        return deletedTask;","lastModifiedDate":"2022-01-29"},{"lineNumber":102,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":105,"author":{"gitId":"Denniszedead"},"content":"     * Returns the string format that is stored in the file.","lastModifiedDate":"2022-01-31"},{"lineNumber":106,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":107,"author":{"gitId":"Denniszedead"},"content":"     * @return The string representation that follows the format that is stored in the database.","lastModifiedDate":"2022-01-31"},{"lineNumber":108,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":109,"author":{"gitId":"Denniszedead"},"content":"    public String updateDatabase() {","lastModifiedDate":"2022-01-29"},{"lineNumber":110,"author":{"gitId":"Denniszedead"},"content":"        String result \u003d \"\";","lastModifiedDate":"2022-01-29"},{"lineNumber":111,"author":{"gitId":"Denniszedead"},"content":"        for (Task task: tasks) {","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"Denniszedead"},"content":"            result +\u003d task.updateIntoDatabase();","lastModifiedDate":"2022-02-10"},{"lineNumber":113,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":114,"author":{"gitId":"Denniszedead"},"content":"        return result;","lastModifiedDate":"2022-01-29"},{"lineNumber":115,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":116,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":117,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-01-31"},{"lineNumber":118,"author":{"gitId":"Denniszedead"},"content":"     * Returns a task list with all tasks that contains the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":119,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-01-31"},{"lineNumber":120,"author":{"gitId":"Denniszedead"},"content":"     * @param keyword The keyword to be searched.","lastModifiedDate":"2022-01-31"},{"lineNumber":121,"author":{"gitId":"Denniszedead"},"content":"     * @return A new task list with the tasks containing the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":122,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-01-31"},{"lineNumber":123,"author":{"gitId":"Denniszedead"},"content":"    public TaskList findTasksFromKeyword(String keyword) {","lastModifiedDate":"2022-01-31"},{"lineNumber":124,"author":{"gitId":"Denniszedead"},"content":"        TaskList filteredTaskList \u003d new TaskList();","lastModifiedDate":"2022-01-31"},{"lineNumber":125,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":126,"author":{"gitId":"Denniszedead"},"content":"        // Gets all the tasks that contains the keyword.","lastModifiedDate":"2022-01-31"},{"lineNumber":127,"author":{"gitId":"Denniszedead"},"content":"        List\u003cTask\u003e filteredArrayList \u003d tasks.stream()","lastModifiedDate":"2022-02-10"},{"lineNumber":128,"author":{"gitId":"Denniszedead"},"content":"                .filter(task -\u003e task.getTaskName().contains(keyword))","lastModifiedDate":"2022-01-31"},{"lineNumber":129,"author":{"gitId":"Denniszedead"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2022-01-31"},{"lineNumber":130,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":131,"author":{"gitId":"Denniszedead"},"content":"        // Puts all the tasks in the filteredArrayList into the new Task List.","lastModifiedDate":"2022-01-31"},{"lineNumber":132,"author":{"gitId":"Denniszedead"},"content":"        for (Task task: filteredArrayList) {","lastModifiedDate":"2022-01-31"},{"lineNumber":133,"author":{"gitId":"Denniszedead"},"content":"            filteredTaskList.addTask(task);","lastModifiedDate":"2022-01-31"},{"lineNumber":134,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":135,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":136,"author":{"gitId":"Denniszedead"},"content":"        return filteredTaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":137,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":138,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":139,"author":{"gitId":"Denniszedead"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":140,"author":{"gitId":"Denniszedead"},"content":"     * Checks the task list if there is another event with the date in dateString.","lastModifiedDate":"2022-02-11"},{"lineNumber":141,"author":{"gitId":"Denniszedead"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":142,"author":{"gitId":"Denniszedead"},"content":"     * @param date The date to check whether a clash occurs.","lastModifiedDate":"2022-02-11"},{"lineNumber":143,"author":{"gitId":"Denniszedead"},"content":"     * @return True if there is a task with the date dateString, false otherwise.","lastModifiedDate":"2022-02-11"},{"lineNumber":144,"author":{"gitId":"Denniszedead"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":145,"author":{"gitId":"Denniszedead"},"content":"    public boolean checkDateInTaskList(LocalDateTime date) {","lastModifiedDate":"2022-02-11"},{"lineNumber":146,"author":{"gitId":"Denniszedead"},"content":"        boolean hasDate \u003d tasks.stream().anyMatch(task -\u003e task.getDate().equals(date));","lastModifiedDate":"2022-02-11"},{"lineNumber":147,"author":{"gitId":"Denniszedead"},"content":"        return hasDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":148,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":149,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"Denniszedead":149}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.components.MainWindow\"\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"Denniszedead":19}},{"path":"src/main/resources/view/ResponseDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"\u003cfx:root alignment\u003d\"CENTER_LEFT\" depthTest\u003d\"DISABLE\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" style\u003d\"-fx-background-color: #f0fcf5#f0fcf5;\" styleClass\u003d\"dialog\" stylesheets\u003d\"@../style/style.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"            \u003cInsets left\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"Denniszedead":19}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" depthTest\u003d\"DISABLE\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" style\u003d\"-fx-background-color: #c2f7a1#c2f7a1;\" styleClass\u003d\"dialog\" stylesheets\u003d\"@../style/style.css\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-19"}],"authorContributionMap":{"Denniszedead":14}},{"path":"src/test/java/duke/command/TestCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Denniszedead"},"content":"package duke.command;","lastModifiedDate":"2022-01-29"},{"lineNumber":2,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"Denniszedead"},"content":"import java.io.File;","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"Denniszedead"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"Denniszedead"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"Denniszedead"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"Denniszedead"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-29"},{"lineNumber":9,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.DukeExceptions;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"Denniszedead"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"Denniszedead"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"Denniszedead"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"Denniszedead"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"Denniszedead"},"content":"public class TestCommand {","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"Denniszedead"},"content":"    private String fileName \u003d \"data/test/dukeEmptyTxt.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"Denniszedead"},"content":"    void createCommand_noCommand_missingCommandExceptionThrown() {","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":22,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"\", \"\");","lastModifiedDate":"2022-01-29"},{"lineNumber":23,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-01-29"},{"lineNumber":24,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Sorry, I don\u0027t see any commands!\", e.getMessage());","lastModifiedDate":"2022-01-29"},{"lineNumber":26,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":27,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":29,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":30,"author":{"gitId":"Denniszedead"},"content":"    void createCommand_randomCommand_incorrectCommandExceptionThrown() {","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":32,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"Some\", \"random command\");","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Sorry! I don\u0027t understand what are you saying!\", e.getMessage());","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":38,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":39,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"Denniszedead"},"content":"    void createByeCommand_byeCommand_byeCommand() {","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-01-29"},{"lineNumber":42,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"BYE\", \"\");","lastModifiedDate":"2022-01-29"},{"lineNumber":43,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(cmd.getClass(), ByeCommand.class);","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"Denniszedead"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":47,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":49,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":51,"author":{"gitId":"Denniszedead"},"content":"    void createListCommand_listCommandWithEmptyList_resultStringWithEmptyList() {","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(\"data/test/dukeListCmdTest1.txt\");","lastModifiedDate":"2022-02-07"},{"lineNumber":53,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":54,"author":{"gitId":"Denniszedead"},"content":"            TaskList taskList \u003d storage.getData();","lastModifiedDate":"2022-02-07"},{"lineNumber":55,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"LIST\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":56,"author":{"gitId":"Denniszedead"},"content":"            String expected \u003d \"Here you go:\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":57,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, cmd.run(taskList, storage));","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":59,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":62,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":65,"author":{"gitId":"Denniszedead"},"content":"    void createListCommand_listCommandWithTasks_resultStringWithTasks() {","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"Denniszedead"},"content":"        String expected \u003d \"Here you go:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"Denniszedead"},"content":"                + \"1. [T][ ] Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"Denniszedead"},"content":"                + \"2. [D][ ] Deadline 1 \" + \"(by: 01 Jan 1900 12:00 AM)\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"Denniszedead"},"content":"                + \"3. [E][ ] Event 1 \" + \"(at: 01 Jan 1900 12:00 PM)\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"Denniszedead"},"content":"                + \"4. [T][X] Task 2\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"Denniszedead"},"content":"                + \"5. [D][X] Deadline 2 \" + \"(by: 01 Jan 2022 11:59 PM)\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"Denniszedead"},"content":"                + \"6. [E][X] Event 2 \" + \"(at: 01 Jan 2022 11:59 PM)\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(\"data/test/dukeListCmdTest2.txt\");","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"Denniszedead"},"content":"            TaskList taskList \u003d storage.getData();","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"LIST\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":79,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(taskList, storage);","lastModifiedDate":"2022-02-11"},{"lineNumber":80,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, result);","lastModifiedDate":"2022-02-11"},{"lineNumber":81,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":82,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-11"},{"lineNumber":83,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":84,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":85,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":86,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":87,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":88,"author":{"gitId":"Denniszedead"},"content":"    void createMarkCommand_markCommandWithoutNumber_emptyNumberExceptionThrown() {","lastModifiedDate":"2022-02-07"},{"lineNumber":89,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeMarkCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":90,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":91,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":92,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":93,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":94,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"MARK\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":95,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":96,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":97,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":98,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Mark needs a number\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":99,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":100,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":101,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":102,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":103,"author":{"gitId":"Denniszedead"},"content":"    void createMarkCommand_markCommandWithNumber_taskMarked() {","lastModifiedDate":"2022-02-07"},{"lineNumber":104,"author":{"gitId":"Denniszedead"},"content":"        String initial \u003d \"TODO\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":105,"author":{"gitId":"Denniszedead"},"content":"                + \"false\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":106,"author":{"gitId":"Denniszedead"},"content":"                + \"Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":107,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":108,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d \"Marked the following task to the list:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":109,"author":{"gitId":"Denniszedead"},"content":"                + \"[T][X] Task 1\"","lastModifiedDate":"2022-02-07"},{"lineNumber":110,"author":{"gitId":"Denniszedead"},"content":"                + \"\\nGood job by the way\";","lastModifiedDate":"2022-02-07"},{"lineNumber":111,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"TODO\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":112,"author":{"gitId":"Denniszedead"},"content":"                + \"true\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":113,"author":{"gitId":"Denniszedead"},"content":"                + \"Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":114,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":115,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeMarkCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":116,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":117,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":118,"author":{"gitId":"Denniszedead"},"content":"            // Initialize file data.","lastModifiedDate":"2022-02-07"},{"lineNumber":119,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":120,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":121,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":122,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":123,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":124,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":125,"author":{"gitId":"Denniszedead"},"content":"            // Add the initial data into the data file.","lastModifiedDate":"2022-02-07"},{"lineNumber":126,"author":{"gitId":"Denniszedead"},"content":"            tasks.addTask(Task.createTask(\"TODO\", false, \"Task 1\", null));","lastModifiedDate":"2022-02-11"},{"lineNumber":127,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":128,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":129,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":130,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":131,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":132,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(initial, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":133,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":134,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the command is created.","lastModifiedDate":"2022-02-07"},{"lineNumber":135,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"MARK\", \"1\");","lastModifiedDate":"2022-02-07"},{"lineNumber":136,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, cmd.run(tasks, storage));","lastModifiedDate":"2022-02-07"},{"lineNumber":137,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":138,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the dataFile is updated.","lastModifiedDate":"2022-02-07"},{"lineNumber":139,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":140,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":141,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":142,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":143,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":144,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":145,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":146,"author":{"gitId":"Denniszedead"},"content":"            // Clear the file.","lastModifiedDate":"2022-02-07"},{"lineNumber":147,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":148,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":149,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":150,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":151,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":152,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":153,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":154,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":155,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":156,"author":{"gitId":"Denniszedead"},"content":"    void createUnmarkCommandResult_unmarkCommandWithoutNumber_emptyNumberExceptionThrown() {","lastModifiedDate":"2022-02-07"},{"lineNumber":157,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"dukeListUnmarkCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":158,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":159,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":160,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":161,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":162,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"UNMARK\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":163,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":164,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":165,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":166,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Unmark needs a number\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":167,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":168,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":169,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":170,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":171,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":172,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":173,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":174,"author":{"gitId":"Denniszedead"},"content":"    void createUnmarkCommandResult_unmarkCommandWithNumber_taskUnmarked() {","lastModifiedDate":"2022-02-07"},{"lineNumber":175,"author":{"gitId":"Denniszedead"},"content":"        String initial \u003d \"TODO\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":176,"author":{"gitId":"Denniszedead"},"content":"                + \"true\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":177,"author":{"gitId":"Denniszedead"},"content":"                + \"Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":178,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":179,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d \"Unmarked the following task to the list:\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":180,"author":{"gitId":"Denniszedead"},"content":"                + \"[T][ ] Task 1\"","lastModifiedDate":"2022-02-07"},{"lineNumber":181,"author":{"gitId":"Denniszedead"},"content":"                + \"\\nHope you get it done soon!\";","lastModifiedDate":"2022-02-07"},{"lineNumber":182,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"TODO\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":183,"author":{"gitId":"Denniszedead"},"content":"                + \"false\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":184,"author":{"gitId":"Denniszedead"},"content":"                + \"Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":185,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":186,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeUnmarkCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":187,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":188,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":189,"author":{"gitId":"Denniszedead"},"content":"            // Initialize the files.","lastModifiedDate":"2022-02-07"},{"lineNumber":190,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":191,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":192,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":193,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":194,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":195,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":196,"author":{"gitId":"Denniszedead"},"content":"            // Initialize the data in the data file.","lastModifiedDate":"2022-02-07"},{"lineNumber":197,"author":{"gitId":"Denniszedead"},"content":"            tasks.addTask(Task.createTask(\"TODO\", true, \"Task 1\", null));","lastModifiedDate":"2022-02-11"},{"lineNumber":198,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":199,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":200,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":201,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":202,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":203,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(initial, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":204,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":205,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the command is created.","lastModifiedDate":"2022-02-07"},{"lineNumber":206,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"UNMARK\", \"1\");","lastModifiedDate":"2022-02-07"},{"lineNumber":207,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, cmd.run(tasks, storage));","lastModifiedDate":"2022-02-07"},{"lineNumber":208,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":209,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the dataFile is updated.","lastModifiedDate":"2022-02-07"},{"lineNumber":210,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":211,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":212,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":213,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":214,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":215,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":216,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":217,"author":{"gitId":"Denniszedead"},"content":"            // Clears the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":218,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":219,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":220,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":221,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":222,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":223,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":224,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":225,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":226,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":227,"author":{"gitId":"Denniszedead"},"content":"    void createTodoCommand_todoWithoutName_throwsEmptyTaskException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":228,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":229,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"TODO\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":230,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":231,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":232,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":233,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":234,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":235,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":236,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Are you trying to add something to Todo\", e.getMessage());","lastModifiedDate":"2022-02-10"},{"lineNumber":237,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":238,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":239,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":240,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":241,"author":{"gitId":"Denniszedead"},"content":"    void createTodoCommand_todoWithName_createTodoInFile() {","lastModifiedDate":"2022-02-07"},{"lineNumber":242,"author":{"gitId":"Denniszedead"},"content":"        String initial \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":243,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d \"Added the following todo into the list:\\n[T][ ] Task 1\";","lastModifiedDate":"2022-02-07"},{"lineNumber":244,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"TODO\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":245,"author":{"gitId":"Denniszedead"},"content":"                + \"false\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":246,"author":{"gitId":"Denniszedead"},"content":"                + \"Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":247,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":248,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":249,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":250,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":251,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":252,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":253,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":254,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":255,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":256,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the file is empty.","lastModifiedDate":"2022-02-07"},{"lineNumber":257,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":258,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":259,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":260,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":261,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":262,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(initial, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":263,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":264,"author":{"gitId":"Denniszedead"},"content":"            // Check whether the command is created","lastModifiedDate":"2022-02-07"},{"lineNumber":265,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"TODO\", \"Task 1\");","lastModifiedDate":"2022-02-07"},{"lineNumber":266,"author":{"gitId":"Denniszedead"},"content":"            result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":267,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":268,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":269,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether data is saved in the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":270,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":271,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":272,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":273,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":274,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":275,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":276,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":277,"author":{"gitId":"Denniszedead"},"content":"            // Clears the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":278,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":279,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":280,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":281,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":282,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":283,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":284,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":285,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":286,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":287,"author":{"gitId":"Denniszedead"},"content":"    void createDeadlineCommand_deadlineWithoutTaskName_throwsEmptyTaskException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":288,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":289,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":290,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":291,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":292,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":293,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":294,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":295,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":296,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Are you trying to add something to Deadline\", e.getMessage());","lastModifiedDate":"2022-02-10"},{"lineNumber":297,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":298,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":299,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":300,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":301,"author":{"gitId":"Denniszedead"},"content":"    void createDeadlineCommand_deadlineWithoutDate_throwsEmptyDateException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":302,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":303,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", \"Deadline 1 /by\");","lastModifiedDate":"2022-02-07"},{"lineNumber":304,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":305,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":306,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":307,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":308,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":309,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":310,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Deadline needs a date\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":311,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":312,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":313,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":314,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":315,"author":{"gitId":"Denniszedead"},"content":"    void createDeadlineCommand_deadlineWithInvalidDate_throwsInvalidDateException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":316,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":317,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", \"Deadline 1 /by 2022-01-01 1234\");","lastModifiedDate":"2022-02-07"},{"lineNumber":318,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":319,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":320,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":321,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":322,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":323,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":324,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Please enter the date for the following format: dd/mm/yyyy HHmm.\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":325,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":326,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":327,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":328,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-11"},{"lineNumber":329,"author":{"gitId":"Denniszedead"},"content":"    void createDeadlineCommand_duplicatedDate_throwsDateClashException() {","lastModifiedDate":"2022-02-11"},{"lineNumber":330,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeDuplicatedDateTest.txt\";","lastModifiedDate":"2022-02-11"},{"lineNumber":331,"author":{"gitId":"Denniszedead"},"content":"        String date \u003d \"1/1/2022 2359\";","lastModifiedDate":"2022-02-11"},{"lineNumber":332,"author":{"gitId":"Denniszedead"},"content":"        String expected \u003d \"There is already a deadline/event scheduled on \" + date;","lastModifiedDate":"2022-02-11"},{"lineNumber":333,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":334,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-11"},{"lineNumber":335,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d storage.getData();","lastModifiedDate":"2022-02-11"},{"lineNumber":336,"author":{"gitId":"Denniszedead"},"content":"            String parameter \u003d \"Deadline 2 /by \" + date;","lastModifiedDate":"2022-02-11"},{"lineNumber":337,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", parameter);","lastModifiedDate":"2022-02-11"},{"lineNumber":338,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-11"},{"lineNumber":339,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-11"},{"lineNumber":340,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":341,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":342,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":343,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":344,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":345,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":346,"author":{"gitId":"Denniszedead"},"content":"    void createDeadlineCommand_correctDeadline_createDeadlineInFile() {","lastModifiedDate":"2022-02-07"},{"lineNumber":347,"author":{"gitId":"Denniszedead"},"content":"        String initial \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":348,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":349,"author":{"gitId":"Denniszedead"},"content":"                \"Added the following deadline into the list:\\n[D][ ] Deadline 1 (by: 01 Jan 2022 11:59 PM)\";","lastModifiedDate":"2022-02-07"},{"lineNumber":350,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"DEADLINE\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":351,"author":{"gitId":"Denniszedead"},"content":"                + \"false\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":352,"author":{"gitId":"Denniszedead"},"content":"                + \"Deadline 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":353,"author":{"gitId":"Denniszedead"},"content":"                + \"1/1/2022 2359\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":354,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":355,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":356,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":357,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":358,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":359,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":360,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":361,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":362,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":363,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the file is empty.","lastModifiedDate":"2022-02-07"},{"lineNumber":364,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":365,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":366,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":367,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":368,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":369,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(initial, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":370,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":371,"author":{"gitId":"Denniszedead"},"content":"            // Check whether the command is created","lastModifiedDate":"2022-02-07"},{"lineNumber":372,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", \"Deadline 1 /by 01/01/2022 2359\");","lastModifiedDate":"2022-02-07"},{"lineNumber":373,"author":{"gitId":"Denniszedead"},"content":"            result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":374,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":375,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":376,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether data is saved in the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":377,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":378,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":379,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":380,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":381,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":382,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":383,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":384,"author":{"gitId":"Denniszedead"},"content":"            // Clears the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":385,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":386,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":387,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":388,"author":{"gitId":"Denniszedead"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-11"},{"lineNumber":389,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":390,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":391,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":392,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":393,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":394,"author":{"gitId":"Denniszedead"},"content":"    void createEventCommand_eventWithoutTaskName_throwsEmptyTaskException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":395,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":396,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"EVENT\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":397,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":398,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":399,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":400,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":401,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":402,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":403,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Are you trying to add something to Event\", e.getMessage());","lastModifiedDate":"2022-02-10"},{"lineNumber":404,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":405,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":406,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":407,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":408,"author":{"gitId":"Denniszedead"},"content":"    void createEventCommand_eventWithoutDate_throwsEmptyDateException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":409,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":410,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"EVENT\", \"Event 1 /by\");","lastModifiedDate":"2022-02-07"},{"lineNumber":411,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":412,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":413,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":414,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":415,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":416,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":417,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Event needs a date\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":418,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":419,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":420,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":421,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":422,"author":{"gitId":"Denniszedead"},"content":"    void createEventCommand_deadlineWithInvalidDate_throwsInvalidDateException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":423,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":424,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DEADLINE\", \"Deadline 1 /by 2022-01-01 1234\");","lastModifiedDate":"2022-02-07"},{"lineNumber":425,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":426,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":427,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":428,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":429,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":430,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":431,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Please enter the date for the following format: dd/mm/yyyy HHmm.\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":432,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":433,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":434,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":435,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-11"},{"lineNumber":436,"author":{"gitId":"Denniszedead"},"content":"    void createEventCommand_duplicatedDate_throwsDateClashException() {","lastModifiedDate":"2022-02-11"},{"lineNumber":437,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeDuplicatedDateTest.txt\";","lastModifiedDate":"2022-02-11"},{"lineNumber":438,"author":{"gitId":"Denniszedead"},"content":"        String date \u003d \"1/1/2022 2359\";","lastModifiedDate":"2022-02-11"},{"lineNumber":439,"author":{"gitId":"Denniszedead"},"content":"        String expected \u003d \"There is already a deadline/event scheduled on \" + date;","lastModifiedDate":"2022-02-11"},{"lineNumber":440,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":441,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-11"},{"lineNumber":442,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d storage.getData();","lastModifiedDate":"2022-02-11"},{"lineNumber":443,"author":{"gitId":"Denniszedead"},"content":"            String parameter \u003d \"Event 2 /at \" + date;","lastModifiedDate":"2022-02-11"},{"lineNumber":444,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"EVENT\", parameter);","lastModifiedDate":"2022-02-11"},{"lineNumber":445,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-11"},{"lineNumber":446,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-11"},{"lineNumber":447,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":448,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":449,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":450,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":451,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":452,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":453,"author":{"gitId":"Denniszedead"},"content":"    void createEventCommand_correctEvent_createEventInFile() {","lastModifiedDate":"2022-02-07"},{"lineNumber":454,"author":{"gitId":"Denniszedead"},"content":"        String initial \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":455,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":456,"author":{"gitId":"Denniszedead"},"content":"                \"Added the following event into the list:\\n[E][ ] Event 1 (at: 03 May 2022 06:00 PM)\";","lastModifiedDate":"2022-02-07"},{"lineNumber":457,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"EVENT\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":458,"author":{"gitId":"Denniszedead"},"content":"                + \"false\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":459,"author":{"gitId":"Denniszedead"},"content":"                + \"Event 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":460,"author":{"gitId":"Denniszedead"},"content":"                + \"3/5/2022 1800\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":461,"author":{"gitId":"Denniszedead"},"content":"                + \"*** Next Task ***\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":462,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":463,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":464,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":465,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":466,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":467,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":468,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":469,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":470,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether the file is empty.","lastModifiedDate":"2022-02-07"},{"lineNumber":471,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":472,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":473,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":474,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":475,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":476,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(initial, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":477,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":478,"author":{"gitId":"Denniszedead"},"content":"            // Check whether the command is created","lastModifiedDate":"2022-02-07"},{"lineNumber":479,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"EVENT\", \"Event 1 /at 03/05/2022 1800\");","lastModifiedDate":"2022-02-07"},{"lineNumber":480,"author":{"gitId":"Denniszedead"},"content":"            result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":481,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":482,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":483,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether data is saved in the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":484,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":485,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":486,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":487,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":488,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":489,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":490,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":491,"author":{"gitId":"Denniszedead"},"content":"            // Clears the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":492,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":493,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":494,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":495,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":496,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":497,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":498,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":499,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":500,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":501,"author":{"gitId":"Denniszedead"},"content":"    void deleteCommand_deleteWithoutNumber_throwEmptyNumberException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":502,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeDeleteCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":503,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":504,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":505,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":506,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":507,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DELETE\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":508,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":509,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":510,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":511,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Delete needs a number\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":512,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":513,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":514,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":515,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":516,"author":{"gitId":"Denniszedead"},"content":"    void deleteCommand_deleteWithInvalidNumber_throwInvalidNumberException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":517,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeDeleteCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":518,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":519,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":520,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":521,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":522,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DELETE\", \"One\");","lastModifiedDate":"2022-02-07"},{"lineNumber":523,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":524,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":525,"author":{"gitId":"Denniszedead"},"content":"        } catch (DukeExceptions e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":526,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"You have entered an invalid number!\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":527,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":528,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":529,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":530,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":531,"author":{"gitId":"Denniszedead"},"content":"    void deleteCommand_correctDelete_deleteTaskInList() {","lastModifiedDate":"2022-02-07"},{"lineNumber":532,"author":{"gitId":"Denniszedead"},"content":"        String expectedOne \u003d \"Deleted the following task:\\n[T][ ] Task 1\";","lastModifiedDate":"2022-02-07"},{"lineNumber":533,"author":{"gitId":"Denniszedead"},"content":"        String expectedTwo \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":534,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeDeleteCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":535,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":536,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":537,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":538,"author":{"gitId":"Denniszedead"},"content":"            tasks.addTask(Task.createTask(\"TODO\", false, \"Task 1\", null));","lastModifiedDate":"2022-02-11"},{"lineNumber":539,"author":{"gitId":"Denniszedead"},"content":"            storage.updateData(tasks);","lastModifiedDate":"2022-02-07"},{"lineNumber":540,"author":{"gitId":"Denniszedead"},"content":"            File dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":541,"author":{"gitId":"Denniszedead"},"content":"            Scanner sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":542,"author":{"gitId":"Denniszedead"},"content":"            FileWriter fw \u003d new FileWriter(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":543,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":544,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"DELETE\", \"1\");","lastModifiedDate":"2022-02-07"},{"lineNumber":545,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":546,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedOne, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":547,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":548,"author":{"gitId":"Denniszedead"},"content":"            // Checks whether data is no longer in the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":549,"author":{"gitId":"Denniszedead"},"content":"            result \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":550,"author":{"gitId":"Denniszedead"},"content":"            sc \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-07"},{"lineNumber":551,"author":{"gitId":"Denniszedead"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2022-02-07"},{"lineNumber":552,"author":{"gitId":"Denniszedead"},"content":"                result +\u003d sc.nextLine() + \"\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":553,"author":{"gitId":"Denniszedead"},"content":"            }","lastModifiedDate":"2022-02-07"},{"lineNumber":554,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expectedTwo, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":555,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":556,"author":{"gitId":"Denniszedead"},"content":"            // Clears the dataFile.","lastModifiedDate":"2022-02-07"},{"lineNumber":557,"author":{"gitId":"Denniszedead"},"content":"            fw.write(\"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":558,"author":{"gitId":"Denniszedead"},"content":"            fw.close();","lastModifiedDate":"2022-02-07"},{"lineNumber":559,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":560,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":561,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":562,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":563,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":564,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":565,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":566,"author":{"gitId":"Denniszedead"},"content":"    void createFindCmd_findWithoutKeyword_throwEmptyKeywordException() {","lastModifiedDate":"2022-02-07"},{"lineNumber":567,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeFindCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":568,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":569,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":570,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":571,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":572,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"FIND\", \"\");","lastModifiedDate":"2022-02-07"},{"lineNumber":573,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":574,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-07"},{"lineNumber":575,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":576,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(\"Please enter a keyword for find command!\", e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":577,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":578,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":579,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":580,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-07"},{"lineNumber":581,"author":{"gitId":"Denniszedead"},"content":"    void createFindCommand_findWithKeyword_returnTaskListWithKeyword() {","lastModifiedDate":"2022-02-07"},{"lineNumber":582,"author":{"gitId":"Denniszedead"},"content":"        String expected \u003d \"These are the tasks that have the keyword \\\"CS2103\\\"\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":583,"author":{"gitId":"Denniszedead"},"content":"                + \"1. [T][ ] CS2103 Task 1\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":584,"author":{"gitId":"Denniszedead"},"content":"                + \"2. [D][X] CS2103 Deadline 1 (by: 10 Feb 2022 11:59 PM)\\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":585,"author":{"gitId":"Denniszedead"},"content":"                + \"3. [E][X] CS2103 Exam 1 (at: 01 Jan 2022 11:59 PM)\\n\";","lastModifiedDate":"2022-02-07"},{"lineNumber":586,"author":{"gitId":"Denniszedead"},"content":"        String fileName \u003d \"data/test/dukeFindCmdTest.txt\";","lastModifiedDate":"2022-02-07"},{"lineNumber":587,"author":{"gitId":"Denniszedead"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-07"},{"lineNumber":588,"author":{"gitId":"Denniszedead"},"content":"        Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-07"},{"lineNumber":589,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":590,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-07"},{"lineNumber":591,"author":{"gitId":"Denniszedead"},"content":"            tasks \u003d storage.getData();","lastModifiedDate":"2022-02-07"},{"lineNumber":592,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":593,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"FIND\", \"CS2103\");","lastModifiedDate":"2022-02-07"},{"lineNumber":594,"author":{"gitId":"Denniszedead"},"content":"            String result \u003d cmd.run(tasks, storage);","lastModifiedDate":"2022-02-07"},{"lineNumber":595,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, result);","lastModifiedDate":"2022-02-07"},{"lineNumber":596,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-07"},{"lineNumber":597,"author":{"gitId":"Denniszedead"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-07"},{"lineNumber":598,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-01-29"},{"lineNumber":599,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-01-29"},{"lineNumber":600,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":601,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":602,"author":{"gitId":"Denniszedead"},"content":"    @Test","lastModifiedDate":"2022-02-10"},{"lineNumber":603,"author":{"gitId":"Denniszedead"},"content":"    void createHelpCommand_helpCommand_returnsStringWithHelpOfAllCommands() {","lastModifiedDate":"2022-02-10"},{"lineNumber":604,"author":{"gitId":"Denniszedead"},"content":"        String expected \u003d \"Here are the tasks avaliable for duke:\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":605,"author":{"gitId":"Denniszedead"},"content":"                + \"List: Shows all the tasks in duke\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":606,"author":{"gitId":"Denniszedead"},"content":"                + \"Mark \u003cnumber\u003e: Marks the task in the index \u003cnumber\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":607,"author":{"gitId":"Denniszedead"},"content":"                + \"Unmark \u003cnumber\u003e: Unmarks the task in the index \u003cnumber\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":608,"author":{"gitId":"Denniszedead"},"content":"                + \"Find \u003ckeyword\u003e: finds all the task that contains \u003ckeyword\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":609,"author":{"gitId":"Denniszedead"},"content":"                + \"Delete \u003cnumber\u003e: Deletes the task in index \u003cnumber\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":610,"author":{"gitId":"Denniszedead"},"content":"                + \"Todo \u003cname of todo\u003e: Creates a new todo \u003cname of todo\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":611,"author":{"gitId":"Denniszedead"},"content":"                + \"Deadline \u003cname of deadline\u003e \u003cdate of deadline in dd/mm/yyyy HHmm\u003e: \"","lastModifiedDate":"2022-02-10"},{"lineNumber":612,"author":{"gitId":"Denniszedead"},"content":"                + \"Creates a new deadline \u003cname of deadline\u003e at \u003cdate of deadline in dd/mm/yyyy HHmm\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":613,"author":{"gitId":"Denniszedead"},"content":"                + \"Event \u003cname of deadline\u003e \u003cdate of deadline in dd/mm/yyyy HHmm\u003e: \"","lastModifiedDate":"2022-02-10"},{"lineNumber":614,"author":{"gitId":"Denniszedead"},"content":"                + \"Creates a new event \u003cname of deadline\u003e at \u003cdate of deadline in dd/mm/yyyy HHmm\u003e\\n\"","lastModifiedDate":"2022-02-10"},{"lineNumber":615,"author":{"gitId":"Denniszedead"},"content":"                + \"Bye: Exits duke.\";","lastModifiedDate":"2022-02-10"},{"lineNumber":616,"author":{"gitId":"Denniszedead"},"content":"        try {","lastModifiedDate":"2022-02-10"},{"lineNumber":617,"author":{"gitId":"Denniszedead"},"content":"            Command cmd \u003d Command.getCommand(\"HELP\", \"\");","lastModifiedDate":"2022-02-10"},{"lineNumber":618,"author":{"gitId":"Denniszedead"},"content":"            Storage storage \u003d new Storage(fileName);","lastModifiedDate":"2022-02-10"},{"lineNumber":619,"author":{"gitId":"Denniszedead"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-02-10"},{"lineNumber":620,"author":{"gitId":"Denniszedead"},"content":"            Assertions.assertEquals(expected, cmd.run(tasks, storage));","lastModifiedDate":"2022-02-10"},{"lineNumber":621,"author":{"gitId":"Denniszedead"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-02-10"},{"lineNumber":622,"author":{"gitId":"Denniszedead"},"content":"            Assertions.fail();","lastModifiedDate":"2022-02-10"},{"lineNumber":623,"author":{"gitId":"Denniszedead"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":624,"author":{"gitId":"Denniszedead"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":625,"author":{"gitId":"Denniszedead"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":626,"author":{"gitId":"Denniszedead"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"Denniszedead":626}}]
