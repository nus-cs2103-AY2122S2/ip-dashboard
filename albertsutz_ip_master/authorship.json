[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":" * Main logic of the bot.","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"    private final Ui ui;","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    private TasksList taskslist;","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    private Parser parser;","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     * Constructs Duke object.","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * Initializes the UI, TasksList, Storage, and Parser for use.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"    public Duke() {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        this.taskslist \u003d new TasksList();","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     * Runs the main logic of Duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"     * Stops after user input \u003d\u003d \"bye\".","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"    public void run() {","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"        this.ui.greetUser();","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"            String response \u003d taskslist.importStorageStrings(storage.importData());","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"            ui.print(response);","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"            ui.print(e.getMessage());","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"        while (true) {","lastModifiedDate":"2022-01-20"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"            String instruction \u003d sc.nextLine();","lastModifiedDate":"2022-01-31"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"            String log \u003d parser.parse(instruction, taskslist, storage);","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"            ui.print(log);","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"            if (log \u003d\u003d \"BYE\") {","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"                return;","lastModifiedDate":"2022-01-24"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-20"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-27"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"        new Duke().run();","lastModifiedDate":"2022-01-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"albertsutz":53,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-01-31"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import duke.util.Constants;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":" * Main logic to parse and translate user inputs.","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"public class Parser {","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"     * Translates user inputs and performs the supposed actions.","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     * @param data      User input.","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * @param tasksList TasksList variable from Duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     * @param storage   Storage variable from Duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed by the UI.","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"    public String parse(String data, TasksList tasksList, Storage storage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"            String[] instruction \u003d data.split(\" \");","lastModifiedDate":"2022-01-31"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"            if (instruction.length \u003d\u003d 0 || !Constants.commands.contains(instruction[0])) {","lastModifiedDate":"2022-01-31"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2022-01-31"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"            if (instruction[0].equals(\"bye\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"                return \"BYE\";","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"list\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.list();","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"mark\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"                int taskNum \u003d Integer.parseInt(instruction[1]);","lastModifiedDate":"2022-01-31"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.mark(taskNum);","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"unmark\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"                int taskNum \u003d Integer.parseInt(instruction[1]);","lastModifiedDate":"2022-01-31"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.unmark(taskNum);","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"delete\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"                int taskNum \u003d Integer.parseInt(instruction[1]);","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.deleteTask(taskNum);","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"todo\") || instruction[0].equals(\"event\") || instruction[0].equals(\"deadline\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.addTask(Arrays.asList(instruction));","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"save\")) {","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"                String response \u003d storage.exportData(tasksList.toStorageStrings(), tasksList.list());","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"            } else if (instruction[0].equals(\"find\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"                String response \u003d tasksList.findMatchingTasks(Arrays.asList(instruction));","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"                return response;","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"            return e.getMessage();","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"        return \"Nothing\";","lastModifiedDate":"2022-01-31"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-31"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-31"}],"authorContributionMap":{"albertsutz":68}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.util.Constants;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.io.File;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":" * Main logic for storing data to filesystem.","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"public class Storage {","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"     * Saves current tasks snapshot to a file.","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"     * The file is stored in \"data/duke.txt\".","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"     * @param storageStrings List of texts to be saved. Each text represents 1 task.","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"     * @param taskListString Text from Task.list method. For printing purposes.","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"    public String exportData(List\u003cString\u003e storageStrings, String taskListString) {","lastModifiedDate":"2022-01-31"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"        String response \u003d \"The following tasks will be saved: \\n\" + taskListString;","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"        Path dir \u003d Paths.get(Constants.DIR_PATH);","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"        Path store \u003d Paths.get(Constants.STORAGE_PATH);","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-01-31"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"            if (!Files.exists(dir)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"                Files.createDirectory(dir);","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"                Files.createFile(store);","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"            } else if (!Files.exists(store)) {","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"                Files.createFile(store);","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"            FileWriter writer \u003d new FileWriter(Constants.STORAGE_PATH);","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"            for (String task : storageStrings) {","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"                writer.write(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"            writer.close();","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"            return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"            return e.getMessage();","lastModifiedDate":"2022-01-31"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"     * Imports previous tasks snapshot from a file if present.","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"     * The file is stored in \"data/duke.txt\".","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"    public List\u003cString\u003e importData() {","lastModifiedDate":"2022-01-31"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"        List\u003cString\u003e storageStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"        if (Files.exists(Paths.get(Constants.STORAGE_PATH))) {","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"            File f \u003d new File(Constants.STORAGE_PATH);","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"            try {","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"                Scanner fileScanner \u003d new Scanner(f);","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"                while (fileScanner.hasNextLine()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"                    storageStrings.add(fileScanner.nextLine());","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"                }","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2022-01-31"},{"lineNumber":71,"author":{"gitId":"albertsutz"},"content":"                return storageStrings;","lastModifiedDate":"2022-01-31"},{"lineNumber":72,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-31"},{"lineNumber":73,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":74,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"albertsutz"},"content":"        return storageStrings;","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":77,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"albertsutz":77}},{"path":"src/main/java/duke/TasksList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":" * Main layer of abstraction as a container of Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"public class TasksList {","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * TasksList constructor method.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     * Uses ArrayList\u003cTask\u003e as its core.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"    public TasksList() {","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"     * Adds user input task to the taskslist.","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     * @param instructions List of user input words.","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If user input argument format is unknown/invalid.","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"    public String addTask(List\u003cString\u003e instructions) throws InvalidArgumentException {","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"        Task newTask \u003d Task.createTask(instructions);","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"        tasks.add(newTask);","lastModifiedDate":"2022-01-28"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"        String response;","lastModifiedDate":"2022-01-28"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"        response \u003d String.format(\"Got it. I\u0027ve added this task\\n\" + newTask + \"\\n\" +","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"                \"You have %d tasks in the list\", this.tasks.size());","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"        return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"     * Deletes task of certain index from the taskslist.","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"     * @param index Index of the task (1 based).","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidIndexException If index is out of bounds.","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"    public String deleteTask(int index) throws InvalidIndexException {","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"        if (index \u003e this.tasks.size()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-01-28"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"        String response \u003d String.format(\"Ok, I will remove this task: \\n %s\", tasks.get(index - 1));","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2022-01-28"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"        return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"     * Returns the list of tasks in the form of String / text.","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"     * @return List of tasks with numberings in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"    public String list() {","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"        StringBuilder response \u003d new StringBuilder(\"\");","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"            return \"You have 0 task\";","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"albertsutz"},"content":"            response.append(String.format((i + 1) + \". \" + tasks.get(i) + \"\\n\"));","lastModifiedDate":"2022-01-28"},{"lineNumber":72,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"albertsutz"},"content":"        return response.toString();","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":75,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":76,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"albertsutz"},"content":"     * Changes task status to marked.","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"albertsutz"},"content":"     * @param index Index of the task (1 based).","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidIndexException If index is out of bounds.","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"albertsutz"},"content":"    public String mark(int index) throws InvalidIndexException {","lastModifiedDate":"2022-01-28"},{"lineNumber":84,"author":{"gitId":"albertsutz"},"content":"        if (index \u003e this.tasks.size()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":85,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-01-28"},{"lineNumber":86,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":87,"author":{"gitId":"albertsutz"},"content":"        String response \u003d tasks.get(index - 1).markAsDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":88,"author":{"gitId":"albertsutz"},"content":"        return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":89,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":90,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":91,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"albertsutz"},"content":"     * Changes task status to unmarked.","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"albertsutz"},"content":"     * @param index Index of the task (1 based).","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidIndexException If index is out of bounds.","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"albertsutz"},"content":"    public String unmark(int index) throws InvalidIndexException {","lastModifiedDate":"2022-01-28"},{"lineNumber":99,"author":{"gitId":"albertsutz"},"content":"        if (index \u003e this.tasks.size()) {","lastModifiedDate":"2022-01-28"},{"lineNumber":100,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-01-28"},{"lineNumber":101,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":102,"author":{"gitId":"albertsutz"},"content":"        String response \u003d tasks.get(index - 1).markAsNotDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":103,"author":{"gitId":"albertsutz"},"content":"        return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":104,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":105,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":106,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"albertsutz"},"content":"     * Returns the tasks list in text format for storage.","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"albertsutz"},"content":"     * The text format follows the initial user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":110,"author":{"gitId":"albertsutz"},"content":"     * @return List of texts. Each text represents 1 task.","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":112,"author":{"gitId":"albertsutz"},"content":"    public List\u003cString\u003e toStorageStrings() {","lastModifiedDate":"2022-01-28"},{"lineNumber":113,"author":{"gitId":"albertsutz"},"content":"        List\u003cString\u003e responses \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-28"},{"lineNumber":114,"author":{"gitId":"albertsutz"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-01-28"},{"lineNumber":115,"author":{"gitId":"albertsutz"},"content":"            responses.add(task.toStorageString() + \"\\n\");","lastModifiedDate":"2022-01-28"},{"lineNumber":116,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":117,"author":{"gitId":"albertsutz"},"content":"        return responses;","lastModifiedDate":"2022-01-28"},{"lineNumber":118,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":119,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":120,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":121,"author":{"gitId":"albertsutz"},"content":"     * Gets the number of tasks in the taskslists.","lastModifiedDate":"2022-02-01"},{"lineNumber":122,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"albertsutz"},"content":"     * @return Number of tasks.","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":125,"author":{"gitId":"albertsutz"},"content":"    public int getSize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":126,"author":{"gitId":"albertsutz"},"content":"        return this.tasks.size();","lastModifiedDate":"2022-02-01"},{"lineNumber":127,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":128,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":129,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":130,"author":{"gitId":"albertsutz"},"content":"     * Imports tasks from a list of strings (each representing 1 task).","lastModifiedDate":"2022-02-01"},{"lineNumber":131,"author":{"gitId":"albertsutz"},"content":"     * The tasksStrings is from history storage.","lastModifiedDate":"2022-02-01"},{"lineNumber":132,"author":{"gitId":"albertsutz"},"content":"     * This method is the counterpart of toStorageStrings().","lastModifiedDate":"2022-02-01"},{"lineNumber":133,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":134,"author":{"gitId":"albertsutz"},"content":"     * @param tasksStrings List of tasks in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":135,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":136,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If any of the task\u0027s format is unknown/invalid.","lastModifiedDate":"2022-02-01"},{"lineNumber":137,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":138,"author":{"gitId":"albertsutz"},"content":"    public String importStorageStrings(List\u003cString\u003e tasksStrings) throws InvalidArgumentException {","lastModifiedDate":"2022-01-28"},{"lineNumber":139,"author":{"gitId":"albertsutz"},"content":"        for (String taskString : tasksStrings) {","lastModifiedDate":"2022-01-28"},{"lineNumber":140,"author":{"gitId":"albertsutz"},"content":"            List\u003cString\u003e description \u003d Arrays.asList(taskString.split(\" \"));","lastModifiedDate":"2022-01-28"},{"lineNumber":141,"author":{"gitId":"albertsutz"},"content":"            Boolean isDone \u003d description.get(0).equals(\"X\");","lastModifiedDate":"2022-01-28"},{"lineNumber":142,"author":{"gitId":"albertsutz"},"content":"            Task task \u003d Task.createTask(description.subList(1, description.size()));","lastModifiedDate":"2022-01-28"},{"lineNumber":143,"author":{"gitId":"albertsutz"},"content":"            if (isDone) {","lastModifiedDate":"2022-01-28"},{"lineNumber":144,"author":{"gitId":"albertsutz"},"content":"                task.markAsDone();","lastModifiedDate":"2022-01-28"},{"lineNumber":145,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":146,"author":{"gitId":"albertsutz"},"content":"            tasks.add(task);","lastModifiedDate":"2022-01-28"},{"lineNumber":147,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":148,"author":{"gitId":"albertsutz"},"content":"        String response;","lastModifiedDate":"2022-01-28"},{"lineNumber":149,"author":{"gitId":"albertsutz"},"content":"        if (tasks.size() !\u003d 0) {","lastModifiedDate":"2022-01-28"},{"lineNumber":150,"author":{"gitId":"albertsutz"},"content":"            response \u003d \"I managed to retrieve your previous data!\\nHere it is: \\n\" + this.list();","lastModifiedDate":"2022-01-28"},{"lineNumber":151,"author":{"gitId":"albertsutz"},"content":"        } else {","lastModifiedDate":"2022-01-28"},{"lineNumber":152,"author":{"gitId":"albertsutz"},"content":"            response \u003d \"As a new user, try to add task and I will store them for you!\";","lastModifiedDate":"2022-01-28"},{"lineNumber":153,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":154,"author":{"gitId":"albertsutz"},"content":"        return response;","lastModifiedDate":"2022-01-28"},{"lineNumber":155,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":157,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":158,"author":{"gitId":"albertsutz"},"content":"     * Finds all tasks that contain a certain keyword.","lastModifiedDate":"2022-02-01"},{"lineNumber":159,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":160,"author":{"gitId":"albertsutz"},"content":"     * @param instruction User input.","lastModifiedDate":"2022-02-01"},{"lineNumber":161,"author":{"gitId":"albertsutz"},"content":"     * @return Tasks in text format that contains keyword to be found.","lastModifiedDate":"2022-02-01"},{"lineNumber":162,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no keyword inputted.","lastModifiedDate":"2022-02-01"},{"lineNumber":163,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":164,"author":{"gitId":"albertsutz"},"content":"    public String findMatchingTasks(List\u003cString\u003e instruction) throws InvalidArgumentException {","lastModifiedDate":"2022-02-07"},{"lineNumber":165,"author":{"gitId":"albertsutz"},"content":"        if (instruction.size() \u003d\u003d 1) {","lastModifiedDate":"2022-02-01"},{"lineNumber":166,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidArgumentException();","lastModifiedDate":"2022-02-01"},{"lineNumber":167,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":168,"author":{"gitId":"albertsutz"},"content":"        StringBuilder response \u003d new StringBuilder(\"\");","lastModifiedDate":"2022-02-01"},{"lineNumber":169,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":170,"author":{"gitId":"albertsutz"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":171,"author":{"gitId":"albertsutz"},"content":"            if (tasks.get(i).getName().contains(instruction.get(1))) {","lastModifiedDate":"2022-02-07"},{"lineNumber":172,"author":{"gitId":"albertsutz"},"content":"                response.append(String.format((i + 1) + \". \" + tasks.get(i) + \"\\n\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":173,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":174,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":175,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":176,"author":{"gitId":"albertsutz"},"content":"        if (response.toString().equals(\"\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":177,"author":{"gitId":"albertsutz"},"content":"            return \"I did not find anything related to your search: \" + instruction.get(1);","lastModifiedDate":"2022-02-01"},{"lineNumber":178,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":179,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":180,"author":{"gitId":"albertsutz"},"content":"        return \"Found some tasks related to your search: \" + instruction.get(1) + \"\\n\" + response.toString();","lastModifiedDate":"2022-02-01"},{"lineNumber":181,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":182,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"albertsutz":182}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.util.Constants;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":" * Main UI logic of the bot.","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"public class Ui {","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"     * Prints a GAP added text for differentiating user and app texts.","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"     * @param text Text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"    public void print(String text) {","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"        List\u003cString\u003e lines \u003d Arrays.asList(text.split(\"\\n\"));","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"        for (String line : lines) {","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"            System.out.println(Constants.GAP + line);","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        System.out.println(Constants.LINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"     * Prints initial greetings when the app starts.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"    public void greetUser() {","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"        System.out.println(Constants.LINE);","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"        print(\"Hello from\\n\" + Constants.LOGO);","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"        print(\"I am a chat bot and I\u0027m here to help you be productive :)\\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"                \"What can I do for you today?\");","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"     * Prints goodbye message before the app ends.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"    public void finalBye() {","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"        print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"albertsutz":42}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.exception;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":" * Main Logic of basic exception for Duke.","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"     * Constructs the DukeException objects.","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"     * This class is to group Duke related exceptions together.","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"     * @param err error message.","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    public DukeException(String err) {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"        super(err);","lastModifiedDate":"2022-01-20"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":17}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.exception;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":" * A specialised exception for invalid argument.","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"     * Constructs the InvalidArgumentException class.","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"     * This exception occurs when the user input format is invalid but with some known parts.","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    public InvalidArgumentException() {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"        super(\"Hmm, I recognized your command but it seems like the arguments are not complete / invalid.\");","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":15}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.exception;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":" * A specialised exception for invalid/unknown command.","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"     * Constructs the InvalidCommandException class.","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"     * This exception occurs when the user input format is unknown.","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"        super(\"Sorry, I did not recognize your command.\");","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":15}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.exception;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":" * A specialised exception for invalid index.","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":" * Triggered if index \u003c 0 or \u003e\u003d size.","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"public class InvalidIndexException extends DukeException {","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"     * Constructs the InvalidIndexException class.","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"     * This exception occurs when user input index is out of bounds.","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    public InvalidIndexException() {","lastModifiedDate":"2022-01-24"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"        super(\"Sorry, your argument has invalid Index. Hint: Use \\\"list\\\" command to help you\");","lastModifiedDate":"2022-01-24"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-24"}],"authorContributionMap":{"albertsutz":16}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":" * A Deadline is a specialization of a Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"    private final LocalDate by;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * Constructs Deadline class.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     * Event constructor accepts the description of the task and when the task\u0027s deadline.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"     * @param name Description of the deadline task.","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"     * @param by   Time indicator of the deadline task.","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"    Deadline(String name, String by) {","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"        super(name);","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"        if (isValid(by)) {","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"            this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2022-01-27"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"        } else {","lastModifiedDate":"2022-01-27"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"            this.by \u003d LocalDate.now();","lastModifiedDate":"2022-01-27"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"     * Validates whether the input is a date.","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"     * @param date Input value to validate.","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"     * @return True if the input value is a date, false otherwise.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"    private Boolean isValid(String date) {","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"            LocalDate.parse(date);","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"            return false;","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"        return true;","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"     * Constructs a Deadline object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the Deadline task in array format.","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"     * @return the Deadline object.","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description or time indicator.","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"    public static Deadline of(String[] description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"        return Deadline.of(Arrays.asList(description));","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"     * Constructs a Deadline object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the deadline task in List format.","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"     * @return the Deadline object.","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description or time indicator.","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"    public static Deadline of(List\u003cString\u003e description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"        if (description.size() \u003d\u003d 1) {","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidArgumentException();","lastModifiedDate":"2022-01-24"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"        int index \u003d description.indexOf(\"/by\");","lastModifiedDate":"2022-01-27"},{"lineNumber":71,"author":{"gitId":"albertsutz"},"content":"        String name \u003d String.join(\" \", description.subList(1, index));","lastModifiedDate":"2022-01-27"},{"lineNumber":72,"author":{"gitId":"albertsutz"},"content":"        String by \u003d String.join(\" \", description.subList(index + 1, description.size()));","lastModifiedDate":"2022-01-27"},{"lineNumber":73,"author":{"gitId":"albertsutz"},"content":"        return new Deadline(name, by);","lastModifiedDate":"2022-01-24"},{"lineNumber":74,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":75,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":76,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the deadline task.","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"albertsutz"},"content":"     * This method is used for storing deadline task.","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"albertsutz"},"content":"    public String toStorageString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"albertsutz"},"content":"        String status \u003d getStatus() ? \"X\" : \".\";","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"albertsutz"},"content":"        return String.format(status + \" deadline \" + getName() + \" /by \" + by);","lastModifiedDate":"2022-01-27"},{"lineNumber":86,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":87,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":88,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the deadline task for User.","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":94,"author":{"gitId":"albertsutz"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":95,"author":{"gitId":"albertsutz"},"content":"        return String.format(\"[D]\" + super.toString() + \"(by: \" + by.format(DateTimeFormatter.ofPattern(\"MMMM d yyyy\")) + \")\");","lastModifiedDate":"2022-01-27"},{"lineNumber":96,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":97,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":97}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":" * An Event is a specialization of a Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    private final String at;","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"     * Constructs Event class.","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"     * Event constructor accepts the description of the task and when the task will be done.","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * @param name Description of the event task.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     * @param at   Time indicator of the event task.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"    Event(String name, String at) {","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        super(name);","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"     * Constructs an Event object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the Event task in array format.","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"     * @return the Event object.","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description or time indicator.","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"    public static Event of(String[] description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"        return Event.of(Arrays.asList(description));","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"     * Constructs an Event object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the event task in List format.","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"     * @return the Event object.","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description or time indicator.","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"    public static Event of(List\u003cString\u003e description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"        if (description.size() \u003d\u003d 1) {","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidArgumentException();","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"        int index \u003d description.indexOf(\"/at\");","lastModifiedDate":"2022-01-27"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"        String name \u003d String.join(\" \", description.subList(1, index));","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"        String at \u003d String.join(\" \", description.subList(index + 1, description.size()));","lastModifiedDate":"2022-01-27"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"        return new Event(name, at);","lastModifiedDate":"2022-01-24"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the event task.","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"     * This method is used for storing event task.","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"    public String toStorageString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"        String status \u003d getStatus() ? \"X\" : \".\";","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"        return String.format(status + \" event \" + getName() + \" /at \" + at);","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the event task for User.","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":72,"author":{"gitId":"albertsutz"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":73,"author":{"gitId":"albertsutz"},"content":"        return String.format(\"[E]\" + super.toString() + \"(at: \" + at + \")\");","lastModifiedDate":"2022-01-20"},{"lineNumber":74,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":75,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":75}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":" * Main abstraction of a Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"public class Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"    private final String name;","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    //can make isDone final for good practice","lastModifiedDate":"2022-01-20"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"     * Constructs Task class.","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     * The constructor takes in the description of the task.","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     * The default isDone status of the object is false.","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"     * @param name description of the task.","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"    public Task(String name) {","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-20"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     * Switches task isDone status.","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"    public void switchStatus() {","lastModifiedDate":"2022-01-20"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"        this.isDone \u003d !this.isDone;","lastModifiedDate":"2022-01-20"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"     * Switches task isDone status to true.","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to indicate whether the action is successful.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"    public String markAsDone() {","lastModifiedDate":"2022-01-24"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"        String output;","lastModifiedDate":"2022-01-24"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"            output \u003d \"Sorry, the task is actually done!\";","lastModifiedDate":"2022-01-24"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"            output \u003d String.format(\"Nice!, I have marked this task as done: \\n      %s\", this);","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-20"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"        return output;","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"     * Switches task isDone status to false.","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"     * @return Response text to indicate whether the action is successful.","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"    public String markAsNotDone() {","lastModifiedDate":"2022-01-24"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"        String output;","lastModifiedDate":"2022-01-24"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"        if (!this.isDone) {","lastModifiedDate":"2022-01-24"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"            output \u003d \"Sorry, the task has not been done!\";","lastModifiedDate":"2022-01-24"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"        } else {","lastModifiedDate":"2022-01-24"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"            output \u003d String.format(\"Ok, I have marked this task as not done: \\n      %s\", this);","lastModifiedDate":"2022-01-24"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-20"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"        return output;","lastModifiedDate":"2022-01-24"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"     * Creates a Task object.","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"     * This is a factory constructor that calls the factor constructor of its appropriate child classes.","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"     * @param description Task description from user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":71,"author":{"gitId":"albertsutz"},"content":"     * @return Response Text to be printed.","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If the user input format is invalid/unknown.","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"albertsutz"},"content":"    public static Task createTask(List\u003cString\u003e description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":75,"author":{"gitId":"albertsutz"},"content":"        if (description.get(0).equals(\"todo\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":76,"author":{"gitId":"albertsutz"},"content":"            return Todo.of(description);","lastModifiedDate":"2022-01-27"},{"lineNumber":77,"author":{"gitId":"albertsutz"},"content":"        } else if (description.get(0).equals(\"deadline\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":78,"author":{"gitId":"albertsutz"},"content":"            return Deadline.of(description);","lastModifiedDate":"2022-01-27"},{"lineNumber":79,"author":{"gitId":"albertsutz"},"content":"        } else if (description.get(0).equals(\"event\")) {","lastModifiedDate":"2022-01-27"},{"lineNumber":80,"author":{"gitId":"albertsutz"},"content":"            return Event.of(description);","lastModifiedDate":"2022-01-27"},{"lineNumber":81,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":82,"author":{"gitId":"albertsutz"},"content":"        throw new InvalidArgumentException();","lastModifiedDate":"2022-01-27"},{"lineNumber":83,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":84,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":85,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"albertsutz"},"content":"     * Gets the isDone status in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":87,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":88,"author":{"gitId":"albertsutz"},"content":"     * @return isDone status in text.","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"albertsutz"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-20"},{"lineNumber":91,"author":{"gitId":"albertsutz"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-20"},{"lineNumber":92,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":93,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":94,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"albertsutz"},"content":"     * Gets the name variable.","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"albertsutz"},"content":"     * The name is the description of the Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":97,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":98,"author":{"gitId":"albertsutz"},"content":"     * @return name variable.","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"albertsutz"},"content":"    public String getName() {","lastModifiedDate":"2022-02-07"},{"lineNumber":101,"author":{"gitId":"albertsutz"},"content":"        return this.name;","lastModifiedDate":"2022-01-27"},{"lineNumber":102,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":103,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":104,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"albertsutz"},"content":"     * Gets the isDone status.","lastModifiedDate":"2022-02-01"},{"lineNumber":106,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"albertsutz"},"content":"     * @return isDone status.","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"albertsutz"},"content":"    public Boolean getStatus() {","lastModifiedDate":"2022-02-07"},{"lineNumber":110,"author":{"gitId":"albertsutz"},"content":"        return this.isDone;","lastModifiedDate":"2022-01-27"},{"lineNumber":111,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":112,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":113,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":114,"author":{"gitId":"albertsutz"},"content":"     * Returns the tasks in text format for storage.","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"albertsutz"},"content":"     * The text format follows the initial user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":116,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":117,"author":{"gitId":"albertsutz"},"content":"    public String toStorageString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":118,"author":{"gitId":"albertsutz"},"content":"        String status \u003d isDone ? \"X\" : \".\";","lastModifiedDate":"2022-01-27"},{"lineNumber":119,"author":{"gitId":"albertsutz"},"content":"        return String.format(status + \" task \" + name);","lastModifiedDate":"2022-01-27"},{"lineNumber":120,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":121,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":122,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the task for User.","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":125,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":126,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":127,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":128,"author":{"gitId":"albertsutz"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":129,"author":{"gitId":"albertsutz"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.name);","lastModifiedDate":"2022-01-20"},{"lineNumber":130,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":131,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":131}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.task;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-01-24"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":" * An Todo is a specialization of a Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-20"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"     * Constructs Todo class.","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"     * Todo constructor accepts the description of the task.","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"     * @param name Description of the task.","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"    public Todo(String name) {","lastModifiedDate":"2022-01-20"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"        super(name);","lastModifiedDate":"2022-01-20"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-20"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"     * Constructs a Todo object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the todo task in array format.","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"     * @return the Todo object.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description.","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"    public static Todo of(String[] description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-24"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"        return Todo.of(Arrays.asList(description));","lastModifiedDate":"2022-01-27"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"     * Constructs a Todo object as a factory constructor.","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"     * @param description Description of the todo task in List format.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"     * @return the Todo object.","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"     * @throws InvalidArgumentException If there is no description.","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"    public static Todo of(List\u003cString\u003e description) throws InvalidArgumentException {","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"        if (description.size() \u003d\u003d 1) {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"            throw new InvalidArgumentException();","lastModifiedDate":"2022-01-24"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"        String name \u003d String.join(\" \", description.subList(1, description.size()));","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"        return new Todo(name);","lastModifiedDate":"2022-01-24"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-24"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the todo task.","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"     * This method is used for storing todo task.","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-27"},{"lineNumber":56,"author":{"gitId":"albertsutz"},"content":"    public String toStorageString() {","lastModifiedDate":"2022-01-27"},{"lineNumber":57,"author":{"gitId":"albertsutz"},"content":"        String status \u003d getStatus() ? \"X\" : \".\";","lastModifiedDate":"2022-01-27"},{"lineNumber":58,"author":{"gitId":"albertsutz"},"content":"        return String.format(status + \" todo \" + getName());","lastModifiedDate":"2022-01-27"},{"lineNumber":59,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":60,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"albertsutz"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"albertsutz"},"content":"     * Returns text representing the todo task for User.","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"albertsutz"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"albertsutz"},"content":"     * @return Task in text format.","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"albertsutz"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"albertsutz"},"content":"    @Override","lastModifiedDate":"2022-01-20"},{"lineNumber":67,"author":{"gitId":"albertsutz"},"content":"    public String toString() {","lastModifiedDate":"2022-01-20"},{"lineNumber":68,"author":{"gitId":"albertsutz"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2022-01-20"},{"lineNumber":69,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-01-20"},{"lineNumber":70,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":70}},{"path":"src/main/java/duke/util/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.util;","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import java.util.List;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"/**","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":" * Utility class to hold all common constants.","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":" */","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"public class Constants {","lastModifiedDate":"2022-01-27"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"    public static final String LINE \u003d \"___________________________________________________________________________\";","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"    public static final String GAP \u003d \"      \";","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"    public static final String LOGO \u003d","lastModifiedDate":"2022-01-27"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"            \"████████▄  ███    █▄     ▄█   ▄█▄    ▄████████ \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"                    \"███   ▀███ ███    ███   ███ ▄███▀   ███    ███ \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"                    \"███    ███ ███    ███   ███▐██▀     ███    █▀  \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"                    \"███    ███ ███    ███  ▄█████▀     ▄███▄▄▄     \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"                    \"███    ███ ███    ███ ▀▀█████▄    ▀▀███▀▀▀     \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"                    \"███    ███ ███    ███   ███▐██▄     ███    █▄  \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"                    \"███   ▄███ ███    ███   ███ ▀███▄   ███    ███ \\n\" +","lastModifiedDate":"2022-01-27"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"                    \"████████▀  ████████▀    ███   ▀█▀   ██████████\";","lastModifiedDate":"2022-01-27"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"    public static final String DIR_PATH \u003d \"./data\";","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"    public static final String STORAGE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"    public static final List\u003cString\u003e commands \u003d List.of(\"list\", \"bye\", \"mark\", \"unmark\", \"delete\", \"todo\", \"event\", \"deadline\", \"save\", \"find\");","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"albertsutz":23}},{"path":"src/test/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"class ParserTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"    void parse_byeInstruction() {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"        TasksList tasksList \u003d new TasksList();","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"        Storage storage \u003d new Storage();","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"        String log \u003d parser.parse(\"bye\", tasksList, storage);","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\"BYE\", log);","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"    void parse_listZeroInstruction() {","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"        TasksList tasksList \u003d new TasksList();","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        Storage storage \u003d new Storage();","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"        String log \u003d parser.parse(\"list\", tasksList, storage);","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\"You have 0 task\", log);","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"albertsutz":28}},{"path":"src/test/duke/TasksListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"class TasksListTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"    void addTask() {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"            TasksList tasksList \u003d new TasksList();","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"            for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"                tasksList.addTask(Arrays.asList(\"todo\", \"Coding\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"                tasksList.addTask(Arrays.asList(\"deadline\", \"Coding\", \"/by\", \"2022-12-10\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"                tasksList.addTask(Arrays.asList(\"event\", \"Coding\", \"/at\", \"my house\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"            assertEquals(30, tasksList.getSize());","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        catch(DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"            fail();","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"    void deleteTask() {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"            TasksList tasksList \u003d new TasksList();","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"            for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"                tasksList.addTask(Arrays.asList(\"todo\", \"Coding\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"            for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"                tasksList.deleteTask(1);","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"            assertEquals(0, tasksList.getSize());","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"        catch(DukeException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"            fail();","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"albertsutz":44}},{"path":"src/test/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"package duke.task;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"class TaskTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"albertsutz"},"content":"    void switchStatus() {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"albertsutz"},"content":"        Task task \u003d new Task(\"Test task\");","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"albertsutz"},"content":"        assertEquals(false, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"albertsutz"},"content":"        task.switchStatus();","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"albertsutz"},"content":"        assertEquals(true, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"albertsutz"},"content":"        task.switchStatus();","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"albertsutz"},"content":"        assertEquals(false, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"albertsutz"},"content":"    void markAsDone() {","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"albertsutz"},"content":"        Task task \u003d new Task(\"Test task\");","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"albertsutz"},"content":"        task.markAsDone();","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"albertsutz"},"content":"        assertEquals(true, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"albertsutz"},"content":"        task.markAsDone();","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"albertsutz"},"content":"        assertEquals(true, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"albertsutz"},"content":"    void markAsNotDone() {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"albertsutz"},"content":"        Task task \u003d new Task(\"Test task\");","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"albertsutz"},"content":"        task.markAsNotDone();","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"albertsutz"},"content":"        assertEquals(false, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"albertsutz"},"content":"        task.markAsNotDone();","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"albertsutz"},"content":"        assertEquals(false, task.getStatus());","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"albertsutz"},"content":"    void getStatusIcon() {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"albertsutz"},"content":"        Task task \u003d new Task(\"Test task\");","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\" \", task.getStatusIcon());","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"albertsutz"},"content":"        task.switchStatus();","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\"X\", task.getStatusIcon());","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"albertsutz"},"content":"        task.switchStatus();","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\" \", task.getStatusIcon());","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"albertsutz"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"albertsutz"},"content":"    @Test","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"albertsutz"},"content":"    void getName() {","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"albertsutz"},"content":"        Task task \u003d new Task (\"Test task\");","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\"Test task\", task.getName());","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"albertsutz"},"content":"        task \u003d new Task (\"Test task 1 2 3\");","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"albertsutz"},"content":"        assertEquals(\"Test task 1 2 3\", task.getName());","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"albertsutz"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"albertsutz"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"albertsutz":54}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"albertsutz"},"content":"todo Task 1 testing","lastModifiedDate":"2022-01-20"},{"lineNumber":2,"author":{"gitId":"albertsutz"},"content":"deadline Task 2 testing /by Monday","lastModifiedDate":"2022-01-20"},{"lineNumber":3,"author":{"gitId":"albertsutz"},"content":"event Task 3 testing /at Tuesday","lastModifiedDate":"2022-01-20"},{"lineNumber":4,"author":{"gitId":"albertsutz"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":5,"author":{"gitId":"albertsutz"},"content":"mark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":6,"author":{"gitId":"albertsutz"},"content":"mark 3","lastModifiedDate":"2022-01-20"},{"lineNumber":7,"author":{"gitId":"albertsutz"},"content":"list","lastModifiedDate":"2022-01-20"},{"lineNumber":8,"author":{"gitId":"albertsutz"},"content":"unmark 1","lastModifiedDate":"2022-01-20"},{"lineNumber":9,"author":{"gitId":"albertsutz"},"content":"list","lastModifiedDate":"2022-01-20"}],"authorContributionMap":{"albertsutz":9}}]
