[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"    mainClassName \u003d \"duke.command.Launcher\"","lastModifiedDate":"2022-02-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"    toolVersion \u003d \u00278.32\u0027","lastModifiedDate":"2022-01-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"channne":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"Duke is a task manager chatbot. Chat with Duke by keying in commands and view Duke\u0027s replies!","lastModifiedDate":"2022-02-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"### 1. Add tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"Duke supports three tasks types: `Todo`, `Deadline` and `Event`.","lastModifiedDate":"2022-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"### 2. List tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"List all tasks that have been added to Duke!","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"### 3. Delete tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"Don\u0027t want to see a task anymore? Delete it!","lastModifiedDate":"2022-02-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"### 4. Mark and unmark tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"Mark tasks as \u0027done\u0027. Unmark them. Mark them again.","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"### 5. Find tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"Find tasks containing a specific keyword!","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"### 6. Set reminders","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"Can\u0027t remember your tasks? Let Duke do it for you!","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"### `todo [description]` - Add a `todo` task","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"Adds a `todo` task to the task manager. ","lastModifiedDate":"2022-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"Example: `todo cs2103 iP`","lastModifiedDate":"2022-02-15"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"added o.O:","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"  [T][ ] cs2103 iP","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"Now there are 1 tasks on the list x)","lastModifiedDate":"2022-02-15"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"### `deadline [description] /by [date]` - Add a `deadline` task","lastModifiedDate":"2022-02-15"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"Adds a `deadline` task to the task manager. `date` must be in `YYYY-MM-DD` format.","lastModifiedDate":"2022-02-15"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"Example: `deadline cs2103 iP /by 2022-02-18`","lastModifiedDate":"2022-02-15"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"added o.O:","lastModifiedDate":"2022-02-15"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"  [D][ ] cs2103 iP (by: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"Now there are 2 tasks on the list x)","lastModifiedDate":"2022-02-15"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"### `event [description] /at [date]` - Add an `event` task","lastModifiedDate":"2022-02-15"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"Adds an `event` task to the task manager. `date` must be in `YYYY-MM-DD` format.","lastModifiedDate":"2022-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"Example: `event cs2103 lecture /at 2022-02-18`","lastModifiedDate":"2022-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"added o.O:","lastModifiedDate":"2022-02-15"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"  [E][ ] cs2103 lecture (at: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"Now there are 3 tasks on the list x)","lastModifiedDate":"2022-02-15"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"### `list` - List tasks","lastModifiedDate":"2022-02-15"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"Lists all tasks in the task manager.","lastModifiedDate":"2022-02-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"Example: `list`","lastModifiedDate":"2022-02-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"Here are the tasks on your list :O","lastModifiedDate":"2022-02-15"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"1. [T][ ] cs2103 iP","lastModifiedDate":"2022-02-15"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"2. [D][ ] cs2103 iP (by: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"3. [E][ ] cs2103 lecture (at: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"### `delete [index]` - Delete a task","lastModifiedDate":"2022-02-15"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"Deletes a task with the given `index` from the task manager. `index` must be a **positive integer** 1, 2, 3...","lastModifiedDate":"2022-02-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"Example: `delete 1`","lastModifiedDate":"2022-02-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"deleted this item O_O:","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"  [T][ ] cs2103 iP","lastModifiedDate":"2022-02-15"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"Now there are 2 tasks on the list x)","lastModifiedDate":"2022-02-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"### `mark [index]` - Marks a task as done","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"Marks a task with the given `index` as done. `index` must be a **positive integer** 1, 2, 3...","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"Example: `mark 1`","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"Task done! \\(n_n)/","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"  [D][X] cs2103 iP (by: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"### `unmark [index]` - Marks a task as undone","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"Marks a task with the given `index` as undone. `index` must be a **positive integer** 1, 2, 3...","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"Example: `unmark 1`","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"Task not done \u003d(","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"  [D][ ] cs2103 iP (by: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"### `find [keyword]` - Find tasks with a specific keyword","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"Lists all tasks containining the specific keyword or phrase. ","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"Example: `find iP`","lastModifiedDate":"2022-02-15"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"Here are the matching tasks on your list :O","lastModifiedDate":"2022-02-15"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"1. [D][ ] cs2103 iP (by: Feb 18 2022)","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"### `remind [index] [date] [time]` - Set a reminder for a specific task","lastModifiedDate":"2022-02-15"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"Sets a reminder for the task with the given `index` at the specified `date` and `time`.","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"- `index` must be a **positive integer** 1, 2, 3...","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"- `date` must be in `YYYY-MM-DD` format.","lastModifiedDate":"2022-02-15"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"- `time` must be in HH:MM format.","lastModifiedDate":"2022-02-15"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"Example: `remind 1 2022-02-15 13:16`","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"(After setting reminder)","lastModifiedDate":"2022-02-15"},{"lineNumber":121,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":122,"author":{"gitId":"channne"},"content":":D Reminder set at 15 Feb 2022, 13:16 for task: cs2103 iP","lastModifiedDate":"2022-02-15"},{"lineNumber":123,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":124,"author":{"gitId":"channne"},"content":"(At 15 Feb 2022, 13:16)","lastModifiedDate":"2022-02-15"},{"lineNumber":125,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":126,"author":{"gitId":"channne"},"content":"!Reminder! cs2103 iP by Feb 18 2022","lastModifiedDate":"2022-02-15"},{"lineNumber":127,"author":{"gitId":"channne"},"content":"```","lastModifiedDate":"2022-02-15"},{"lineNumber":128,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":129,"author":{"gitId":"channne"},"content":"### `bye` - Exit the program","lastModifiedDate":"2022-02-15"},{"lineNumber":130,"author":{"gitId":"channne"},"content":"Exits the program.","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"channne"},"content":"Example: `bye`","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"channne"},"content":"## Command summary","lastModifiedDate":"2022-02-15"},{"lineNumber":135,"author":{"gitId":"channne"},"content":"\u003ctable\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"channne"},"content":"    \u003cth\u003eCommand\u003c/th\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"channne"},"content":"    \u003cth\u003eFormat\u003c/th\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":139,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":140,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":141,"author":{"gitId":"channne"},"content":"    \u003ctd\u003etodo\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":142,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003etodo [description]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":143,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":145,"author":{"gitId":"channne"},"content":"    \u003ctd\u003edeadline\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003edeadline [description] /by [date]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":148,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":149,"author":{"gitId":"channne"},"content":"    \u003ctd\u003eevent\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":150,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003eevent [description] /at [date]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":151,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":152,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":153,"author":{"gitId":"channne"},"content":"    \u003ctd\u003elist\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":154,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":155,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":156,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":157,"author":{"gitId":"channne"},"content":"    \u003ctd\u003edelete\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":158,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003edelete [index]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":159,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":160,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":161,"author":{"gitId":"channne"},"content":"    \u003ctd\u003emark\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":162,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003emark [index]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":163,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":164,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":165,"author":{"gitId":"channne"},"content":"    \u003ctd\u003eunmark\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":166,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003eunmark [index]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":167,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":168,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":169,"author":{"gitId":"channne"},"content":"    \u003ctd\u003efind\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":170,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003efind [keyword]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":171,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":172,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":173,"author":{"gitId":"channne"},"content":"    \u003ctd\u003eremind\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":174,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003eremind [index] [date] [time]\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":175,"author":{"gitId":"channne"},"content":"  \u003c/tr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":176,"author":{"gitId":"channne"},"content":"  \u003ctr\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":177,"author":{"gitId":"channne"},"content":"    \u003ctd\u003ebye\u003c/td\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":178,"author":{"gitId":"channne"},"content":"    \u003ctd\u003e\u003ccode\u003ebye\u003c/code\u003e\u003c/td\u003e","lastModifiedDate":"2022-02-15"}],"authorContributionMap":{"channne":155,"-":23}},{"path":"src/main/java/duke/command/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import java.util.Timer;","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import java.util.TimerTask;","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import duke.exception.IncompleteInputException;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"import duke.exception.WrongInputException;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"import duke.ui.Parser;","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"import duke.ui.ResponseGenerator;","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-02-09"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"/** An application to manage tasks */","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    static final String DEADLINE_FORMAT \u003d \"/by\";","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    static final String EVENT_FORMAT \u003d \"/at\";","lastModifiedDate":"2022-02-08"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    private Parser parser;","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    private Storage storage;","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    private ResponseGenerator responseGenerator;","lastModifiedDate":"2022-02-08"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2022-02-09"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"     * Creates a new Duke instance.","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    public Duke() {","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"        responseGenerator \u003d new ResponseGenerator();","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"            taskList \u003d storage.initialize();","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"            System.out.println(responseGenerator.getFileErrorMessage());","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"     * Sets the mainWindow reference this Duke instance to the","lastModifiedDate":"2022-02-09"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"     * given mainWindow to allow for easier communication.","lastModifiedDate":"2022-02-09"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"     * @param mainWindow The GUI of Duke.","lastModifiedDate":"2022-02-09"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"    public void setMainWindow(MainWindow mainWindow) {","lastModifiedDate":"2022-02-09"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2022-02-09"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"     * Returns Duke\u0027s startup message.","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"     * @return A startup message.","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"    public String getStartupMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"        return responseGenerator.getStartupMessage();","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"     * Returns Duke\u0027s response based on the given input.","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"     * @param input The given user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"            return responseGenerator.getByeMessage();","lastModifiedDate":"2022-02-08"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"            return responseGenerator.printItems(taskList.getItems());","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"            try {","lastModifiedDate":"2022-01-18"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"                String command \u003d parser.parseCommand(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"                if (command.equals(\"mark\") || command.equals(\"unmark\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"                    return modifyTask(input, command);","lastModifiedDate":"2022-02-15"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"                } else if (command.equals(\"delete\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"                    return deleteTask(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"                } else if (command.equals(\"remind\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"                    return setReminder(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"                } else if (command.equals(\"find\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"                    return findItems(input);","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"                } else {","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"                    return addTask(input, command);","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"                }","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"            } catch (WrongInputException | IncompleteInputException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"                return responseGenerator.getDukeErrorMessage(e);","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"                return responseGenerator.getDateTimeFormatErrorMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"                return responseGenerator.getIoErrorMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"            } catch (ArithmeticException e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"                return responseGenerator.getMaxDateTimeExceededErrorMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"                return e.getMessage();","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"    private String modifyTask(String input, String command) throws WrongInputException, IOException {","lastModifiedDate":"2022-02-15"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"        int index \u003d parser.parseNumericalDescription(input, command, taskList.size());","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"        storage.modifyTask(index);","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"        if (command.equals(\"mark\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"            return taskList.markItemDone(index);","lastModifiedDate":"2022-02-01"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-15"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"        return taskList.markItemUndone(index);","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"    private String deleteTask(String input) throws WrongInputException, IOException {","lastModifiedDate":"2022-02-15"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"        int index \u003d parser.parseNumericalDescription(input, \"delete\", taskList.size());","lastModifiedDate":"2022-02-15"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"        storage.deleteTask(index);","lastModifiedDate":"2022-01-25"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"        return taskList.deleteItem(index);","lastModifiedDate":"2022-02-01"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"    private String setReminder(String input) throws WrongInputException {","lastModifiedDate":"2022-02-15"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"        Task task \u003d parser.parseReminderDescription(input, taskList);","lastModifiedDate":"2022-02-09"},{"lineNumber":121,"author":{"gitId":"channne"},"content":"        long timeElapsed \u003d LocalDateTime.now().until(task.getReminder().getLocalDateTime(),","lastModifiedDate":"2022-02-09"},{"lineNumber":122,"author":{"gitId":"channne"},"content":"                ChronoUnit.MILLIS);","lastModifiedDate":"2022-02-09"},{"lineNumber":123,"author":{"gitId":"channne"},"content":"        new Timer().schedule(new TimerTask() {","lastModifiedDate":"2022-02-09"},{"lineNumber":124,"author":{"gitId":"channne"},"content":"            public void run() {","lastModifiedDate":"2022-02-09"},{"lineNumber":125,"author":{"gitId":"channne"},"content":"                Platform.runLater(() -\u003e","lastModifiedDate":"2022-02-09"},{"lineNumber":126,"author":{"gitId":"channne"},"content":"                        mainWindow.showReminder(responseGenerator.getReminderMessage(task)));","lastModifiedDate":"2022-02-09"},{"lineNumber":127,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":128,"author":{"gitId":"channne"},"content":"        }, timeElapsed);","lastModifiedDate":"2022-02-09"},{"lineNumber":129,"author":{"gitId":"channne"},"content":"        return responseGenerator.getAddReminderMessage(task, task.getReminder());","lastModifiedDate":"2022-02-09"},{"lineNumber":130,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":131,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":132,"author":{"gitId":"channne"},"content":"    private String findItems(String input) throws IncompleteInputException {","lastModifiedDate":"2022-02-15"},{"lineNumber":133,"author":{"gitId":"channne"},"content":"        String query \u003d parser.parseStringDescription(input, \"find\");","lastModifiedDate":"2022-02-15"},{"lineNumber":134,"author":{"gitId":"channne"},"content":"        return responseGenerator.printFoundItems(taskList.findItems(query));","lastModifiedDate":"2022-02-08"},{"lineNumber":135,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":136,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":137,"author":{"gitId":"channne"},"content":"    private String addTask(String input, String command) throws IncompleteInputException, WrongInputException,","lastModifiedDate":"2022-02-15"},{"lineNumber":138,"author":{"gitId":"channne"},"content":"            IOException {","lastModifiedDate":"2022-02-15"},{"lineNumber":139,"author":{"gitId":"channne"},"content":"        if (command.equals(\"deadline\")) {","lastModifiedDate":"2022-02-15"},{"lineNumber":140,"author":{"gitId":"channne"},"content":"            String[] description \u003d parser.parseFormatDescription(input, \"deadline\", DEADLINE_FORMAT);","lastModifiedDate":"2022-02-15"},{"lineNumber":141,"author":{"gitId":"channne"},"content":"            taskList.addTask(new Deadline(description[0], description[1]));","lastModifiedDate":"2022-02-08"},{"lineNumber":142,"author":{"gitId":"channne"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2022-01-17"},{"lineNumber":143,"author":{"gitId":"channne"},"content":"            String[] description \u003d parser.parseFormatDescription(input, \"event\", EVENT_FORMAT);","lastModifiedDate":"2022-02-15"},{"lineNumber":144,"author":{"gitId":"channne"},"content":"            taskList.addTask(new Event(description[0], description[1]));","lastModifiedDate":"2022-02-08"},{"lineNumber":145,"author":{"gitId":"channne"},"content":"        } else {","lastModifiedDate":"2022-02-15"},{"lineNumber":146,"author":{"gitId":"channne"},"content":"            String description \u003d parser.parseStringDescription(input, \"todo\");","lastModifiedDate":"2022-02-15"},{"lineNumber":147,"author":{"gitId":"channne"},"content":"            taskList.addTask(new Todo(description));","lastModifiedDate":"2022-02-15"},{"lineNumber":148,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-17"},{"lineNumber":149,"author":{"gitId":"channne"},"content":"        Task latestTask \u003d taskList.getLast();","lastModifiedDate":"2022-01-25"},{"lineNumber":150,"author":{"gitId":"channne"},"content":"        storage.addTask(latestTask);","lastModifiedDate":"2022-01-25"},{"lineNumber":151,"author":{"gitId":"channne"},"content":"        return responseGenerator.getAddTaskMessage(latestTask, taskList.size());","lastModifiedDate":"2022-02-08"},{"lineNumber":152,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"channne":151,"-":2}},{"path":"src/main/java/duke/command/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"/** A launcher for the Duke application */","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"public class Launcher {","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"     * Launches the Duke application.","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"     * @param args Not applicable in this context.","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":16}},{"path":"src/main/java/duke/command/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"/** A GUI for Duke using FXML */","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"public class Main extends Application {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"     * Starts Duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"     * @param stage The Stage used to display Duke.","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2022-02-15"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setupDisplay();","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"            stage.show();","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":36}},{"path":"src/main/java/duke/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.io.IOException;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import java.util.List;","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"import duke.ui.Parser;","lastModifiedDate":"2022-01-31"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"/** Manages the storage of data from Duke into a file */","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"public class Storage {","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    private BufferedReader reader;","lastModifiedDate":"2022-01-31"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    private Path dukePath;","lastModifiedDate":"2022-01-31"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"     * Creates a new Storage instance.","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"     * @throws IOException If I/O errors are faced when creating or reading files.","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    public Storage() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"        dukePath \u003d Paths.get(\"data/duke.txt\");","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"        if (!Files.exists(dukePath)) {","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"            Files.createDirectory(Paths.get(\"data/\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"            Files.createFile(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"        reader \u003d Files.newBufferedReader(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"     * Returns a TaskList based on any existing Duke data saved locally.","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     * @return A TaskList based on any existing Duke data saved locally.","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     * @throws IOException If I/O errors are faced when reading files.","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"    public TaskList initialize() throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"        assert reader.ready();","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-02-08"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        while (true) {","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"            String input \u003d reader.readLine();","lastModifiedDate":"2022-02-08"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"            if (input \u003d\u003d null) {","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"                break;","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"            taskList.addTask(Parser.parseFileFormat(input));","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"        return taskList;","lastModifiedDate":"2022-02-08"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"     * Adds a task to the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"     * @param t The task to be added to the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"     * @throws IOException If there are issues faced when writing the task into the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"    public void addTask(Task t) throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"        String newTask \u003d t.toFileFormatString() + \"\\n\";","lastModifiedDate":"2022-02-08"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"        Files.write(dukePath, newTask.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"     * Deletes a task from the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"     * @throws IOException If there are issues faced when reading tasks from and writing tasks into the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"    public void deleteTask(int taskIndex) throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"        List\u003cString\u003e currList \u003d Files.readAllLines(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"        for (int i \u003d 0; i \u003c currList.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"            if (i !\u003d taskIndex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"                newList.add(currList.get(i));","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        Files.delete(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"        Files.write(dukePath, newList);","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"     * Modifies an existing entry in the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"     * Converts the entry from done to undone or vice versa.","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"     * @param taskIndex The task to be modified.","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"     * @throws IOException If there are issues faced when reading tasks from and writing tasks into the file.","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"    public void modifyTask(int taskIndex) throws IOException {","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"        List\u003cString\u003e currList \u003d Files.readAllLines(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"        for (int i \u003d 0; i \u003c currList.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"            if (i !\u003d taskIndex) {","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"                newList.add(currList.get(i));","lastModifiedDate":"2022-01-25"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"                String[] descriptionParts \u003d currList.get(i).split(\" \\\\| \");","lastModifiedDate":"2022-02-08"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"                StringBuilder newDescription \u003d new StringBuilder();","lastModifiedDate":"2022-02-08"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"                int partIndex \u003d 0;","lastModifiedDate":"2022-02-08"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"                while (partIndex \u003c descriptionParts.length) {","lastModifiedDate":"2022-02-08"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"                    if (partIndex !\u003d 0) {","lastModifiedDate":"2022-02-08"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"                        newDescription.append(\" | \");","lastModifiedDate":"2022-02-08"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"                    }","lastModifiedDate":"2022-02-08"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"                    if (partIndex \u003d\u003d 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"                        if (descriptionParts[1].equals(\"0\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"                            newDescription.append(\"1\");","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"                        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"                            newDescription.append(\"0\");","lastModifiedDate":"2022-02-08"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"                        }","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"                    } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"                        newDescription.append(descriptionParts[partIndex]);","lastModifiedDate":"2022-02-08"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"                    }","lastModifiedDate":"2022-01-25"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"                    partIndex++;","lastModifiedDate":"2022-02-08"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"                }","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"                newList.add(newDescription.toString());","lastModifiedDate":"2022-02-08"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"        Files.delete(dukePath);","lastModifiedDate":"2022-01-25"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"        Files.write(dukePath, newList);","lastModifiedDate":"2022-01-25"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":120}},{"path":"src/main/java/duke/command/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import duke.exception.InvalidActionException;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"/** A list to manage the tasks in Duke */","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"public class TaskList {","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"    protected ArrayList\u003cTask\u003e list;","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"     * Creates a new TaskList instance.","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    public TaskList() {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"        list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"     * @param t The task to be added.","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"        list.add(t);","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     * Returns the task specified by the index.","lastModifiedDate":"2022-02-09"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"     * @param index The task number to get.","lastModifiedDate":"2022-02-09"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"     * @return The task specified by the index.","lastModifiedDate":"2022-02-09"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2022-02-09"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"        assert list.size() \u003e index;","lastModifiedDate":"2022-02-09"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        return list.get(index);","lastModifiedDate":"2022-02-09"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"     * Returns the task last added to the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"     * @return The task last added to the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"    public Task getLast() {","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"        assert list.size() \u003e 0;","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"        return list.get(list.size() - 1);","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"     * Returns the size of the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"     * @return The size of the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"    public int size() {","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"        return list.size();","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"     * Marks the specified task as complete.","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"     * @param index The index of the task to be marked as complete.","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"     * @return The String representation of the task marked as complete.","lastModifiedDate":"2022-01-25"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"     * @throws InvalidActionException If the task is already complete.","lastModifiedDate":"2022-01-25"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"    public String markItemDone(int index) throws InvalidActionException {","lastModifiedDate":"2022-01-18"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"        assert index \u003c size();","lastModifiedDate":"2022-02-08"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"        Task t \u003d getTask(index);","lastModifiedDate":"2022-02-09"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"        t.markAsDone();","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"        return \"Task done! \\\\(n_n)/\\n \" + t.toString();","lastModifiedDate":"2022-01-18"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"     * Marks the specified task as incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"     * @param index The index of the task to be marked as incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"     * @return The String representation of the task marked as incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"     * @throws InvalidActionException If the task is already incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    public String markItemUndone(int index) throws InvalidActionException {","lastModifiedDate":"2022-01-18"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"        assert index \u003c size();","lastModifiedDate":"2022-02-08"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"        Task t \u003d getTask(index);","lastModifiedDate":"2022-02-09"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"        t.markUndone();","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"        return \"Task not done \u003d(\\n \" + t.toString();","lastModifiedDate":"2022-01-18"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"     * @param index The index of the task to be deleted from the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"     * @return The String representation of the task deleted from the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"    public String deleteItem(int index) {","lastModifiedDate":"2022-01-18"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"        assert index \u003c size();","lastModifiedDate":"2022-02-08"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"        Task t \u003d list.remove(index);","lastModifiedDate":"2022-01-18"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"        return \"deleted this item O_O:\\n  \" + t + \"\\nNow there are \" + list.size() + \" tasks on the list x)\";","lastModifiedDate":"2022-01-18"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"     * Gets the list of tasks in the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"     * @return The ArrayList of tasks in the list.","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"    public ArrayList\u003cTask\u003e getItems() {","lastModifiedDate":"2022-01-25"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"        return list;","lastModifiedDate":"2022-01-25"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"     * Gets a sub-list of tasks that contain a specific keyword/phrase.","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"     * @param query The specific keyword/phrase to search for","lastModifiedDate":"2022-02-08"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"     * @return A sub-list of tasks that contain a specific keyword/phrase.","lastModifiedDate":"2022-01-25"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"    public ArrayList\u003cTask\u003e findItems(String query) {","lastModifiedDate":"2022-02-08"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"        for (Task task : list) {","lastModifiedDate":"2022-02-08"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"            String description \u003d task.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"            if (description.contains(query)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"                newList.add(task);","lastModifiedDate":"2022-02-08"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":121,"author":{"gitId":"channne"},"content":"        return newList;","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":123,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":123}},{"path":"src/main/java/duke/exception/IncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.exception;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"/** Exception for when input is shorter than expected */","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"public class IncompleteInputException extends Exception {","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"     * Creates a new instance of the exception.","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"     * @param message the error message to be shown.","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    public IncompleteInputException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"channne":14}},{"path":"src/main/java/duke/exception/InvalidActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.exception;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"/** Exception for when given command leads to an invalid action */","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"public class InvalidActionException extends RuntimeException {","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"     * Creates a new instance of the exception.","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"     * @param message the error message to be shown.","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    public InvalidActionException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"channne":14}},{"path":"src/main/java/duke/exception/WrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.exception;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"/** Exception for when input is invalid */","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"public class WrongInputException extends Exception {","lastModifiedDate":"2022-01-18"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-18"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"     * Creates a new instance of the exception.","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"     * @param message the error message to be shown.","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    public WrongInputException(String message) {","lastModifiedDate":"2022-01-18"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"        super(message);","lastModifiedDate":"2022-01-18"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-18"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-18"}],"authorContributionMap":{"channne":14}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"/** Represents a Deadline task which has to be completed by a specific time */","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    protected LocalDate time;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"     * Creates a new instance of a Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"     * Assumes the task is not done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"     * @param time The time of the task in YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"     * @throws DateTimeParseException If the given time is not in the YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"    public Deadline(String name, String time) throws DateTimeParseException {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"        this(name, time, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"     * Creates a new instance of a Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"     * @param time The time of the task in YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"     * @param isDone Whether the task is done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     * @throws DateTimeParseException If the given time is not in the YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    public Deadline(String name, String time, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"        this(name, LocalDate.parse(time), isDone);","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"     * Creates a new instance of a Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"     * @param time The time of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"     * @param isDone Whether the task is done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"    public Deadline(String name, LocalDate time, boolean isDone) {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        super(name, \"D\", isDone);","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"     * Returns a String representation of the Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"     * Indicates the task type and whether it has been done.","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"     * Also indicates the time of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"     * @return A String representation of the Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"    public String toString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"        return super.toString() + \" (by: \" + formatTime() + \")\";","lastModifiedDate":"2022-02-09"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     * Formats the time in MMM dd yyyy format.","lastModifiedDate":"2022-02-09"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"     * @return The time in MMM dd yyyy format.","lastModifiedDate":"2022-02-09"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"    public String formatTime() {","lastModifiedDate":"2022-02-09"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"        return time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-09"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"     * Returns a String representation of the Deadline to be entered in the storage file.","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"     * @return A String representation of the Deadline.","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"    public String toFileFormatString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"            return super.toFileFormatString() + \" | \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        return super.toFileFormatString() + \" | \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":80}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"/** Represents an Event task which takes place at a specific time */","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    protected LocalDate time;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"     * Creates a new instance of an Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"     * Assumes the task is not done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"     * @param time The time of the task in YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"     * @throws DateTimeParseException If the given time is not in the YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"    public Event(String name, String time) throws DateTimeParseException {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"        this(name, time, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"     * Creates a new instance of an Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"     * @param time The time of the task in YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"     * @param isDone Whether the task is done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     * @throws DateTimeParseException If the given time is not in the YYYY-MM-DD format.","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    public Event(String name, String time, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"        this(name, LocalDate.parse(time), isDone);","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"     * Creates a new instance of an Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"     * @param time The time of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"     * @param isDone Whether the task is done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"    public Event(String name, LocalDate time, boolean isDone) {","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        super(name, \"E\", isDone);","lastModifiedDate":"2022-02-08"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"     * Returns a String representation of the Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"     * Indicates the task type and whether it has been done.","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"     * Also indicates the time of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"     * @return A String representation of the Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"    public String toString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"        return super.toString() + \" (at: \" + formatTime() + \")\";","lastModifiedDate":"2022-02-09"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     * Formats the time in MMM dd yyyy format.","lastModifiedDate":"2022-02-09"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"     * @return The time in MMM dd yyyy format.","lastModifiedDate":"2022-02-09"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"    public String formatTime() {","lastModifiedDate":"2022-02-09"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"        return time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-09"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"     * Returns a String representation of the Event to be entered in the storage file.","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"     * @return A String representation of the Event.","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"    public String toFileFormatString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-25"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"            return super.toFileFormatString() + \" | \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        return super.toFileFormatString() + \" | \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":80}},{"path":"src/main/java/duke/task/Reminder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"/** A class to represent reminders for tasks. */","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"public class Reminder {","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    protected LocalDateTime reminderTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"     * Creates a new Reminder instance.","lastModifiedDate":"2022-02-09"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"     * @param reminderTime The time to remind the user.","lastModifiedDate":"2022-02-09"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    public Reminder(LocalDateTime reminderTime) {","lastModifiedDate":"2022-02-09"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"        this.reminderTime \u003d reminderTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"     * Returns a string representation of the reminder date and time in a specific format.","lastModifiedDate":"2022-02-09"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"     * @return A string representation of the reminder date and time.","lastModifiedDate":"2022-02-09"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    public String getDateTime() {","lastModifiedDate":"2022-02-09"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"        return reminderTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.SHORT));","lastModifiedDate":"2022-02-09"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     * Returns the LocalDateTime object this class encapsulates.","lastModifiedDate":"2022-02-09"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"     * @return The LocalDateTime object.","lastModifiedDate":"2022-02-09"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    public LocalDateTime getLocalDateTime() {","lastModifiedDate":"2022-02-09"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"        return this.reminderTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-02-09"}],"authorContributionMap":{"channne":37}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import duke.exception.InvalidActionException;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"/** Superclass of concrete classes that can be added to the task list */","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    protected String name;","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"    protected String label;","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    protected Reminder reminder;","lastModifiedDate":"2022-02-09"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    protected Task(String name, String label) {","lastModifiedDate":"2022-02-08"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"        this(name, label, false);","lastModifiedDate":"2022-02-08"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    protected Task(String name, String label, boolean isDone) {","lastModifiedDate":"2022-02-08"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"        this.label \u003d label;","lastModifiedDate":"2022-02-08"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"     * Returns a String representation of the Task.","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"     * Indicates the task type and whether it has been done.","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"     * @return A String representation of the Task.","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"    @Override","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    public String toString() {","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"        String status \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"        return \"[\" + label + \"][\" + status + \"] \" + name;","lastModifiedDate":"2022-02-08"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     * Returns the description of the Task.","lastModifiedDate":"2022-02-09"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"     * @return The description of the task.","lastModifiedDate":"2022-02-09"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-09"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"        return this.name;","lastModifiedDate":"2022-02-09"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"     * Marks self as done.","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"     * @throws InvalidActionException If already done.","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"    public void markAsDone() throws InvalidActionException {","lastModifiedDate":"2022-01-18"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-31"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"            throw new InvalidActionException(\"Task already done!\");","lastModifiedDate":"2022-01-31"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"        isDone \u003d true;","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"     * Marks self as undone.","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     * @throws InvalidActionException If already undone.","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"    public void markUndone() throws InvalidActionException {","lastModifiedDate":"2022-01-18"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"        if (!isDone) {","lastModifiedDate":"2022-01-31"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"            throw new InvalidActionException(\"Task already not done!\");","lastModifiedDate":"2022-01-31"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-31"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"     * Returns a string representation of the task to be entered in the storage file.","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"     * @return A String representation of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"    public String toFileFormatString() {","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"        if (isDone) {","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"            return label + \" | 1 | \" + name;","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-08"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        return label + \" | 0 | \" + name;","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"     * Sets a reminder for the task.","lastModifiedDate":"2022-02-09"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"     * @param dateTime The time to remind the user of the task.","lastModifiedDate":"2022-02-09"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"    public void setReminder(LocalDateTime dateTime) {","lastModifiedDate":"2022-02-09"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"        reminder \u003d new Reminder(dateTime);","lastModifiedDate":"2022-02-09"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"     * Returns the reminder attached to this task.","lastModifiedDate":"2022-02-09"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"     * @return The reminder attached to this task.","lastModifiedDate":"2022-02-09"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"    public Reminder getReminder() {","lastModifiedDate":"2022-02-09"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"        return reminder;","lastModifiedDate":"2022-02-09"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":98}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"/** Represents a Todo task without specific deadline or time */","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"     * Creates a new instance of a Todo.","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"     * Assumes the task is not done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    public Todo(String name) {","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"        this(name, false);","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"     * Creates a new instance of a Todo.","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"     * @param name The content of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"     * @param isDone Whether the task is done yet.","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"        super(name, \"T\", isDone);","lastModifiedDate":"2022-02-08"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":25}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.util.Collections;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2022-02-15"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2022-02-15"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2022-02-15"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2022-02-15"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"import javafx.scene.paint.Paint;","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2022-02-15"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"/**","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"channne"},"content":" * This control represents a dialog box consisting of a","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"channne"},"content":" * Circle to represent the speaker\u0027s avatar and a label","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"channne"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"channne"},"content":" */","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    private Label dialog;","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"    private Circle displayPicture;","lastModifiedDate":"2022-02-15"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"        displayPicture.setFill(new ImagePattern(img));","lastModifiedDate":"2022-02-15"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"     * Flips the dialog box such that the Circle is on the left and text on the right.","lastModifiedDate":"2022-02-15"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"    private void flip() {","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     * Returns a DialogBox containing the user input and user avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"     * @param text The user input.","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"     * @param img The user\u0027s avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"     * @return A DialogBox containing the specified text and avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-15"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"        db.setBackground(new Background(new BackgroundFill(Paint.valueOf(String.valueOf(Color.LAVENDERBLUSH)),","lastModifiedDate":"2022-02-15"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"                new CornerRadii(25), new Insets(5))));","lastModifiedDate":"2022-02-15"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"        return db;","lastModifiedDate":"2022-02-15"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"     * Returns a DialogBox containing Duke\u0027s response and Duke\u0027s avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"     * @param text Duke\u0027s response.","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"     * @param img Duke\u0027s avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"     * @return A DialogBox containing the specified text and avatar.","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-02-01"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"        db.flip();","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"        db.setBackground(new Background(new BackgroundFill(Paint.valueOf(String.valueOf(Color.MINTCREAM)),","lastModifiedDate":"2022-02-15"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"                new CornerRadii(25), new Insets(5))));","lastModifiedDate":"2022-02-15"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"        return db;","lastModifiedDate":"2022-02-15"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-15"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-15"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-15"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"     * Returns a DialogBox containing a reminder and Duke\u0027s avatar.","lastModifiedDate":"2022-02-15"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-15"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"     * @param text The reminder text.","lastModifiedDate":"2022-02-15"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"     * @param img Duke\u0027s avatar.","lastModifiedDate":"2022-02-15"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"     * @return A DialogBox containing the specified text and avatar.","lastModifiedDate":"2022-02-15"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-15"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"    public static DialogBox getReminderDialog(String text, Image img) {","lastModifiedDate":"2022-02-15"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-02-15"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"        db.flip();","lastModifiedDate":"2022-02-15"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"        db.setBackground(new Background(new BackgroundFill(Paint.valueOf(String.valueOf(Color.LIGHTSKYBLUE)),","lastModifiedDate":"2022-02-15"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"                new CornerRadii(25), new Insets(5))));","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"        return db;","lastModifiedDate":"2022-02-01"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":102}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import duke.command.Duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"/** Controller for MainWindow. Provides the layout for the other controls. */","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"    private TextField userInput;","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    private Button sendButton;","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    private Duke duke;","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserAvatar.png\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeAvatar.png\"));","lastModifiedDate":"2022-02-15"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     * Makes the scrollPane scrollable.","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"    public void initialize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-02-01"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     * Initializes the MainWindow by printing the startup message.","lastModifiedDate":"2022-02-01"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"    public void setupDisplay() {","lastModifiedDate":"2022-02-01"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getStartupMessage(), dukeImage));","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"     * Sets the \u0027duke\u0027 attribute of this to the given Duke instance.","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"     * @param d The Duke instance to associate with this controller.","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"        duke \u003d d;","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"        d.setMainWindow(this);","lastModifiedDate":"2022-02-09"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"     * Creates two dialog boxes, one echoing user input and the other","lastModifiedDate":"2022-02-01"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"     * containing Duke\u0027s reply, and then appends them to the dialog container.","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"     * Clears the user input after processing.","lastModifiedDate":"2022-02-01"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"    @FXML","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"    public void handleUserInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-01"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"        );","lastModifiedDate":"2022-02-01"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"        userInput.clear();","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"        checkIfBye(input);","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"     * Creates a dialog box for Duke that reminds the user of a task.","lastModifiedDate":"2022-02-09"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"     * @param reminderMessage The message to remind the user.","lastModifiedDate":"2022-02-09"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"    public void showReminder(String reminderMessage) {","lastModifiedDate":"2022-02-09"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-02-09"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"                DialogBox.getReminderDialog(reminderMessage, dukeImage)","lastModifiedDate":"2022-02-15"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        );","lastModifiedDate":"2022-02-09"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"    private void checkIfBye(String input) {","lastModifiedDate":"2022-02-01"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"            System.exit(0);","lastModifiedDate":"2022-02-01"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":86}},{"path":"src/main/java/duke/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import duke.command.TaskList;","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"import duke.exception.IncompleteInputException;","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"import duke.exception.WrongInputException;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"import duke.task.Event;","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"/** Helps to make sense of user input */","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"public class Parser {","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    private final String[] acceptableInputs \u003d new String[]{\"mark\", \"unmark\", \"todo\", \"deadline\", \"event\",","lastModifiedDate":"2022-02-09"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"        \"delete\", \"find\", \"remind\"};","lastModifiedDate":"2022-02-09"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"     * Creates a new Parser instance.","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    public Parser() {}","lastModifiedDate":"2022-02-08"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     * Returns the command part of the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-08"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"     * @return The command part of the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"     * @throws WrongInputException If the input does not contain a valid command.","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    public String parseCommand(String input) throws WrongInputException {","lastModifiedDate":"2022-02-08"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        String[] inputs \u003d input.split(\" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"        String command \u003d inputs[0];","lastModifiedDate":"2022-02-08"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"        boolean isValidCommand \u003d false;","lastModifiedDate":"2022-02-08"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"        for (String acceptableInput : acceptableInputs) {","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"            if (command.equals(acceptableInput)) {","lastModifiedDate":"2022-02-08"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"                isValidCommand \u003d true;","lastModifiedDate":"2022-02-08"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"                break;","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"        if (!isValidCommand) {","lastModifiedDate":"2022-02-08"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"D: D: D: I don\u0027t understand the input D: D: D:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"        return command;","lastModifiedDate":"2022-02-08"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"     * Returns the numerical part of the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"     * Assumes the user input contains a command that requires a numerical input.","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-08"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"     * @param command The command contained in the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"     * @param listSize The length of the task list.","lastModifiedDate":"2022-02-08"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"     * @return The numerical part of the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"     * @throws WrongInputException If the input is not in the expected form.","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"    public int parseNumericalDescription(String input, String command, int listSize) throws WrongInputException {","lastModifiedDate":"2022-02-08"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"        assert input.contains(command);","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"        String[] inputs \u003d input.split(command + \" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"        if (listSize \u003d\u003d 0) {","lastModifiedDate":"2022-02-08"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"D: D: D: There are no items in the list D: D: D:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"        if (inputs.length \u003e 2) {","lastModifiedDate":"2022-01-25"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"D: D: D: The \" + command","lastModifiedDate":"2022-01-31"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"                    + \" should be followed by a single number D: D: D:\");","lastModifiedDate":"2022-01-31"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"            int taskNumber \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"            boolean isTaskNumberValid \u003d taskNumber \u003c\u003d listSize \u0026\u0026 taskNumber \u003e 0;","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"            if (!isTaskNumberValid) {","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"                throw new WrongInputException(\"D: D: D: The task number isn\u0027t in the list D: D: D:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"            return taskNumber - 1;","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"D: D: D: The input doesn\u0027t seem to contain a number D: D: D:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"     * Returns an array containing the task description and its associated time.","lastModifiedDate":"2022-01-25"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-08"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"     * @param command The command contained in the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"     * @param format The regular expression that indicates the timing part of the task.","lastModifiedDate":"2022-01-25"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"     * @return An array containing the task description and its associated time.","lastModifiedDate":"2022-01-25"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"     * @throws WrongInputException If the regular expression cannot be found in the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"     * @throws IncompleteInputException If the input is incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"    public String[] parseFormatDescription(String input, String command, String format)","lastModifiedDate":"2022-02-08"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"            throws WrongInputException, IncompleteInputException {","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"            String[] inputs \u003d input.split(\" \" + format + \" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"            if (inputs.length \u003c 2) {","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"                throw new IncompleteInputException(\"D: D: D: The description of a \" + command","lastModifiedDate":"2022-01-31"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"                        + \" is incorrect or empty D: D: D:\");","lastModifiedDate":"2022-01-31"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"            String[] finalDescription \u003d new String[2];","lastModifiedDate":"2022-02-08"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"            if (inputs.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-25"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"                String[] description \u003d inputs[0].split(command + \" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"                if (description.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"                    finalDescription[0] \u003d description[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"                } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"                    StringBuilder firstPart \u003d new StringBuilder();","lastModifiedDate":"2022-01-25"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"                    for (int i \u003d 1; i \u003c description.length; i++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"                        firstPart.append(description[i]);","lastModifiedDate":"2022-02-08"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"                        if (i \u003c description.length - 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"                            firstPart.append(command).append(\" \");","lastModifiedDate":"2022-02-09"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"                        }","lastModifiedDate":"2022-01-25"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"                    }","lastModifiedDate":"2022-01-25"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"                    finalDescription[0] \u003d firstPart.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"                }","lastModifiedDate":"2022-01-25"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"                finalDescription[1] \u003d inputs[1];","lastModifiedDate":"2022-02-08"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"                // \"format\" occurs more than once; time is taken to be the string beyond the last occurrence","lastModifiedDate":"2022-02-08"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"                String[] description \u003d inputs[0].split(command + \" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":121,"author":{"gitId":"channne"},"content":"                StringBuilder firstPart \u003d new StringBuilder();","lastModifiedDate":"2022-01-25"},{"lineNumber":122,"author":{"gitId":"channne"},"content":"                if (description.length \u003d\u003d 2) {","lastModifiedDate":"2022-02-08"},{"lineNumber":123,"author":{"gitId":"channne"},"content":"                    firstPart.append(description[1]);","lastModifiedDate":"2022-02-08"},{"lineNumber":124,"author":{"gitId":"channne"},"content":"                } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":125,"author":{"gitId":"channne"},"content":"                    for (int i \u003d 1; i \u003c description.length; i++) {","lastModifiedDate":"2022-02-08"},{"lineNumber":126,"author":{"gitId":"channne"},"content":"                        firstPart.append(description[i]);","lastModifiedDate":"2022-02-08"},{"lineNumber":127,"author":{"gitId":"channne"},"content":"                        if (i \u003c description.length - 1) {","lastModifiedDate":"2022-02-08"},{"lineNumber":128,"author":{"gitId":"channne"},"content":"                            firstPart.append(command).append(\" \");","lastModifiedDate":"2022-02-09"},{"lineNumber":129,"author":{"gitId":"channne"},"content":"                        }","lastModifiedDate":"2022-01-25"},{"lineNumber":130,"author":{"gitId":"channne"},"content":"                    }","lastModifiedDate":"2022-01-25"},{"lineNumber":131,"author":{"gitId":"channne"},"content":"                }","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"channne"},"content":"                for (int i \u003d 1; i \u003c inputs.length - 1; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":133,"author":{"gitId":"channne"},"content":"                    if (i \u003c inputs.length - 1) {","lastModifiedDate":"2022-01-25"},{"lineNumber":134,"author":{"gitId":"channne"},"content":"                        firstPart.append(\" \").append(format).append(\" \");","lastModifiedDate":"2022-02-09"},{"lineNumber":135,"author":{"gitId":"channne"},"content":"                    }","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"channne"},"content":"                    firstPart.append(inputs[i]);","lastModifiedDate":"2022-01-25"},{"lineNumber":137,"author":{"gitId":"channne"},"content":"                }","lastModifiedDate":"2022-01-25"},{"lineNumber":138,"author":{"gitId":"channne"},"content":"                finalDescription[0] \u003d firstPart.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":139,"author":{"gitId":"channne"},"content":"                finalDescription[1] \u003d inputs[inputs.length - 1];","lastModifiedDate":"2022-02-08"},{"lineNumber":140,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":141,"author":{"gitId":"channne"},"content":"            return finalDescription;","lastModifiedDate":"2022-02-08"},{"lineNumber":142,"author":{"gitId":"channne"},"content":"        } catch (PatternSyntaxException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":143,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"D: D: D: Please specify the timing using \" + format + \" D: D: D:\");","lastModifiedDate":"2022-01-25"},{"lineNumber":144,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":145,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":146,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":147,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":148,"author":{"gitId":"channne"},"content":"     * Returns the task description contained in the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":149,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":150,"author":{"gitId":"channne"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-08"},{"lineNumber":151,"author":{"gitId":"channne"},"content":"     * @param command The command contained in the user input.","lastModifiedDate":"2022-01-25"},{"lineNumber":152,"author":{"gitId":"channne"},"content":"     * @return The task description.","lastModifiedDate":"2022-01-25"},{"lineNumber":153,"author":{"gitId":"channne"},"content":"     * @throws IncompleteInputException If the input is incomplete.","lastModifiedDate":"2022-01-25"},{"lineNumber":154,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":155,"author":{"gitId":"channne"},"content":"    public String parseStringDescription(String input, String command) throws IncompleteInputException {","lastModifiedDate":"2022-02-08"},{"lineNumber":156,"author":{"gitId":"channne"},"content":"        String[] inputs \u003d input.split(command + \" \");","lastModifiedDate":"2022-02-08"},{"lineNumber":157,"author":{"gitId":"channne"},"content":"        if (inputs.length \u003d\u003d 1) {","lastModifiedDate":"2022-01-25"},{"lineNumber":158,"author":{"gitId":"channne"},"content":"            throw new IncompleteInputException(\"D: D: D: The description of a \" + command","lastModifiedDate":"2022-01-31"},{"lineNumber":159,"author":{"gitId":"channne"},"content":"                    + \" cannot be empty D: D: D:\");","lastModifiedDate":"2022-01-31"},{"lineNumber":160,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":161,"author":{"gitId":"channne"},"content":"        if (inputs.length \u003d\u003d 2) {","lastModifiedDate":"2022-01-25"},{"lineNumber":162,"author":{"gitId":"channne"},"content":"            return inputs[1];","lastModifiedDate":"2022-01-25"},{"lineNumber":163,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":164,"author":{"gitId":"channne"},"content":"        StringBuilder finalDescription \u003d new StringBuilder();","lastModifiedDate":"2022-02-08"},{"lineNumber":165,"author":{"gitId":"channne"},"content":"        for (int i \u003d 1; i \u003c inputs.length; i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":166,"author":{"gitId":"channne"},"content":"            finalDescription.append(inputs[i]);","lastModifiedDate":"2022-02-08"},{"lineNumber":167,"author":{"gitId":"channne"},"content":"            if (i \u003c inputs.length - 1) {","lastModifiedDate":"2022-01-25"},{"lineNumber":168,"author":{"gitId":"channne"},"content":"                finalDescription.append(command).append(\" \");","lastModifiedDate":"2022-02-09"},{"lineNumber":169,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":170,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":171,"author":{"gitId":"channne"},"content":"        return finalDescription.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":172,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":173,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":174,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":175,"author":{"gitId":"channne"},"content":"     * Adds a reminder to the task with task number specified in the user input","lastModifiedDate":"2022-02-09"},{"lineNumber":176,"author":{"gitId":"channne"},"content":"     * and returns the task.","lastModifiedDate":"2022-02-09"},{"lineNumber":177,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":178,"author":{"gitId":"channne"},"content":"     * @param input The user input.","lastModifiedDate":"2022-02-09"},{"lineNumber":179,"author":{"gitId":"channne"},"content":"     * @param taskList The task list to retrieve the task from.","lastModifiedDate":"2022-02-09"},{"lineNumber":180,"author":{"gitId":"channne"},"content":"     * @return The task specified by the task number in the user input.","lastModifiedDate":"2022-02-09"},{"lineNumber":181,"author":{"gitId":"channne"},"content":"     * @throws WrongInputException If the input format does not match the required format.","lastModifiedDate":"2022-02-09"},{"lineNumber":182,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":183,"author":{"gitId":"channne"},"content":"    public Task parseReminderDescription(String input, TaskList taskList) throws WrongInputException {","lastModifiedDate":"2022-02-09"},{"lineNumber":184,"author":{"gitId":"channne"},"content":"        String[] inputs \u003d input.split(\" \");","lastModifiedDate":"2022-02-09"},{"lineNumber":185,"author":{"gitId":"channne"},"content":"        if (inputs.length !\u003d 4) {","lastModifiedDate":"2022-02-09"},{"lineNumber":186,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"Unrecognized format D: D: D:\"","lastModifiedDate":"2022-02-09"},{"lineNumber":187,"author":{"gitId":"channne"},"content":"                    + \" Please reformat in \u0027remind [task number] [reminder date in YYYY-MM-DD]\"","lastModifiedDate":"2022-02-09"},{"lineNumber":188,"author":{"gitId":"channne"},"content":"                    + \"[reminder time in HH:MM]\u0027!\");","lastModifiedDate":"2022-02-09"},{"lineNumber":189,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":190,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-02-09"},{"lineNumber":191,"author":{"gitId":"channne"},"content":"            int index \u003d Integer.parseInt(inputs[1]) - 1;","lastModifiedDate":"2022-02-09"},{"lineNumber":192,"author":{"gitId":"channne"},"content":"            if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2022-02-09"},{"lineNumber":193,"author":{"gitId":"channne"},"content":"                throw new WrongInputException(\"Task with specified index does not exist!\");","lastModifiedDate":"2022-02-09"},{"lineNumber":194,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":195,"author":{"gitId":"channne"},"content":"            Task taskToRemind \u003d taskList.getTask(index);","lastModifiedDate":"2022-02-09"},{"lineNumber":196,"author":{"gitId":"channne"},"content":"            LocalDateTime reminderDateTime \u003d LocalDateTime.of(LocalDate.parse(inputs[2]),","lastModifiedDate":"2022-02-09"},{"lineNumber":197,"author":{"gitId":"channne"},"content":"                    LocalTime.parse(inputs[3]));","lastModifiedDate":"2022-02-09"},{"lineNumber":198,"author":{"gitId":"channne"},"content":"            if (reminderDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2022-02-09"},{"lineNumber":199,"author":{"gitId":"channne"},"content":"                throw new WrongInputException(\"D: The specified date/time has already passed!\");","lastModifiedDate":"2022-02-09"},{"lineNumber":200,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":201,"author":{"gitId":"channne"},"content":"            taskToRemind.setReminder(reminderDateTime);","lastModifiedDate":"2022-02-09"},{"lineNumber":202,"author":{"gitId":"channne"},"content":"            return taskToRemind;","lastModifiedDate":"2022-02-09"},{"lineNumber":203,"author":{"gitId":"channne"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":204,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"Cannot recognize task number D: D: Please reformat in \"","lastModifiedDate":"2022-02-09"},{"lineNumber":205,"author":{"gitId":"channne"},"content":"                    + \"\u0027remind [task number] [reminder date in YYYY-MM-DD]\"","lastModifiedDate":"2022-02-09"},{"lineNumber":206,"author":{"gitId":"channne"},"content":"                    + \"[reminder time in HH:MM]\u0027 format!\");","lastModifiedDate":"2022-02-09"},{"lineNumber":207,"author":{"gitId":"channne"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":208,"author":{"gitId":"channne"},"content":"            throw new WrongInputException(\"Cannot recognize date/time format D: D: \"","lastModifiedDate":"2022-02-09"},{"lineNumber":209,"author":{"gitId":"channne"},"content":"                    + \"Date should be in YYYY-MM-DD and time should be in HH:MM!\");","lastModifiedDate":"2022-02-09"},{"lineNumber":210,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":211,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":212,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":213,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":214,"author":{"gitId":"channne"},"content":"     * Returns a Task object from parsing a saved line in a storage file.","lastModifiedDate":"2022-01-25"},{"lineNumber":215,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":216,"author":{"gitId":"channne"},"content":"     * @param entry A line from a storage file containing the description of a Task.","lastModifiedDate":"2022-01-25"},{"lineNumber":217,"author":{"gitId":"channne"},"content":"     * @return A Task object formed from parsing a line in a storage file.","lastModifiedDate":"2022-01-25"},{"lineNumber":218,"author":{"gitId":"channne"},"content":"     * @throws DateTimeParseException If any time in the file is not in the correct format.","lastModifiedDate":"2022-01-25"},{"lineNumber":219,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":220,"author":{"gitId":"channne"},"content":"    public static Task parseFileFormat(String entry) throws DateTimeParseException {","lastModifiedDate":"2022-01-25"},{"lineNumber":221,"author":{"gitId":"channne"},"content":"        String[] entryParts \u003d entry.split(\" \\\\| \");","lastModifiedDate":"2022-02-08"},{"lineNumber":222,"author":{"gitId":"channne"},"content":"        if (entryParts[0].equals(\"T\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":223,"author":{"gitId":"channne"},"content":"            if (entryParts[1].equals(\"1\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":224,"author":{"gitId":"channne"},"content":"                return new Todo(entryParts[2], true);","lastModifiedDate":"2022-02-08"},{"lineNumber":225,"author":{"gitId":"channne"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":226,"author":{"gitId":"channne"},"content":"                return new Todo(entryParts[2], false);","lastModifiedDate":"2022-02-08"},{"lineNumber":227,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":228,"author":{"gitId":"channne"},"content":"        } else if (entryParts[0].equals(\"D\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":229,"author":{"gitId":"channne"},"content":"            if (entryParts[1].equals(\"1\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":230,"author":{"gitId":"channne"},"content":"                return new Deadline(entryParts[2],","lastModifiedDate":"2022-02-08"},{"lineNumber":231,"author":{"gitId":"channne"},"content":"                        LocalDate.parse(entryParts[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),","lastModifiedDate":"2022-02-08"},{"lineNumber":232,"author":{"gitId":"channne"},"content":"                        true);","lastModifiedDate":"2022-01-25"},{"lineNumber":233,"author":{"gitId":"channne"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":234,"author":{"gitId":"channne"},"content":"                return new Deadline(entryParts[2],","lastModifiedDate":"2022-02-08"},{"lineNumber":235,"author":{"gitId":"channne"},"content":"                        LocalDate.parse(entryParts[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),","lastModifiedDate":"2022-02-08"},{"lineNumber":236,"author":{"gitId":"channne"},"content":"                        false);","lastModifiedDate":"2022-01-25"},{"lineNumber":237,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":238,"author":{"gitId":"channne"},"content":"        } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":239,"author":{"gitId":"channne"},"content":"            assert(entryParts[0].equals(\"E\"));","lastModifiedDate":"2022-02-08"},{"lineNumber":240,"author":{"gitId":"channne"},"content":"            if (entryParts[1].equals(\"1\")) {","lastModifiedDate":"2022-02-08"},{"lineNumber":241,"author":{"gitId":"channne"},"content":"                return new Event(entryParts[2],","lastModifiedDate":"2022-02-08"},{"lineNumber":242,"author":{"gitId":"channne"},"content":"                        LocalDate.parse(entryParts[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),","lastModifiedDate":"2022-02-08"},{"lineNumber":243,"author":{"gitId":"channne"},"content":"                        true);","lastModifiedDate":"2022-01-25"},{"lineNumber":244,"author":{"gitId":"channne"},"content":"            } else {","lastModifiedDate":"2022-01-25"},{"lineNumber":245,"author":{"gitId":"channne"},"content":"                return new Event(entryParts[2],","lastModifiedDate":"2022-02-08"},{"lineNumber":246,"author":{"gitId":"channne"},"content":"                        LocalDate.parse(entryParts[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),","lastModifiedDate":"2022-02-08"},{"lineNumber":247,"author":{"gitId":"channne"},"content":"                        false);","lastModifiedDate":"2022-01-25"},{"lineNumber":248,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":249,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":250,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":251,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":251}},{"path":"src/main/java/duke/ui/ResponseGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import duke.task.Reminder;","lastModifiedDate":"2022-02-09"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import duke.task.Task;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"/** Contains functionality relating to generating Duke\u0027s responses */","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"public class ResponseGenerator {","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    private final String logo;","lastModifiedDate":"2022-02-09"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"     * Creates a new Ui instance.","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    public ResponseGenerator() {","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"        logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"     * Returns a setup message.","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"     * @return A setup message.","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"    public String getStartupMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"        return new StringBuilder().append(\"Hello! I\u0027m\\n\").append(logo)","lastModifiedDate":"2022-02-15"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"                .append(\"\\nWhat can I do for you? \u003d)\").toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"     * Returns a farewell message.","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"     * @return A farewell message.","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"    public String getByeMessage() {","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"        return \"Bye t_t\";","lastModifiedDate":"2022-01-25"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"     * Returns an error message for file loading and parsing errors.","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"     * @return An error message for file loading and parsing errors.","lastModifiedDate":"2022-01-25"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"    public String getFileErrorMessage() {","lastModifiedDate":"2022-01-25"},{"lineNumber":50,"author":{"gitId":"channne"},"content":"        return \"Error loading/parsing file ?.? Creating empty list!\";","lastModifiedDate":"2022-01-25"},{"lineNumber":51,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":52,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":53,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":54,"author":{"gitId":"channne"},"content":"     * Returns an error message for I/O errors.","lastModifiedDate":"2022-01-25"},{"lineNumber":55,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":56,"author":{"gitId":"channne"},"content":"     * @return An error message for I/O errors.","lastModifiedDate":"2022-01-25"},{"lineNumber":57,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":58,"author":{"gitId":"channne"},"content":"    public String getIoErrorMessage() {","lastModifiedDate":"2022-01-25"},{"lineNumber":59,"author":{"gitId":"channne"},"content":"        return \"I/O error x.x\";","lastModifiedDate":"2022-01-25"},{"lineNumber":60,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":61,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":62,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":63,"author":{"gitId":"channne"},"content":"     * Returns an error message for date/time format errors.","lastModifiedDate":"2022-02-08"},{"lineNumber":64,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":65,"author":{"gitId":"channne"},"content":"     * @return An error message for date/time format errors.","lastModifiedDate":"2022-02-08"},{"lineNumber":66,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":67,"author":{"gitId":"channne"},"content":"    public String getDateTimeFormatErrorMessage() {","lastModifiedDate":"2022-02-08"},{"lineNumber":68,"author":{"gitId":"channne"},"content":"        return \"Error parsing date, please enter dates in YYYY-MM-DD format!\";","lastModifiedDate":"2022-02-08"},{"lineNumber":69,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":70,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":71,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-08"},{"lineNumber":72,"author":{"gitId":"channne"},"content":"     * Returns the error message for errors in the package duke.exception.","lastModifiedDate":"2022-02-08"},{"lineNumber":73,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-08"},{"lineNumber":74,"author":{"gitId":"channne"},"content":"     * @param e An exception in the package duke.exception.","lastModifiedDate":"2022-02-08"},{"lineNumber":75,"author":{"gitId":"channne"},"content":"     * @return The error message corresponding to the exception.","lastModifiedDate":"2022-02-08"},{"lineNumber":76,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-08"},{"lineNumber":77,"author":{"gitId":"channne"},"content":"    public String getDukeErrorMessage(Exception e) {","lastModifiedDate":"2022-02-08"},{"lineNumber":78,"author":{"gitId":"channne"},"content":"        return e.getMessage();","lastModifiedDate":"2022-02-08"},{"lineNumber":79,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-08"},{"lineNumber":80,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-08"},{"lineNumber":81,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":82,"author":{"gitId":"channne"},"content":"     * Returns the error message when the maximum date/time is exceeded","lastModifiedDate":"2022-02-09"},{"lineNumber":83,"author":{"gitId":"channne"},"content":"     * for scheduling of reminders.","lastModifiedDate":"2022-02-09"},{"lineNumber":84,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":85,"author":{"gitId":"channne"},"content":"     * @return The error message that maximum date/time is exceeded.","lastModifiedDate":"2022-02-09"},{"lineNumber":86,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":87,"author":{"gitId":"channne"},"content":"    public String getMaxDateTimeExceededErrorMessage() {","lastModifiedDate":"2022-02-09"},{"lineNumber":88,"author":{"gitId":"channne"},"content":"        return \"Maximum date/time exceeded D: please try again!\";","lastModifiedDate":"2022-02-09"},{"lineNumber":89,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":90,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":91,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":92,"author":{"gitId":"channne"},"content":"     * Returns the message to be printed when a task is added to the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":93,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":94,"author":{"gitId":"channne"},"content":"     * @param latestTask The task that was just added to the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":95,"author":{"gitId":"channne"},"content":"     * @param size The new size of the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":96,"author":{"gitId":"channne"},"content":"     * @return The message to be printed when a task is added.","lastModifiedDate":"2022-01-25"},{"lineNumber":97,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":98,"author":{"gitId":"channne"},"content":"    public String getAddTaskMessage(Task latestTask, int size) {","lastModifiedDate":"2022-01-25"},{"lineNumber":99,"author":{"gitId":"channne"},"content":"        return new StringBuilder().append(\"added o.O:\\n  \").append(latestTask.toString())","lastModifiedDate":"2022-02-15"},{"lineNumber":100,"author":{"gitId":"channne"},"content":"                        .append(\"\\nNow there are \").append(size).append(\" tasks on the list x)\").toString();","lastModifiedDate":"2022-02-15"},{"lineNumber":101,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":102,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":103,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":104,"author":{"gitId":"channne"},"content":"     * Returns the message to be printed when a reminder is added.","lastModifiedDate":"2022-02-09"},{"lineNumber":105,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":106,"author":{"gitId":"channne"},"content":"     * @param task The task to remind the user of.","lastModifiedDate":"2022-02-09"},{"lineNumber":107,"author":{"gitId":"channne"},"content":"     * @param reminderTime The time to remind the user.","lastModifiedDate":"2022-02-09"},{"lineNumber":108,"author":{"gitId":"channne"},"content":"     * @return The message to be printed when a reminder is added.","lastModifiedDate":"2022-02-09"},{"lineNumber":109,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":110,"author":{"gitId":"channne"},"content":"    public String getAddReminderMessage(Task task, Reminder reminderTime) {","lastModifiedDate":"2022-02-09"},{"lineNumber":111,"author":{"gitId":"channne"},"content":"        return \":D Reminder set at \" + reminderTime.getDateTime() + \" for task: \" + task.getDescription();","lastModifiedDate":"2022-02-09"},{"lineNumber":112,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":113,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":114,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-02-09"},{"lineNumber":115,"author":{"gitId":"channne"},"content":"     * Returns the message to be printed when a reminder is gotten.","lastModifiedDate":"2022-02-09"},{"lineNumber":116,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-02-09"},{"lineNumber":117,"author":{"gitId":"channne"},"content":"     * @param t The task to remind about.","lastModifiedDate":"2022-02-09"},{"lineNumber":118,"author":{"gitId":"channne"},"content":"     * @return The message to be printed to remind the user.","lastModifiedDate":"2022-02-09"},{"lineNumber":119,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-02-09"},{"lineNumber":120,"author":{"gitId":"channne"},"content":"    public String getReminderMessage(Task t) {","lastModifiedDate":"2022-02-09"},{"lineNumber":121,"author":{"gitId":"channne"},"content":"        if (t instanceof Event) {","lastModifiedDate":"2022-02-09"},{"lineNumber":122,"author":{"gitId":"channne"},"content":"            Event e \u003d (Event) t;","lastModifiedDate":"2022-02-09"},{"lineNumber":123,"author":{"gitId":"channne"},"content":"            return \"!Reminder! \" + e.getDescription() + \" at \" + e.formatTime();","lastModifiedDate":"2022-02-09"},{"lineNumber":124,"author":{"gitId":"channne"},"content":"        } else if (t instanceof Deadline) {","lastModifiedDate":"2022-02-09"},{"lineNumber":125,"author":{"gitId":"channne"},"content":"            Deadline d \u003d (Deadline) t;","lastModifiedDate":"2022-02-09"},{"lineNumber":126,"author":{"gitId":"channne"},"content":"            return \"!Reminder! \" + d.getDescription() + \" by \" + d.formatTime();","lastModifiedDate":"2022-02-09"},{"lineNumber":127,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":128,"author":{"gitId":"channne"},"content":"        return \"!Reminder! \" + t.getDescription();","lastModifiedDate":"2022-02-09"},{"lineNumber":129,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":130,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":131,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":132,"author":{"gitId":"channne"},"content":"     * Prints the items in the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":133,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":134,"author":{"gitId":"channne"},"content":"     * @param list The list of tasks in the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":135,"author":{"gitId":"channne"},"content":"     * @return A string containing all the tasks in the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":136,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":137,"author":{"gitId":"channne"},"content":"    public String printItems(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2022-01-25"},{"lineNumber":138,"author":{"gitId":"channne"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-25"},{"lineNumber":139,"author":{"gitId":"channne"},"content":"            return \"There are no tasks on your list :O\";","lastModifiedDate":"2022-01-31"},{"lineNumber":140,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":141,"author":{"gitId":"channne"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2022-02-08"},{"lineNumber":142,"author":{"gitId":"channne"},"content":"        message.append(\"Here are the tasks on your list :O\\n\");","lastModifiedDate":"2022-02-08"},{"lineNumber":143,"author":{"gitId":"channne"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":144,"author":{"gitId":"channne"},"content":"            message.append(i);","lastModifiedDate":"2022-02-08"},{"lineNumber":145,"author":{"gitId":"channne"},"content":"            message.append(\". \");","lastModifiedDate":"2022-02-08"},{"lineNumber":146,"author":{"gitId":"channne"},"content":"            message.append(list.get(i - 1));","lastModifiedDate":"2022-02-08"},{"lineNumber":147,"author":{"gitId":"channne"},"content":"            if (i \u003c list.size()) {","lastModifiedDate":"2022-01-25"},{"lineNumber":148,"author":{"gitId":"channne"},"content":"                message.append(\"\\n\");","lastModifiedDate":"2022-02-08"},{"lineNumber":149,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":150,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":151,"author":{"gitId":"channne"},"content":"        return message.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":152,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":153,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":154,"author":{"gitId":"channne"},"content":"    /**","lastModifiedDate":"2022-01-25"},{"lineNumber":155,"author":{"gitId":"channne"},"content":"     * Prints the items in the task list found.","lastModifiedDate":"2022-01-25"},{"lineNumber":156,"author":{"gitId":"channne"},"content":"     *","lastModifiedDate":"2022-01-25"},{"lineNumber":157,"author":{"gitId":"channne"},"content":"     * @param list The list of tasks in the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":158,"author":{"gitId":"channne"},"content":"     * @return A string containing all the tasks in the task list.","lastModifiedDate":"2022-01-25"},{"lineNumber":159,"author":{"gitId":"channne"},"content":"     */","lastModifiedDate":"2022-01-25"},{"lineNumber":160,"author":{"gitId":"channne"},"content":"    public String printFoundItems(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2022-01-25"},{"lineNumber":161,"author":{"gitId":"channne"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2022-01-25"},{"lineNumber":162,"author":{"gitId":"channne"},"content":"            return \"No items found :O\";","lastModifiedDate":"2022-01-31"},{"lineNumber":163,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":164,"author":{"gitId":"channne"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2022-02-08"},{"lineNumber":165,"author":{"gitId":"channne"},"content":"        message.append(\"Here are the matching tasks on your list :O\\n\");","lastModifiedDate":"2022-02-08"},{"lineNumber":166,"author":{"gitId":"channne"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {","lastModifiedDate":"2022-01-25"},{"lineNumber":167,"author":{"gitId":"channne"},"content":"            message.append(i);","lastModifiedDate":"2022-02-08"},{"lineNumber":168,"author":{"gitId":"channne"},"content":"            message.append(\". \");","lastModifiedDate":"2022-02-08"},{"lineNumber":169,"author":{"gitId":"channne"},"content":"            message.append(list.get(i - 1));","lastModifiedDate":"2022-02-08"},{"lineNumber":170,"author":{"gitId":"channne"},"content":"            if (i \u003c list.size()) {","lastModifiedDate":"2022-01-25"},{"lineNumber":171,"author":{"gitId":"channne"},"content":"                message.append(\"\\n\");","lastModifiedDate":"2022-02-08"},{"lineNumber":172,"author":{"gitId":"channne"},"content":"            }","lastModifiedDate":"2022-01-25"},{"lineNumber":173,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":174,"author":{"gitId":"channne"},"content":"        return message.toString();","lastModifiedDate":"2022-02-08"},{"lineNumber":175,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":176,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":176}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"            \u003cFont name\u003d\"PT Mono\" size\u003d\"11.0\"/\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"         \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    \u003cCircle fx:id\u003d\"displayPicture\" radius\u003d\"35.0\"\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"            \u003cInsets left\u003d\"4.0\" right\u003d\"4.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"         \u003c/HBox.margin\u003e\u003c/Circle\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"  \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"            \u003cfont\u003e\u003cFont name\u003d\"Menlo Regular\" size\u003d\"12.0\" /\u003e\u003c/font\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"            \u003cfont\u003e\u003cFont name\u003d\"Lucida Grande\" size\u003d\"14.0\" /\u003e\u003c/font\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    \u003c/Button\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #000030\" /\u003e","lastModifiedDate":"2022-02-15"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"channne":24}},{"path":"src/test/java/duke/command/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.command;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-31"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import duke.exception.InvalidActionException;","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import duke.ui.ResponseGenerator;","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"public class TaskListTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    public void markItemDone_completedItem_exceptionThrown() {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"        tl.addTask(new Todo(\"this week iP\", true));","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"            tl.markItemDone(0);","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"            assertEquals(\"[T][X] this week iP\", tl.getLast().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"        } catch (InvalidActionException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"            assertEquals(\"Task already done!\", e.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"    public void markItemUndone_completedItem_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"        tl.addTask(new Todo(\"this week iP\", true));","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"            tl.markItemUndone(0);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"            assertEquals(\"[T][ ] this week iP\", tl.getLast().toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"        } catch (InvalidActionException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"    public void testDeleteItem() {","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":41,"author":{"gitId":"channne"},"content":"        ResponseGenerator generator \u003d new ResponseGenerator();","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"channne"},"content":"        tl.addTask(new Todo(\"this week iP\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":43,"author":{"gitId":"channne"},"content":"        assertEquals(\"Here are the tasks on your list :O\\n1. [T][ ] this week iP\",","lastModifiedDate":"2022-01-25"},{"lineNumber":44,"author":{"gitId":"channne"},"content":"                generator.printItems(tl.getItems()));","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"channne"},"content":"        assertEquals(\"deleted this item O_O:\\n  [T][ ] this week iP\\nNow there are 0 tasks on the list x)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":46,"author":{"gitId":"channne"},"content":"                tl.deleteItem(0));","lastModifiedDate":"2022-01-25"},{"lineNumber":47,"author":{"gitId":"channne"},"content":"        assertEquals(\"There are no tasks on your list :O\", generator.printItems(tl.getItems()));","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":49,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":49}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    public void testFileFormatConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"        assertEquals(\"D | 0 | this week iP | Jan 27 2022\",","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"                new Deadline(\"this week iP\", \"2022-01-27\").toFileFormatString());","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"        assertEquals(\"[D][ ] this week iP (by: Jan 27 2022)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"                new Deadline(\"this week iP\", \"2022-01-27\").toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":19}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"public class EventTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    public void testFileFormatConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"        assertEquals(\"E | 0 | this week lecture | Jan 28 2022\",","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"                new Event(\"this week lecture\", \"2022-01-28\").toFileFormatString());","lastModifiedDate":"2022-02-08"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"        assertEquals(\"[E][ ] this week lecture (at: Jan 28 2022)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"                new Event(\"this week lecture\", \"2022-01-28\").toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":19}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import duke.exception.InvalidActionException;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"public class TaskTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"        assertEquals(\"[T][ ] this week iP\", new Todo(\"this week iP\").toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"    public void markAsDone_completedTask_exceptionThrown() {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"            Todo t \u003d new Todo(\"this week iP\", true);","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"            t.markAsDone();","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"            assertEquals(\"[T][X] this week iP\", t.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"        } catch (InvalidActionException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"            assertEquals(\"Task already done!\", e.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"    public void markUndone_completedTask_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"            Todo t \u003d new Todo(\"this week iP\", true);","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"            t.markUndone();","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"            assertEquals(\"[T][ ] this week iP\", t.toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"        } catch (InvalidActionException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":38}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.task;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"public class TodoTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"    public void testFileFormatConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"        assertEquals(\"T | 0 | this week iP\", new Todo(\"this week iP\").toFileFormatString());","lastModifiedDate":"2022-02-08"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    public void testStringConversion() {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"        assertEquals(\"[T][X] this week iP\", new Todo(\"this week iP\", true).toString());","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":17}},{"path":"src/test/java/duke/ui/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-25"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"import duke.exception.WrongInputException;","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"public class ParserTest {","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"    public void parseCommand_invalidInput_exceptionThrown() {","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"            assertEquals(\"remove\", new Parser().parseCommand(\"remove\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"            assertEquals(\"D: D: D: I don\u0027t understand the input D: D: D:\", e.getMessage());","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    public void parseNumericalDescription_validInput_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"            assertEquals(1, new Parser().parseNumericalDescription(\"unmark 2\", \"unmark\", 3));","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"    public void parseFormatDescription_validInput_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"        try {","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"            assertEquals(\"Thursday\", new Parser().parseFormatDescription(","lastModifiedDate":"2022-01-25"},{"lineNumber":35,"author":{"gitId":"channne"},"content":"                    \"deadline do this week iP /by Thursday\", \"deadline\", \"/by\")[1]);","lastModifiedDate":"2022-01-25"},{"lineNumber":36,"author":{"gitId":"channne"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"channne"},"content":"            fail();","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"channne"},"content":"        }","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":40,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":40}},{"path":"src/test/java/duke/ui/ResponseGeneratorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"package duke.ui;","lastModifiedDate":"2022-01-25"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-01-31"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-25"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-01-31"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-31"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"import duke.command.TaskList;","lastModifiedDate":"2022-01-31"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-01-31"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-01-31"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"public class ResponseGeneratorTest {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"    public void testGetAddTaskMessage() {","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"channne"},"content":"        assertEquals(\"added o.O:\\n  [T][ ] this week iP\\nNow there are 3 tasks on the list x)\",","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"channne"},"content":"                new ResponseGenerator().getAddTaskMessage(new Todo(\"this week iP\"), 3));","lastModifiedDate":"2022-02-01"},{"lineNumber":18,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":19,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":20,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":21,"author":{"gitId":"channne"},"content":"    public void printItems_emptyList_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":22,"author":{"gitId":"channne"},"content":"        assertEquals(\"There are no tasks on your list :O\", new ResponseGenerator().printItems(new ArrayList\u003c\u003e()));","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"channne"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"channne"},"content":"    @Test","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"channne"},"content":"    public void printItems_nonEmptyList_success() {","lastModifiedDate":"2022-01-25"},{"lineNumber":27,"author":{"gitId":"channne"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-01-25"},{"lineNumber":28,"author":{"gitId":"channne"},"content":"        taskList.addTask(new Deadline(\"this week iP\", \"2022-01-27\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":29,"author":{"gitId":"channne"},"content":"        taskList.addTask(new Todo(\"write junit tests\"));","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"channne"},"content":"        assertEquals(\"Here are the tasks on your list :O\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":31,"author":{"gitId":"channne"},"content":"                + \"1. [D][ ] this week iP (by: Jan 27 2022)\\n\"","lastModifiedDate":"2022-01-31"},{"lineNumber":32,"author":{"gitId":"channne"},"content":"                + \"2. [T][ ] write junit tests\", new ResponseGenerator().printItems(taskList.getItems()));","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"channne"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":34,"author":{"gitId":"channne"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"channne":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"channne"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"channne"},"content":"todo read book","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"channne"},"content":"deadline return book /by June 6th","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"channne"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"channne"},"content":"todo join sports club","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"channne"},"content":"mark 1","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"channne"},"content":"mark 2","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"channne"},"content":"todo borrow book","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"channne"},"content":"mark 4","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"channne"},"content":"unmark 2","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"channne"},"content":"list","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"channne"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"channne"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"channne"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"channne"},"content":"bye","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"channne":15}}]
